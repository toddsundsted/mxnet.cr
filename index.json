{"repository_name":"mxnet","body":"# Deep Learning for Crystal\n\n[![GitHub Release](https://img.shields.io/github/release/toddsundsted/mxnet.cr.svg)](https://github.com/toddsundsted/mxnet.cr/releases)\n[![Build Status](https://travis-ci.org/toddsundsted/mxnet.cr.svg?branch=master)](https://travis-ci.org/toddsundsted/mxnet.cr)\n[![Documentation](https://img.shields.io/badge/docs-available-brightgreen.svg)](https://toddsundsted.github.io/mxnet.cr/)\n\n[MXNet.cr](https://github.com/toddsundsted/mxnet.cr)\nprovides [MXNet](https://mxnet.incubator.apache.org/)\nbindings for the [Crystal](https://crystal-lang.org/) programming\nlanguage. MXNet is a framework for machine learning and deep learning\nwritten in C++, supporting distributed training across multiple\nmachines and multiple GPUs (if available).\n\nMXNet.cr follows the design of the Python bindings, albeit with\nCrystal syntax. The following code:\n\n```crystal\nrequire \"mxnet\"\na = MXNet::NDArray.array([[1, 2], [3, 4]])\nb = MXNet::NDArray.array([1, 0])\nputs a * b\n```\n\noutputs:\n\n```\n[[1, 0], [3, 0]]\n<NDArray 2x2 int32 cpu(0)>\n```\n\n# Examples\n\nIf you want to see what MXNet.cr can do, check out\n[toddsundsted/deep-learning](https://github.com/toddsundsted/deep-learning).\nIt is a collection of problems and solutions from [Deep Learning - The\nStraight Dope](https://gluon.mxnet.io/), a set of notebooks teaching\ndeep learning using MXNet.\n\n# Installation\n\nMXNet.cr requires MXNet.\n\nBuild MXNet from source (including Python language bindings) or\ninstall the library from prebuilt packages using the Python package\nmanager *pip*, per the MXNet installation instructions:\n\nhttps://mxnet.incubator.apache.org/install/index.html\n\nAnd add the following to your application's *shard.yml*:\n\n```yaml\ndependencies:\n  mxnet:\n    github: toddsundsted/mxnet.cr\n```\n\n## Troubleshooting\n\nMXNet.cr relies on the Python library to find the installed MXNet\nshared library (\"libmxnet.so\"). You can verify MXNet is installed with\nthe following Python code:\n\n```python\nimport mxnet as mx\na = mx.ndarray.array([[1, 2], [3, 4]])\nb = mx.ndarray.array([1, 0])\nprint(a * b)\n```\n\nwhich outputs:\n\n```\n[[1. 0.]\n [3. 0.]]\n<NDArray 2x2 @cpu(0)>\n```\n\n## OSX\n\nOn OSX, you may need to give your program a hint about the location of\nthe MXNet shared library (*libmxnet.so*). If you build and run your\nprogram and see an error message like the following:\n\n```\ndyld: Library not loaded: lib/libmxnet.so\n  Referenced from: /Users/homedirectory/.cache/crystal/crystal-run-eval.tmp\n  Reason: image not found\n```\n\nyou need to either: 1) explicitly set the `DYLD_FALLBACK_LIBRARY_PATH`\nenvironment variable to point to the directory containing *libmxnet.so*,\nor 2) move or copy *libmxnet.so* into a well-known location (such as\nthe project's own *lib* directory).\n\nAlternatively, and more permanently, you can modify the *libmxnet.so*\nshared library so that it knows where it's located at runtime (you\nwill modify the library's LC\\_ID\\_DYLIB information):\n\n```\nLIBMXNET=/Users/homedirectory/mxnet-1.5.1/lib/python3.6/site-packages/mxnet/libmxnet.so # the full path\ninstall_name_tool -id $LIBMXNET $LIBMXNET\n```\n\n# Status\n\nMXNet.cr currently implements a subset of\n[Gluon](https://gluon.mxnet.io/), and supports a rich set of\noperations on arrays and symbols (arithmetic, trigonometric,\nhyperbolic, exponents and logarithms, powers, comparison, logical,\nrounding, sorting, searching, reduction and indexing) with automatic\ndifferentiation built in.\n\nImplemented classes:\n* MXNet\n  * Autograd\n  * Context\n  * Executor\n  * Optimizer\n  * NDArray\n  * Symbol\n  * Gluon\n    * Block\n    * HybridBlock\n    * Sequential\n    * HybridSequential\n    * SymbolBlock\n    * Dense\n    * Pooling\n    * Conv1D\n    * Conv2D\n    * Conv3D\n    * MaxPool1D\n    * MaxPool2D\n    * MaxPool3D\n    * Flatten\n    * L1Loss\n    * L2Loss\n    * SoftmaxCrossEntropyLoss\n    * Activation\n    * Trainer\n    * Parameter\n    * Constant\n","program":{"html_id":"mxnet/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"mxnet","program":true,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"mxnet/MXNet","path":"MXNet.html","kind":"module","full_name":"MXNet","name":"MXNet","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/mxnet.cr","line_number":19,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet.cr#L19"},{"filename":"src/mxnet/autograd.cr","line_number":1,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/autograd.cr#L1"},{"filename":"src/mxnet/base.cr","line_number":3,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/base.cr#L3"},{"filename":"src/mxnet/cached_op.cr","line_number":3,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/cached_op.cr#L3"},{"filename":"src/mxnet/context.cr","line_number":1,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/context.cr#L1"},{"filename":"src/mxnet/executor.cr","line_number":1,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/executor.cr#L1"},{"filename":"src/mxnet/gluon.cr","line_number":3,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon.cr#L3"},{"filename":"src/mxnet/gluon/block.cr","line_number":3,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/block.cr#L3"},{"filename":"src/mxnet/gluon/data.cr","line_number":3,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/data.cr#L3"},{"filename":"src/mxnet/gluon/data/data_loader.cr","line_number":3,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/data/data_loader.cr#L3"},{"filename":"src/mxnet/gluon/data/dataset.cr","line_number":3,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/data/dataset.cr#L3"},{"filename":"src/mxnet/gluon/data/sampler.cr","line_number":3,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/data/sampler.cr#L3"},{"filename":"src/mxnet/gluon/data/vision/mnist.cr","line_number":4,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/data/vision/mnist.cr#L4"},{"filename":"src/mxnet/gluon/loss.cr","line_number":3,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/loss.cr#L3"},{"filename":"src/mxnet/gluon/nn.cr","line_number":3,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/nn.cr#L3"},{"filename":"src/mxnet/gluon/nn/activations.cr","line_number":3,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/nn/activations.cr#L3"},{"filename":"src/mxnet/gluon/nn/layers.cr","line_number":3,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/nn/layers.cr#L3"},{"filename":"src/mxnet/gluon/parameter.cr","line_number":3,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/parameter.cr#L3"},{"filename":"src/mxnet/gluon/trainer.cr","line_number":3,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/trainer.cr#L3"},{"filename":"src/mxnet/gluon/utils.cr","line_number":5,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/utils.cr#L5"},{"filename":"src/mxnet/initializer.cr","line_number":1,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/initializer.cr#L1"},{"filename":"src/mxnet/libmxnet.cr","line_number":1,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/libmxnet.cr#L1"},{"filename":"src/mxnet/name/manager.cr","line_number":1,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/name/manager.cr#L1"},{"filename":"src/mxnet/ndarray.cr","line_number":1,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/ndarray.cr#L1"},{"filename":"src/mxnet/operations.cr","line_number":1,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/operations.cr#L1"},{"filename":"src/mxnet/optimizer.cr","line_number":1,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/optimizer.cr#L1"},{"filename":"src/mxnet/random.cr","line_number":1,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/random.cr#L1"},{"filename":"src/mxnet/symbol.cr","line_number":1,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/symbol.cr#L1"},{"filename":"src/mxnet/util.cr","line_number":3,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/util.cr#L3"}],"repository_name":"mxnet","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[{"id":"VERSION","name":"VERSION","value":"\"0.2.0\"","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"[MXNet](https://mxnet.incubator.apache.org/) for\n[Crystal](https://crystal-lang.org/).\n\nThis library is built on top of the core packages `NDArray` and\n`Symbol`.\n\n`NDArray` works with arrays in an imperative fashion, i.e. you\ndefine how arrays will be transformed to get to an end\nresult. `Symbol` works with arrays in a declarative fashion,\ni.e. you define the end result that is required (via a symbolic\ngraph) and the MXNet engine will use various optimizations to\ndetermine the steps required to obtain this. With `NDArray` you have\na great deal of flexibility when composing operations, and you can\neasily step through your code and inspect the values of arrays,\nwhich helps with debugging. Unfortunately, this flexibility comes at\na performance cost when compared to `Symbol`, which can perform\noptimizations on the symbolic graph.\n","summary":"<p><a href=\"https://mxnet.incubator.apache.org/\">MXNet</a> for <a href=\"https://crystal-lang.org/\">Crystal</a>.</p>","class_methods":[{"id":"cpu(device_id:Int32=0)-class-method","html_id":"cpu(device_id:Int32=0)-class-method","name":"cpu","doc":"Returns a CPU context.\n\nThis function is equivalent to `MXNet::Context.cpu`.\n\n### Parameters\n* *device_id* (`Int32`, default = 0)\n  Device id of the device. Not required for the CPU\n  context. Included to make the interface compatible with GPU\n  contexts.\n","summary":"<p>Returns a CPU context.</p>","abstract":false,"args":[{"name":"device_id","doc":null,"default_value":"0","external_name":"device_id","restriction":"Int32"}],"args_string":"(device_id : Int32 = <span class=\"n\">0</span>)","args_html":"(device_id : Int32 = <span class=\"n\">0</span>)","location":{"filename":"src/mxnet.cr","line_number":48,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet.cr#L48"},"def":{"name":"cpu","args":[{"name":"device_id","doc":null,"default_value":"0","external_name":"device_id","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Context.cpu(device_id)"}},{"id":"gpu(device_id:Int32=0)-class-method","html_id":"gpu(device_id:Int32=0)-class-method","name":"gpu","doc":"Returns a GPU context.\n\nThis function is equivalent to `MXNet::Context.gpu`.\n\n### Parameters\n* *device_id* (`Int32`, default = 0)\n  Device id of the device. Required for the GPU contexts.\n","summary":"<p>Returns a GPU context.</p>","abstract":false,"args":[{"name":"device_id","doc":null,"default_value":"0","external_name":"device_id","restriction":"Int32"}],"args_string":"(device_id : Int32 = <span class=\"n\">0</span>)","args_html":"(device_id : Int32 = <span class=\"n\">0</span>)","location":{"filename":"src/mxnet.cr","line_number":60,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet.cr#L60"},"def":{"name":"gpu","args":[{"name":"device_id","doc":null,"default_value":"0","external_name":"device_id","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Context.gpu(device_id)"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"mxnet/MXNet/Autograd","path":"MXNet/Autograd.html","kind":"class","full_name":"MXNet::Autograd","name":"Autograd","abstract":false,"superclass":{"html_id":"mxnet/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"mxnet/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"mxnet/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/mxnet/autograd.cr","line_number":14,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/autograd.cr#L14"}],"repository_name":"mxnet","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"mxnet/MXNet","kind":"module","full_name":"MXNet","name":"MXNet"},"doc":"Autograd for MXNet.\n\n```\nx = MXNet::NDArray.array([1, 2, 3, 4], dtype: :float64)\ng = MXNet::NDArray.array([0, 0, 0, 0], dtype: :float64)\nMXNet::Autograd.mark_variables(x, g)\ny = MXNet::Autograd.record do\n  x * x + 1\nend\nMXNet::Autograd.backward(y)\n```\n","summary":"<p>Autograd for MXNet.</p>","class_methods":[{"id":"backward(outputs,gradients=nil,retain_graph=false,train_mode=true)-class-method","html_id":"backward(outputs,gradients=nil,retain_graph=false,train_mode=true)-class-method","name":"backward","doc":"Compute the gradients with respect to previously marked variables.\n\n### Parameters\n* *outputs* (`NDArray` or `Enumerable(NDArray)`)\n  Output arrays.\n* *gradients* (`NDArray` or `Enumerable(NDArray)`)\n  Gradients with respect to outputs.\n* *retain_graph* (`Bool`, default false)\n  Whether to keep computation graph to differentiate again,\n  instead of clearing history and releasing memory.\n* *train_mode* (`Bool`, default true)\n  Whether the backward pass is in training or predicting mode.\n","summary":"<p>Compute the gradients with respect to previously marked variables.</p>","abstract":false,"args":[{"name":"outputs","doc":null,"default_value":"","external_name":"outputs","restriction":""},{"name":"gradients","doc":null,"default_value":"nil","external_name":"gradients","restriction":""},{"name":"retain_graph","doc":null,"default_value":"false","external_name":"retain_graph","restriction":""},{"name":"train_mode","doc":null,"default_value":"true","external_name":"train_mode","restriction":""}],"args_string":"(outputs, gradients = <span class=\"n\">nil</span>, retain_graph = <span class=\"n\">false</span>, train_mode = <span class=\"n\">true</span>)","args_html":"(outputs, gradients = <span class=\"n\">nil</span>, retain_graph = <span class=\"n\">false</span>, train_mode = <span class=\"n\">true</span>)","location":{"filename":"src/mxnet/autograd.cr","line_number":180,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/autograd.cr#L180"},"def":{"name":"backward","args":[{"name":"outputs","doc":null,"default_value":"","external_name":"outputs","restriction":""},{"name":"gradients","doc":null,"default_value":"nil","external_name":"gradients","restriction":""},{"name":"retain_graph","doc":null,"default_value":"false","external_name":"retain_graph","restriction":""},{"name":"train_mode","doc":null,"default_value":"true","external_name":"train_mode","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if outputs.nil?\nelse\n  outputs = !outputs.is_a?(NDArray) ? outputs.map(&.handle).to_a : [outputs.handle]\nend\nif gradients.nil?\nelse\n  gradients = !gradients.is_a?(NDArray) ? gradients.map(&.handle).to_a : [gradients.handle]\nend\nMXNet::Internal.libcall(MXAutogradBackwardEx, outputs.size.to_i32, outputs, gradients, 0, nil, retain_graph ? 1 : 0, 0, train_mode ? 1 : 0, nil, nil)\n"}},{"id":"is_recording-class-method","html_id":"is_recording-class-method","name":"is_recording","doc":"Gets status of recording/not recording.\n","summary":"<p>Gets status of recording/not recording.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/mxnet/autograd.cr","line_number":52,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/autograd.cr#L52"},"def":{"name":"is_recording","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Internal.libcall(MXAutogradIsRecording, out current)\ncurrent\n"}},{"id":"is_training-class-method","html_id":"is_training-class-method","name":"is_training","doc":"Gets status of training/predicting.\n","summary":"<p>Gets status of training/predicting.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/mxnet/autograd.cr","line_number":59,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/autograd.cr#L59"},"def":{"name":"is_training","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Internal.libcall(MXAutogradIsTraining, out current)\ncurrent\n"}},{"id":"mark_variables(variables,gradients,grad_reqs=:write)-class-method","html_id":"mark_variables(variables,gradients,grad_reqs=:write)-class-method","name":"mark_variables","doc":"Mark arrays as variables to compute gradients for autograd.\n\n### Parameters\n* *variables* (`NDArray` or `Enumerable(NDArray)`)\n* *gradients* (`NDArray` or `Enumerable(NDArray)`)\n* *grad_reqs* (`::Symbol` or `Enumerable(::Symbol)`, default `:write`)\n  * `:write`: gradient will be overwritten on every backward pass\n  * `:add`: gradient will be added to existing value on every backward pass\n  * `:null`: do not compute gradient\n","summary":"<p>Mark arrays as variables to compute gradients for autograd.</p>","abstract":false,"args":[{"name":"variables","doc":null,"default_value":"","external_name":"variables","restriction":""},{"name":"gradients","doc":null,"default_value":"","external_name":"gradients","restriction":""},{"name":"grad_reqs","doc":null,"default_value":":write","external_name":"grad_reqs","restriction":""}],"args_string":"(variables, gradients, grad_reqs = <span class=\"n\">:write</span>)","args_html":"(variables, gradients, grad_reqs = <span class=\"n\">:write</span>)","location":{"filename":"src/mxnet/autograd.cr","line_number":144,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/autograd.cr#L144"},"def":{"name":"mark_variables","args":[{"name":"variables","doc":null,"default_value":"","external_name":"variables","restriction":""},{"name":"gradients","doc":null,"default_value":"","external_name":"gradients","restriction":""},{"name":"grad_reqs","doc":null,"default_value":":write","external_name":"grad_reqs","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if variables.is_a?(NDArray)\n  variables = [variables]\nend\nif gradients.is_a?(NDArray)\n  gradients = [gradients]\nend\nif grad_reqs.is_a?(::Symbol)\n  grad_reqs = [GRAD_REQ_MAP[grad_reqs]] * variables.size\nelse\n  grad_reqs = grad_reqs.map do |gr|\n    GRAD_REQ_MAP[gr]\n  end\nend\nif variables.size == gradients.size\nelse\n  raise(ArgumentError.new(\"Arrays must be the same size\"))\nend\nMXNet::Internal.libcall(MXAutogradMarkVariables, variables.size.to_i32, variables.map(&.handle).to_a, grad_reqs, gradients.map(&.handle).to_a)\n"}},{"id":"pause(train_mode=false,&)-class-method","html_id":"pause(train_mode=false,&)-class-method","name":"pause","doc":"Creates a scope context for code that does not need gradients to\nbe calculated.\n\n### Parameters\n* *train_mode* (`Bool`, default = true)\n  Whether the forward pass is in training or predicting\n  mode.\n","summary":"<p>Creates a scope context for code that does not need gradients to be calculated.</p>","abstract":false,"args":[{"name":"train_mode","doc":null,"default_value":"false","external_name":"train_mode","restriction":""}],"args_string":"(train_mode = <span class=\"n\">false</span>, &)","args_html":"(train_mode = <span class=\"n\">false</span>, &)","location":{"filename":"src/mxnet/autograd.cr","line_number":94,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/autograd.cr#L94"},"def":{"name":"pause","args":[{"name":"train_mode","doc":null,"default_value":"false","external_name":"train_mode","restriction":""}],"double_splat":null,"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"old = before(record_mode: false, train_mode: train_mode)\nbegin\n  yield\nensure\n  after(*old, record_mode: false, train_mode: train_mode)\nend\n"}},{"id":"predict_mode(&)-class-method","html_id":"predict_mode(&)-class-method","name":"predict_mode","doc":"Creates a scope context in which forward pass behavior is set to\ninference mode, without changing the recording mode.\n","summary":"<p>Creates a scope context in which forward pass behavior is set to inference mode, without changing the recording mode.</p>","abstract":false,"args":[],"args_string":"(&)","args_html":"(&)","location":{"filename":"src/mxnet/autograd.cr","line_number":118,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/autograd.cr#L118"},"def":{"name":"predict_mode","args":[],"double_splat":null,"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"old = before(train_mode: false)\nbegin\n  yield\nensure\n  after(*old, train_mode: false)\nend\n"}},{"id":"record(train_mode=true,&)-class-method","html_id":"record(train_mode=true,&)-class-method","name":"record","doc":"Creates a scope context for code that needs gradients to be\ncalculated.\n\nWhen forwarding with `train_mode = false`, the corresponding\n`.backward` should also use `train_mode = false`, otherwise\nthe gradient is undefined.\n\n### Parameters\n* *train_mode* (`Bool`, default = true)\n  Whether the forward pass is in training or predicting\n  mode. This controls the behavior of some layers such as\n  Dropout and BatchNorm.\n","summary":"<p>Creates a scope context for code that needs gradients to be calculated.</p>","abstract":false,"args":[{"name":"train_mode","doc":null,"default_value":"true","external_name":"train_mode","restriction":""}],"args_string":"(train_mode = <span class=\"n\">true</span>, &)","args_html":"(train_mode = <span class=\"n\">true</span>, &)","location":{"filename":"src/mxnet/autograd.cr","line_number":77,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/autograd.cr#L77"},"def":{"name":"record","args":[{"name":"train_mode","doc":null,"default_value":"true","external_name":"train_mode","restriction":""}],"double_splat":null,"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"old = before(record_mode: true, train_mode: train_mode)\nbegin\n  yield\nensure\n  after(*old, record_mode: true, train_mode: train_mode)\nend\n"}},{"id":"train_mode(&)-class-method","html_id":"train_mode(&)-class-method","name":"train_mode","doc":"Creates a scope context in which forward pass behavior is set to\ntraining mode, without changing the recording mode.\n","summary":"<p>Creates a scope context in which forward pass behavior is set to training mode, without changing the recording mode.</p>","abstract":false,"args":[],"args_string":"(&)","args_html":"(&)","location":{"filename":"src/mxnet/autograd.cr","line_number":106,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/autograd.cr#L106"},"def":{"name":"train_mode","args":[],"double_splat":null,"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"old = before(train_mode: true)\nbegin\n  yield\nensure\n  after(*old, train_mode: true)\nend\n"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"mxnet/MXNet/CachedOp","path":"MXNet/CachedOp.html","kind":"class","full_name":"MXNet::CachedOp","name":"CachedOp","abstract":false,"superclass":{"html_id":"mxnet/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"mxnet/MXNet/Util","kind":"module","full_name":"MXNet::Util","name":"Util"},{"html_id":"mxnet/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"mxnet/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/mxnet/cached_op.cr","line_number":6,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/cached_op.cr#L6"}],"repository_name":"mxnet","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[{"html_id":"mxnet/MXNet/Util","kind":"module","full_name":"MXNet::Util","name":"Util"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"mxnet/MXNet","kind":"module","full_name":"MXNet","name":"MXNet"},"doc":"Cached operator.\n","summary":"<p>Cached operator.</p>","class_methods":[],"constructors":[{"id":"new(symbol,flags)-class-method","html_id":"new(symbol,flags)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"symbol","doc":null,"default_value":"","external_name":"symbol","restriction":""},{"name":"flags","doc":null,"default_value":"","external_name":"flags","restriction":""}],"args_string":"(symbol, flags)","args_html":"(symbol, flags)","location":{"filename":"src/mxnet/cached_op.cr","line_number":11,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/cached_op.cr#L11"},"def":{"name":"new","args":[{"name":"symbol","doc":null,"default_value":"","external_name":"symbol","restriction":""},{"name":"flags","doc":null,"default_value":"","external_name":"flags","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(symbol, flags)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"call(args,out_out:NDArray?=nil)-instance-method","html_id":"call(args,out_out:NDArray?=nil)-instance-method","name":"call","doc":"Invokes the cached operator.\n","summary":"<p>Invokes the cached operator.</p>","abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},{"name":"_out","doc":null,"default_value":"nil","external_name":"out","restriction":"NDArray | ::Nil"}],"args_string":"(args, out _out : NDArray? = <span class=\"n\">nil</span>)","args_html":"(args, out _out : <a href=\"../MXNet/NDArray.html\">NDArray</a>? = <span class=\"n\">nil</span>)","location":{"filename":"src/mxnet/cached_op.cr","line_number":29,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/cached_op.cr#L29"},"def":{"name":"call","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},{"name":"_out","doc":null,"default_value":"nil","external_name":"out","restriction":"NDArray | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"args = args.size > 0 ? args.to_a.compact.map do |v|\n  v.handle\nend : [] of NDArrayHandle\nnum_outputs = 0\noutputs = Pointer(NDArrayHandle).null\nif _out\n  num_outputs = 1\n  outputs = Pointer(NDArrayHandle).malloc(1)\n  outputs[0] = _out.handle\nend\nMXNet::Internal.libcall(MXInvokeCachedOpEx, @handle, args.size, args, pointerof(num_outputs), pointerof(outputs), out stypes)\nif _out\n  [_out]\nelse\n  num_outputs.times.reduce([] of NDArray) do |arr, i|\n    arr << (NDArray.new(outputs[i]))\n  end\nend\n"}}],"macros":[],"types":[]},{"html_id":"mxnet/MXNet/Context","path":"MXNet/Context.html","kind":"class","full_name":"MXNet::Context","name":"Context","abstract":false,"superclass":{"html_id":"mxnet/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"mxnet/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"mxnet/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/mxnet/context.cr","line_number":4,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/context.cr#L4"}],"repository_name":"mxnet","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"mxnet/MXNet","kind":"module","full_name":"MXNet","name":"MXNet"},"doc":"MXNet context.\n","summary":"<p>MXNet context.</p>","class_methods":[{"id":"cpu(device_id:Int32=0)-class-method","html_id":"cpu(device_id:Int32=0)-class-method","name":"cpu","doc":"Returns a CPU context.\n\nThis function is a shortcut for `MXNet::Context.new(:cpu, device_id)`.\nFor most operations, when no context is specified, the default\ncontext is `MXNet::Context.cpu`.\n\n### Parameters\n* *device_id* (`Int32`, default = 0)\n  Device id of the device. Not required for the CPU\n  context. Included to make the interface compatible with GPU\n  contexts.\n","summary":"<p>Returns a CPU context.</p>","abstract":false,"args":[{"name":"device_id","doc":null,"default_value":"0","external_name":"device_id","restriction":"Int32"}],"args_string":"(device_id : Int32 = <span class=\"n\">0</span>)","args_html":"(device_id : Int32 = <span class=\"n\">0</span>)","location":{"filename":"src/mxnet/context.cr","line_number":63,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/context.cr#L63"},"def":{"name":"cpu","args":[{"name":"device_id","doc":null,"default_value":"0","external_name":"device_id","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"new(:cpu, device_id)"}},{"id":"current-class-method","html_id":"current-class-method","name":"current","doc":"Returns the current context.\n","summary":"<p>Returns the current context.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/mxnet/context.cr","line_number":119,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/context.cr#L119"},"def":{"name":"current","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@default"}},{"id":"gpu(device_id:Int32=0)-class-method","html_id":"gpu(device_id:Int32=0)-class-method","name":"gpu","doc":"Returns a GPU context.\n\nThis function is a shortcut for `MXNet::Context.new(:gpu, device_id)`.\nThe K GPUs on a node are typically numbered 0, ..., K-1.\n\n### Parameters\n* *device_id* (`Int32`, default = 0)\n  Device id of the device. Required for the GPU contexts.\n","summary":"<p>Returns a GPU context.</p>","abstract":false,"args":[{"name":"device_id","doc":null,"default_value":"0","external_name":"device_id","restriction":"Int32"}],"args_string":"(device_id : Int32 = <span class=\"n\">0</span>)","args_html":"(device_id : Int32 = <span class=\"n\">0</span>)","location":{"filename":"src/mxnet/context.cr","line_number":76,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/context.cr#L76"},"def":{"name":"gpu","args":[{"name":"device_id","doc":null,"default_value":"0","external_name":"device_id","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"new(:gpu, device_id)"}},{"id":"gpu_memory_info(device_id:Int32=0)-class-method","html_id":"gpu_memory_info(device_id:Int32=0)-class-method","name":"gpu_memory_info","doc":"Queries CUDA for the free and total bytes of GPU global memory.\n\nReturns the free and total memory as a two-element tuple.\n\n### Parameters\n* *device_id* (`Int32`, default = 0)\n  Device id of the device.\n\nNote: not supported on MXNet versions < 1.3.0.\n","summary":"<p>Queries CUDA for the free and total bytes of GPU global memory.</p>","abstract":false,"args":[{"name":"device_id","doc":null,"default_value":"0","external_name":"device_id","restriction":"Int32"}],"args_string":"(device_id : Int32 = <span class=\"n\">0</span>)","args_html":"(device_id : Int32 = <span class=\"n\">0</span>)","location":{"filename":"src/mxnet/context.cr","line_number":105,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/context.cr#L105"},"def":{"name":"gpu_memory_info","args":[{"name":"device_id","doc":null,"default_value":"0","external_name":"device_id","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{% if (compare_versions(MXNet::Internal::MXNET_VERSION, \"1.4.0\")) >= 0 %}\n        Internal.libcall(MXGetGPUMemoryInformation64, device_id, out free_mem, out total_mem)\n        {free_mem, total_mem}\n      {% else %}{% if (compare_versions(MXNet::Internal::MXNET_VERSION, \"1.3.0\")) >= 0 %}\n        Internal.libcall(MXGetGPUMemoryInformation, device_id, out free_mem, out total_mem)\n        {free_mem.to_u64, total_mem.to_u64}\n      {% else %}\n        raise MXNetException.new(\"not supported on MXNet version #{MXNet::Internal::MXNET_VERSION}\")\n      {% end %}{% end %}"}},{"id":"num_gpus-class-method","html_id":"num_gpus-class-method","name":"num_gpus","doc":"Queries CUDA for the number of GPUs present.\n\nReturns the number of GPUs.\n\nNote: not supported on MXNet versions < 1.3.0.\n","summary":"<p>Queries CUDA for the number of GPUs present.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/mxnet/context.cr","line_number":86,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/context.cr#L86"},"def":{"name":"num_gpus","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{% if (compare_versions(MXNet::Internal::MXNET_VERSION, \"1.3.0\")) >= 0 %}\n        Internal.libcall(MXGetGPUCount, out count)\n        count\n      {% else %}\n        raise MXNetException.new(\"not supported on MXNet version #{MXNet::Internal::MXNET_VERSION}\")\n      {% end %}"}},{"id":"with(context:self,&)-class-method","html_id":"with(context:self,&)-class-method","name":"with","doc":"Sets the current context within the block.\n","summary":"<p>Sets the current context within the block.</p>","abstract":false,"args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"self"}],"args_string":"(context : <span class=\"k\">self</span>, &)","args_html":"(context : <span class=\"k\">self</span>, &)","location":{"filename":"src/mxnet/context.cr","line_number":151,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/context.cr#L151"},"def":{"name":"with","args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"self"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"previous, @@default = @@default, context\nbegin\n  yield context\nensure\n  @@default = previous\nend\n"}}],"constructors":[{"id":"new(device_type:::Symbol|Int32,device_id:Int32=0)-class-method","html_id":"new(device_type:::Symbol|Int32,device_id:Int32=0)-class-method","name":"new","doc":"Constructs a context.\n\nMXNet can run operations on a CPU and different GPUs. A context\ndescribes the device on which computation should be carried out.\n\nUse `.cpu` and `.gpu` as shortcuts.\n\n### Parameters\n* *device_type* (`:cpu`, `:gpu` or `Int32`)\n  Symbol representing the device type, or the device type.\n* *device_id*   (`Int32`, default = 0)\n  Device id of the device (for GPUs).\n\n###  See also\n\n[How to run MXNet on multiple CPU/GPUs](http://mxnet.io/faq/multi_devices.html)\n","summary":"<p>Constructs a context.</p>","abstract":false,"args":[{"name":"device_type","doc":null,"default_value":"","external_name":"device_type","restriction":"::Symbol | Int32"},{"name":"device_id","doc":null,"default_value":"0","external_name":"device_id","restriction":"Int32"}],"args_string":"(device_type : ::Symbol | Int32, device_id : Int32 = <span class=\"n\">0</span>)","args_html":"(device_type : ::Symbol | Int32, device_id : Int32 = <span class=\"n\">0</span>)","location":{"filename":"src/mxnet/context.cr","line_number":40,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/context.cr#L40"},"def":{"name":"new","args":[{"name":"device_type","doc":null,"default_value":"","external_name":"device_type","restriction":"::Symbol | Int32"},{"name":"device_id","doc":null,"default_value":"0","external_name":"device_id","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(device_type, device_id)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"==(other:self)-instance-method","html_id":"==(other:self)-instance-method","name":"==","doc":"Compares contexts.\n\nTwo contexts are equal if they have the same device type and device id.\n","summary":"<p>Compares contexts.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"self"}],"args_string":"(other : <span class=\"k\">self</span>)","args_html":"(other : <span class=\"k\">self</span>)","location":{"filename":"src/mxnet/context.cr","line_number":139,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/context.cr#L139"},"def":{"name":"==","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"self"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"(other.device_type == self.device_type) && (other.device_id == self.device_id)"}},{"id":"device:Tuple(Int32,Int32)-instance-method","html_id":"device:Tuple(Int32,Int32)-instance-method","name":"device","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Tuple(Int32, Int32)","args_html":" : Tuple(Int32, Int32)","location":{"filename":"src/mxnet/context.cr","line_number":131,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/context.cr#L131"},"def":{"name":"device","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"::Tuple(Int32, Int32)","visibility":"Public","body":"{@device_type, @device_id}"}},{"id":"device_id:Int32-instance-method","html_id":"device_id:Int32-instance-method","name":"device_id","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32","args_html":" : Int32","location":{"filename":"src/mxnet/context.cr","line_number":127,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/context.cr#L127"},"def":{"name":"device_id","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@device_id"}},{"id":"device_type-instance-method","html_id":"device_type-instance-method","name":"device_type","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/mxnet/context.cr","line_number":123,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/context.cr#L123"},"def":{"name":"device_type","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"DEVICE_TYPE_INT_TO_SYM[@device_type]"}},{"id":"to_s(io)-instance-method","html_id":"to_s(io)-instance-method","name":"to_s","doc":"Writes this object to an `IO`.\n","summary":"<p>Writes this object to an <code>IO</code>.</p>","abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/mxnet/context.cr","line_number":145,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/context.cr#L145"},"def":{"name":"to_s","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"(((io << device_type) << \"(\") << device_id) << \")\""}}],"macros":[],"types":[]},{"html_id":"mxnet/MXNet/Executor","path":"MXNet/Executor.html","kind":"class","full_name":"MXNet::Executor","name":"Executor","abstract":false,"superclass":{"html_id":"mxnet/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"mxnet/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"mxnet/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/mxnet/executor.cr","line_number":5,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/executor.cr#L5"}],"repository_name":"mxnet","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"mxnet/MXNet","kind":"module","full_name":"MXNet","name":"MXNet"},"doc":"`Executor` provides efficient symbolic graph\nexecution and optimization.\n","summary":"<p><code><a href=\"../MXNet/Executor.html\">Executor</a></code> provides efficient symbolic graph execution and optimization.</p>","class_methods":[],"constructors":[{"id":"new(handle)-class-method","html_id":"new(handle)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"handle","doc":null,"default_value":"","external_name":"handle","restriction":""}],"args_string":"(handle)","args_html":"(handle)","location":{"filename":"src/mxnet/executor.cr","line_number":8,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/executor.cr#L8"},"def":{"name":"new","args":[{"name":"handle","doc":null,"default_value":"","external_name":"handle","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(handle)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"backward(out_grads:Array(MXNet::NDArray)=[]ofMXNet::NDArray,is_train:Bool=true)-instance-method","html_id":"backward(out_grads:Array(MXNet::NDArray)=[]ofMXNet::NDArray,is_train:Bool=true)-instance-method","name":"backward","doc":"Do backward pass to calculate the gradients.\n\n### Parameters\n* *out_grads* (`NDArray`, optional)\n  Gradients on the outputs to be propagated back. This parameter\n  is only needed when `Symbol#bind` is called on outputs that\n  are not a loss function.\n* *is_train* (`Bool`, default `true`)\n  Whether this `#backward` call is for training. Note, in rare\n  cases you may want to call `#backward` with `is_train: false`\n  to calculate gradients during inference.\n","summary":"<p>Do backward pass to calculate the gradients.</p>","abstract":false,"args":[{"name":"out_grads","doc":null,"default_value":"[] of MXNet::NDArray","external_name":"out_grads","restriction":"Array(MXNet::NDArray)"},{"name":"is_train","doc":null,"default_value":"true","external_name":"is_train","restriction":"Bool"}],"args_string":"(out_grads : Array(MXNet::NDArray) = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">MXNet</span><span class=\"t\">::</span><span class=\"t\">NDArray</span>, is_train : Bool = <span class=\"n\">true</span>)","args_html":"(out_grads : Array(<a href=\"../MXNet/NDArray.html\">MXNet::NDArray</a>) = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">MXNet</span><span class=\"t\">::</span><span class=\"t\">NDArray</span>, is_train : Bool = <span class=\"n\">true</span>)","location":{"filename":"src/mxnet/executor.cr","line_number":51,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/executor.cr#L51"},"def":{"name":"backward","args":[{"name":"out_grads","doc":null,"default_value":"[] of MXNet::NDArray","external_name":"out_grads","restriction":"Array(MXNet::NDArray)"},{"name":"is_train","doc":null,"default_value":"true","external_name":"is_train","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Internal.libcall(MXExecutorBackwardEx, @handle, out_grads.size, out_grads.map(&.handle), is_train ? 1 : 0)"}},{"id":"finalize-instance-method","html_id":"finalize-instance-method","name":"finalize","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/mxnet/executor.cr","line_number":61,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/executor.cr#L61"},"def":{"name":"finalize","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Internal.libcall(MXExecutorFree, @handle)"}},{"id":"forward(is_train:Bool=false)-instance-method","html_id":"forward(is_train:Bool=false)-instance-method","name":"forward","doc":"Calculate the outputs specified by the bound symbol.\n\n### Parameters\n* *is_train* (`Bool`, default `false`)\n  Whether this `#forward` call is for training. If `true`, a\n  `#backward` call is expected to follow.\n","summary":"<p>Calculate the outputs specified by the bound symbol.</p>","abstract":false,"args":[{"name":"is_train","doc":null,"default_value":"false","external_name":"is_train","restriction":"Bool"}],"args_string":"(is_train : Bool = <span class=\"n\">false</span>)","args_html":"(is_train : Bool = <span class=\"n\">false</span>)","location":{"filename":"src/mxnet/executor.cr","line_number":24,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/executor.cr#L24"},"def":{"name":"forward","args":[{"name":"is_train","doc":null,"default_value":"false","external_name":"is_train","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Internal.libcall(MXExecutorForward, @handle, is_train ? 1 : 0)\nMXNet::Internal.libcall(MXExecutorOutputs, @handle, out num_outputs, out outputs)\nnum_outputs.times.map do |i|\n  NDArray.new(outputs[i])\nend\n"}}],"macros":[],"types":[]},{"html_id":"mxnet/MXNet/Gluon","path":"MXNet/Gluon.html","kind":"module","full_name":"MXNet::Gluon","name":"Gluon","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/mxnet/gluon.cr","line_number":29,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon.cr#L29"},{"filename":"src/mxnet/gluon/block.cr","line_number":4,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/block.cr#L4"},{"filename":"src/mxnet/gluon/data.cr","line_number":4,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/data.cr#L4"},{"filename":"src/mxnet/gluon/data/data_loader.cr","line_number":4,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/data/data_loader.cr#L4"},{"filename":"src/mxnet/gluon/data/dataset.cr","line_number":4,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/data/dataset.cr#L4"},{"filename":"src/mxnet/gluon/data/sampler.cr","line_number":4,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/data/sampler.cr#L4"},{"filename":"src/mxnet/gluon/data/vision/mnist.cr","line_number":5,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/data/vision/mnist.cr#L5"},{"filename":"src/mxnet/gluon/loss.cr","line_number":4,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/loss.cr#L4"},{"filename":"src/mxnet/gluon/nn.cr","line_number":4,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/nn.cr#L4"},{"filename":"src/mxnet/gluon/nn/activations.cr","line_number":4,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/nn/activations.cr#L4"},{"filename":"src/mxnet/gluon/nn/layers.cr","line_number":4,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/nn/layers.cr#L4"},{"filename":"src/mxnet/gluon/parameter.cr","line_number":4,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/parameter.cr#L4"},{"filename":"src/mxnet/gluon/trainer.cr","line_number":4,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/trainer.cr#L4"},{"filename":"src/mxnet/gluon/utils.cr","line_number":6,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/utils.cr#L6"}],"repository_name":"mxnet","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"mxnet/MXNet","kind":"module","full_name":"MXNet","name":"MXNet"},"doc":"The `Gluon` library is a high-level interface for MXNet designed\nto be easy to use, while keeping most of the flexibility of a low\nlevel API. `Gluon` supports both imperative and symbolic\nprogramming, making it easy to train complex models imperatively\nand then to deploy as a symbolic graph.\n\n```\nnet = MXNet::Gluon::NN::HybridSequential.new.tap do |net|\n  # When instantiated, `HybridSequential` stores a chain of\n  # neural network layers. Once presented with data, it executes\n  # each layer in turn, using the output of one layer as the input\n  # for the next. Calling `#hybridize` caches the neural network\n  # for high performance.\n  net.with_name_scope do\n    net.add(\n      MXNet::Gluon::NN::Dense.new(64, activation: :relu), # 1st layer (64 nodes)\n      MXNet::Gluon::NN::Dense.new(64, activation: :relu), # 2nd hidden layer\n      MXNet::Gluon::NN::Dense.new(10)\n    )\n  end\n  net.init\n  net.hybridize\nend\n```\n","summary":"<p>The <code><a href=\"../MXNet/Gluon.html\">Gluon</a></code> library is a high-level interface for MXNet designed to be easy to use, while keeping most of the flexibility of a low level API.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"mxnet/MXNet/Gluon/Block","path":"MXNet/Gluon/Block.html","kind":"class","full_name":"MXNet::Gluon::Block","name":"Block","abstract":false,"superclass":{"html_id":"mxnet/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"mxnet/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"mxnet/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/mxnet/gluon/block.cr","line_number":55,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/block.cr#L55"}],"repository_name":"mxnet","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[{"html_id":"mxnet/MXNet/Gluon/HybridBlock","kind":"class","full_name":"MXNet::Gluon::HybridBlock","name":"HybridBlock"},{"html_id":"mxnet/MXNet/Gluon/NN/Sequential","kind":"class","full_name":"MXNet::Gluon::NN::Sequential","name":"Sequential"},{"html_id":"mxnet/MXNet/Gluon/SymbolBlock","kind":"class","full_name":"MXNet::Gluon::SymbolBlock","name":"SymbolBlock"}],"including_types":[],"namespace":{"html_id":"mxnet/MXNet/Gluon","kind":"module","full_name":"MXNet::Gluon","name":"Gluon"},"doc":"Base class for all neural network layers and models. Your models\nshould subclass this class.\n","summary":"<p>Base class for all neural network layers and models.</p>","class_methods":[],"constructors":[{"id":"new(prefix=nil,params=nil)-class-method","html_id":"new(prefix=nil,params=nil)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"prefix","doc":null,"default_value":"nil","external_name":"prefix","restriction":""},{"name":"params","doc":null,"default_value":"nil","external_name":"params","restriction":""}],"args_string":"(prefix = <span class=\"n\">nil</span>, params = <span class=\"n\">nil</span>)","args_html":"(prefix = <span class=\"n\">nil</span>, params = <span class=\"n\">nil</span>)","location":{"filename":"src/mxnet/gluon/block.cr","line_number":82,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/block.cr#L82"},"def":{"name":"new","args":[{"name":"prefix","doc":null,"default_value":"nil","external_name":"prefix","restriction":""},{"name":"params","doc":null,"default_value":"nil","external_name":"params","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(prefix, params)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"call(inputs:Array(T)):Array(T)forallT-instance-method","html_id":"call(inputs:Array(T)):Array(T)forallT-instance-method","name":"call","doc":"Calls `#forward`.\n\nOnly accepts positional arguments.\n\n### Parameters\n* *inputs* (`Array(NDArray)`)\n  Input tensors.\n","summary":"<p>Calls <code><a href=\"../../MXNet/Gluon/Block.html#forward(inputs:Array(T)):Array(T)forallT-instance-method\">#forward</a></code>.</p>","abstract":false,"args":[{"name":"inputs","doc":null,"default_value":"","external_name":"inputs","restriction":"Array(T)"}],"args_string":"(inputs : Array(T)) : Array(T) forall T","args_html":"(inputs : Array(T)) : Array(T) forall T","location":{"filename":"src/mxnet/gluon/block.cr","line_number":210,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/block.cr#L210"},"def":{"name":"call","args":[{"name":"inputs","doc":null,"default_value":"","external_name":"inputs","restriction":"Array(T)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(T)","visibility":"Public","body":"forward(inputs)"}},{"id":"children-instance-method","html_id":"children-instance-method","name":"children","doc":"Returns this block's registered children.\n","summary":"<p>Returns this block's registered children.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/mxnet/gluon/block.cr","line_number":119,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/block.cr#L119"},"def":{"name":"children","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@reg_children.values"}},{"id":"collect_params(selector=nil)-instance-method","html_id":"collect_params(selector=nil)-instance-method","name":"collect_params","doc":"Returns a `ParameterDict` containing this `Block`'s and all of\nits children's `Parameter`s. Can also return the `Parameter`s\nthat match some given regular expressions.\n\nFor example, collect the specified `Parameter`s for\n\"conv1_weight\", \"conv1_bias\", \"fc_weight\" and \"fc_bias\":\n\n    model.collect_params(/conv1_weight|conv1_bias|fc_weight|fc_bias/)\n\nor, alternatively, collect all parameters whose names end with\n\"weight\" or \"bias\":\n\n    model.collect_params(/.*weight|.*bias/)\n\n### Parameters\n* *selector* (`Regex`)\n  Regular expressions to match parameters.\n","summary":"<p>Returns a <code><a href=\"../../MXNet/Gluon/ParameterDict.html\">ParameterDict</a></code> containing this <code><a href=\"../../MXNet/Gluon/Block.html\">Block</a></code>'s and all of its children's <code><a href=\"../../MXNet/Gluon/Parameter.html\">Parameter</a></code>s.</p>","abstract":false,"args":[{"name":"selector","doc":null,"default_value":"nil","external_name":"selector","restriction":""}],"args_string":"(selector = <span class=\"n\">nil</span>)","args_html":"(selector = <span class=\"n\">nil</span>)","location":{"filename":"src/mxnet/gluon/block.cr","line_number":141,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/block.cr#L141"},"def":{"name":"collect_params","args":[{"name":"selector","doc":null,"default_value":"nil","external_name":"selector","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"ret = ParameterDict.new(prefix: @params.prefix)\nif selector\n  ret.update(@params.select do |__arg0|\n    k = __arg0[0]\n    k =~ selector\n  end)\nelse\n  ret.update(@params)\nend\n@reg_children.each_value do |child|\n  ret.update(child.collect_params(selector))\nend\nret\n"}},{"id":"forward(inputs:Array(T)):Array(T)forallT-instance-method","html_id":"forward(inputs:Array(T)):Array(T)forallT-instance-method","name":"forward","doc":"Override to implement forward computation using `NDArray`.\n\nOnly accepts positional arguments.\n\n### Parameters\n* *inputs* (`Array(NDArray)`)\n  Input tensors.\n","summary":"<p>Override to implement forward computation using <code><a href=\"../../MXNet/NDArray.html\">NDArray</a></code>.</p>","abstract":false,"args":[{"name":"inputs","doc":null,"default_value":"","external_name":"inputs","restriction":"Array(T)"}],"args_string":"(inputs : Array(T)) : Array(T) forall T","args_html":"(inputs : Array(T)) : Array(T) forall T","location":{"filename":"src/mxnet/gluon/block.cr","line_number":222,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/block.cr#L222"},"def":{"name":"forward","args":[{"name":"inputs","doc":null,"default_value":"","external_name":"inputs","restriction":"Array(T)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(T)","visibility":"Public","body":"raise(NotImplementedError.new(\"#forward must be implemented in a subclass\"))"}},{"id":"get_attr(name:String):Block|Parameter|Nil-instance-method","html_id":"get_attr(name:String):Block|Parameter|Nil-instance-method","name":"get_attr","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"}],"args_string":"(name : String) : Block | Parameter | Nil","args_html":"(name : String) : <a href=\"../../MXNet/Gluon/Block.html\">Block</a> | <a href=\"../../MXNet/Gluon/Parameter.html\">Parameter</a> | Nil","location":{"filename":"src/mxnet/gluon/block.cr","line_number":248,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/block.cr#L248"},"def":{"name":"get_attr","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Block | Parameter | Nil","visibility":"Public","body":"[@reg_children, @reg_parameters, @reg_other].each do |reg|\n  if reg.has_key?(name)\n    return reg[name]\n  end\nend\nraise(Exception.new(\"undefined attribute #{name}\"))\n"}},{"id":"hybridize(active=true)-instance-method","html_id":"hybridize(active=true)-instance-method","name":"hybridize","doc":"Activates or deactivates `HybridBlock` children\nrecursively. Has no effect on non-hybrid blocks.\n\n### Parameters\n* *active* (`Bool`, default = `true`)\n  Whether to turn hybridization on or off.\n","summary":"<p>Activates or deactivates <code><a href=\"../../MXNet/Gluon/HybridBlock.html\">HybridBlock</a></code> children recursively.</p>","abstract":false,"args":[{"name":"active","doc":null,"default_value":"true","external_name":"active","restriction":""}],"args_string":"(active = <span class=\"n\">true</span>)","args_html":"(active = <span class=\"n\">true</span>)","location":{"filename":"src/mxnet/gluon/block.cr","line_number":196,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/block.cr#L196"},"def":{"name":"hybridize","args":[{"name":"active","doc":null,"default_value":"true","external_name":"active","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@reg_children.each_value do |child|\n  child.hybridize(active)\nend"}},{"id":"init(init=nil,ctx=nil,force_reinit=false)-instance-method","html_id":"init(init=nil,ctx=nil,force_reinit=false)-instance-method","name":"init","doc":"Initializes parameters of this block and its children.\nEquivalent to `self.collect_params.init(...)`.\n\n### Parameters\n* *init* (`Initializer`, default = `nil`)\n  The initializer to use.\n* *ctx* (`Context` or `Array(Context)`, default = `nil`)\n  Desired contexts.\n* *force_reinit* (`Bool`, default = `false`)\n  Whether to force re-initialization if parameter is already\n  initialized.\n","summary":"<p>Initializes parameters of this block and its children.</p>","abstract":false,"args":[{"name":"init","doc":null,"default_value":"nil","external_name":"init","restriction":""},{"name":"ctx","doc":null,"default_value":"nil","external_name":"ctx","restriction":""},{"name":"force_reinit","doc":null,"default_value":"false","external_name":"force_reinit","restriction":""}],"args_string":"(init = <span class=\"n\">nil</span>, ctx = <span class=\"n\">nil</span>, force_reinit = <span class=\"n\">false</span>)","args_html":"(init = <span class=\"n\">nil</span>, ctx = <span class=\"n\">nil</span>, force_reinit = <span class=\"n\">false</span>)","location":{"filename":"src/mxnet/gluon/block.cr","line_number":166,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/block.cr#L166"},"def":{"name":"init","args":[{"name":"init","doc":null,"default_value":"nil","external_name":"init","restriction":""},{"name":"ctx","doc":null,"default_value":"nil","external_name":"ctx","restriction":""},{"name":"force_reinit","doc":null,"default_value":"false","external_name":"force_reinit","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"collect_params.init(init: init, ctx: ctx, force_reinit: force_reinit)\nself\n"}},{"id":"load_parameters(fname,ctx=MXNet.cpu,allow_missing=false,ignore_extra=false)-instance-method","html_id":"load_parameters(fname,ctx=MXNet.cpu,allow_missing=false,ignore_extra=false)-instance-method","name":"load_parameters","doc":"Loads parameters from a file.\n\nFor reference see: \"Saving and Loading Gluon Models\"\n(https://mxnet.incubator.apache.org/tutorials/gluon/save_load_params.html).\n\n### Parameters\n* *fname* (`String`)\n  Path to file.\n* *ctx* (`Context` or `Array(Context)`, default = cpu)\n  Context(s) to initialize loaded parameters on.\n* *allow_missing* (`Bool`, default = `false`)\n  Whether to silently skip parameters not present\n  in the file.\n* *ignore_extra* (`Bool`, default = `false`)\n  Whether to silently ignore parameters not present\n  in this block.\n","summary":"<p>Loads parameters from a file.</p>","abstract":false,"args":[{"name":"fname","doc":null,"default_value":"","external_name":"fname","restriction":""},{"name":"ctx","doc":null,"default_value":"MXNet.cpu","external_name":"ctx","restriction":""},{"name":"allow_missing","doc":null,"default_value":"false","external_name":"allow_missing","restriction":""},{"name":"ignore_extra","doc":null,"default_value":"false","external_name":"ignore_extra","restriction":""}],"args_string":"(fname, ctx = <span class=\"t\">MXNet</span>.cpu, allow_missing = <span class=\"n\">false</span>, ignore_extra = <span class=\"n\">false</span>)","args_html":"(fname, ctx = <span class=\"t\">MXNet</span>.cpu, allow_missing = <span class=\"n\">false</span>, ignore_extra = <span class=\"n\">false</span>)","location":{"filename":"src/mxnet/gluon/block.cr","line_number":290,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/block.cr#L290"},"def":{"name":"load_parameters","args":[{"name":"fname","doc":null,"default_value":"","external_name":"fname","restriction":""},{"name":"ctx","doc":null,"default_value":"MXNet.cpu","external_name":"ctx","restriction":""},{"name":"allow_missing","doc":null,"default_value":"false","external_name":"allow_missing","restriction":""},{"name":"ignore_extra","doc":null,"default_value":"false","external_name":"ignore_extra","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"loaded = MXNet::NDArray.load(fname)\nif loaded.is_a?(Hash(String, NDArray))\nelse\n  raise(Exception.new(\"Can't load from format #{loaded.class}.\"))\nend\nparams = collect_params_for_storage\nif allow_missing\nelse\n  params.each do |key, value|\n    if loaded.has_key?(key)\n    else\n      raise(Exception.new(\"Parameter '#{key}' is missing from file. Set `allow_missing` to `true` to ignore.\"))\n    end\n  end\nend\nloaded.each do |key, value|\n  if params.has_key?(key)\n  else\n    if ignore_extra\n    else\n      raise(Exception.new(\"Value '#{key}' from file is not present in block. Set `ignore_extra` to `true` to ignore.\"))\n    end\n    next\n  end\n  params[key]._load_init(ctx, value)\nend\n"}},{"id":"params:MXNet::Gluon::ParameterDict-instance-method","html_id":"params:MXNet::Gluon::ParameterDict-instance-method","name":"params","doc":"Returns this block's parameter dictionary.\n\nDoes not include its children's parameters.\n","summary":"<p>Returns this block's parameter dictionary.</p>","abstract":false,"args":[],"args_string":" : MXNet::Gluon::ParameterDict","args_html":" : <a href=\"../../MXNet/Gluon/ParameterDict.html\">MXNet::Gluon::ParameterDict</a>","location":{"filename":"src/mxnet/gluon/block.cr","line_number":97,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/block.cr#L97"},"def":{"name":"params","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@params"}},{"id":"prefix:String-instance-method","html_id":"prefix:String-instance-method","name":"prefix","doc":"Prefix of this block.","summary":"<p>Prefix of this block.</p>","abstract":false,"args":[],"args_string":" : String","args_html":" : String","location":{"filename":"src/mxnet/gluon/block.cr","line_number":91,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/block.cr#L91"},"def":{"name":"prefix","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@prefix"}},{"id":"register_child(block,name=nil)-instance-method","html_id":"register_child(block,name=nil)-instance-method","name":"register_child","doc":"Registers block as a child of self. Blocks assigned as\nattributes will be registered automatically.\n","summary":"<p>Registers block as a child of self.</p>","abstract":false,"args":[{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},{"name":"name","doc":null,"default_value":"nil","external_name":"name","restriction":""}],"args_string":"(block, name = <span class=\"n\">nil</span>)","args_html":"(block, name = <span class=\"n\">nil</span>)","location":{"filename":"src/mxnet/gluon/block.cr","line_number":174,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/block.cr#L174"},"def":{"name":"register_child","args":[{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},{"name":"name","doc":null,"default_value":"nil","external_name":"name","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if name\nelse\n  name = @reg_children.size.to_s\nend\n@reg_children[name] = block\nblock\n"}},{"id":"register_parameter(param,name=nil)-instance-method","html_id":"register_parameter(param,name=nil)-instance-method","name":"register_parameter","doc":"Registers parameter on self. Parameters assigned as attributes\nwill be registered automatically.\n","summary":"<p>Registers parameter on self.</p>","abstract":false,"args":[{"name":"param","doc":null,"default_value":"","external_name":"param","restriction":""},{"name":"name","doc":null,"default_value":"nil","external_name":"name","restriction":""}],"args_string":"(param, name = <span class=\"n\">nil</span>)","args_html":"(param, name = <span class=\"n\">nil</span>)","location":{"filename":"src/mxnet/gluon/block.cr","line_number":183,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/block.cr#L183"},"def":{"name":"register_parameter","args":[{"name":"param","doc":null,"default_value":"","external_name":"param","restriction":""},{"name":"name","doc":null,"default_value":"nil","external_name":"name","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if name\nelse\n  name = param.name\nend\n@reg_parameters[name] = param\nparam\n"}},{"id":"save_parameters(fname)-instance-method","html_id":"save_parameters(fname)-instance-method","name":"save_parameters","doc":"Saves parameters to a file.\n\nNote that this method only saves parameters, not model\nstructure. If you want to save model structures, use\n`HybridBlock#export`.\n\nFor reference see: \"Saving and Loading Gluon Models\"\n(https://mxnet.incubator.apache.org/tutorials/gluon/save_load_params.html).\n\n### Parameters\n* *fname* (`String`)\n  Path to file.\n","summary":"<p>Saves parameters to a file.</p>","abstract":false,"args":[{"name":"fname","doc":null,"default_value":"","external_name":"fname","restriction":""}],"args_string":"(fname)","args_html":"(fname)","location":{"filename":"src/mxnet/gluon/block.cr","line_number":268,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/block.cr#L268"},"def":{"name":"save_parameters","args":[{"name":"fname","doc":null,"default_value":"","external_name":"fname","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"params = collect_params_for_storage.transform_values(&._reduce)\nMXNet::NDArray.save(fname, params)\n"}},{"id":"scope:MXNet::Gluon::BlockScope?-instance-method","html_id":"scope:MXNet::Gluon::BlockScope?-instance-method","name":"scope","doc":"Scope of this block.","summary":"<p>Scope of this block.</p>","abstract":false,"args":[],"args_string":" : MXNet::Gluon::BlockScope?","args_html":" : <a href=\"../../MXNet/Gluon/BlockScope.html\">MXNet::Gluon::BlockScope</a>?","location":{"filename":"src/mxnet/gluon/block.cr","line_number":88,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/block.cr#L88"},"def":{"name":"scope","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@scope"}},{"id":"set_attr(name:String,value:Block|Parameter|Nil)-instance-method","html_id":"set_attr(name:String,value:Block|Parameter|Nil)-instance-method","name":"set_attr","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Block | Parameter | Nil"}],"args_string":"(name : String, value : Block | Parameter | Nil)","args_html":"(name : String, value : <a href=\"../../MXNet/Gluon/Block.html\">Block</a> | <a href=\"../../MXNet/Gluon/Parameter.html\">Parameter</a> | Nil)","location":{"filename":"src/mxnet/gluon/block.cr","line_number":228,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/block.cr#L228"},"def":{"name":"set_attr","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Block | Parameter | Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"[@reg_children, @reg_parameters, @reg_other].each do |reg|\n  if (reg.has_key?(name)) && (reg[name].class != value.class)\n    raise(Exception.new(\"changing attribute class for #{name} from #{reg[name].class} to #{value.class} is not allowed\"))\n  end\nend\ncase value\nwhen Block\n  register_child(value, name)\nwhen Parameter\n  register_parameter(value, name)\nelse\n  @reg_other[name] = value\nend\n"}},{"id":"with_name_scope(&)-instance-method","html_id":"with_name_scope(&)-instance-method","name":"with_name_scope","doc":"Enters a name scope managing block names.\n\n    self.with_name_scope do\n      self.dense = MXNet::Gluon::NN.Dense(20)\n    end\n","summary":"<p>Enters a name scope managing block names.</p>","abstract":false,"args":[],"args_string":"(&)","args_html":"(&)","location":{"filename":"src/mxnet/gluon/block.cr","line_number":105,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/block.cr#L105"},"def":{"name":"with_name_scope","args":[],"double_splat":null,"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"if scope = @scope\nelse\n  raise(Exception.new(\"Ensure that parent classes are initialized by calling `super(...)` in #{self.class}#initialize().\"))\nend\nscope.call(self) do\n  yield\nend\n"}}],"macros":[{"id":"attribute(*names)-macro","html_id":"attribute(*names)-macro","name":"attribute","doc":"Creates accessors for declared attributes.\n","summary":"<p>Creates accessors for declared attributes.</p>","abstract":false,"args":[{"name":"names","doc":null,"default_value":"","external_name":"names","restriction":""}],"args_string":"(*names)","location":{"filename":"src/mxnet/gluon/block.cr","line_number":58,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/block.cr#L58"},"def":{"name":"attribute","args":[{"name":"names","doc":null,"default_value":"","external_name":"names","restriction":""}],"double_splat":null,"splat_index":0,"block_arg":null,"visibility":"Public","body":"        \n{% for name in names %}\n          {% if name.is_a?(TypeDeclaration) %}\n            def {{ name.var.id }}\n              get_attr(\"{{ name.var.id }}\").as({{ name.type }})\n            end\n            def {{ name.var.id }}? : {{ name.type }} | Nil\n              (value = get_attr(\"{{ name.var.id }}\")) ? value.as({{ name.type }}) : nil\n            end\n            def {{ name.var.id }}=({{ name.var.id }} : {{ name.type }} | Nil)\n              set_attr(\"{{ name.var.id }}\", {{ name.var.id }})\n            end\n          {% else %}{% if name.is_a?(Call) %}\n            {% raise(\"must include a type declaration: #{name}\") %}\n          {% else %}\n            {% raise(\"must be a type declaration: #{name}\") %}\n          {% end %}{% end %}\n        {% end %}\n\n      \n"}}],"types":[]},{"html_id":"mxnet/MXNet/Gluon/BlockScope","path":"MXNet/Gluon/BlockScope.html","kind":"class","full_name":"MXNet::Gluon::BlockScope","name":"BlockScope","abstract":false,"superclass":{"html_id":"mxnet/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"mxnet/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"mxnet/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/mxnet/gluon/block.cr","line_number":7,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/block.cr#L7"}],"repository_name":"mxnet","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"mxnet/MXNet/Gluon","kind":"module","full_name":"MXNet::Gluon","name":"Gluon"},"doc":"Scope for collecting child `Blocks`.\n","summary":"<p>Scope for collecting child <code>Blocks</code>.</p>","class_methods":[{"id":"create(prefix,params,hint):Tuple(String,ParameterDict)-class-method","html_id":"create(prefix,params,hint):Tuple(String,ParameterDict)-class-method","name":"create","doc":"Creates prefix and params for new `Block`.\n","summary":"<p>Creates prefix and params for new <code><a href=\"../../MXNet/Gluon/Block.html\">Block</a></code>.</p>","abstract":false,"args":[{"name":"prefix","doc":null,"default_value":"","external_name":"prefix","restriction":""},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":""},{"name":"hint","doc":null,"default_value":"","external_name":"hint","restriction":""}],"args_string":"(prefix, params, hint) : Tuple(String, ParameterDict)","args_html":"(prefix, params, hint) : Tuple(String, <a href=\"../../MXNet/Gluon/ParameterDict.html\">ParameterDict</a>)","location":{"filename":"src/mxnet/gluon/block.cr","line_number":19,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/block.cr#L19"},"def":{"name":"create","args":[{"name":"prefix","doc":null,"default_value":"","external_name":"prefix","restriction":""},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":""},{"name":"hint","doc":null,"default_value":"","external_name":"hint","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"::Tuple(String, ParameterDict)","visibility":"Public","body":"current = @@current || (@@current = BlockScope.new)\nif (block = current.block)\n  if prefix.nil?\n    prefix = \"#{hint}#{    __temp_52 = hint\n    __temp_53 = current.counters\n    __temp_53[__temp_52] = __temp_53[__temp_52] + 1\n}_\"\n  end\n  if params.nil?\n    params = ParameterDict.new(prefix: \"#{block.prefix}#{prefix}\")\n  else\n    params = ParameterDict.new(prefix: \"#{block.prefix}#{prefix}\", shared: params)\n  end\n  {\"#{block.prefix}#{prefix}\", params}\nelse\n  if prefix.nil?\n    prefix = \"#{hint}#{    __temp_54 = hint\n    __temp_55 = current.counters\n    __temp_55[__temp_54] = __temp_55[__temp_54] + 1\n}_\"\n  end\n  if params.nil?\n    params = ParameterDict.new(prefix: prefix)\n  else\n    params = ParameterDict.new(prefix: params.prefix, shared: params)\n  end\n  {prefix, params}\nend\n"}}],"constructors":[],"instance_methods":[{"id":"block:MXNet::Gluon::Block?-instance-method","html_id":"block:MXNet::Gluon::Block?-instance-method","name":"block","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : MXNet::Gluon::Block?","args_html":" : <a href=\"../../MXNet/Gluon/Block.html\">MXNet::Gluon::Block</a>?","location":{"filename":"src/mxnet/gluon/block.cr","line_number":12,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/block.cr#L12"},"def":{"name":"block","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@block"}},{"id":"call(block,&)-instance-method","html_id":"call(block,&)-instance-method","name":"call","doc":null,"summary":null,"abstract":false,"args":[{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""}],"args_string":"(block, &)","args_html":"(block, &)","location":{"filename":"src/mxnet/gluon/block.cr","line_number":44,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/block.cr#L44"},"def":{"name":"call","args":[{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""}],"double_splat":null,"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"begin\n  previous, @@current = @@current, block.scope\n  yield\nensure\n  @@current = previous\nend"}},{"id":"counters:Hash(String,Int32)-instance-method","html_id":"counters:Hash(String,Int32)-instance-method","name":"counters","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Hash(String, Int32)","args_html":" : Hash(String, Int32)","location":{"filename":"src/mxnet/gluon/block.cr","line_number":13,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/block.cr#L13"},"def":{"name":"counters","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@counters"}}],"macros":[],"types":[]},{"html_id":"mxnet/MXNet/Gluon/CachedGraph","path":"MXNet/Gluon/CachedGraph.html","kind":"module","full_name":"MXNet::Gluon::CachedGraph","name":"CachedGraph","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/mxnet/gluon/block.cr","line_number":341,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/block.cr#L341"}],"repository_name":"mxnet","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"mxnet/MXNet/Gluon/HybridBlock","kind":"class","full_name":"MXNet::Gluon::HybridBlock","name":"HybridBlock"},{"html_id":"mxnet/MXNet/Gluon/SymbolBlock","kind":"class","full_name":"MXNet::Gluon::SymbolBlock","name":"SymbolBlock"}],"namespace":{"html_id":"mxnet/MXNet/Gluon","kind":"module","full_name":"MXNet::Gluon","name":"Gluon"},"doc":"Encapsulates caching symbolized operations.\n","summary":"<p>Encapsulates caching symbolized operations.</p>","class_methods":[],"constructors":[{"id":"new(**kwargs)-class-method","html_id":"new(**kwargs)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":{"filename":"src/mxnet/gluon/block.cr","line_number":347,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/block.cr#L347"},"def":{"name":"new","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(**kwargs)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"clear_cache-instance-method","html_id":"clear_cache-instance-method","name":"clear_cache","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/mxnet/gluon/block.cr","line_number":352,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/block.cr#L352"},"def":{"name":"clear_cache","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@graph = nil\n@cached_op = nil\n"}},{"id":"infer_dtype(args)-instance-method","html_id":"infer_dtype(args)-instance-method","name":"infer_dtype","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(args)","args_html":"(args)","location":{"filename":"src/mxnet/gluon/block.cr","line_number":369,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/block.cr#L369"},"def":{"name":"infer_dtype","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"inputs, outputs = get_graph(args)\noutput = MXNet::Symbol.group(outputs)\narg_attrs, _, aux_attrs = output.infer_dtype((inputs.zip(args)).reduce({} of String => ::Symbol) do |a, __arg3|\n  i = __arg3[0]\n  j = __arg3[1]\n  a[i.name.not_nil!] = j.dtype\n  a\nend)\ndtypes = (output.list_arguments.zip(arg_attrs.not_nil!)).to_h.merge((output.list_auxiliary_states.zip(aux_attrs.not_nil!)).to_h)\ncollect_params.values.each do |value|\n  value.dtype = dtypes[value.name]\nend\n"}},{"id":"infer_shape(args)-instance-method","html_id":"infer_shape(args)-instance-method","name":"infer_shape","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(args)","args_html":"(args)","location":{"filename":"src/mxnet/gluon/block.cr","line_number":357,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/block.cr#L357"},"def":{"name":"infer_shape","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"inputs, outputs = get_graph(args)\noutput = MXNet::Symbol.group(outputs)\narg_attrs, _, aux_attrs = output.infer_shape((inputs.zip(args)).reduce({} of String => Array(Int32)) do |a, __arg2|\n  i = __arg2[0]\n  j = __arg2[1]\n  a[i.name.not_nil!] = j.shape\n  a\nend)\nshapes = (output.list_arguments.zip(arg_attrs.not_nil!)).to_h.merge((output.list_auxiliary_states.zip(aux_attrs.not_nil!)).to_h)\ncollect_params.values.each do |value|\n  value.shape = shapes[value.name]\nend\n"}}],"macros":[],"types":[]},{"html_id":"mxnet/MXNet/Gluon/Constant","path":"MXNet/Gluon/Constant.html","kind":"class","full_name":"MXNet::Gluon::Constant","name":"Constant","abstract":false,"superclass":{"html_id":"mxnet/MXNet/Gluon/Parameter","kind":"class","full_name":"MXNet::Gluon::Parameter","name":"Parameter"},"ancestors":[{"html_id":"mxnet/MXNet/Gluon/Parameter","kind":"class","full_name":"MXNet::Gluon::Parameter","name":"Parameter"},{"html_id":"mxnet/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"mxnet/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/mxnet/gluon/parameter.cr","line_number":392,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/parameter.cr#L392"}],"repository_name":"mxnet","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"mxnet/MXNet/Gluon","kind":"module","full_name":"MXNet::Gluon","name":"Gluon"},"doc":"A constant parameter for holding immutable tensors.\n\n`Constant`s are ignored by `Autograd` and `Trainer`, thus their\nvalues will not change during training. But you can still update\ntheir values manually with the `set_data` method.\n","summary":"<p>A constant parameter for holding immutable tensors.</p>","class_methods":[],"constructors":[{"id":"new(name,value)-class-method","html_id":"new(name,value)-class-method","name":"new","doc":"Creates a new instance.\n\n### Parameters\n* *name* (`String`, required)\n   Name of the constant.\n* *value* (`Array` | `NDArray`, required)\n  Initial value for the constant.\n","summary":"<p>Creates a new instance.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"args_string":"(name, value)","args_html":"(name, value)","location":{"filename":"src/mxnet/gluon/parameter.cr","line_number":415,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/parameter.cr#L415"},"def":{"name":"new","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(name, value)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"to_s(io)-instance-method","html_id":"to_s(io)-instance-method","name":"to_s","doc":"Writes this object to an `IO`.\n","summary":"<p>Writes this object to an <code>IO</code>.</p>","abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/mxnet/gluon/parameter.cr","line_number":430,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/parameter.cr#L430"},"def":{"name":"to_s","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"io << \"Constant #{@name} (shape=#{@shape}, dtype=#{@dtype})\""}}],"macros":[],"types":[]},{"html_id":"mxnet/MXNet/Gluon/Data","path":"MXNet/Gluon/Data.html","kind":"module","full_name":"MXNet::Gluon::Data","name":"Data","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/mxnet/gluon/data.cr","line_number":6,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/data.cr#L6"},{"filename":"src/mxnet/gluon/data/data_loader.cr","line_number":5,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/data/data_loader.cr#L5"},{"filename":"src/mxnet/gluon/data/dataset.cr","line_number":5,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/data/dataset.cr#L5"},{"filename":"src/mxnet/gluon/data/sampler.cr","line_number":5,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/data/sampler.cr#L5"},{"filename":"src/mxnet/gluon/data/vision/mnist.cr","line_number":6,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/data/vision/mnist.cr#L6"}],"repository_name":"mxnet","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"mxnet/MXNet/Gluon","kind":"module","full_name":"MXNet::Gluon","name":"Gluon"},"doc":"Dataset utilities.","summary":"<p>Dataset utilities.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"mxnet/MXNet/Gluon/Data/ArrayDataset","path":"MXNet/Gluon/Data/ArrayDataset.html","kind":"class","full_name":"MXNet::Gluon::Data::ArrayDataset","name":"ArrayDataset","abstract":false,"superclass":{"html_id":"mxnet/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"mxnet/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"mxnet/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/mxnet/gluon/data/dataset.cr","line_number":84,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/data/dataset.cr#L84"}],"repository_name":"mxnet","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"mxnet/MXNet/Gluon/Data","kind":"module","full_name":"MXNet::Gluon::Data","name":"Data"},"doc":"A dataset that combines multiple dataset-like objects.\n","summary":"<p>A dataset that combines multiple dataset-like objects.</p>","class_methods":[],"constructors":[{"id":"new(t:Indexable(T),u:Indexable(U),v:Indexable(V),w:Indexable(W),x:Indexable(X))forallT,U,V,W,X-class-method","html_id":"new(t:Indexable(T),u:Indexable(U),v:Indexable(V),w:Indexable(W),x:Indexable(X))forallT,U,V,W,X-class-method","name":"new","doc":"Creates a new instance.\n","summary":"<p>Creates a new instance.</p>","abstract":false,"args":[{"name":"t","doc":null,"default_value":"","external_name":"t","restriction":"Indexable(T)"},{"name":"u","doc":null,"default_value":"","external_name":"u","restriction":"Indexable(U)"},{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"Indexable(V)"},{"name":"w","doc":null,"default_value":"","external_name":"w","restriction":"Indexable(W)"},{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":"Indexable(X)"}],"args_string":"(t : Indexable(T), u : Indexable(U), v : Indexable(V), w : Indexable(W), x : Indexable(X)) forall T, U, V, W, X","args_html":"(t : Indexable(T), u : Indexable(U), v : Indexable(V), w : Indexable(W), x : Indexable(X)) forall T, U, V, W, X","location":{"filename":"src/mxnet/gluon/data/dataset.cr","line_number":120,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/data/dataset.cr#L120"},"def":{"name":"new","args":[{"name":"t","doc":null,"default_value":"","external_name":"t","restriction":"Indexable(T)"},{"name":"u","doc":null,"default_value":"","external_name":"u","restriction":"Indexable(U)"},{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"Indexable(V)"},{"name":"w","doc":null,"default_value":"","external_name":"w","restriction":"Indexable(W)"},{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":"Indexable(X)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Implementation(Tuple(Indexable(T), Indexable(U), Indexable(V), Indexable(W), Indexable(X)), Tuple(T, U, V, W, X)).new({t, u, v, w, x})"}},{"id":"new(t:Indexable(T),u:Indexable(U),v:Indexable(V),w:Indexable(W))forallT,U,V,W-class-method","html_id":"new(t:Indexable(T),u:Indexable(U),v:Indexable(V),w:Indexable(W))forallT,U,V,W-class-method","name":"new","doc":"Creates a new instance.\n","summary":"<p>Creates a new instance.</p>","abstract":false,"args":[{"name":"t","doc":null,"default_value":"","external_name":"t","restriction":"Indexable(T)"},{"name":"u","doc":null,"default_value":"","external_name":"u","restriction":"Indexable(U)"},{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"Indexable(V)"},{"name":"w","doc":null,"default_value":"","external_name":"w","restriction":"Indexable(W)"}],"args_string":"(t : Indexable(T), u : Indexable(U), v : Indexable(V), w : Indexable(W)) forall T, U, V, W","args_html":"(t : Indexable(T), u : Indexable(U), v : Indexable(V), w : Indexable(W)) forall T, U, V, W","location":{"filename":"src/mxnet/gluon/data/dataset.cr","line_number":125,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/data/dataset.cr#L125"},"def":{"name":"new","args":[{"name":"t","doc":null,"default_value":"","external_name":"t","restriction":"Indexable(T)"},{"name":"u","doc":null,"default_value":"","external_name":"u","restriction":"Indexable(U)"},{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"Indexable(V)"},{"name":"w","doc":null,"default_value":"","external_name":"w","restriction":"Indexable(W)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Implementation(Tuple(Indexable(T), Indexable(U), Indexable(V), Indexable(W)), Tuple(T, U, V, W)).new({t, u, v, w})"}},{"id":"new(t:Indexable(T),u:Indexable(U),v:Indexable(V))forallT,U,V-class-method","html_id":"new(t:Indexable(T),u:Indexable(U),v:Indexable(V))forallT,U,V-class-method","name":"new","doc":"Creates a new instance.\n","summary":"<p>Creates a new instance.</p>","abstract":false,"args":[{"name":"t","doc":null,"default_value":"","external_name":"t","restriction":"Indexable(T)"},{"name":"u","doc":null,"default_value":"","external_name":"u","restriction":"Indexable(U)"},{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"Indexable(V)"}],"args_string":"(t : Indexable(T), u : Indexable(U), v : Indexable(V)) forall T, U, V","args_html":"(t : Indexable(T), u : Indexable(U), v : Indexable(V)) forall T, U, V","location":{"filename":"src/mxnet/gluon/data/dataset.cr","line_number":130,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/data/dataset.cr#L130"},"def":{"name":"new","args":[{"name":"t","doc":null,"default_value":"","external_name":"t","restriction":"Indexable(T)"},{"name":"u","doc":null,"default_value":"","external_name":"u","restriction":"Indexable(U)"},{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"Indexable(V)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Implementation(Tuple(Indexable(T), Indexable(U), Indexable(V)), Tuple(T, U, V)).new({t, u, v})"}},{"id":"new(t:Indexable(T),u:Indexable(U))forallT,U-class-method","html_id":"new(t:Indexable(T),u:Indexable(U))forallT,U-class-method","name":"new","doc":"Creates a new instance.\n","summary":"<p>Creates a new instance.</p>","abstract":false,"args":[{"name":"t","doc":null,"default_value":"","external_name":"t","restriction":"Indexable(T)"},{"name":"u","doc":null,"default_value":"","external_name":"u","restriction":"Indexable(U)"}],"args_string":"(t : Indexable(T), u : Indexable(U)) forall T, U","args_html":"(t : Indexable(T), u : Indexable(U)) forall T, U","location":{"filename":"src/mxnet/gluon/data/dataset.cr","line_number":135,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/data/dataset.cr#L135"},"def":{"name":"new","args":[{"name":"t","doc":null,"default_value":"","external_name":"t","restriction":"Indexable(T)"},{"name":"u","doc":null,"default_value":"","external_name":"u","restriction":"Indexable(U)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Implementation(Tuple(Indexable(T), Indexable(U)), Tuple(T, U)).new({t, u})"}},{"id":"new(t:Indexable(T))forallT-class-method","html_id":"new(t:Indexable(T))forallT-class-method","name":"new","doc":"Creates a new instance.\n","summary":"<p>Creates a new instance.</p>","abstract":false,"args":[{"name":"t","doc":null,"default_value":"","external_name":"t","restriction":"Indexable(T)"}],"args_string":"(t : Indexable(T)) forall T","args_html":"(t : Indexable(T)) forall T","location":{"filename":"src/mxnet/gluon/data/dataset.cr","line_number":140,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/data/dataset.cr#L140"},"def":{"name":"new","args":[{"name":"t","doc":null,"default_value":"","external_name":"t","restriction":"Indexable(T)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Implementation(Tuple(Indexable(T)), Tuple(T)).new({t})"}}],"instance_methods":[],"macros":[],"types":[]},{"html_id":"mxnet/MXNet/Gluon/Data/BatchSampler","path":"MXNet/Gluon/Data/BatchSampler.html","kind":"class","full_name":"MXNet::Gluon::Data::BatchSampler(T)","name":"BatchSampler","abstract":false,"superclass":{"html_id":"mxnet/MXNet/Gluon/Data/Sampler","kind":"class","full_name":"MXNet::Gluon::Data::Sampler","name":"Sampler"},"ancestors":[{"html_id":"mxnet/Iterator","kind":"module","full_name":"Iterator","name":"Iterator"},{"html_id":"mxnet/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"mxnet/MXNet/Gluon/Data/Sampler","kind":"class","full_name":"MXNet::Gluon::Data::Sampler","name":"Sampler"},{"html_id":"mxnet/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"mxnet/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"mxnet/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/mxnet/gluon/data/sampler.cr","line_number":84,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/data/sampler.cr#L84"}],"repository_name":"mxnet","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[{"html_id":"mxnet/Iterator","kind":"module","full_name":"Iterator","name":"Iterator"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"mxnet/MXNet/Gluon/Data","kind":"module","full_name":"MXNet::Gluon::Data","name":"Data"},"doc":"Wraps another `Sampler` and returns mini-batches of samples.\n\n```\nsampler = MXNet::Gluon::Data::BatchSampler.new(\n  MXNet::Gluon::Data::SequentialSampler.new(10), 3, :keep\n)\nsampler.to_a # => [[0, 1, 2], [3, 4, 5], [6, 7, 8], [9]]\n```\n","summary":"<p>Wraps another <code><a href=\"../../../MXNet/Gluon/Data/Sampler.html\">Sampler</a></code> and returns mini-batches of samples.</p>","class_methods":[],"constructors":[{"id":"new(sampler:Sampler(T),batch_size:Int32,last_batch=:keep)-class-method","html_id":"new(sampler:Sampler(T),batch_size:Int32,last_batch=:keep)-class-method","name":"new","doc":"Creates a new instance.\n\n### Parameters\n* *sampler* (`Sampler`)\n  The source sampler.\n* *batch_size* (`Int32`)\n  Size of mini-batches.\n* *last_batch* (`:keep`, `:discard`, `:rollover`)\n  Specifies how the last batch is handled if `batch_size`\n  does not evenly divide sampler sequence size. If `:keep`,\n  the last batch will be returned directly, but will contain\n  fewer elements than `batch_size` requires. If `:discard`,\n  the last batch will be discarded.  If `:rollover`, the\n  remaining elements will be rolled over to the next\n  iteration.\n","summary":"<p>Creates a new instance.</p>","abstract":false,"args":[{"name":"sampler","doc":null,"default_value":"","external_name":"sampler","restriction":"Sampler(T)"},{"name":"batch_size","doc":null,"default_value":"","external_name":"batch_size","restriction":"Int32"},{"name":"last_batch","doc":null,"default_value":":keep","external_name":"last_batch","restriction":""}],"args_string":"(sampler : Sampler(T), batch_size : Int32, last_batch = <span class=\"n\">:keep</span>)","args_html":"(sampler : <a href=\"../../../MXNet/Gluon/Data/Sampler.html\">Sampler</a>(T), batch_size : Int32, last_batch = <span class=\"n\">:keep</span>)","location":{"filename":"src/mxnet/gluon/data/sampler.cr","line_number":105,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/data/sampler.cr#L105"},"def":{"name":"new","args":[{"name":"sampler","doc":null,"default_value":"","external_name":"sampler","restriction":"Sampler(T)"},{"name":"batch_size","doc":null,"default_value":"","external_name":"batch_size","restriction":"Int32"},{"name":"last_batch","doc":null,"default_value":":keep","external_name":"last_batch","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = BatchSampler(T).allocate\n_.initialize(sampler, batch_size, last_batch)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"next-instance-method","html_id":"next-instance-method","name":"next","doc":"Returns the next element in the sequence, or\n`Iterator::Stop::INSTANCE` if there are no more elements.\n","summary":"<p>Returns the next element in the sequence, or <code>Iterator::Stop::INSTANCE</code> if there are no more elements.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/mxnet/gluon/data/sampler.cr","line_number":144,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/data/sampler.cr#L144"},"def":{"name":"next","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"batch = [] of T\nif @batch.empty?\nelse\n  batch, @batch = @batch, batch\nend\n@enum.each do |i|\n  batch << i\n  if batch.size == @batch_size\n    return batch\n  end\nend\nif batch.empty?\nelse\n  case @last_batch\n  when :discard\n  when :keep\n    return batch\n  when :rollover\n    @batch = batch\n  end\nend\nstop\n"}},{"id":"rewind-instance-method","html_id":"rewind-instance-method","name":"rewind","doc":"Rewinds the sequence.\n\nIf the source sampler is a `BatchSampler`, this rewinds it\nas well.\n","summary":"<p>Rewinds the sequence.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/mxnet/gluon/data/sampler.cr","line_number":133,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/data/sampler.cr#L133"},"def":{"name":"rewind","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if (sampler = @sampler).responds_to?(:rewind)\n  sampler.rewind\nend\n@enum = @sampler.each\nself\n"}},{"id":"size-instance-method","html_id":"size-instance-method","name":"size","doc":"Returns the number of elements in the sequence.\n","summary":"<p>Returns the number of elements in the sequence.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/mxnet/gluon/data/sampler.cr","line_number":115,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/data/sampler.cr#L115"},"def":{"name":"size","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"case @last_batch\nwhen :discard\n  (@sampler.size / @batch_size).to_i\nwhen :keep\n  (((@sampler.size + @batch_size) - 1) / @batch_size).to_i\nwhen :rollover\n  ((@sampler.size + @batch.size) / @batch_size).to_i\nelse\n  raise(NotImplementedError.new(\"unsupported: #{@last_batch}\"))\nend"}}],"macros":[],"types":[]},{"html_id":"mxnet/MXNet/Gluon/Data/DataLoader","path":"MXNet/Gluon/Data/DataLoader.html","kind":"class","full_name":"MXNet::Gluon::Data::DataLoader(Element, Batch)","name":"DataLoader","abstract":false,"superclass":{"html_id":"mxnet/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"mxnet/Iterator","kind":"module","full_name":"Iterator","name":"Iterator"},{"html_id":"mxnet/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"mxnet/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"mxnet/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/mxnet/gluon/data/data_loader.cr","line_number":44,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/data/data_loader.cr#L44"}],"repository_name":"mxnet","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[{"html_id":"mxnet/Iterator","kind":"module","full_name":"Iterator","name":"Iterator"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"mxnet/MXNet/Gluon/Data","kind":"module","full_name":"MXNet::Gluon::Data","name":"Data"},"doc":"Loads data from a `Dataset` and returns batches of data.\n\n`DataLoader` is parameterized by two types: `Element`, which\nis the type of the elements in the supplied dataset, and `Batch`,\nwhich is the type of the returned batches.\n\nBatched samples of the source dataset are turned into a batch\nwith the batchify function `batchify_fn`. The default batchify\nfunction operates on a dataset with elements that are either\nnon-aggregate elements or tuples of elements. If the type of\n`Batch` is `MXNet::NDArray` or is a tuple containing this\ntype, the default batchify function will attempt to transform\nthe batched samples into instances of `MXNet::NDArray`.\nThe default batchify function is:\n\n```\nprivate class Batchify(E, B)\n  def self.batchify(data : Array(E)) : B\n    {% if B < Tuple && E < Tuple %}\n      {% raise \"the default batchify function requires types have the same size: #{B}.size != #{E}.size\" unless B.size == E.size %}\n      {\n        {% for i in (0...B.size) %}\n          Batchify({{E.type_vars[i]}}, {{B.type_vars[i]}}).batchify(data.map(&.[{{i}}])),\n        {% end %}\n      }\n    {% elsif E == MXNet::NDArray %}\n      MXNet::NDArray::Ops._stack(data, num_args: data.size)\n    {% elsif B == MXNet::NDArray && (E < Number || E < Array) %}\n      MXNet::NDArray.array(data)\n    {% elsif B == Array(E) %}\n      data\n    {% else %}\n      {% raise \"the default batchify function can't transform a batched sample of #{E} into #{B}\" %}\n    {% end %}\n  end\nend\n```\n","summary":"<p>Loads data from a <code><a href=\"../../../MXNet/Gluon/Data/Dataset.html\">Dataset</a></code> and returns batches of data.</p>","class_methods":[],"constructors":[{"id":"new(dataset:Indexable(Element),*,shuffle,batch_size,last_batch=:keep,batchify_fn:Array(Element)->Batch=->default_batchify_fn(Array(Element)))-class-method","html_id":"new(dataset:Indexable(Element),*,shuffle,batch_size,last_batch=:keep,batchify_fn:Array(Element)->Batch=->default_batchify_fn(Array(Element)))-class-method","name":"new","doc":"Creates a new instance.\n\n### Parameters\n* *dataset* (`Indexable`)\n  Source dataset. Note that any `Indexable` can be directly\n  used as a `Dataset`.\n* *shuffle* (`Bool`)\n  Whether or not to shuffle the samples.\n* *batch_size* (`Int32`)\n  Size of batch.\n* *last_batch* (`:keep`, `:discard`, `:rollover`)\n  Specifies how the last batch is handled if `batch_size`\n  does not evenly divide sampler sequence size. If `:keep`,\n  the last batch will be returned directly, but will contain\n  fewer elements than `batch_size` requires. If `:discard`,\n  the last batch will be discarded.  If `:rollover`, the\n  remaining elements will be rolled over to the next\n  iteration.\n* *batchify_fn* (`Proc`, default = `default_batchify_fn`)\n  Function that specifies how to merge samples into a batch.\n","summary":"<p>Creates a new instance.</p>","abstract":false,"args":[{"name":"dataset","doc":null,"default_value":"","external_name":"dataset","restriction":"Indexable(Element)"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"shuffle","doc":null,"default_value":"","external_name":"shuffle","restriction":""},{"name":"batch_size","doc":null,"default_value":"","external_name":"batch_size","restriction":""},{"name":"last_batch","doc":null,"default_value":":keep","external_name":"last_batch","restriction":""},{"name":"batchify_fn","doc":null,"default_value":"->default_batchify_fn(Array(Element))","external_name":"batchify_fn","restriction":"(Array(Element) -> Batch)"}],"args_string":"(dataset : Indexable(Element), *, shuffle, batch_size, last_batch = <span class=\"n\">:keep</span>, batchify_fn : Array(Element) -> Batch = ->default_batchify_fn(<span class=\"t\">Array</span>(<span class=\"t\">Element</span>)))","args_html":"(dataset : Indexable(Element), *, shuffle, batch_size, last_batch = <span class=\"n\">:keep</span>, batchify_fn : Array(Element) -> Batch = ->default_batchify_fn(<span class=\"t\">Array</span>(<span class=\"t\">Element</span>)))","location":{"filename":"src/mxnet/gluon/data/data_loader.cr","line_number":70,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/data/data_loader.cr#L70"},"def":{"name":"new","args":[{"name":"dataset","doc":null,"default_value":"","external_name":"dataset","restriction":"Indexable(Element)"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"shuffle","doc":null,"default_value":"","external_name":"shuffle","restriction":""},{"name":"batch_size","doc":null,"default_value":"","external_name":"batch_size","restriction":""},{"name":"last_batch","doc":null,"default_value":":keep","external_name":"last_batch","restriction":""},{"name":"batchify_fn","doc":null,"default_value":"->default_batchify_fn(Array(Element))","external_name":"batchify_fn","restriction":"(Array(Element) -> Batch)"}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = DataLoader(Element, Batch).allocate\n_.initialize(dataset, shuffle: shuffle, batch_size: batch_size, last_batch: last_batch, batchify_fn: batchify_fn)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"next-instance-method","html_id":"next-instance-method","name":"next","doc":"Returns the next element in this iterator, or `Iterator::Stop::INSTANCE` if there\nare no more elements.","summary":"<p>Returns the next element in this iterator, or <code>Iterator::Stop::INSTANCE</code> if there are no more elements.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/mxnet/gluon/data/data_loader.cr","line_number":83,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/data/data_loader.cr#L83"},"def":{"name":"next","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if (value = @sampler.next).responds_to?(:map)\n  @batchify_fn.call(value.map do |i|\n    @dataset[i]\n  end)\nelse\n  stop\nend"}},{"id":"rewind-instance-method","html_id":"rewind-instance-method","name":"rewind","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/mxnet/gluon/data/data_loader.cr","line_number":91,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/data/data_loader.cr#L91"},"def":{"name":"rewind","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if (sampler = @sampler).responds_to?(:rewind)\n  sampler.rewind\nend\nself\n"}},{"id":"size-instance-method","html_id":"size-instance-method","name":"size","doc":"Returns the number of elements in the collection.\n\n```\n[1, 2, 3, 4].size # => 4\n```","summary":"<p>Returns the number of elements in the collection.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/mxnet/gluon/data/data_loader.cr","line_number":79,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/data/data_loader.cr#L79"},"def":{"name":"size","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@sampler.size"}}],"macros":[],"types":[]},{"html_id":"mxnet/MXNet/Gluon/Data/Dataset","path":"MXNet/Gluon/Data/Dataset.html","kind":"class","full_name":"MXNet::Gluon::Data::Dataset(T)","name":"Dataset","abstract":true,"superclass":{"html_id":"mxnet/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"mxnet/Indexable","kind":"module","full_name":"Indexable","name":"Indexable"},{"html_id":"mxnet/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"mxnet/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"},{"html_id":"mxnet/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"mxnet/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/mxnet/gluon/data/dataset.cr","line_number":15,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/data/dataset.cr#L15"}],"repository_name":"mxnet","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[{"html_id":"mxnet/Indexable","kind":"module","full_name":"Indexable","name":"Indexable"}],"extended_modules":[],"subclasses":[{"html_id":"mxnet/MXNet/Gluon/Data/DownloadedDataset","kind":"class","full_name":"MXNet::Gluon::Data::DownloadedDataset(T, U, V)","name":"DownloadedDataset"},{"html_id":"mxnet/MXNet/Gluon/Data/LazyTransformDataset","kind":"class","full_name":"MXNet::Gluon::Data::LazyTransformDataset(T, U)","name":"LazyTransformDataset"},{"html_id":"mxnet/MXNet/Gluon/Data/SimpleDataset","kind":"class","full_name":"MXNet::Gluon::Data::SimpleDataset(T)","name":"SimpleDataset"}],"including_types":[],"namespace":{"html_id":"mxnet/MXNet/Gluon/Data","kind":"module","full_name":"MXNet::Gluon::Data","name":"Data"},"doc":"Abstract dataset.\n\nAll datasets should implement this interface.\n\n`Dataset` includes `Indexable`, so subclasses must define\n`#size`, which returns the total number elements, and\n`#unsafe_fetch`, which returns the indexed element.\n","summary":"<p>Abstract dataset.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"size-instance-method","html_id":"size-instance-method","name":"size","doc":"Returns the number of elements in this container.","summary":"<p>Returns the number of elements in this container.</p>","abstract":true,"args":[],"args_string":"","args_html":"","location":{"filename":"src/mxnet/gluon/data/dataset.cr","line_number":18,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/data/dataset.cr#L18"},"def":{"name":"size","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}},{"id":"transform(lazy=true,&proc:T->U)forallU-instance-method","html_id":"transform(lazy=true,&proc:T->U)forallU-instance-method","name":"transform","doc":"Returns a new dataset with each sample transformed by the\nsupplied transformer block.\n\n### Parameters\n* *lazy* (`Bool`, default = `true`)\n  If `false`, transforms all samples at once. Otherwise,\n  transforms each sample on demand. Note that if the\n  transformer block is stochastic, you must set `lazy` to\n  `true` or you will get the same result on all epochs.\n","summary":"<p>Returns a new dataset with each sample transformed by the supplied transformer block.</p>","abstract":false,"args":[{"name":"lazy","doc":null,"default_value":"true","external_name":"lazy","restriction":""}],"args_string":"(lazy = <span class=\"n\">true</span>, &proc : T -> U) forall U","args_html":"(lazy = <span class=\"n\">true</span>, &proc : T -> U) forall U","location":{"filename":"src/mxnet/gluon/data/dataset.cr","line_number":32,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/data/dataset.cr#L32"},"def":{"name":"transform","args":[{"name":"lazy","doc":null,"default_value":"true","external_name":"lazy","restriction":""}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":"(T -> U)"},"return_type":"","visibility":"Public","body":"trans = LazyTransformDataset(T, U).new(self, &proc)\nlazy ? trans : SimpleDataset(U).new(trans.to_a)\n"}},{"id":"unsafe_fetch(idx)-instance-method","html_id":"unsafe_fetch(idx)-instance-method","name":"unsafe_fetch","doc":null,"summary":null,"abstract":true,"args":[{"name":"idx","doc":null,"default_value":"","external_name":"idx","restriction":""}],"args_string":"(idx)","args_html":"(idx)","location":{"filename":"src/mxnet/gluon/data/dataset.cr","line_number":20,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/data/dataset.cr#L20"},"def":{"name":"unsafe_fetch","args":[{"name":"idx","doc":null,"default_value":"","external_name":"idx","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}}],"macros":[],"types":[]},{"html_id":"mxnet/MXNet/Gluon/Data/DownloadedDataset","path":"MXNet/Gluon/Data/DownloadedDataset.html","kind":"class","full_name":"MXNet::Gluon::Data::DownloadedDataset(T, U, V)","name":"DownloadedDataset","abstract":true,"superclass":{"html_id":"mxnet/MXNet/Gluon/Data/Dataset","kind":"class","full_name":"MXNet::Gluon::Data::Dataset","name":"Dataset"},"ancestors":[{"html_id":"mxnet/MXNet/Gluon/Data/Dataset","kind":"class","full_name":"MXNet::Gluon::Data::Dataset","name":"Dataset"},{"html_id":"mxnet/Indexable","kind":"module","full_name":"Indexable","name":"Indexable"},{"html_id":"mxnet/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"mxnet/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"},{"html_id":"mxnet/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"mxnet/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/mxnet/gluon/data/dataset.cr","line_number":150,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/data/dataset.cr#L150"}],"repository_name":"mxnet","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[{"html_id":"mxnet/MXNet/Gluon/Data/Vision/MNIST","kind":"class","full_name":"MXNet::Gluon::Data::Vision::MNIST(T)","name":"MNIST"}],"including_types":[],"namespace":{"html_id":"mxnet/MXNet/Gluon/Data","kind":"module","full_name":"MXNet::Gluon::Data","name":"Data"},"doc":"Abstract base class for MNIST, CIFAR10, etc.\n\nSubclasses must define `#get_data`, which returns arrays of\ndata and labels for the dataset.\n","summary":"<p>Abstract base class for MNIST, CIFAR10, etc.</p>","class_methods":[],"constructors":[{"id":"new(root,transform:Proc(T,U,V)?=nil)-class-method","html_id":"new(root,transform:Proc(T,U,V)?=nil)-class-method","name":"new","doc":"Creates a new instance.\n\n### Parameters\n* *root* (`String`)\n  Directory in which to cache downloaded files.\n  Automatically created if it does not already exist.\n* *transform* (`Proc`, optional)\n  Optional transformation to apply to each returned sample.\n","summary":"<p>Creates a new instance.</p>","abstract":false,"args":[{"name":"root","doc":null,"default_value":"","external_name":"root","restriction":""},{"name":"transform","doc":null,"default_value":"nil","external_name":"transform","restriction":"Proc(T, U, V) | ::Nil"}],"args_string":"(root, transform : Proc(T, U, V)? = <span class=\"n\">nil</span>)","args_html":"(root, transform : Proc(T, U, V)? = <span class=\"n\">nil</span>)","location":{"filename":"src/mxnet/gluon/data/dataset.cr","line_number":163,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/data/dataset.cr#L163"},"def":{"name":"new","args":[{"name":"root","doc":null,"default_value":"","external_name":"root","restriction":""},{"name":"transform","doc":null,"default_value":"nil","external_name":"transform","restriction":"Proc(T, U, V) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = DownloadedDataset(T, U, V).allocate\n_.initialize(root, transform)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"root-instance-method","html_id":"root-instance-method","name":"root","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/mxnet/gluon/data/dataset.cr","line_number":170,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/data/dataset.cr#L170"},"def":{"name":"root","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@root"}},{"id":"size-instance-method","html_id":"size-instance-method","name":"size","doc":"Returns the number of elements in this container.","summary":"<p>Returns the number of elements in this container.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/mxnet/gluon/data/dataset.cr","line_number":172,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/data/dataset.cr#L172"},"def":{"name":"size","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@label.try(&.size) || 0"}},{"id":"unsafe_fetch(idx)-instance-method","html_id":"unsafe_fetch(idx)-instance-method","name":"unsafe_fetch","doc":null,"summary":null,"abstract":false,"args":[{"name":"idx","doc":null,"default_value":"","external_name":"idx","restriction":""}],"args_string":"(idx)","args_html":"(idx)","location":{"filename":"src/mxnet/gluon/data/dataset.cr","line_number":176,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/data/dataset.cr#L176"},"def":{"name":"unsafe_fetch","args":[{"name":"idx","doc":null,"default_value":"","external_name":"idx","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"data, label = @data.not_nil!, @label.not_nil!\nif transform = @transform\n  transform.call(data[idx], label[idx])\nelse\n  {data[idx], label[idx]}\nend\n"}}],"macros":[],"types":[]},{"html_id":"mxnet/MXNet/Gluon/Data/LazyTransformDataset","path":"MXNet/Gluon/Data/LazyTransformDataset.html","kind":"class","full_name":"MXNet::Gluon::Data::LazyTransformDataset(T, U)","name":"LazyTransformDataset","abstract":false,"superclass":{"html_id":"mxnet/MXNet/Gluon/Data/Dataset","kind":"class","full_name":"MXNet::Gluon::Data::Dataset","name":"Dataset"},"ancestors":[{"html_id":"mxnet/MXNet/Gluon/Data/Dataset","kind":"class","full_name":"MXNet::Gluon::Data::Dataset","name":"Dataset"},{"html_id":"mxnet/Indexable","kind":"module","full_name":"Indexable","name":"Indexable"},{"html_id":"mxnet/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"mxnet/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"},{"html_id":"mxnet/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"mxnet/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/mxnet/gluon/data/dataset.cr","line_number":63,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/data/dataset.cr#L63"}],"repository_name":"mxnet","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"mxnet/MXNet/Gluon/Data","kind":"module","full_name":"MXNet::Gluon::Data","name":"Data"},"doc":"Lazily transformed `Dataset` wrapper for arrays and other\nclasses that implement `Indexable`.\n","summary":"<p>Lazily transformed <code><a href=\"../../../MXNet/Gluon/Data/Dataset.html\">Dataset</a></code> wrapper for arrays and other classes that implement <code>Indexable</code>.</p>","class_methods":[],"constructors":[{"id":"new(dataset:Indexable(T),&proc:T->U)-class-method","html_id":"new(dataset:Indexable(T),&proc:T->U)-class-method","name":"new","doc":"Creates a new instance.\n\n### Parameters\n* *dataset* (`Indexable`)\n  Any indexable object.\n","summary":"<p>Creates a new instance.</p>","abstract":false,"args":[{"name":"dataset","doc":null,"default_value":"","external_name":"dataset","restriction":"Indexable(T)"}],"args_string":"(dataset : Indexable(T), &proc : T -> U)","args_html":"(dataset : Indexable(T), &proc : T -> U)","location":{"filename":"src/mxnet/gluon/data/dataset.cr","line_number":70,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/data/dataset.cr#L70"},"def":{"name":"new","args":[{"name":"dataset","doc":null,"default_value":"","external_name":"dataset","restriction":"Indexable(T)"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":"(T -> U)"},"return_type":"","visibility":"Public","body":"_ = LazyTransformDataset(T, U).allocate\n_.initialize(dataset, &proc) do |_arg0|\n  yield _arg0\nend\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"size-instance-method","html_id":"size-instance-method","name":"size","doc":"Returns the number of elements in this container.","summary":"<p>Returns the number of elements in this container.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/mxnet/gluon/data/dataset.cr","line_number":73,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/data/dataset.cr#L73"},"def":{"name":"size","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@dataset.size"}},{"id":"unsafe_fetch(idx)-instance-method","html_id":"unsafe_fetch(idx)-instance-method","name":"unsafe_fetch","doc":null,"summary":null,"abstract":false,"args":[{"name":"idx","doc":null,"default_value":"","external_name":"idx","restriction":""}],"args_string":"(idx)","args_html":"(idx)","location":{"filename":"src/mxnet/gluon/data/dataset.cr","line_number":77,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/data/dataset.cr#L77"},"def":{"name":"unsafe_fetch","args":[{"name":"idx","doc":null,"default_value":"","external_name":"idx","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@proc.call(@dataset[idx])"}}],"macros":[],"types":[]},{"html_id":"mxnet/MXNet/Gluon/Data/RandomSampler","path":"MXNet/Gluon/Data/RandomSampler.html","kind":"class","full_name":"MXNet::Gluon::Data::RandomSampler","name":"RandomSampler","abstract":false,"superclass":{"html_id":"mxnet/MXNet/Gluon/Data/Sampler","kind":"class","full_name":"MXNet::Gluon::Data::Sampler","name":"Sampler"},"ancestors":[{"html_id":"mxnet/MXNet/Gluon/Data/Sampler","kind":"class","full_name":"MXNet::Gluon::Data::Sampler","name":"Sampler"},{"html_id":"mxnet/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"mxnet/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"mxnet/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/mxnet/gluon/data/sampler.cr","line_number":50,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/data/sampler.cr#L50"}],"repository_name":"mxnet","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"mxnet/MXNet/Gluon/Data","kind":"module","full_name":"MXNet::Gluon::Data","name":"Data"},"doc":"Samples elements from [0, size) randomly without replacement.\n","summary":"<p>Samples elements from [0, size) randomly without replacement.</p>","class_methods":[],"constructors":[{"id":"new(size:Int32)-class-method","html_id":"new(size:Int32)-class-method","name":"new","doc":"Creates a new instance.\n\n### Parameters\n* *size* (`Int32`)\n  Size of the sequence.\n","summary":"<p>Creates a new instance.</p>","abstract":false,"args":[{"name":"size","doc":null,"default_value":"","external_name":"size","restriction":"Int32"}],"args_string":"(size : Int32)","args_html":"(size : Int32)","location":{"filename":"src/mxnet/gluon/data/sampler.cr","line_number":57,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/data/sampler.cr#L57"},"def":{"name":"new","args":[{"name":"size","doc":null,"default_value":"","external_name":"size","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(size)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"each(&)-instance-method","html_id":"each(&)-instance-method","name":"each","doc":"Must yield this collection's elements to the block.","summary":"<p>Must yield this collection's elements to the block.</p>","abstract":false,"args":[],"args_string":"(&)","args_html":"(&)","location":{"filename":"src/mxnet/gluon/data/sampler.cr","line_number":64,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/data/sampler.cr#L64"},"def":{"name":"each","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"@size.times.to_a.shuffle.each do |i|\n  yield i\nend"}},{"id":"each-instance-method","html_id":"each-instance-method","name":"each","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/mxnet/gluon/data/sampler.cr","line_number":70,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/data/sampler.cr#L70"},"def":{"name":"each","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@size.times.to_a.shuffle.each"}},{"id":"size:Int32-instance-method","html_id":"size:Int32-instance-method","name":"size","doc":"Returns the number of elements in the collection.\n\n```\n[1, 2, 3, 4].size # => 4\n```","summary":"<p>Returns the number of elements in the collection.</p>","abstract":false,"args":[],"args_string":" : Int32","args_html":" : Int32","location":{"filename":"src/mxnet/gluon/data/sampler.cr","line_number":60,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/data/sampler.cr#L60"},"def":{"name":"size","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@size"}}],"macros":[],"types":[]},{"html_id":"mxnet/MXNet/Gluon/Data/Sampler","path":"MXNet/Gluon/Data/Sampler.html","kind":"class","full_name":"MXNet::Gluon::Data::Sampler(T)","name":"Sampler","abstract":true,"superclass":{"html_id":"mxnet/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"mxnet/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"mxnet/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"mxnet/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/mxnet/gluon/data/sampler.cr","line_number":11,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/data/sampler.cr#L11"}],"repository_name":"mxnet","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[{"html_id":"mxnet/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"}],"extended_modules":[],"subclasses":[{"html_id":"mxnet/MXNet/Gluon/Data/BatchSampler","kind":"class","full_name":"MXNet::Gluon::Data::BatchSampler(T)","name":"BatchSampler"},{"html_id":"mxnet/MXNet/Gluon/Data/RandomSampler","kind":"class","full_name":"MXNet::Gluon::Data::RandomSampler","name":"RandomSampler"},{"html_id":"mxnet/MXNet/Gluon/Data/SequentialSampler","kind":"class","full_name":"MXNet::Gluon::Data::SequentialSampler","name":"SequentialSampler"}],"including_types":[],"namespace":{"html_id":"mxnet/MXNet/Gluon/Data","kind":"module","full_name":"MXNet::Gluon::Data","name":"Data"},"doc":"Base class for samplers.\n\nAll samplers should subclass `Sampler` and define `#size` and\n`#each` methods.\n","summary":"<p>Base class for samplers.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"each(&block:T->_)-instance-method","html_id":"each(&block:T->_)-instance-method","name":"each","doc":"Must yield this collection's elements to the block.","summary":"<p>Must yield this collection's elements to the block.</p>","abstract":true,"args":[],"args_string":"(&block : T -> _)","args_html":"(&block : T -> _)","location":{"filename":"src/mxnet/gluon/data/sampler.cr","line_number":16,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/data/sampler.cr#L16"},"def":{"name":"each","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(T -> _)"},"return_type":"","visibility":"Public","body":""}},{"id":"each-instance-method","html_id":"each-instance-method","name":"each","doc":null,"summary":null,"abstract":true,"args":[],"args_string":"","args_html":"","location":{"filename":"src/mxnet/gluon/data/sampler.cr","line_number":18,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/data/sampler.cr#L18"},"def":{"name":"each","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}},{"id":"size-instance-method","html_id":"size-instance-method","name":"size","doc":"Returns the number of elements in the collection.\n\n```\n[1, 2, 3, 4].size # => 4\n```","summary":"<p>Returns the number of elements in the collection.</p>","abstract":true,"args":[],"args_string":"","args_html":"","location":{"filename":"src/mxnet/gluon/data/sampler.cr","line_number":14,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/data/sampler.cr#L14"},"def":{"name":"size","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}}],"macros":[],"types":[]},{"html_id":"mxnet/MXNet/Gluon/Data/SequentialSampler","path":"MXNet/Gluon/Data/SequentialSampler.html","kind":"class","full_name":"MXNet::Gluon::Data::SequentialSampler","name":"SequentialSampler","abstract":false,"superclass":{"html_id":"mxnet/MXNet/Gluon/Data/Sampler","kind":"class","full_name":"MXNet::Gluon::Data::Sampler","name":"Sampler"},"ancestors":[{"html_id":"mxnet/MXNet/Gluon/Data/Sampler","kind":"class","full_name":"MXNet::Gluon::Data::Sampler","name":"Sampler"},{"html_id":"mxnet/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"mxnet/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"mxnet/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/mxnet/gluon/data/sampler.cr","line_number":23,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/data/sampler.cr#L23"}],"repository_name":"mxnet","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"mxnet/MXNet/Gluon/Data","kind":"module","full_name":"MXNet::Gluon::Data","name":"Data"},"doc":"Samples elements from [0, size) sequentially.\n","summary":"<p>Samples elements from [0, size) sequentially.</p>","class_methods":[],"constructors":[{"id":"new(size:Int32)-class-method","html_id":"new(size:Int32)-class-method","name":"new","doc":"Creates a new instance.\n\n### Parameters\n* *size* (`Int32`)\n  Size of the sequence.\n","summary":"<p>Creates a new instance.</p>","abstract":false,"args":[{"name":"size","doc":null,"default_value":"","external_name":"size","restriction":"Int32"}],"args_string":"(size : Int32)","args_html":"(size : Int32)","location":{"filename":"src/mxnet/gluon/data/sampler.cr","line_number":30,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/data/sampler.cr#L30"},"def":{"name":"new","args":[{"name":"size","doc":null,"default_value":"","external_name":"size","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(size)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"each(&)-instance-method","html_id":"each(&)-instance-method","name":"each","doc":"Must yield this collection's elements to the block.","summary":"<p>Must yield this collection's elements to the block.</p>","abstract":false,"args":[],"args_string":"(&)","args_html":"(&)","location":{"filename":"src/mxnet/gluon/data/sampler.cr","line_number":37,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/data/sampler.cr#L37"},"def":{"name":"each","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"@size.times do |i|\n  yield i\nend"}},{"id":"each-instance-method","html_id":"each-instance-method","name":"each","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/mxnet/gluon/data/sampler.cr","line_number":43,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/data/sampler.cr#L43"},"def":{"name":"each","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@size.times"}},{"id":"size:Int32-instance-method","html_id":"size:Int32-instance-method","name":"size","doc":"Returns the number of elements in the collection.\n\n```\n[1, 2, 3, 4].size # => 4\n```","summary":"<p>Returns the number of elements in the collection.</p>","abstract":false,"args":[],"args_string":" : Int32","args_html":" : Int32","location":{"filename":"src/mxnet/gluon/data/sampler.cr","line_number":33,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/data/sampler.cr#L33"},"def":{"name":"size","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@size"}}],"macros":[],"types":[]},{"html_id":"mxnet/MXNet/Gluon/Data/SimpleDataset","path":"MXNet/Gluon/Data/SimpleDataset.html","kind":"class","full_name":"MXNet::Gluon::Data::SimpleDataset(T)","name":"SimpleDataset","abstract":false,"superclass":{"html_id":"mxnet/MXNet/Gluon/Data/Dataset","kind":"class","full_name":"MXNet::Gluon::Data::Dataset","name":"Dataset"},"ancestors":[{"html_id":"mxnet/MXNet/Gluon/Data/Dataset","kind":"class","full_name":"MXNet::Gluon::Data::Dataset","name":"Dataset"},{"html_id":"mxnet/Indexable","kind":"module","full_name":"Indexable","name":"Indexable"},{"html_id":"mxnet/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"mxnet/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"},{"html_id":"mxnet/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"mxnet/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/mxnet/gluon/data/dataset.cr","line_number":41,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/data/dataset.cr#L41"}],"repository_name":"mxnet","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"mxnet/MXNet/Gluon/Data","kind":"module","full_name":"MXNet::Gluon::Data","name":"Data"},"doc":"Simple `Dataset` wrapper for arrays and other classes that\nimplement `Indexable`.\n","summary":"<p>Simple <code><a href=\"../../../MXNet/Gluon/Data/Dataset.html\">Dataset</a></code> wrapper for arrays and other classes that implement <code>Indexable</code>.</p>","class_methods":[],"constructors":[{"id":"new(dataset:Indexable(T))-class-method","html_id":"new(dataset:Indexable(T))-class-method","name":"new","doc":"Creates a new instance.\n\n### Parameters\n* *dataset* (`Indexable`)\n  Any indexable object.\n","summary":"<p>Creates a new instance.</p>","abstract":false,"args":[{"name":"dataset","doc":null,"default_value":"","external_name":"dataset","restriction":"Indexable(T)"}],"args_string":"(dataset : Indexable(T))","args_html":"(dataset : Indexable(T))","location":{"filename":"src/mxnet/gluon/data/dataset.cr","line_number":48,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/data/dataset.cr#L48"},"def":{"name":"new","args":[{"name":"dataset","doc":null,"default_value":"","external_name":"dataset","restriction":"Indexable(T)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = SimpleDataset(T).allocate\n_.initialize(dataset)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"size-instance-method","html_id":"size-instance-method","name":"size","doc":"Returns the number of elements in this container.","summary":"<p>Returns the number of elements in this container.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/mxnet/gluon/data/dataset.cr","line_number":51,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/data/dataset.cr#L51"},"def":{"name":"size","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@dataset.size"}},{"id":"unsafe_fetch(idx)-instance-method","html_id":"unsafe_fetch(idx)-instance-method","name":"unsafe_fetch","doc":null,"summary":null,"abstract":false,"args":[{"name":"idx","doc":null,"default_value":"","external_name":"idx","restriction":""}],"args_string":"(idx)","args_html":"(idx)","location":{"filename":"src/mxnet/gluon/data/dataset.cr","line_number":55,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/data/dataset.cr#L55"},"def":{"name":"unsafe_fetch","args":[{"name":"idx","doc":null,"default_value":"","external_name":"idx","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@dataset[idx]"}}],"macros":[],"types":[]},{"html_id":"mxnet/MXNet/Gluon/Data/Vision","path":"MXNet/Gluon/Data/Vision.html","kind":"module","full_name":"MXNet::Gluon::Data::Vision","name":"Vision","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/mxnet/gluon/data/vision/mnist.cr","line_number":7,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/data/vision/mnist.cr#L7"}],"repository_name":"mxnet","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"mxnet/MXNet/Gluon/Data","kind":"module","full_name":"MXNet::Gluon::Data","name":"Data"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"mxnet/MXNet/Gluon/Data/Vision/MNIST","path":"MXNet/Gluon/Data/Vision/MNIST.html","kind":"class","full_name":"MXNet::Gluon::Data::Vision::MNIST(T)","name":"MNIST","abstract":false,"superclass":{"html_id":"mxnet/MXNet/Gluon/Data/DownloadedDataset","kind":"class","full_name":"MXNet::Gluon::Data::DownloadedDataset","name":"DownloadedDataset"},"ancestors":[{"html_id":"mxnet/MXNet/Gluon/Data/DownloadedDataset","kind":"class","full_name":"MXNet::Gluon::Data::DownloadedDataset","name":"DownloadedDataset"},{"html_id":"mxnet/MXNet/Gluon/Data/Dataset","kind":"class","full_name":"MXNet::Gluon::Data::Dataset","name":"Dataset"},{"html_id":"mxnet/Indexable","kind":"module","full_name":"Indexable","name":"Indexable"},{"html_id":"mxnet/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"mxnet/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"},{"html_id":"mxnet/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"mxnet/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/mxnet/gluon/data/vision/mnist.cr","line_number":27,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/data/vision/mnist.cr#L27"}],"repository_name":"mxnet","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"mxnet/MXNet/Gluon/Data/Vision","kind":"module","full_name":"MXNet::Gluon::Data::Vision","name":"Vision"},"doc":"MNIST handwritten digits dataset.\n\nEach sample is an image with shape `[28, 28]` (an\n`MXNet::NDArray`) paired with its label (an `Int32`).\n\nWithout any transformation (return type is `Tuple(MXNet::NDArray, Int32)`):\n\n    mnist = MXNet::Gluon::Data::Vision::MNIST.new\n\nWith a transformer (here, return type is `Tuple(MXNet::NDArray, Float32)`):\n\n    def transform(data, label)\n      {data / 255, label.to_f32}\n    end\n\n    mnist = MXNet::Gluon::Data::Vision::MNIST.new(transform: ->transform(MXNet::NDArray, Int32))\n\nSee: http://yann.lecun.com/exdb/mnist\n","summary":"<p>MNIST handwritten digits dataset.</p>","class_methods":[],"constructors":[{"id":"new(transform:Proc(MXNet::NDArray,Int32,T)?,root=File.join(&quot;~/&quot;,&quot;.mxnet&quot;,&quot;datasets&quot;,&quot;mnist&quot;),train=true)-class-method","html_id":"new(transform:Proc(MXNet::NDArray,Int32,T)?,root=File.join(&quot;~/&quot;,&quot;.mxnet&quot;,&quot;datasets&quot;,&quot;mnist&quot;),train=true)-class-method","name":"new","doc":"Creates a new instance.\n\nTransforms each sample with the supplied transformer.\n\n### Parameters\n* *transform* (`Proc`, required)\n  Transformation to apply to each sample.\n* *root* (`String`, optional)\n  Directory in which to cache downloaded files.\n  Automatically created if it does not already exist.\n* *train* (`Bool`, optional)\n  Whether to load the training or testing data.\n","summary":"<p>Creates a new instance.</p>","abstract":false,"args":[{"name":"transform","doc":null,"default_value":"","external_name":"transform","restriction":"Proc(MXNet::NDArray, Int32, T) | ::Nil"},{"name":"root","doc":null,"default_value":"File.join(\"~/\", \".mxnet\", \"datasets\", \"mnist\")","external_name":"root","restriction":""},{"name":"train","doc":null,"default_value":"true","external_name":"train","restriction":""}],"args_string":"(transform : Proc(MXNet::NDArray, Int32, T)?, root = <span class=\"t\">File</span>.join(<span class=\"s\">&quot;~/&quot;</span>, <span class=\"s\">&quot;.mxnet&quot;</span>, <span class=\"s\">&quot;datasets&quot;</span>, <span class=\"s\">&quot;mnist&quot;</span>), train = <span class=\"n\">true</span>)","args_html":"(transform : Proc(<a href=\"../../../../MXNet/NDArray.html\">MXNet::NDArray</a>, Int32, T)?, root = <span class=\"t\">File</span>.join(<span class=\"s\">&quot;~/&quot;</span>, <span class=\"s\">&quot;.mxnet&quot;</span>, <span class=\"s\">&quot;datasets&quot;</span>, <span class=\"s\">&quot;mnist&quot;</span>), train = <span class=\"n\">true</span>)","location":{"filename":"src/mxnet/gluon/data/vision/mnist.cr","line_number":59,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/data/vision/mnist.cr#L59"},"def":{"name":"new","args":[{"name":"transform","doc":null,"default_value":"","external_name":"transform","restriction":"Proc(MXNet::NDArray, Int32, T) | ::Nil"},{"name":"root","doc":null,"default_value":"File.join(\"~/\", \".mxnet\", \"datasets\", \"mnist\")","external_name":"root","restriction":""},{"name":"train","doc":null,"default_value":"true","external_name":"train","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = MNIST(T).allocate\n_.initialize(transform, root, train)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(root=File.join(&quot;~/&quot;,&quot;.mxnet&quot;,&quot;datasets&quot;,&quot;mnist&quot;),train=true)-class-method","html_id":"new(root=File.join(&quot;~/&quot;,&quot;.mxnet&quot;,&quot;datasets&quot;,&quot;mnist&quot;),train=true)-class-method","name":"new","doc":"Creates a new instance.\n\n### Parameters\n* *root* (`String`, optional)\n  Directory in which to cache downloaded files.\n  Automatically created if it does not already exist.\n* *train* (`Bool`, optional)\n  Whether to load the training or testing data.\n","summary":"<p>Creates a new instance.</p>","abstract":false,"args":[{"name":"root","doc":null,"default_value":"File.join(\"~/\", \".mxnet\", \"datasets\", \"mnist\")","external_name":"root","restriction":""},{"name":"train","doc":null,"default_value":"true","external_name":"train","restriction":""}],"args_string":"(root = <span class=\"t\">File</span>.join(<span class=\"s\">&quot;~/&quot;</span>, <span class=\"s\">&quot;.mxnet&quot;</span>, <span class=\"s\">&quot;datasets&quot;</span>, <span class=\"s\">&quot;mnist&quot;</span>), train = <span class=\"n\">true</span>)","args_html":"(root = <span class=\"t\">File</span>.join(<span class=\"s\">&quot;~/&quot;</span>, <span class=\"s\">&quot;.mxnet&quot;</span>, <span class=\"s\">&quot;datasets&quot;</span>, <span class=\"s\">&quot;mnist&quot;</span>), train = <span class=\"n\">true</span>)","location":{"filename":"src/mxnet/gluon/data/vision/mnist.cr","line_number":42,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/data/vision/mnist.cr#L42"},"def":{"name":"new","args":[{"name":"root","doc":null,"default_value":"File.join(\"~/\", \".mxnet\", \"datasets\", \"mnist\")","external_name":"root","restriction":""},{"name":"train","doc":null,"default_value":"true","external_name":"train","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MNIST(Tuple(MXNet::NDArray, Int32)).new(transform: nil, root: root, train: train)"}}],"instance_methods":[],"macros":[],"types":[]}]}]},{"html_id":"mxnet/MXNet/Gluon/DeferredInitializationError","path":"MXNet/Gluon/DeferredInitializationError.html","kind":"class","full_name":"MXNet::Gluon::DeferredInitializationError","name":"DeferredInitializationError","abstract":false,"superclass":{"html_id":"mxnet/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"mxnet/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"mxnet/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"mxnet/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/mxnet/gluon/parameter.cr","line_number":7,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/parameter.cr#L7"}],"repository_name":"mxnet","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"mxnet/MXNet/Gluon","kind":"module","full_name":"MXNet::Gluon","name":"Gluon"},"doc":"Error for unfinished deferred initializations.\n","summary":"<p>Error for unfinished deferred initializations.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"mxnet/MXNet/Gluon/HybridBlock","path":"MXNet/Gluon/HybridBlock.html","kind":"class","full_name":"MXNet::Gluon::HybridBlock","name":"HybridBlock","abstract":false,"superclass":{"html_id":"mxnet/MXNet/Gluon/Block","kind":"class","full_name":"MXNet::Gluon::Block","name":"Block"},"ancestors":[{"html_id":"mxnet/MXNet/Gluon/CachedGraph","kind":"module","full_name":"MXNet::Gluon::CachedGraph","name":"CachedGraph"},{"html_id":"mxnet/MXNet/Gluon/Block","kind":"class","full_name":"MXNet::Gluon::Block","name":"Block"},{"html_id":"mxnet/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"mxnet/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/mxnet/gluon/block.cr","line_number":428,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/block.cr#L428"}],"repository_name":"mxnet","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[{"html_id":"mxnet/MXNet/Gluon/CachedGraph","kind":"module","full_name":"MXNet::Gluon::CachedGraph","name":"CachedGraph"}],"extended_modules":[],"subclasses":[{"html_id":"mxnet/MXNet/Gluon/Loss","kind":"class","full_name":"MXNet::Gluon::Loss","name":"Loss"},{"html_id":"mxnet/MXNet/Gluon/NN/Activation","kind":"class","full_name":"MXNet::Gluon::NN::Activation","name":"Activation"},{"html_id":"mxnet/MXNet/Gluon/NN/Dense","kind":"class","full_name":"MXNet::Gluon::NN::Dense","name":"Dense"},{"html_id":"mxnet/MXNet/Gluon/NN/Flatten","kind":"class","full_name":"MXNet::Gluon::NN::Flatten","name":"Flatten"},{"html_id":"mxnet/MXNet/Gluon/NN/HybridSequential","kind":"class","full_name":"MXNet::Gluon::NN::HybridSequential","name":"HybridSequential"},{"html_id":"mxnet/MXNet/Gluon/NN/Internal/Conv","kind":"class","full_name":"MXNet::Gluon::NN::Internal::Conv","name":"Conv"},{"html_id":"mxnet/MXNet/Gluon/NN/Internal/Pooling","kind":"class","full_name":"MXNet::Gluon::NN::Internal::Pooling","name":"Pooling"}],"including_types":[],"namespace":{"html_id":"mxnet/MXNet/Gluon","kind":"module","full_name":"MXNet::Gluon","name":"Gluon"},"doc":"`HybridBlock` supports forwarding with both `Symbol` and\n`NDArray`.\n","summary":"<p><code><a href=\"../../MXNet/Gluon/HybridBlock.html\">HybridBlock</a></code> supports forwarding with both <code><a href=\"../../MXNet/Symbol.html\">Symbol</a></code> and <code><a href=\"../../MXNet/NDArray.html\">NDArray</a></code>.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"export(filename,epoch=0)-instance-method","html_id":"export(filename,epoch=0)-instance-method","name":"export","doc":"Exports model and parameters in a format that can be loaded by\n`SymbolBlock.import`.\n\n### Parameters\n* *filename* (`String`)\n  Path and base filename to which to save model and\n  parameters. Two files, \"[filename]-symbol.json\" and\n  \"[filename]-NNNN.params\" will be created, where `NNNN` is\n  the 4 digit epoch number.\n* *epoch* (`Integer`, default = `0`)\n  Epoch number of saved model.\n","summary":"<p>Exports model and parameters in a format that can be loaded by <code><a href=\"../../MXNet/Gluon/SymbolBlock.html#import(filename,inputs,epoch=0,ctx=MXNet.cpu,allow_missing=false,ignore_extra=false)-class-method\">SymbolBlock.import</a></code>.</p>","abstract":false,"args":[{"name":"filename","doc":null,"default_value":"","external_name":"filename","restriction":""},{"name":"epoch","doc":null,"default_value":"0","external_name":"epoch","restriction":""}],"args_string":"(filename, epoch = <span class=\"n\">0</span>)","args_html":"(filename, epoch = <span class=\"n\">0</span>)","location":{"filename":"src/mxnet/gluon/block.cr","line_number":523,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/block.cr#L523"},"def":{"name":"export","args":[{"name":"filename","doc":null,"default_value":"","external_name":"filename","restriction":""},{"name":"epoch","doc":null,"default_value":"0","external_name":"epoch","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if (graph = @graph)\nelse\n  raise(Exception.new(\"Please call #hybridize and then run #forward at least once before calling #export.\"))\nend\n_, outputs = graph\noutput = MXNet::Symbol.group(outputs)\nargs = {} of String => NDArray\narg_names = output.list_arguments\naux_names = output.list_auxiliary_states\ncollect_params.each do |name, param|\n  if arg_names.includes?(name)\n    args[\"arg:#{name}\"] = param._reduce\n  else\n    if aux_names.includes?(name)\n      args[\"aux:#{name}\"] = param._reduce\n    end\n  end\nend\nMXNet::Symbol.save(\"%s-symbol.json\" % filename, output)\nMXNet::NDArray.save(\"%s-%04d.params\" % [filename, epoch], args)\n"}},{"id":"forward(inputs:Array(T)):Array(T)forallT-instance-method","html_id":"forward(inputs:Array(T)):Array(T)forallT-instance-method","name":"forward","doc":"Defines the forward computation.\n\n### Parameters\n* *inputs* (`Array(Symbol)` or `Array(NDArray)`)\n  Input tensors.\n","summary":"<p>Defines the forward computation.</p>","abstract":false,"args":[{"name":"inputs","doc":null,"default_value":"","external_name":"inputs","restriction":"Array(T)"}],"args_string":"(inputs : Array(T)) : Array(T) forall T","args_html":"(inputs : Array(T)) : Array(T) forall T","location":{"filename":"src/mxnet/gluon/block.cr","line_number":464,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/block.cr#L464"},"def":{"name":"forward","args":[{"name":"inputs","doc":null,"default_value":"","external_name":"inputs","restriction":"Array(T)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(T)","visibility":"Public","body":"case inputs\nwhen Array(MXNet::Symbol)\n  params = @reg_parameters.reduce({} of String => MXNet::Symbol) do |acc, __arg6|\n    i = __arg6[0]\n    j = __arg6[1]\n    acc[i] = j.var\n    acc\n  end\n  return hybrid_forward(inputs, params)\nwhen Array(MXNet::NDArray)\n  if @active\n    return call_cached(inputs)\n  end\n  MXNet::Context.with(ctx = inputs.first.context) do\n    loop do\n      begin\n        params = @reg_parameters.reduce({} of String => MXNet::NDArray) do |acc, __arg7|\n          i = __arg7[0]\n          j = __arg7[1]\n          acc[i] = j.data(ctx: ctx)\n          acc\n        end\n        return hybrid_forward(inputs, params)\n      rescue MXNet::Gluon::DeferredInitializationError\n        infer_shape(inputs)\n        infer_dtype(inputs)\n        @params.each do |_, param|\n          param._finish_deferred_init\n        end\n      end\n    end\n  end\nelse\n  raise(ArgumentError.new(\"only Symbol or NDArray are supported, not #{T}\"))\nend"}},{"id":"hybrid_forward(inputs:Array(T),params:Hash(String,T)={}ofString=>T):Array(T)forallT-instance-method","html_id":"hybrid_forward(inputs:Array(T),params:Hash(String,T)={}ofString=>T):Array(T)forallT-instance-method","name":"hybrid_forward","doc":"Override to construct symbolic graph for this `HybridBlock`.\n\n### Parameters\n* *inputs* (`Array(Symbol)` or `Array(NDArray)`)\n  Input tensors.\n","summary":"<p>Override to construct symbolic graph for this <code><a href=\"../../MXNet/Gluon/HybridBlock.html\">HybridBlock</a></code>.</p>","abstract":false,"args":[{"name":"inputs","doc":null,"default_value":"","external_name":"inputs","restriction":"Array(T)"},{"name":"params","doc":null,"default_value":"{} of String => T","external_name":"params","restriction":"Hash(String, T)"}],"args_string":"(inputs : Array(T), params : Hash(String, T) = {} <span class=\"k\">of</span> <span class=\"t\">String</span> => <span class=\"t\">T</span>) : Array(T) forall T","args_html":"(inputs : Array(T), params : Hash(String, T) = {} <span class=\"k\">of</span> <span class=\"t\">String</span> => <span class=\"t\">T</span>) : Array(T) forall T","location":{"filename":"src/mxnet/gluon/block.cr","line_number":505,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/block.cr#L505"},"def":{"name":"hybrid_forward","args":[{"name":"inputs","doc":null,"default_value":"","external_name":"inputs","restriction":"Array(T)"},{"name":"params","doc":null,"default_value":"{} of String => T","external_name":"params","restriction":"Hash(String, T)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(T)","visibility":"Public","body":"raise(NotImplementedError.new(\"#hybrid_forward must be implemented in a subclass\"))"}},{"id":"hybridize(active=true,flags={}ofString=>String)-instance-method","html_id":"hybridize(active=true,flags={}ofString=>String)-instance-method","name":"hybridize","doc":"Activates or deactivates `HybridBlock` children\nrecursively.\n\n### Parameters\n* *active* (`Bool`, default = `true`)\n  Whether to turn hybridization on or off.\n","summary":"<p>Activates or deactivates <code><a href=\"../../MXNet/Gluon/HybridBlock.html\">HybridBlock</a></code> children recursively.</p>","abstract":false,"args":[{"name":"active","doc":null,"default_value":"true","external_name":"active","restriction":""},{"name":"flags","doc":null,"default_value":"{} of String => String","external_name":"flags","restriction":""}],"args_string":"(active = <span class=\"n\">true</span>, flags = {} <span class=\"k\">of</span> <span class=\"t\">String</span> => <span class=\"t\">String</span>)","args_html":"(active = <span class=\"n\">true</span>, flags = {} <span class=\"k\">of</span> <span class=\"t\">String</span> => <span class=\"t\">String</span>)","location":{"filename":"src/mxnet/gluon/block.cr","line_number":451,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/block.cr#L451"},"def":{"name":"hybridize","args":[{"name":"active","doc":null,"default_value":"true","external_name":"active","restriction":""},{"name":"flags","doc":null,"default_value":"{} of String => String","external_name":"flags","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@active = active\n@flags = flags\nclear_cache\nsuper(active)\n"}},{"id":"register_child(block,name=nil)-instance-method","html_id":"register_child(block,name=nil)-instance-method","name":"register_child","doc":"Registers block as a child of self. Blocks assigned as\nattributes will be registered automatically.\n","summary":"<p>Registers block as a child of self.</p>","abstract":false,"args":[{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},{"name":"name","doc":null,"default_value":"nil","external_name":"name","restriction":""}],"args_string":"(block, name = <span class=\"n\">nil</span>)","args_html":"(block, name = <span class=\"n\">nil</span>)","location":{"filename":"src/mxnet/gluon/block.cr","line_number":433,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/block.cr#L433"},"def":{"name":"register_child","args":[{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},{"name":"name","doc":null,"default_value":"nil","external_name":"name","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if block.is_a?(MXNet::Gluon::HybridBlock)\nelse\n  raise(Exception.new(\"Children of HybridBlock must also be HybridBlocks, but #{block} has type #{block.class}. If you are using Sequential, please try HybridSequential instead.\"))\nend\nsuper(block, name)\n"}}],"macros":[],"types":[]},{"html_id":"mxnet/MXNet/Gluon/Loss","path":"MXNet/Gluon/Loss.html","kind":"class","full_name":"MXNet::Gluon::Loss","name":"Loss","abstract":false,"superclass":{"html_id":"mxnet/MXNet/Gluon/HybridBlock","kind":"class","full_name":"MXNet::Gluon::HybridBlock","name":"HybridBlock"},"ancestors":[{"html_id":"mxnet/MXNet/Gluon/HybridBlock","kind":"class","full_name":"MXNet::Gluon::HybridBlock","name":"HybridBlock"},{"html_id":"mxnet/MXNet/Gluon/CachedGraph","kind":"module","full_name":"MXNet::Gluon::CachedGraph","name":"CachedGraph"},{"html_id":"mxnet/MXNet/Gluon/Block","kind":"class","full_name":"MXNet::Gluon::Block","name":"Block"},{"html_id":"mxnet/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"mxnet/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/mxnet/gluon/loss.cr","line_number":7,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/loss.cr#L7"}],"repository_name":"mxnet","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[{"html_id":"mxnet/MXNet/Gluon/Loss/L1Loss","kind":"class","full_name":"MXNet::Gluon::Loss::L1Loss","name":"L1Loss"},{"html_id":"mxnet/MXNet/Gluon/Loss/L2Loss","kind":"class","full_name":"MXNet::Gluon::Loss::L2Loss","name":"L2Loss"},{"html_id":"mxnet/MXNet/Gluon/Loss/SoftmaxCrossEntropyLoss","kind":"class","full_name":"MXNet::Gluon::Loss::SoftmaxCrossEntropyLoss","name":"SoftmaxCrossEntropyLoss"}],"including_types":[],"namespace":{"html_id":"mxnet/MXNet/Gluon","kind":"module","full_name":"MXNet::Gluon","name":"Gluon"},"doc":"Base class for loss.\n","summary":"<p>Base class for loss.</p>","class_methods":[],"constructors":[{"id":"new(weight:Float64?,batch_axis:Int32,**kwargs)-class-method","html_id":"new(weight:Float64?,batch_axis:Int32,**kwargs)-class-method","name":"new","doc":"Creates a new instance.\n\n### Parameters\n* *weight* (`Float` or `nil`)\n  Global scalar weight for loss.\n* *batch_axis* (`Int`)\n  The axis that represents the mini-batch.\n","summary":"<p>Creates a new instance.</p>","abstract":false,"args":[{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"Float64 | ::Nil"},{"name":"batch_axis","doc":null,"default_value":"","external_name":"batch_axis","restriction":"Int32"}],"args_string":"(weight : Float64?, batch_axis : Int32, **kwargs)","args_html":"(weight : Float64?, batch_axis : Int32, **kwargs)","location":{"filename":"src/mxnet/gluon/loss.cr","line_number":16,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/loss.cr#L16"},"def":{"name":"new","args":[{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"Float64 | ::Nil"},{"name":"batch_axis","doc":null,"default_value":"","external_name":"batch_axis","restriction":"Int32"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(weight, batch_axis, **kwargs)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[],"macros":[],"types":[{"html_id":"mxnet/MXNet/Gluon/Loss/L1Loss","path":"MXNet/Gluon/Loss/L1Loss.html","kind":"class","full_name":"MXNet::Gluon::Loss::L1Loss","name":"L1Loss","abstract":false,"superclass":{"html_id":"mxnet/MXNet/Gluon/Loss","kind":"class","full_name":"MXNet::Gluon::Loss","name":"Loss"},"ancestors":[{"html_id":"mxnet/MXNet/Gluon/Loss","kind":"class","full_name":"MXNet::Gluon::Loss","name":"Loss"},{"html_id":"mxnet/MXNet/Gluon/HybridBlock","kind":"class","full_name":"MXNet::Gluon::HybridBlock","name":"HybridBlock"},{"html_id":"mxnet/MXNet/Gluon/CachedGraph","kind":"module","full_name":"MXNet::Gluon::CachedGraph","name":"CachedGraph"},{"html_id":"mxnet/MXNet/Gluon/Block","kind":"class","full_name":"MXNet::Gluon::Block","name":"Block"},{"html_id":"mxnet/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"mxnet/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/mxnet/gluon/loss.cr","line_number":25,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/loss.cr#L25"}],"repository_name":"mxnet","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"mxnet/MXNet/Gluon/Loss","kind":"class","full_name":"MXNet::Gluon::Loss","name":"Loss"},"doc":"Calculates the mean absolute error between prediction and label.\n\nInputs \"prediction\" and \"label\" can have arbitrary shape as long\nas they have the same number of elements.\n","summary":"<p>Calculates the mean absolute error between prediction and label.</p>","class_methods":[],"constructors":[{"id":"new(weight=nil,batch_axis=0,**kwargs)-class-method","html_id":"new(weight=nil,batch_axis=0,**kwargs)-class-method","name":"new","doc":"Creates a new instance.\n\n### Parameters\n* *weight* (`Float` or `nil`, default = `nil`)\n  Global scalar weight for loss.\n* *batch_axis* (`Int`, default 0)\n  The axis that represents the mini-batch.\n","summary":"<p>Creates a new instance.</p>","abstract":false,"args":[{"name":"weight","doc":null,"default_value":"nil","external_name":"weight","restriction":""},{"name":"batch_axis","doc":null,"default_value":"0","external_name":"batch_axis","restriction":""}],"args_string":"(weight = <span class=\"n\">nil</span>, batch_axis = <span class=\"n\">0</span>, **kwargs)","args_html":"(weight = <span class=\"n\">nil</span>, batch_axis = <span class=\"n\">0</span>, **kwargs)","location":{"filename":"src/mxnet/gluon/loss.cr","line_number":34,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/loss.cr#L34"},"def":{"name":"new","args":[{"name":"weight","doc":null,"default_value":"nil","external_name":"weight","restriction":""},{"name":"batch_axis","doc":null,"default_value":"0","external_name":"batch_axis","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(weight, batch_axis, **kwargs)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[],"macros":[],"types":[]},{"html_id":"mxnet/MXNet/Gluon/Loss/L2Loss","path":"MXNet/Gluon/Loss/L2Loss.html","kind":"class","full_name":"MXNet::Gluon::Loss::L2Loss","name":"L2Loss","abstract":false,"superclass":{"html_id":"mxnet/MXNet/Gluon/Loss","kind":"class","full_name":"MXNet::Gluon::Loss","name":"Loss"},"ancestors":[{"html_id":"mxnet/MXNet/Gluon/Loss","kind":"class","full_name":"MXNet::Gluon::Loss","name":"Loss"},{"html_id":"mxnet/MXNet/Gluon/HybridBlock","kind":"class","full_name":"MXNet::Gluon::HybridBlock","name":"HybridBlock"},{"html_id":"mxnet/MXNet/Gluon/CachedGraph","kind":"module","full_name":"MXNet::Gluon::CachedGraph","name":"CachedGraph"},{"html_id":"mxnet/MXNet/Gluon/Block","kind":"class","full_name":"MXNet::Gluon::Block","name":"Block"},{"html_id":"mxnet/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"mxnet/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/mxnet/gluon/loss.cr","line_number":54,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/loss.cr#L54"}],"repository_name":"mxnet","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"mxnet/MXNet/Gluon/Loss","kind":"class","full_name":"MXNet::Gluon::Loss","name":"Loss"},"doc":"Calculates the mean squared error between prediction and label.\n\nInputs \"prediction\" and \"label\" can have arbitrary shape as long\nas they have the same number of elements.\n","summary":"<p>Calculates the mean squared error between prediction and label.</p>","class_methods":[],"constructors":[{"id":"new(weight=1.0,batch_axis=0,**kwargs)-class-method","html_id":"new(weight=1.0,batch_axis=0,**kwargs)-class-method","name":"new","doc":"Creates a new instance.\n\n### Parameters\n* *weight* (`Float` or `nil`, default = 1.0)\n  Global scalar weight for loss.\n* *batch_axis* (`Int`, default 0)\n  The axis that represents the mini-batch.\n","summary":"<p>Creates a new instance.</p>","abstract":false,"args":[{"name":"weight","doc":null,"default_value":"1.0","external_name":"weight","restriction":""},{"name":"batch_axis","doc":null,"default_value":"0","external_name":"batch_axis","restriction":""}],"args_string":"(weight = <span class=\"n\">1.0</span>, batch_axis = <span class=\"n\">0</span>, **kwargs)","args_html":"(weight = <span class=\"n\">1.0</span>, batch_axis = <span class=\"n\">0</span>, **kwargs)","location":{"filename":"src/mxnet/gluon/loss.cr","line_number":63,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/loss.cr#L63"},"def":{"name":"new","args":[{"name":"weight","doc":null,"default_value":"1.0","external_name":"weight","restriction":""},{"name":"batch_axis","doc":null,"default_value":"0","external_name":"batch_axis","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(weight, batch_axis, **kwargs)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[],"macros":[],"types":[]},{"html_id":"mxnet/MXNet/Gluon/Loss/SoftmaxCrossEntropyLoss","path":"MXNet/Gluon/Loss/SoftmaxCrossEntropyLoss.html","kind":"class","full_name":"MXNet::Gluon::Loss::SoftmaxCrossEntropyLoss","name":"SoftmaxCrossEntropyLoss","abstract":false,"superclass":{"html_id":"mxnet/MXNet/Gluon/Loss","kind":"class","full_name":"MXNet::Gluon::Loss","name":"Loss"},"ancestors":[{"html_id":"mxnet/MXNet/Gluon/Loss","kind":"class","full_name":"MXNet::Gluon::Loss","name":"Loss"},{"html_id":"mxnet/MXNet/Gluon/HybridBlock","kind":"class","full_name":"MXNet::Gluon::HybridBlock","name":"HybridBlock"},{"html_id":"mxnet/MXNet/Gluon/CachedGraph","kind":"module","full_name":"MXNet::Gluon::CachedGraph","name":"CachedGraph"},{"html_id":"mxnet/MXNet/Gluon/Block","kind":"class","full_name":"MXNet::Gluon::Block","name":"Block"},{"html_id":"mxnet/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"mxnet/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/mxnet/gluon/loss.cr","line_number":90,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/loss.cr#L90"}],"repository_name":"mxnet","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"mxnet/MXNet/Gluon/Loss","kind":"class","full_name":"MXNet::Gluon::Loss","name":"Loss"},"doc":"Computes the softmax cross-entropy loss.\n\nIf *sparse_label* is `true` (default), labels should contain\ninteger category indicators. The labels' shape should be the\npredictions' shape with the *axis* dimension removed --\ni.e. for predictions with shape `[1, 2, 3, 4]` and `axis: 2`,\nlabels' shape should be `[1, 2, 4]`.\n\nIf *sparse_label* is `false`, labels should contain\nprobability distributions and labels' shape should be the same\nas predictions' shape.\n","summary":"<p>Computes the softmax cross-entropy loss.</p>","class_methods":[],"constructors":[{"id":"new(axis=-1,sparse_label=true,from_logits=false,weight=nil,batch_axis=0,**kwargs)-class-method","html_id":"new(axis=-1,sparse_label=true,from_logits=false,weight=nil,batch_axis=0,**kwargs)-class-method","name":"new","doc":"Creates a new instance.\n\n### Parameters\n* *axis* (`Int`, default = -1)\n  The axis to sum over when computing softmax and entropy.\n* *sparse_label* (`Bool`, default = `true`)\n  Whether label is an integer array instead of probability\n  distribution.\n* *from_logits* (`Bool`, default = `false`)\n  Whether prediction is a log probability (usually from\n  `#log_softmax`) instead of unnormalized numbers.\n* *weight* (`Float` or `nil`, default = `nil`)\n  Global scalar weight for loss.\n* *batch_axis* (`Int`, default 0)\n  The axis that represents the mini-batch.\n","summary":"<p>Creates a new instance.</p>","abstract":false,"args":[{"name":"axis","doc":null,"default_value":"-1","external_name":"axis","restriction":""},{"name":"sparse_label","doc":null,"default_value":"true","external_name":"sparse_label","restriction":""},{"name":"from_logits","doc":null,"default_value":"false","external_name":"from_logits","restriction":""},{"name":"weight","doc":null,"default_value":"nil","external_name":"weight","restriction":""},{"name":"batch_axis","doc":null,"default_value":"0","external_name":"batch_axis","restriction":""}],"args_string":"(axis = <span class=\"n\">-1</span>, sparse_label = <span class=\"n\">true</span>, from_logits = <span class=\"n\">false</span>, weight = <span class=\"n\">nil</span>, batch_axis = <span class=\"n\">0</span>, **kwargs)","args_html":"(axis = <span class=\"n\">-1</span>, sparse_label = <span class=\"n\">true</span>, from_logits = <span class=\"n\">false</span>, weight = <span class=\"n\">nil</span>, batch_axis = <span class=\"n\">0</span>, **kwargs)","location":{"filename":"src/mxnet/gluon/loss.cr","line_number":107,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/loss.cr#L107"},"def":{"name":"new","args":[{"name":"axis","doc":null,"default_value":"-1","external_name":"axis","restriction":""},{"name":"sparse_label","doc":null,"default_value":"true","external_name":"sparse_label","restriction":""},{"name":"from_logits","doc":null,"default_value":"false","external_name":"from_logits","restriction":""},{"name":"weight","doc":null,"default_value":"nil","external_name":"weight","restriction":""},{"name":"batch_axis","doc":null,"default_value":"0","external_name":"batch_axis","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(axis, sparse_label, from_logits, weight, batch_axis, **kwargs)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[],"macros":[],"types":[]}]},{"html_id":"mxnet/MXNet/Gluon/NN","path":"MXNet/Gluon/NN.html","kind":"module","full_name":"MXNet::Gluon::NN","name":"NN","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/mxnet/gluon/nn.cr","line_number":6,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/nn.cr#L6"},{"filename":"src/mxnet/gluon/nn/activations.cr","line_number":5,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/nn/activations.cr#L5"},{"filename":"src/mxnet/gluon/nn/layers.cr","line_number":5,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/nn/layers.cr#L5"}],"repository_name":"mxnet","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"mxnet/MXNet/Gluon","kind":"module","full_name":"MXNet::Gluon","name":"Gluon"},"doc":"Neural network layers.","summary":"<p>Neural network layers.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"mxnet/MXNet/Gluon/NN/Activation","path":"MXNet/Gluon/NN/Activation.html","kind":"class","full_name":"MXNet::Gluon::NN::Activation","name":"Activation","abstract":false,"superclass":{"html_id":"mxnet/MXNet/Gluon/HybridBlock","kind":"class","full_name":"MXNet::Gluon::HybridBlock","name":"HybridBlock"},"ancestors":[{"html_id":"mxnet/MXNet/Gluon/HybridBlock","kind":"class","full_name":"MXNet::Gluon::HybridBlock","name":"HybridBlock"},{"html_id":"mxnet/MXNet/Gluon/CachedGraph","kind":"module","full_name":"MXNet::Gluon::CachedGraph","name":"CachedGraph"},{"html_id":"mxnet/MXNet/Gluon/Block","kind":"class","full_name":"MXNet::Gluon::Block","name":"Block"},{"html_id":"mxnet/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"mxnet/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/mxnet/gluon/nn/activations.cr","line_number":8,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/nn/activations.cr#L8"}],"repository_name":"mxnet","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"mxnet/MXNet/Gluon/NN","kind":"module","full_name":"MXNet::Gluon::NN","name":"NN"},"doc":"Applies an activation function to input.\n","summary":"<p>Applies an activation function to input.</p>","class_methods":[],"constructors":[{"id":"new(activation:String|::Symbol,**kwargs)-class-method","html_id":"new(activation:String|::Symbol,**kwargs)-class-method","name":"new","doc":"Creates a new instance.\n\n### Parameters\n* *activation* (`String` or `::Symbol`)\n  Name of activation function to use.\n","summary":"<p>Creates a new instance.</p>","abstract":false,"args":[{"name":"activation","doc":null,"default_value":"","external_name":"activation","restriction":"String | ::Symbol"}],"args_string":"(activation : String | ::Symbol, **kwargs)","args_html":"(activation : String | ::Symbol, **kwargs)","location":{"filename":"src/mxnet/gluon/nn/activations.cr","line_number":15,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/nn/activations.cr#L15"},"def":{"name":"new","args":[{"name":"activation","doc":null,"default_value":"","external_name":"activation","restriction":"String | ::Symbol"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(activation, **kwargs)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"to_s(io)-instance-method","html_id":"to_s(io)-instance-method","name":"to_s","doc":null,"summary":null,"abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/mxnet/gluon/nn/activations.cr","line_number":24,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/nn/activations.cr#L24"},"def":{"name":"to_s","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"((io << \"Activation(\") << @activation) << \")\""}}],"macros":[],"types":[]},{"html_id":"mxnet/MXNet/Gluon/NN/Conv1D","path":"MXNet/Gluon/NN/Conv1D.html","kind":"class","full_name":"MXNet::Gluon::NN::Conv1D","name":"Conv1D","abstract":false,"superclass":{"html_id":"mxnet/MXNet/Gluon/NN/Internal/Conv","kind":"class","full_name":"MXNet::Gluon::NN::Internal::Conv","name":"Conv"},"ancestors":[{"html_id":"mxnet/MXNet/Gluon/NN/Internal/Conv","kind":"class","full_name":"MXNet::Gluon::NN::Internal::Conv","name":"Conv"},{"html_id":"mxnet/MXNet/Gluon/HybridBlock","kind":"class","full_name":"MXNet::Gluon::HybridBlock","name":"HybridBlock"},{"html_id":"mxnet/MXNet/Gluon/CachedGraph","kind":"module","full_name":"MXNet::Gluon::CachedGraph","name":"CachedGraph"},{"html_id":"mxnet/MXNet/Gluon/Block","kind":"class","full_name":"MXNet::Gluon::Block","name":"Block"},{"html_id":"mxnet/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"mxnet/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/mxnet/gluon/nn/layers.cr","line_number":398,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/nn/layers.cr#L398"}],"repository_name":"mxnet","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"mxnet/MXNet/Gluon/NN","kind":"module","full_name":"MXNet::Gluon::NN","name":"NN"},"doc":"1D convolution layer (e.g. temporal convolution).\n\nThis layer creates a convolution kernel that is convolved with\nthe input over a single spatial (or temporal) dimension to\nproduce a tensor of outputs. If `use_bias` is `true`, a bias\nvector is created and added to the outputs. If `activation` is\nnot `nil`, the activation is applied to the outputs.  If\n`in_channels` is not specified, parameter initialization will\nbe deferred to the first time `#forward` is called and\n`in_channels` will be inferred from the shape of input data.\n","summary":"<p>1D convolution layer (e.g.</p>","class_methods":[],"constructors":[{"id":"new(*,channels,kernel_size,strides=1,padding=0,dilation=1,layout=&quot;NCW&quot;,in_channels=0,use_bias=true,activation=nil,**kwargs)-class-method","html_id":"new(*,channels,kernel_size,strides=1,padding=0,dilation=1,layout=&quot;NCW&quot;,in_channels=0,use_bias=true,activation=nil,**kwargs)-class-method","name":"new","doc":"Creates a new instance.\n\n### Parameters\n* *channels* (`Int32`)\n  The dimensionality of the output space (the number of\n  output channels in the convolution).\n* *kernel_size* (`Array(Int32)` of 1 integer)\n  Specifies the dimensions of the convolution window.\n* *strides* (`Int32` or `Array(Int32)` of 1 integer, default = `1`)\n  Specifies the strides of the convolution.\n* *padding* (`Int32` or `Array(Int32)` of 1 integer, default = `0`)\n  If `padding` is non-zero, then the input is implicitly\n  zero-padded on both sides for `padding` number of points.\n* *dilation* (`Int32` or `Array(Int32)` of 1 integer, default = `1`)\n  Specifies the dilation rate to use for dilated\n  convolution.\n* *layout* (`String`, default = `\"NCW\"`)\n   Dimension ordering of data and weight. Only supports\n   \"NCW\" layout for now. \"N\", \"C\", \"W\" stands for batch,\n   channel, and width (time) dimensions respectively.\n   Convolution is applied on the \"W\" dimension.\n* *in_channels* (`Int32`, default = `0`)\n  The number of input channels to this layer. If not\n  specified, initialization will be deferred to the first\n  time `#forward` is called and `in_channels` will be\n  inferred from the shape of the input data.\n* *use_bias* (`Bool`, default = `true`)\n  Whether the layer uses a bias vector.\n* *activation* (`String`, optional)\n  Activation function to use. If nothing is specified, no\n  activation is applied (it acts like \"linear\" activation:\n  `a(x) = x`).\n","summary":"<p>Creates a new instance.</p>","abstract":false,"args":[{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"channels","doc":null,"default_value":"","external_name":"channels","restriction":""},{"name":"kernel_size","doc":null,"default_value":"","external_name":"kernel_size","restriction":""},{"name":"strides","doc":null,"default_value":"1","external_name":"strides","restriction":""},{"name":"padding","doc":null,"default_value":"0","external_name":"padding","restriction":""},{"name":"dilation","doc":null,"default_value":"1","external_name":"dilation","restriction":""},{"name":"layout","doc":null,"default_value":"\"NCW\"","external_name":"layout","restriction":""},{"name":"in_channels","doc":null,"default_value":"0","external_name":"in_channels","restriction":""},{"name":"use_bias","doc":null,"default_value":"true","external_name":"use_bias","restriction":""},{"name":"activation","doc":null,"default_value":"nil","external_name":"activation","restriction":""}],"args_string":"(*, channels, kernel_size, strides = <span class=\"n\">1</span>, padding = <span class=\"n\">0</span>, dilation = <span class=\"n\">1</span>, layout = <span class=\"s\">&quot;NCW&quot;</span>, in_channels = <span class=\"n\">0</span>, use_bias = <span class=\"n\">true</span>, activation = <span class=\"n\">nil</span>, **kwargs)","args_html":"(*, channels, kernel_size, strides = <span class=\"n\">1</span>, padding = <span class=\"n\">0</span>, dilation = <span class=\"n\">1</span>, layout = <span class=\"s\">&quot;NCW&quot;</span>, in_channels = <span class=\"n\">0</span>, use_bias = <span class=\"n\">true</span>, activation = <span class=\"n\">nil</span>, **kwargs)","location":{"filename":"src/mxnet/gluon/nn/layers.cr","line_number":432,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/nn/layers.cr#L432"},"def":{"name":"new","args":[{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"channels","doc":null,"default_value":"","external_name":"channels","restriction":""},{"name":"kernel_size","doc":null,"default_value":"","external_name":"kernel_size","restriction":""},{"name":"strides","doc":null,"default_value":"1","external_name":"strides","restriction":""},{"name":"padding","doc":null,"default_value":"0","external_name":"padding","restriction":""},{"name":"dilation","doc":null,"default_value":"1","external_name":"dilation","restriction":""},{"name":"layout","doc":null,"default_value":"\"NCW\"","external_name":"layout","restriction":""},{"name":"in_channels","doc":null,"default_value":"0","external_name":"in_channels","restriction":""},{"name":"use_bias","doc":null,"default_value":"true","external_name":"use_bias","restriction":""},{"name":"activation","doc":null,"default_value":"nil","external_name":"activation","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(**kwargs, channels: channels, kernel_size: kernel_size, strides: strides, padding: padding, dilation: dilation, layout: layout, in_channels: in_channels, use_bias: use_bias, activation: activation)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[],"macros":[],"types":[]},{"html_id":"mxnet/MXNet/Gluon/NN/Conv2D","path":"MXNet/Gluon/NN/Conv2D.html","kind":"class","full_name":"MXNet::Gluon::NN::Conv2D","name":"Conv2D","abstract":false,"superclass":{"html_id":"mxnet/MXNet/Gluon/NN/Internal/Conv","kind":"class","full_name":"MXNet::Gluon::NN::Internal::Conv","name":"Conv"},"ancestors":[{"html_id":"mxnet/MXNet/Gluon/NN/Internal/Conv","kind":"class","full_name":"MXNet::Gluon::NN::Internal::Conv","name":"Conv"},{"html_id":"mxnet/MXNet/Gluon/HybridBlock","kind":"class","full_name":"MXNet::Gluon::HybridBlock","name":"HybridBlock"},{"html_id":"mxnet/MXNet/Gluon/CachedGraph","kind":"module","full_name":"MXNet::Gluon::CachedGraph","name":"CachedGraph"},{"html_id":"mxnet/MXNet/Gluon/Block","kind":"class","full_name":"MXNet::Gluon::Block","name":"Block"},{"html_id":"mxnet/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"mxnet/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/mxnet/gluon/nn/layers.cr","line_number":468,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/nn/layers.cr#L468"}],"repository_name":"mxnet","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"mxnet/MXNet/Gluon/NN","kind":"module","full_name":"MXNet::Gluon::NN","name":"NN"},"doc":"2D convolution layer (e.g. spatial convolution over images).\n\nThis layer creates a convolution kernel that is convolved with\nthe input to produce a tensor of outputs. If `use_bias` is\n`true`, a bias vector is created and added to the outputs. If\n`activation` is not `nil`, the activation is applied to the\noutputs. If `in_channels` is not specified, parameter\ninitialization will be deferred to the first time `#forward`\nis called and `in_channels` will be inferred from the shape of\ninput data.\n","summary":"<p>2D convolution layer (e.g.</p>","class_methods":[],"constructors":[{"id":"new(*,channels,kernel_size,strides=1,padding=0,dilation=1,layout=&quot;NCHW&quot;,in_channels=0,use_bias=true,activation=nil,**kwargs)-class-method","html_id":"new(*,channels,kernel_size,strides=1,padding=0,dilation=1,layout=&quot;NCHW&quot;,in_channels=0,use_bias=true,activation=nil,**kwargs)-class-method","name":"new","doc":"Creates a new instance.\n\n### Parameters\n* *channels* (`Int32`)\n  The dimensionality of the output space (the number of\n  output channels in the convolution).\n* *kernel_size* (`Array(Int32)` of 2 integers)\n  Specifies the dimensions of the convolution window.\n* *strides* (`Int32` or `Array(Int32)` of 2 integers, default = `1`)\n  Specifies the strides of the convolution.\n* *padding* (`Int32` or `Array(Int32)` of 2 integers, default = `0`)\n  If `padding` is non-zero, then the input is implicitly\n  zero-padded on both sides for `padding` number of points.\n* *dilation* (`Int32` or `Array(Int32)` of 2 integers, default = `1`)\n  Specifies the dilation rate to use for dilated\n  convolution.\n* *layout* (`String`, default = `\"NCHW\"`)\n  Dimension ordering of data and weight. Only supports\n  \"NCHW\" and \"NHWC\" layout for now. \"N\", \"C\", \"H\", \"W\"\n  stands for batch, channel, height, and width dimensions\n  respectively. Convolution is applied on the \"H\" and \"W\"\n  dimensions.\n* *in_channels* (`Int32`, default = `0`)\n  The number of input channels to this layer. If not\n  specified, initialization will be deferred to the first\n  time `#forward` is called and `in_channels` will be\n  inferred from the shape of the input data.\n* *use_bias* (`Bool`, default = `true`)\n  Whether the layer uses a bias vector.\n* *activation* (`String`, optional)\n  Activation function to use. If nothing is specified, no\n  activation is applied (it acts like \"linear\" activation:\n  `a(x) = x`).\n","summary":"<p>Creates a new instance.</p>","abstract":false,"args":[{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"channels","doc":null,"default_value":"","external_name":"channels","restriction":""},{"name":"kernel_size","doc":null,"default_value":"","external_name":"kernel_size","restriction":""},{"name":"strides","doc":null,"default_value":"1","external_name":"strides","restriction":""},{"name":"padding","doc":null,"default_value":"0","external_name":"padding","restriction":""},{"name":"dilation","doc":null,"default_value":"1","external_name":"dilation","restriction":""},{"name":"layout","doc":null,"default_value":"\"NCHW\"","external_name":"layout","restriction":""},{"name":"in_channels","doc":null,"default_value":"0","external_name":"in_channels","restriction":""},{"name":"use_bias","doc":null,"default_value":"true","external_name":"use_bias","restriction":""},{"name":"activation","doc":null,"default_value":"nil","external_name":"activation","restriction":""}],"args_string":"(*, channels, kernel_size, strides = <span class=\"n\">1</span>, padding = <span class=\"n\">0</span>, dilation = <span class=\"n\">1</span>, layout = <span class=\"s\">&quot;NCHW&quot;</span>, in_channels = <span class=\"n\">0</span>, use_bias = <span class=\"n\">true</span>, activation = <span class=\"n\">nil</span>, **kwargs)","args_html":"(*, channels, kernel_size, strides = <span class=\"n\">1</span>, padding = <span class=\"n\">0</span>, dilation = <span class=\"n\">1</span>, layout = <span class=\"s\">&quot;NCHW&quot;</span>, in_channels = <span class=\"n\">0</span>, use_bias = <span class=\"n\">true</span>, activation = <span class=\"n\">nil</span>, **kwargs)","location":{"filename":"src/mxnet/gluon/nn/layers.cr","line_number":503,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/nn/layers.cr#L503"},"def":{"name":"new","args":[{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"channels","doc":null,"default_value":"","external_name":"channels","restriction":""},{"name":"kernel_size","doc":null,"default_value":"","external_name":"kernel_size","restriction":""},{"name":"strides","doc":null,"default_value":"1","external_name":"strides","restriction":""},{"name":"padding","doc":null,"default_value":"0","external_name":"padding","restriction":""},{"name":"dilation","doc":null,"default_value":"1","external_name":"dilation","restriction":""},{"name":"layout","doc":null,"default_value":"\"NCHW\"","external_name":"layout","restriction":""},{"name":"in_channels","doc":null,"default_value":"0","external_name":"in_channels","restriction":""},{"name":"use_bias","doc":null,"default_value":"true","external_name":"use_bias","restriction":""},{"name":"activation","doc":null,"default_value":"nil","external_name":"activation","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(**kwargs, channels: channels, kernel_size: kernel_size, strides: strides, padding: padding, dilation: dilation, layout: layout, in_channels: in_channels, use_bias: use_bias, activation: activation)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[],"macros":[],"types":[]},{"html_id":"mxnet/MXNet/Gluon/NN/Conv3D","path":"MXNet/Gluon/NN/Conv3D.html","kind":"class","full_name":"MXNet::Gluon::NN::Conv3D","name":"Conv3D","abstract":false,"superclass":{"html_id":"mxnet/MXNet/Gluon/NN/Internal/Conv","kind":"class","full_name":"MXNet::Gluon::NN::Internal::Conv","name":"Conv"},"ancestors":[{"html_id":"mxnet/MXNet/Gluon/NN/Internal/Conv","kind":"class","full_name":"MXNet::Gluon::NN::Internal::Conv","name":"Conv"},{"html_id":"mxnet/MXNet/Gluon/HybridBlock","kind":"class","full_name":"MXNet::Gluon::HybridBlock","name":"HybridBlock"},{"html_id":"mxnet/MXNet/Gluon/CachedGraph","kind":"module","full_name":"MXNet::Gluon::CachedGraph","name":"CachedGraph"},{"html_id":"mxnet/MXNet/Gluon/Block","kind":"class","full_name":"MXNet::Gluon::Block","name":"Block"},{"html_id":"mxnet/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"mxnet/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/mxnet/gluon/nn/layers.cr","line_number":539,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/nn/layers.cr#L539"}],"repository_name":"mxnet","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"mxnet/MXNet/Gluon/NN","kind":"module","full_name":"MXNet::Gluon::NN","name":"NN"},"doc":"3D convolution layer (e.g. spatial convolution over volumes).\n\nThis layer creates a convolution kernel that is convolved with\nthe input to produce a tensor of outputs. If `use_bias` is\n`true`, a bias vector is created and added to the outputs. If\n`activation` is not `nil`, the activation is applied to the\noutputs. If `in_channels` is not specified, `Parameter`\ninitialization will be deferred to the first time `#forward`\nis called and `in_channels` will be inferred from the shape of\ninput data.\n","summary":"<p>3D convolution layer (e.g.</p>","class_methods":[],"constructors":[{"id":"new(*,channels,kernel_size,strides=1,padding=0,dilation=1,layout=&quot;NCDHW&quot;,in_channels=0,use_bias=true,activation=nil,**kwargs)-class-method","html_id":"new(*,channels,kernel_size,strides=1,padding=0,dilation=1,layout=&quot;NCDHW&quot;,in_channels=0,use_bias=true,activation=nil,**kwargs)-class-method","name":"new","doc":"Creates a new instance.\n\n### Parameters\n* *channels* (`Int32`)\n  The dimensionality of the output space (the number of\n  output channels in the convolution).\n* *kernel_size* (`Array(Int32)` of 3 integers)\n  Specifies the dimensions of the convolution window.\n* *strides* (`Int32` or `Array(Int32)` of 3 integers, default = `1`)\n  Specifies the strides of the convolution.\n* *padding* (`Int32` or `Array(Int32)` of 3 integers, default = `0`)\n  If `padding` is non-zero, then the input is implicitly\n  zero-padded on both sides for `padding` number of points.\n* *dilation* (`Int32` or `Array(Int32)` of 3 integers, default = `1`)\n  Specifies the dilation rate to use for dilated\n  convolution.\n* *layout* (`String`, default = `\"NCDHW\"`)\n  Dimension ordering of data and weight. Only supports\n  \"NCDHW\" and \"NDHWC\" layout for now. \"N\", \"C\", \"H\", '\"W\",\n  \"D\" stands for batch, channel, height, width and depth\n  dimensions respectively. Convolution is applied on the\n  \"D\", \"H\" and \"W\" dimensions.\n* *in_channels* (`Int32`, default = `0`)\n  The number of input channels to this layer. If not\n  specified, initialization will be deferred to the first\n  time `#forward` is called and `in_channels` will be\n  inferred from the shape of the input data.\n* *use_bias* (`Bool`, default = `true`)\n  Whether the layer uses a bias vector.\n* *activation* (`String`, optional)\n  Activation function to use. If nothing is specified, no\n  activation is applied (it acts like \"linear\" activation:\n  `a(x) = x`).\n","summary":"<p>Creates a new instance.</p>","abstract":false,"args":[{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"channels","doc":null,"default_value":"","external_name":"channels","restriction":""},{"name":"kernel_size","doc":null,"default_value":"","external_name":"kernel_size","restriction":""},{"name":"strides","doc":null,"default_value":"1","external_name":"strides","restriction":""},{"name":"padding","doc":null,"default_value":"0","external_name":"padding","restriction":""},{"name":"dilation","doc":null,"default_value":"1","external_name":"dilation","restriction":""},{"name":"layout","doc":null,"default_value":"\"NCDHW\"","external_name":"layout","restriction":""},{"name":"in_channels","doc":null,"default_value":"0","external_name":"in_channels","restriction":""},{"name":"use_bias","doc":null,"default_value":"true","external_name":"use_bias","restriction":""},{"name":"activation","doc":null,"default_value":"nil","external_name":"activation","restriction":""}],"args_string":"(*, channels, kernel_size, strides = <span class=\"n\">1</span>, padding = <span class=\"n\">0</span>, dilation = <span class=\"n\">1</span>, layout = <span class=\"s\">&quot;NCDHW&quot;</span>, in_channels = <span class=\"n\">0</span>, use_bias = <span class=\"n\">true</span>, activation = <span class=\"n\">nil</span>, **kwargs)","args_html":"(*, channels, kernel_size, strides = <span class=\"n\">1</span>, padding = <span class=\"n\">0</span>, dilation = <span class=\"n\">1</span>, layout = <span class=\"s\">&quot;NCDHW&quot;</span>, in_channels = <span class=\"n\">0</span>, use_bias = <span class=\"n\">true</span>, activation = <span class=\"n\">nil</span>, **kwargs)","location":{"filename":"src/mxnet/gluon/nn/layers.cr","line_number":574,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/nn/layers.cr#L574"},"def":{"name":"new","args":[{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"channels","doc":null,"default_value":"","external_name":"channels","restriction":""},{"name":"kernel_size","doc":null,"default_value":"","external_name":"kernel_size","restriction":""},{"name":"strides","doc":null,"default_value":"1","external_name":"strides","restriction":""},{"name":"padding","doc":null,"default_value":"0","external_name":"padding","restriction":""},{"name":"dilation","doc":null,"default_value":"1","external_name":"dilation","restriction":""},{"name":"layout","doc":null,"default_value":"\"NCDHW\"","external_name":"layout","restriction":""},{"name":"in_channels","doc":null,"default_value":"0","external_name":"in_channels","restriction":""},{"name":"use_bias","doc":null,"default_value":"true","external_name":"use_bias","restriction":""},{"name":"activation","doc":null,"default_value":"nil","external_name":"activation","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(**kwargs, channels: channels, kernel_size: kernel_size, strides: strides, padding: padding, dilation: dilation, layout: layout, in_channels: in_channels, use_bias: use_bias, activation: activation)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[],"macros":[],"types":[]},{"html_id":"mxnet/MXNet/Gluon/NN/Dense","path":"MXNet/Gluon/NN/Dense.html","kind":"class","full_name":"MXNet::Gluon::NN::Dense","name":"Dense","abstract":false,"superclass":{"html_id":"mxnet/MXNet/Gluon/HybridBlock","kind":"class","full_name":"MXNet::Gluon::HybridBlock","name":"HybridBlock"},"ancestors":[{"html_id":"mxnet/MXNet/Gluon/HybridBlock","kind":"class","full_name":"MXNet::Gluon::HybridBlock","name":"HybridBlock"},{"html_id":"mxnet/MXNet/Gluon/CachedGraph","kind":"module","full_name":"MXNet::Gluon::CachedGraph","name":"CachedGraph"},{"html_id":"mxnet/MXNet/Gluon/Block","kind":"class","full_name":"MXNet::Gluon::Block","name":"Block"},{"html_id":"mxnet/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"mxnet/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/mxnet/gluon/nn/layers.cr","line_number":129,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/nn/layers.cr#L129"}],"repository_name":"mxnet","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"mxnet/MXNet/Gluon/NN","kind":"module","full_name":"MXNet::Gluon::NN","name":"NN"},"doc":"A densely-connected neural network layer.\n\nImplements the operation:\n\n    output = activation(dot(input, weight) + bias)\n\nwhere \"activation\" is the element-wise activation function passed\nas the `activation` argument, \"weight\" is a weights matrix created\nby the layer, and \"bias\" is a bias vector created by the layer\n(if argument `use_bias` is `true`).\n\nNote: the input must be a tensor with rank two. Use\n`flatten` to convert it to rank two if necessary.\n","summary":"<p>A densely-connected neural network layer.</p>","class_methods":[],"constructors":[{"id":"new(units:Int32,in_units:Int32=0,use_bias=true,activation=nil,**kwargs)-class-method","html_id":"new(units:Int32,in_units:Int32=0,use_bias=true,activation=nil,**kwargs)-class-method","name":"new","doc":"Creates a new instance.\n\n### Parameters\n* *units* (`Int32`)\n  Dimensionality of the output space.\n* *in_units* (`Int32`, optional)\n  Size of the input data. If nothing is specified,\n  initialization is deferred to the first time `#forward` is\n  called and `in_units` will be inferred from the shape of\n  input data.\n* *use_bias* (`Bool`, default = `true`)\n  Whether the layer uses a bias vector.\n* *activation* (`String`, optional)\n  Activation function to use. If nothing is specified, no\n  activation is applied (it acts like \"linear\" activation:\n  `a(x) = x`).\n","summary":"<p>Creates a new instance.</p>","abstract":false,"args":[{"name":"units","doc":null,"default_value":"","external_name":"units","restriction":"Int32"},{"name":"in_units","doc":null,"default_value":"0","external_name":"in_units","restriction":"Int32"},{"name":"use_bias","doc":null,"default_value":"true","external_name":"use_bias","restriction":""},{"name":"activation","doc":null,"default_value":"nil","external_name":"activation","restriction":""}],"args_string":"(units : Int32, in_units : Int32 = <span class=\"n\">0</span>, use_bias = <span class=\"n\">true</span>, activation = <span class=\"n\">nil</span>, **kwargs)","args_html":"(units : Int32, in_units : Int32 = <span class=\"n\">0</span>, use_bias = <span class=\"n\">true</span>, activation = <span class=\"n\">nil</span>, **kwargs)","location":{"filename":"src/mxnet/gluon/nn/layers.cr","line_number":152,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/nn/layers.cr#L152"},"def":{"name":"new","args":[{"name":"units","doc":null,"default_value":"","external_name":"units","restriction":"Int32"},{"name":"in_units","doc":null,"default_value":"0","external_name":"in_units","restriction":"Int32"},{"name":"use_bias","doc":null,"default_value":"true","external_name":"use_bias","restriction":""},{"name":"activation","doc":null,"default_value":"nil","external_name":"activation","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(units, in_units, use_bias, activation, **kwargs)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"act-instance-method","html_id":"act-instance-method","name":"act","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/mxnet/gluon/nn/layers.cr","line_number":130,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/nn/layers.cr#L130"},"def":{"name":"act","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"(get_attr(\"act\")).as(MXNet::Gluon::NN::Activation)"}},{"id":"act=(act:MXNet::Gluon::NN::Activation?)-instance-method","html_id":"act=(act:MXNet::Gluon::NN::Activation?)-instance-method","name":"act=","doc":null,"summary":null,"abstract":false,"args":[{"name":"act","doc":null,"default_value":"","external_name":"act","restriction":"MXNet::Gluon::NN::Activation | Nil"}],"args_string":"(act : MXNet::Gluon::NN::Activation?)","args_html":"(act : <a href=\"../../../MXNet/Gluon/NN/Activation.html\">MXNet::Gluon::NN::Activation</a>?)","location":{"filename":"src/mxnet/gluon/nn/layers.cr","line_number":130,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/nn/layers.cr#L130"},"def":{"name":"act=","args":[{"name":"act","doc":null,"default_value":"","external_name":"act","restriction":"MXNet::Gluon::NN::Activation | Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"set_attr(\"act\", act)"}},{"id":"act?:MXNet::Gluon::NN::Activation?-instance-method","html_id":"act?:MXNet::Gluon::NN::Activation?-instance-method","name":"act?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : MXNet::Gluon::NN::Activation?","args_html":" : <a href=\"../../../MXNet/Gluon/NN/Activation.html\">MXNet::Gluon::NN::Activation</a>?","location":{"filename":"src/mxnet/gluon/nn/layers.cr","line_number":130,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/nn/layers.cr#L130"},"def":{"name":"act?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"MXNet::Gluon::NN::Activation | Nil","visibility":"Public","body":"(value = get_attr(\"act\")) ? value.as(MXNet::Gluon::NN::Activation) : nil"}},{"id":"bias-instance-method","html_id":"bias-instance-method","name":"bias","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/mxnet/gluon/nn/layers.cr","line_number":130,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/nn/layers.cr#L130"},"def":{"name":"bias","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"(get_attr(\"bias\")).as(MXNet::Gluon::Parameter)"}},{"id":"bias=(bias:MXNet::Gluon::Parameter?)-instance-method","html_id":"bias=(bias:MXNet::Gluon::Parameter?)-instance-method","name":"bias=","doc":null,"summary":null,"abstract":false,"args":[{"name":"bias","doc":null,"default_value":"","external_name":"bias","restriction":"MXNet::Gluon::Parameter | Nil"}],"args_string":"(bias : MXNet::Gluon::Parameter?)","args_html":"(bias : <a href=\"../../../MXNet/Gluon/Parameter.html\">MXNet::Gluon::Parameter</a>?)","location":{"filename":"src/mxnet/gluon/nn/layers.cr","line_number":130,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/nn/layers.cr#L130"},"def":{"name":"bias=","args":[{"name":"bias","doc":null,"default_value":"","external_name":"bias","restriction":"MXNet::Gluon::Parameter | Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"set_attr(\"bias\", bias)"}},{"id":"bias?:MXNet::Gluon::Parameter?-instance-method","html_id":"bias?:MXNet::Gluon::Parameter?-instance-method","name":"bias?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : MXNet::Gluon::Parameter?","args_html":" : <a href=\"../../../MXNet/Gluon/Parameter.html\">MXNet::Gluon::Parameter</a>?","location":{"filename":"src/mxnet/gluon/nn/layers.cr","line_number":130,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/nn/layers.cr#L130"},"def":{"name":"bias?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"MXNet::Gluon::Parameter | Nil","visibility":"Public","body":"(value = get_attr(\"bias\")) ? value.as(MXNet::Gluon::Parameter) : nil"}},{"id":"hybrid_forward(inputs:Array(T),params:Hash(String,T)):Array(T)forallT-instance-method","html_id":"hybrid_forward(inputs:Array(T),params:Hash(String,T)):Array(T)forallT-instance-method","name":"hybrid_forward","doc":"Override to construct symbolic graph for this `HybridBlock`.\n\n### Parameters\n* *inputs* (`Array(Symbol)` or `Array(NDArray)`)\n  Input tensors.\n","summary":"<p>Override to construct symbolic graph for this <code><a href=\"../../../MXNet/Gluon/HybridBlock.html\">HybridBlock</a></code>.</p>","abstract":false,"args":[{"name":"inputs","doc":null,"default_value":"","external_name":"inputs","restriction":"Array(T)"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":"Hash(String, T)"}],"args_string":"(inputs : Array(T), params : Hash(String, T)) : Array(T) forall T","args_html":"(inputs : Array(T), params : Hash(String, T)) : Array(T) forall T","location":{"filename":"src/mxnet/gluon/nn/layers.cr","line_number":182,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/nn/layers.cr#L182"},"def":{"name":"hybrid_forward","args":[{"name":"inputs","doc":null,"default_value":"","external_name":"inputs","restriction":"Array(T)"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":"Hash(String, T)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(T)","visibility":"Public","body":"weight = params.delete(\"weight\")\nbias = params.delete(\"bias\")\noutput = T.fully_connected(inputs.first, weight, bias, no_bias: bias.nil?, num_hidden: @units)\noutputs = [output]\nif self.act?\n  outputs = self.act.forward(outputs)\nend\noutputs\n"}},{"id":"weight-instance-method","html_id":"weight-instance-method","name":"weight","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/mxnet/gluon/nn/layers.cr","line_number":130,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/nn/layers.cr#L130"},"def":{"name":"weight","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"(get_attr(\"weight\")).as(MXNet::Gluon::Parameter)"}},{"id":"weight=(weight:MXNet::Gluon::Parameter?)-instance-method","html_id":"weight=(weight:MXNet::Gluon::Parameter?)-instance-method","name":"weight=","doc":null,"summary":null,"abstract":false,"args":[{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::Gluon::Parameter | Nil"}],"args_string":"(weight : MXNet::Gluon::Parameter?)","args_html":"(weight : <a href=\"../../../MXNet/Gluon/Parameter.html\">MXNet::Gluon::Parameter</a>?)","location":{"filename":"src/mxnet/gluon/nn/layers.cr","line_number":130,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/nn/layers.cr#L130"},"def":{"name":"weight=","args":[{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::Gluon::Parameter | Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"set_attr(\"weight\", weight)"}},{"id":"weight?:MXNet::Gluon::Parameter?-instance-method","html_id":"weight?:MXNet::Gluon::Parameter?-instance-method","name":"weight?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : MXNet::Gluon::Parameter?","args_html":" : <a href=\"../../../MXNet/Gluon/Parameter.html\">MXNet::Gluon::Parameter</a>?","location":{"filename":"src/mxnet/gluon/nn/layers.cr","line_number":130,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/nn/layers.cr#L130"},"def":{"name":"weight?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"MXNet::Gluon::Parameter | Nil","visibility":"Public","body":"(value = get_attr(\"weight\")) ? value.as(MXNet::Gluon::Parameter) : nil"}}],"macros":[],"types":[]},{"html_id":"mxnet/MXNet/Gluon/NN/Flatten","path":"MXNet/Gluon/NN/Flatten.html","kind":"class","full_name":"MXNet::Gluon::NN::Flatten","name":"Flatten","abstract":false,"superclass":{"html_id":"mxnet/MXNet/Gluon/HybridBlock","kind":"class","full_name":"MXNet::Gluon::HybridBlock","name":"HybridBlock"},"ancestors":[{"html_id":"mxnet/MXNet/Gluon/HybridBlock","kind":"class","full_name":"MXNet::Gluon::HybridBlock","name":"HybridBlock"},{"html_id":"mxnet/MXNet/Gluon/CachedGraph","kind":"module","full_name":"MXNet::Gluon::CachedGraph","name":"CachedGraph"},{"html_id":"mxnet/MXNet/Gluon/Block","kind":"class","full_name":"MXNet::Gluon::Block","name":"Block"},{"html_id":"mxnet/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"mxnet/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/mxnet/gluon/nn/layers.cr","line_number":698,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/nn/layers.cr#L698"}],"repository_name":"mxnet","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"mxnet/MXNet/Gluon/NN","kind":"module","full_name":"MXNet::Gluon::NN","name":"NN"},"doc":"Flattens the input to two dimensions.\n\nThe input is a tensor with an arbitrary shape:\n`[N, x1, x2, ..., xn]`. The output is a tensor with shape:\n`[N, x1 * x2 * ... * xn]`.\n","summary":"<p>Flattens the input to two dimensions.</p>","class_methods":[],"constructors":[{"id":"new(**kwargs)-class-method","html_id":"new(**kwargs)-class-method","name":"new","doc":"Creates a new instance.\n","summary":"<p>Creates a new instance.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":{"filename":"src/mxnet/gluon/nn/layers.cr","line_number":701,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/nn/layers.cr#L701"},"def":{"name":"new","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(**kwargs)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"hybrid_forward(inputs:Array(T),params:Hash(String,T)?=nil):Array(T)forallT-instance-method","html_id":"hybrid_forward(inputs:Array(T),params:Hash(String,T)?=nil):Array(T)forallT-instance-method","name":"hybrid_forward","doc":null,"summary":null,"abstract":false,"args":[{"name":"inputs","doc":null,"default_value":"","external_name":"inputs","restriction":"Array(T)"},{"name":"params","doc":null,"default_value":"nil","external_name":"params","restriction":"Hash(String, T) | ::Nil"}],"args_string":"(inputs : Array(T), params : Hash(String, T)? = <span class=\"n\">nil</span>) : Array(T) forall T","args_html":"(inputs : Array(T), params : Hash(String, T)? = <span class=\"n\">nil</span>) : Array(T) forall T","location":{"filename":"src/mxnet/gluon/nn/layers.cr","line_number":705,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/nn/layers.cr#L705"},"def":{"name":"hybrid_forward","args":[{"name":"inputs","doc":null,"default_value":"","external_name":"inputs","restriction":"Array(T)"},{"name":"params","doc":null,"default_value":"nil","external_name":"params","restriction":"Hash(String, T) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(T)","visibility":"Public","body":"output = T.flatten(inputs.first)\n[output]\n"}}],"macros":[],"types":[]},{"html_id":"mxnet/MXNet/Gluon/NN/HybridSequential","path":"MXNet/Gluon/NN/HybridSequential.html","kind":"class","full_name":"MXNet::Gluon::NN::HybridSequential","name":"HybridSequential","abstract":false,"superclass":{"html_id":"mxnet/MXNet/Gluon/HybridBlock","kind":"class","full_name":"MXNet::Gluon::HybridBlock","name":"HybridBlock"},"ancestors":[{"html_id":"mxnet/MXNet/Gluon/HybridBlock","kind":"class","full_name":"MXNet::Gluon::HybridBlock","name":"HybridBlock"},{"html_id":"mxnet/MXNet/Gluon/CachedGraph","kind":"module","full_name":"MXNet::Gluon::CachedGraph","name":"CachedGraph"},{"html_id":"mxnet/MXNet/Gluon/Block","kind":"class","full_name":"MXNet::Gluon::Block","name":"Block"},{"html_id":"mxnet/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"mxnet/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/mxnet/gluon/nn/layers.cr","line_number":73,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/nn/layers.cr#L73"}],"repository_name":"mxnet","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"mxnet/MXNet/Gluon/NN","kind":"module","full_name":"MXNet::Gluon::NN","name":"NN"},"doc":"Stacks HybridBlocks sequentially.\n\n```\nnet = MXNet::Gluon::NN::HybridSequential.new\nnet.with_name_scope do\n  net.add(MXNet::Gluon::NN::Dense.new(10, activation: :relu))\n  net.add(MXNet::Gluon::NN::Dense.new(20))\nend\nnet.hybridize\n```\n","summary":"<p>Stacks HybridBlocks sequentially.</p>","class_methods":[],"constructors":[{"id":"new(**kwargs)-class-method","html_id":"new(**kwargs)-class-method","name":"new","doc":"Creates a new instance.\n","summary":"<p>Creates a new instance.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":{"filename":"src/mxnet/gluon/nn/layers.cr","line_number":76,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/nn/layers.cr#L76"},"def":{"name":"new","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(**kwargs)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"[](index)-instance-method","html_id":"[](index)-instance-method","name":"[]","doc":"Returns the block at the specified index.\n\nRaises `IndexError` if the index is out of bounds.\n","summary":"<p>Returns the block at the specified index.</p>","abstract":false,"args":[{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":""}],"args_string":"(index)","args_html":"(index)","location":{"filename":"src/mxnet/gluon/nn/layers.cr","line_number":96,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/nn/layers.cr#L96"},"def":{"name":"[]","args":[{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"children[index]"}},{"id":"[]?(index)-instance-method","html_id":"[]?(index)-instance-method","name":"[]?","doc":"Returns the block at the specified index.\n\nReturns `nil` if the index is out of bounds.\n","summary":"<p>Returns the block at the specified index.</p>","abstract":false,"args":[{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":""}],"args_string":"(index)","args_html":"(index)","location":{"filename":"src/mxnet/gluon/nn/layers.cr","line_number":104,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/nn/layers.cr#L104"},"def":{"name":"[]?","args":[{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"children[index]?"}},{"id":"add(*blocks)-instance-method","html_id":"add(*blocks)-instance-method","name":"add","doc":"Adds blocks on top of the stack.\n","summary":"<p>Adds blocks on top of the stack.</p>","abstract":false,"args":[{"name":"blocks","doc":null,"default_value":"","external_name":"blocks","restriction":""}],"args_string":"(*blocks)","args_html":"(*blocks)","location":{"filename":"src/mxnet/gluon/nn/layers.cr","line_number":82,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/nn/layers.cr#L82"},"def":{"name":"add","args":[{"name":"blocks","doc":null,"default_value":"","external_name":"blocks","restriction":""}],"double_splat":null,"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"blocks.each do |block|\n  register_child(block)\nend"}},{"id":"hybrid_forward(inputs:Array(T),params:Hash(String,T)={}ofString=>T):Array(T)forallT-instance-method","html_id":"hybrid_forward(inputs:Array(T),params:Hash(String,T)={}ofString=>T):Array(T)forallT-instance-method","name":"hybrid_forward","doc":"Runs a forward pass on all child blocks.\n","summary":"<p>Runs a forward pass on all child blocks.</p>","abstract":false,"args":[{"name":"inputs","doc":null,"default_value":"","external_name":"inputs","restriction":"Array(T)"},{"name":"params","doc":null,"default_value":"{} of String => T","external_name":"params","restriction":"Hash(String, T)"}],"args_string":"(inputs : Array(T), params : Hash(String, T) = {} <span class=\"k\">of</span> <span class=\"t\">String</span> => <span class=\"t\">T</span>) : Array(T) forall T","args_html":"(inputs : Array(T), params : Hash(String, T) = {} <span class=\"k\">of</span> <span class=\"t\">String</span> => <span class=\"t\">T</span>) : Array(T) forall T","location":{"filename":"src/mxnet/gluon/nn/layers.cr","line_number":110,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/nn/layers.cr#L110"},"def":{"name":"hybrid_forward","args":[{"name":"inputs","doc":null,"default_value":"","external_name":"inputs","restriction":"Array(T)"},{"name":"params","doc":null,"default_value":"{} of String => T","external_name":"params","restriction":"Hash(String, T)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(T)","visibility":"Public","body":"children.reduce(inputs) do |inputs, child|\n  child.call(inputs)\nend"}},{"id":"size-instance-method","html_id":"size-instance-method","name":"size","doc":"Returns the number of blocks in the sequential stack.\n","summary":"<p>Returns the number of blocks in the sequential stack.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/mxnet/gluon/nn/layers.cr","line_number":88,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/nn/layers.cr#L88"},"def":{"name":"size","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"children.size"}}],"macros":[],"types":[]},{"html_id":"mxnet/MXNet/Gluon/NN/Internal","path":"MXNet/Gluon/NN/Internal.html","kind":"module","full_name":"MXNet::Gluon::NN::Internal","name":"Internal","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/mxnet/gluon/nn/layers.cr","line_number":198,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/nn/layers.cr#L198"}],"repository_name":"mxnet","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"mxnet/MXNet/Gluon/NN","kind":"module","full_name":"MXNet::Gluon::NN","name":"NN"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"mxnet/MXNet/Gluon/NN/Internal/Conv","path":"MXNet/Gluon/NN/Internal/Conv.html","kind":"class","full_name":"MXNet::Gluon::NN::Internal::Conv","name":"Conv","abstract":false,"superclass":{"html_id":"mxnet/MXNet/Gluon/HybridBlock","kind":"class","full_name":"MXNet::Gluon::HybridBlock","name":"HybridBlock"},"ancestors":[{"html_id":"mxnet/MXNet/Gluon/HybridBlock","kind":"class","full_name":"MXNet::Gluon::HybridBlock","name":"HybridBlock"},{"html_id":"mxnet/MXNet/Gluon/CachedGraph","kind":"module","full_name":"MXNet::Gluon::CachedGraph","name":"CachedGraph"},{"html_id":"mxnet/MXNet/Gluon/Block","kind":"class","full_name":"MXNet::Gluon::Block","name":"Block"},{"html_id":"mxnet/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"mxnet/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/mxnet/gluon/nn/layers.cr","line_number":204,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/nn/layers.cr#L204"}],"repository_name":"mxnet","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[{"html_id":"mxnet/MXNet/Gluon/NN/Conv1D","kind":"class","full_name":"MXNet::Gluon::NN::Conv1D","name":"Conv1D"},{"html_id":"mxnet/MXNet/Gluon/NN/Conv2D","kind":"class","full_name":"MXNet::Gluon::NN::Conv2D","name":"Conv2D"},{"html_id":"mxnet/MXNet/Gluon/NN/Conv3D","kind":"class","full_name":"MXNet::Gluon::NN::Conv3D","name":"Conv3D"}],"including_types":[],"namespace":{"html_id":"mxnet/MXNet/Gluon/NN/Internal","kind":"module","full_name":"MXNet::Gluon::NN::Internal","name":"Internal"},"doc":"Base class for convolution layers.\n\nThis layer creates a convolution kernel that is convolved with\nthe input to produce a tensor of outputs.\n","summary":"<p>Base class for convolution layers.</p>","class_methods":[],"constructors":[{"id":"new(*,channels:Int32,kernel_size:Array(Int32),strides:Array(Int32)|Int32,padding:Array(Int32)|Int32,dilation:Array(Int32)|Int32,layout:String,in_channels=0,use_bias=true,activation=nil,**kwargs)-class-method","html_id":"new(*,channels:Int32,kernel_size:Array(Int32),strides:Array(Int32)|Int32,padding:Array(Int32)|Int32,dilation:Array(Int32)|Int32,layout:String,in_channels=0,use_bias=true,activation=nil,**kwargs)-class-method","name":"new","doc":"Creates a new instance.\n\n`N` is the number of dimensions of the convolution.\n\n### Parameters\n* *channels* (`Int32`)\n  The dimensionality of the output space (the number of\n  output channels in the convolution).\n* *kernel_size* (`Array(Int32)` of N integers)\n  Specifies the dimensions of the convolution window.\n* *strides* (`Int32` or `Array(Int32)` of N integers)\n  Specifies the strides of the convolution.\n* *padding* (`Int32` or `Array(Int32)` of N integers)\n  If `padding` is non-zero, then the input is implicitly\n  zero-padded on both sides for `padding` number of\n  points.\n* *dilation* (`Int32` or `Array(Int32)` of N integers)\n  Specifies the dilation rate to use for dilated\n  convolution.\n* *layout* (`String`)\n  Dimension ordering of data and weight. Can be \"NCW\",\n  \"NWC\", \"NCHW\", \"NHWC\", \"NCDHW\", \"NDHWC\", etc. \"N\", \"C\",\n  \"H\", \"W\", \"D\" stands for batch, channel, height, width\n  and depth dimensions respectively. Convolution is\n  performed over \"D\", \"H\", and \"W\" dimensions.\n* *in_channels* (`Int32`, default = `0`)\n  The number of input channels to this layer. If not\n  specified, initialization will be deferred to the first\n  time `#forward` is called and `in_channels` will be\n  inferred from the shape of the input data.\n* *use_bias* (`Bool`, default = `true`)\n  Whether the layer uses a bias vector.\n* *activation* (`String`, optional)\n  Activation function to use. If nothing is specified, no\n  activation is applied (it acts like \"linear\" activation:\n  `a(x) = x`).\n","summary":"<p>Creates a new instance.</p>","abstract":false,"args":[{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"channels","doc":null,"default_value":"","external_name":"channels","restriction":"Int32"},{"name":"kernel_size","doc":null,"default_value":"","external_name":"kernel_size","restriction":"Array(Int32)"},{"name":"strides","doc":null,"default_value":"","external_name":"strides","restriction":"Array(Int32) | Int32"},{"name":"padding","doc":null,"default_value":"","external_name":"padding","restriction":"Array(Int32) | Int32"},{"name":"dilation","doc":null,"default_value":"","external_name":"dilation","restriction":"Array(Int32) | Int32"},{"name":"layout","doc":null,"default_value":"","external_name":"layout","restriction":"String"},{"name":"in_channels","doc":null,"default_value":"0","external_name":"in_channels","restriction":""},{"name":"use_bias","doc":null,"default_value":"true","external_name":"use_bias","restriction":""},{"name":"activation","doc":null,"default_value":"nil","external_name":"activation","restriction":""}],"args_string":"(*, channels : Int32, kernel_size : Array(Int32), strides : Array(Int32) | Int32, padding : Array(Int32) | Int32, dilation : Array(Int32) | Int32, layout : String, in_channels = <span class=\"n\">0</span>, use_bias = <span class=\"n\">true</span>, activation = <span class=\"n\">nil</span>, **kwargs)","args_html":"(*, channels : Int32, kernel_size : Array(Int32), strides : Array(Int32) | Int32, padding : Array(Int32) | Int32, dilation : Array(Int32) | Int32, layout : String, in_channels = <span class=\"n\">0</span>, use_bias = <span class=\"n\">true</span>, activation = <span class=\"n\">nil</span>, **kwargs)","location":{"filename":"src/mxnet/gluon/nn/layers.cr","line_number":247,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/nn/layers.cr#L247"},"def":{"name":"new","args":[{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"channels","doc":null,"default_value":"","external_name":"channels","restriction":"Int32"},{"name":"kernel_size","doc":null,"default_value":"","external_name":"kernel_size","restriction":"Array(Int32)"},{"name":"strides","doc":null,"default_value":"","external_name":"strides","restriction":"Array(Int32) | Int32"},{"name":"padding","doc":null,"default_value":"","external_name":"padding","restriction":"Array(Int32) | Int32"},{"name":"dilation","doc":null,"default_value":"","external_name":"dilation","restriction":"Array(Int32) | Int32"},{"name":"layout","doc":null,"default_value":"","external_name":"layout","restriction":"String"},{"name":"in_channels","doc":null,"default_value":"0","external_name":"in_channels","restriction":""},{"name":"use_bias","doc":null,"default_value":"true","external_name":"use_bias","restriction":""},{"name":"activation","doc":null,"default_value":"nil","external_name":"activation","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(**kwargs, channels: channels, kernel_size: kernel_size, strides: strides, padding: padding, dilation: dilation, layout: layout, in_channels: in_channels, use_bias: use_bias, activation: activation)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"act-instance-method","html_id":"act-instance-method","name":"act","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/mxnet/gluon/nn/layers.cr","line_number":205,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/nn/layers.cr#L205"},"def":{"name":"act","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"(get_attr(\"act\")).as(MXNet::Gluon::NN::Activation)"}},{"id":"act=(act:MXNet::Gluon::NN::Activation?)-instance-method","html_id":"act=(act:MXNet::Gluon::NN::Activation?)-instance-method","name":"act=","doc":null,"summary":null,"abstract":false,"args":[{"name":"act","doc":null,"default_value":"","external_name":"act","restriction":"MXNet::Gluon::NN::Activation | Nil"}],"args_string":"(act : MXNet::Gluon::NN::Activation?)","args_html":"(act : <a href=\"../../../../MXNet/Gluon/NN/Activation.html\">MXNet::Gluon::NN::Activation</a>?)","location":{"filename":"src/mxnet/gluon/nn/layers.cr","line_number":205,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/nn/layers.cr#L205"},"def":{"name":"act=","args":[{"name":"act","doc":null,"default_value":"","external_name":"act","restriction":"MXNet::Gluon::NN::Activation | Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"set_attr(\"act\", act)"}},{"id":"act?:MXNet::Gluon::NN::Activation?-instance-method","html_id":"act?:MXNet::Gluon::NN::Activation?-instance-method","name":"act?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : MXNet::Gluon::NN::Activation?","args_html":" : <a href=\"../../../../MXNet/Gluon/NN/Activation.html\">MXNet::Gluon::NN::Activation</a>?","location":{"filename":"src/mxnet/gluon/nn/layers.cr","line_number":205,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/nn/layers.cr#L205"},"def":{"name":"act?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"MXNet::Gluon::NN::Activation | Nil","visibility":"Public","body":"(value = get_attr(\"act\")) ? value.as(MXNet::Gluon::NN::Activation) : nil"}},{"id":"bias-instance-method","html_id":"bias-instance-method","name":"bias","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/mxnet/gluon/nn/layers.cr","line_number":205,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/nn/layers.cr#L205"},"def":{"name":"bias","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"(get_attr(\"bias\")).as(MXNet::Gluon::Parameter)"}},{"id":"bias=(bias:MXNet::Gluon::Parameter?)-instance-method","html_id":"bias=(bias:MXNet::Gluon::Parameter?)-instance-method","name":"bias=","doc":null,"summary":null,"abstract":false,"args":[{"name":"bias","doc":null,"default_value":"","external_name":"bias","restriction":"MXNet::Gluon::Parameter | Nil"}],"args_string":"(bias : MXNet::Gluon::Parameter?)","args_html":"(bias : <a href=\"../../../../MXNet/Gluon/Parameter.html\">MXNet::Gluon::Parameter</a>?)","location":{"filename":"src/mxnet/gluon/nn/layers.cr","line_number":205,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/nn/layers.cr#L205"},"def":{"name":"bias=","args":[{"name":"bias","doc":null,"default_value":"","external_name":"bias","restriction":"MXNet::Gluon::Parameter | Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"set_attr(\"bias\", bias)"}},{"id":"bias?:MXNet::Gluon::Parameter?-instance-method","html_id":"bias?:MXNet::Gluon::Parameter?-instance-method","name":"bias?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : MXNet::Gluon::Parameter?","args_html":" : <a href=\"../../../../MXNet/Gluon/Parameter.html\">MXNet::Gluon::Parameter</a>?","location":{"filename":"src/mxnet/gluon/nn/layers.cr","line_number":205,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/nn/layers.cr#L205"},"def":{"name":"bias?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"MXNet::Gluon::Parameter | Nil","visibility":"Public","body":"(value = get_attr(\"bias\")) ? value.as(MXNet::Gluon::Parameter) : nil"}},{"id":"hybrid_forward(inputs:Array(T),params:Hash(String,T)):Array(T)forallT-instance-method","html_id":"hybrid_forward(inputs:Array(T),params:Hash(String,T)):Array(T)forallT-instance-method","name":"hybrid_forward","doc":"Override to construct symbolic graph for this `HybridBlock`.\n\n### Parameters\n* *inputs* (`Array(Symbol)` or `Array(NDArray)`)\n  Input tensors.\n","summary":"<p>Override to construct symbolic graph for this <code><a href=\"../../../../MXNet/Gluon/HybridBlock.html\">HybridBlock</a></code>.</p>","abstract":false,"args":[{"name":"inputs","doc":null,"default_value":"","external_name":"inputs","restriction":"Array(T)"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":"Hash(String, T)"}],"args_string":"(inputs : Array(T), params : Hash(String, T)) : Array(T) forall T","args_html":"(inputs : Array(T), params : Hash(String, T)) : Array(T) forall T","location":{"filename":"src/mxnet/gluon/nn/layers.cr","line_number":304,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/nn/layers.cr#L304"},"def":{"name":"hybrid_forward","args":[{"name":"inputs","doc":null,"default_value":"","external_name":"inputs","restriction":"Array(T)"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":"Hash(String, T)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(T)","visibility":"Public","body":"weight = params.delete(\"weight\")\nbias = params.delete(\"bias\")\nkwargs = {kernel: @kernel_size, stride: @strides, pad: @padding, dilate: @dilation, no_bias: bias.nil?, num_filter: @channels, layout: @layout}\noutput = T.convolution(inputs.first, weight, bias, **kwargs)\noutputs = [output]\nif self.act?\n  outputs = self.act.forward(outputs)\nend\noutputs\n"}},{"id":"weight-instance-method","html_id":"weight-instance-method","name":"weight","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/mxnet/gluon/nn/layers.cr","line_number":205,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/nn/layers.cr#L205"},"def":{"name":"weight","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"(get_attr(\"weight\")).as(MXNet::Gluon::Parameter)"}},{"id":"weight=(weight:MXNet::Gluon::Parameter?)-instance-method","html_id":"weight=(weight:MXNet::Gluon::Parameter?)-instance-method","name":"weight=","doc":null,"summary":null,"abstract":false,"args":[{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::Gluon::Parameter | Nil"}],"args_string":"(weight : MXNet::Gluon::Parameter?)","args_html":"(weight : <a href=\"../../../../MXNet/Gluon/Parameter.html\">MXNet::Gluon::Parameter</a>?)","location":{"filename":"src/mxnet/gluon/nn/layers.cr","line_number":205,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/nn/layers.cr#L205"},"def":{"name":"weight=","args":[{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::Gluon::Parameter | Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"set_attr(\"weight\", weight)"}},{"id":"weight?:MXNet::Gluon::Parameter?-instance-method","html_id":"weight?:MXNet::Gluon::Parameter?-instance-method","name":"weight?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : MXNet::Gluon::Parameter?","args_html":" : <a href=\"../../../../MXNet/Gluon/Parameter.html\">MXNet::Gluon::Parameter</a>?","location":{"filename":"src/mxnet/gluon/nn/layers.cr","line_number":205,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/nn/layers.cr#L205"},"def":{"name":"weight?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"MXNet::Gluon::Parameter | Nil","visibility":"Public","body":"(value = get_attr(\"weight\")) ? value.as(MXNet::Gluon::Parameter) : nil"}}],"macros":[],"types":[]},{"html_id":"mxnet/MXNet/Gluon/NN/Internal/Pooling","path":"MXNet/Gluon/NN/Internal/Pooling.html","kind":"class","full_name":"MXNet::Gluon::NN::Internal::Pooling","name":"Pooling","abstract":false,"superclass":{"html_id":"mxnet/MXNet/Gluon/HybridBlock","kind":"class","full_name":"MXNet::Gluon::HybridBlock","name":"HybridBlock"},"ancestors":[{"html_id":"mxnet/MXNet/Gluon/HybridBlock","kind":"class","full_name":"MXNet::Gluon::HybridBlock","name":"HybridBlock"},{"html_id":"mxnet/MXNet/Gluon/CachedGraph","kind":"module","full_name":"MXNet::Gluon::CachedGraph","name":"CachedGraph"},{"html_id":"mxnet/MXNet/Gluon/Block","kind":"class","full_name":"MXNet::Gluon::Block","name":"Block"},{"html_id":"mxnet/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"mxnet/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/mxnet/gluon/nn/layers.cr","line_number":340,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/nn/layers.cr#L340"}],"repository_name":"mxnet","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[{"html_id":"mxnet/MXNet/Gluon/NN/MaxPool1D","kind":"class","full_name":"MXNet::Gluon::NN::MaxPool1D","name":"MaxPool1D"},{"html_id":"mxnet/MXNet/Gluon/NN/MaxPool2D","kind":"class","full_name":"MXNet::Gluon::NN::MaxPool2D","name":"MaxPool2D"},{"html_id":"mxnet/MXNet/Gluon/NN/MaxPool3D","kind":"class","full_name":"MXNet::Gluon::NN::MaxPool3D","name":"MaxPool3D"}],"including_types":[],"namespace":{"html_id":"mxnet/MXNet/Gluon/NN/Internal","kind":"module","full_name":"MXNet::Gluon::NN::Internal","name":"Internal"},"doc":"Base class for pooling layers.\n","summary":"<p>Base class for pooling layers.</p>","class_methods":[],"constructors":[{"id":"new(*,pool_size:Array(Int32),strides:Array(Int32)|Int32|Nil,padding:Array(Int32)|Int32,**kwargs)-class-method","html_id":"new(*,pool_size:Array(Int32),strides:Array(Int32)|Int32|Nil,padding:Array(Int32)|Int32,**kwargs)-class-method","name":"new","doc":"Creates a new instance.\n\n`N` is the number of dimensions of the pooling layer.\n\n### Parameters\n* *pool_size* (`Array(Int32)` of N integers)\n  Specifies the dimensions of pooling operation.\n* *strides* (`Int32` or `Array(Int32)` of N integers)\n  Specifies the strides of the pooling operation.\n* *padding* (`Int32` or `Array(Int32)` of N integers)\n  If `padding` is non-zero, then the input is implicitly\n  zero-padded on both sides for `padding` number of\n  points.\n","summary":"<p>Creates a new instance.</p>","abstract":false,"args":[{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"pool_size","doc":null,"default_value":"","external_name":"pool_size","restriction":"Array(Int32)"},{"name":"strides","doc":null,"default_value":"","external_name":"strides","restriction":"Array(Int32) | Int32 | Nil"},{"name":"padding","doc":null,"default_value":"","external_name":"padding","restriction":"Array(Int32) | Int32"}],"args_string":"(*, pool_size : Array(Int32), strides : Array(Int32) | Int32 | Nil, padding : Array(Int32) | Int32, **kwargs)","args_html":"(*, pool_size : Array(Int32), strides : Array(Int32) | Int32 | Nil, padding : Array(Int32) | Int32, **kwargs)","location":{"filename":"src/mxnet/gluon/nn/layers.cr","line_number":355,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/nn/layers.cr#L355"},"def":{"name":"new","args":[{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"pool_size","doc":null,"default_value":"","external_name":"pool_size","restriction":"Array(Int32)"},{"name":"strides","doc":null,"default_value":"","external_name":"strides","restriction":"Array(Int32) | Int32 | Nil"},{"name":"padding","doc":null,"default_value":"","external_name":"padding","restriction":"Array(Int32) | Int32"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(**kwargs, pool_size: pool_size, strides: strides, padding: padding)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"hybrid_forward(inputs:Array(T),params:Hash(String,T)?=nil):Array(T)forallT-instance-method","html_id":"hybrid_forward(inputs:Array(T),params:Hash(String,T)?=nil):Array(T)forallT-instance-method","name":"hybrid_forward","doc":null,"summary":null,"abstract":false,"args":[{"name":"inputs","doc":null,"default_value":"","external_name":"inputs","restriction":"Array(T)"},{"name":"params","doc":null,"default_value":"nil","external_name":"params","restriction":"Hash(String, T) | ::Nil"}],"args_string":"(inputs : Array(T), params : Hash(String, T)? = <span class=\"n\">nil</span>) : Array(T) forall T","args_html":"(inputs : Array(T), params : Hash(String, T)? = <span class=\"n\">nil</span>) : Array(T) forall T","location":{"filename":"src/mxnet/gluon/nn/layers.cr","line_number":371,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/nn/layers.cr#L371"},"def":{"name":"hybrid_forward","args":[{"name":"inputs","doc":null,"default_value":"","external_name":"inputs","restriction":"Array(T)"},{"name":"params","doc":null,"default_value":"nil","external_name":"params","restriction":"Hash(String, T) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(T)","visibility":"Public","body":"kwargs = {kernel: @pool_size, stride: @strides, pad: @padding}\noutput = T.pooling(inputs.first, **kwargs)\n[output]\n"}}],"macros":[],"types":[]}]},{"html_id":"mxnet/MXNet/Gluon/NN/MaxPool1D","path":"MXNet/Gluon/NN/MaxPool1D.html","kind":"class","full_name":"MXNet::Gluon::NN::MaxPool1D","name":"MaxPool1D","abstract":false,"superclass":{"html_id":"mxnet/MXNet/Gluon/NN/Internal/Pooling","kind":"class","full_name":"MXNet::Gluon::NN::Internal::Pooling","name":"Pooling"},"ancestors":[{"html_id":"mxnet/MXNet/Gluon/NN/Internal/Pooling","kind":"class","full_name":"MXNet::Gluon::NN::Internal::Pooling","name":"Pooling"},{"html_id":"mxnet/MXNet/Gluon/HybridBlock","kind":"class","full_name":"MXNet::Gluon::HybridBlock","name":"HybridBlock"},{"html_id":"mxnet/MXNet/Gluon/CachedGraph","kind":"module","full_name":"MXNet::Gluon::CachedGraph","name":"CachedGraph"},{"html_id":"mxnet/MXNet/Gluon/Block","kind":"class","full_name":"MXNet::Gluon::Block","name":"Block"},{"html_id":"mxnet/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"mxnet/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/mxnet/gluon/nn/layers.cr","line_number":601,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/nn/layers.cr#L601"}],"repository_name":"mxnet","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"mxnet/MXNet/Gluon/NN","kind":"module","full_name":"MXNet::Gluon::NN","name":"NN"},"doc":"Max pooling operation for one dimensional data.\n","summary":"<p>Max pooling operation for one dimensional data.</p>","class_methods":[],"constructors":[{"id":"new(*,pool_size=2,strides=nil,padding=0,**kwargs)-class-method","html_id":"new(*,pool_size=2,strides=nil,padding=0,**kwargs)-class-method","name":"new","doc":"Creates a new instance.\n\n### Parameters\n* *pool_size* (`Array(Int32)` of 1 integer, default = `2`)\n  Specifies the size of pooling window.\n* *strides* (`Int32` or `Array(Int32)` of 1 integer, default = `nil`)\n  Specifies the strides of the pooling operation.\n* *padding* (`Int32` or `Array(Int32)` of 1 integer, default = `0`)\n  If `padding` is non-zero, then the input is implicitly\n  zero-padded on both sides for `padding` number of points.\n","summary":"<p>Creates a new instance.</p>","abstract":false,"args":[{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"pool_size","doc":null,"default_value":"2","external_name":"pool_size","restriction":""},{"name":"strides","doc":null,"default_value":"nil","external_name":"strides","restriction":""},{"name":"padding","doc":null,"default_value":"0","external_name":"padding","restriction":""}],"args_string":"(*, pool_size = <span class=\"n\">2</span>, strides = <span class=\"n\">nil</span>, padding = <span class=\"n\">0</span>, **kwargs)","args_html":"(*, pool_size = <span class=\"n\">2</span>, strides = <span class=\"n\">nil</span>, padding = <span class=\"n\">0</span>, **kwargs)","location":{"filename":"src/mxnet/gluon/nn/layers.cr","line_number":613,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/nn/layers.cr#L613"},"def":{"name":"new","args":[{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"pool_size","doc":null,"default_value":"2","external_name":"pool_size","restriction":""},{"name":"strides","doc":null,"default_value":"nil","external_name":"strides","restriction":""},{"name":"padding","doc":null,"default_value":"0","external_name":"padding","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(**kwargs, pool_size: pool_size, strides: strides, padding: padding)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[],"macros":[],"types":[]},{"html_id":"mxnet/MXNet/Gluon/NN/MaxPool2D","path":"MXNet/Gluon/NN/MaxPool2D.html","kind":"class","full_name":"MXNet::Gluon::NN::MaxPool2D","name":"MaxPool2D","abstract":false,"superclass":{"html_id":"mxnet/MXNet/Gluon/NN/Internal/Pooling","kind":"class","full_name":"MXNet::Gluon::NN::Internal::Pooling","name":"Pooling"},"ancestors":[{"html_id":"mxnet/MXNet/Gluon/NN/Internal/Pooling","kind":"class","full_name":"MXNet::Gluon::NN::Internal::Pooling","name":"Pooling"},{"html_id":"mxnet/MXNet/Gluon/HybridBlock","kind":"class","full_name":"MXNet::Gluon::HybridBlock","name":"HybridBlock"},{"html_id":"mxnet/MXNet/Gluon/CachedGraph","kind":"module","full_name":"MXNet::Gluon::CachedGraph","name":"CachedGraph"},{"html_id":"mxnet/MXNet/Gluon/Block","kind":"class","full_name":"MXNet::Gluon::Block","name":"Block"},{"html_id":"mxnet/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"mxnet/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/mxnet/gluon/nn/layers.cr","line_number":633,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/nn/layers.cr#L633"}],"repository_name":"mxnet","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"mxnet/MXNet/Gluon/NN","kind":"module","full_name":"MXNet::Gluon::NN","name":"NN"},"doc":"Max pooling operation for 2D data (e.g. images).\n","summary":"<p>Max pooling operation for 2D data (e.g.</p>","class_methods":[],"constructors":[{"id":"new(*,pool_size=2,strides=nil,padding=0,**kwargs)-class-method","html_id":"new(*,pool_size=2,strides=nil,padding=0,**kwargs)-class-method","name":"new","doc":"Creates a new instance.\n\n### Parameters\n* *pool_size* (`Array(Int32)` of 2 integers, default = `2`)\n  Specifies the size of pooling window.\n* *strides* (`Int32` or `Array(Int32)` of 2 integers, default = `nil`)\n  Specifies the strides of the pooling operation.\n* *padding* (`Int32` or `Array(Int32)` of 2 integers, default = `0`)\n  If `padding` is non-zero, then the input is implicitly\n  zero-padded on both sides for `padding` number of points.\n","summary":"<p>Creates a new instance.</p>","abstract":false,"args":[{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"pool_size","doc":null,"default_value":"2","external_name":"pool_size","restriction":""},{"name":"strides","doc":null,"default_value":"nil","external_name":"strides","restriction":""},{"name":"padding","doc":null,"default_value":"0","external_name":"padding","restriction":""}],"args_string":"(*, pool_size = <span class=\"n\">2</span>, strides = <span class=\"n\">nil</span>, padding = <span class=\"n\">0</span>, **kwargs)","args_html":"(*, pool_size = <span class=\"n\">2</span>, strides = <span class=\"n\">nil</span>, padding = <span class=\"n\">0</span>, **kwargs)","location":{"filename":"src/mxnet/gluon/nn/layers.cr","line_number":645,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/nn/layers.cr#L645"},"def":{"name":"new","args":[{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"pool_size","doc":null,"default_value":"2","external_name":"pool_size","restriction":""},{"name":"strides","doc":null,"default_value":"nil","external_name":"strides","restriction":""},{"name":"padding","doc":null,"default_value":"0","external_name":"padding","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(**kwargs, pool_size: pool_size, strides: strides, padding: padding)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[],"macros":[],"types":[]},{"html_id":"mxnet/MXNet/Gluon/NN/MaxPool3D","path":"MXNet/Gluon/NN/MaxPool3D.html","kind":"class","full_name":"MXNet::Gluon::NN::MaxPool3D","name":"MaxPool3D","abstract":false,"superclass":{"html_id":"mxnet/MXNet/Gluon/NN/Internal/Pooling","kind":"class","full_name":"MXNet::Gluon::NN::Internal::Pooling","name":"Pooling"},"ancestors":[{"html_id":"mxnet/MXNet/Gluon/NN/Internal/Pooling","kind":"class","full_name":"MXNet::Gluon::NN::Internal::Pooling","name":"Pooling"},{"html_id":"mxnet/MXNet/Gluon/HybridBlock","kind":"class","full_name":"MXNet::Gluon::HybridBlock","name":"HybridBlock"},{"html_id":"mxnet/MXNet/Gluon/CachedGraph","kind":"module","full_name":"MXNet::Gluon::CachedGraph","name":"CachedGraph"},{"html_id":"mxnet/MXNet/Gluon/Block","kind":"class","full_name":"MXNet::Gluon::Block","name":"Block"},{"html_id":"mxnet/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"mxnet/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/mxnet/gluon/nn/layers.cr","line_number":665,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/nn/layers.cr#L665"}],"repository_name":"mxnet","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"mxnet/MXNet/Gluon/NN","kind":"module","full_name":"MXNet::Gluon::NN","name":"NN"},"doc":"Max pooling operation for 3D data (spatial or spatio-temporal).\n","summary":"<p>Max pooling operation for 3D data (spatial or spatio-temporal).</p>","class_methods":[],"constructors":[{"id":"new(*,pool_size=2,strides=nil,padding=0,**kwargs)-class-method","html_id":"new(*,pool_size=2,strides=nil,padding=0,**kwargs)-class-method","name":"new","doc":"### Parameters\n* *pool_size* (`Array(Int32)` of 3 integers, default = `2`)\n  Specifies the size of pooling window.\n* *strides* (`Int32` or `Array(Int32)` of 3 integers, default = `nil`)\n  Specifies the strides of the pooling operation.\n* *padding* (`Int32` or `Array(Int32)` of 3 integers, default = `0`)\n  If `padding` is non-zero, then the input is implicitly\n  zero-padded on both sides for `padding` number of points.","summary":"<h3><a id=\"parameters-pool-size-arrayint32-of-3-integers-default-2-specifies-the-size-of-pooling-window.\" class=\"anchor\" href=\"#parameters-pool-size-arrayint32-of-3-integers-default-2-specifies-the-size-of-pooling-window.\">\n  <svg class=\"octicon-link\" aria-hidden=\"true\">\n    <use href=\"#octicon-link\"/>\n  </svg>\n</a>Parameters * <em>pool_size</em> (<code>Array(Int32)</code> of 3 integers, default = <code>2</code>)   Specifies the size of pooling window.</h3>","abstract":false,"args":[{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"pool_size","doc":null,"default_value":"2","external_name":"pool_size","restriction":""},{"name":"strides","doc":null,"default_value":"nil","external_name":"strides","restriction":""},{"name":"padding","doc":null,"default_value":"0","external_name":"padding","restriction":""}],"args_string":"(*, pool_size = <span class=\"n\">2</span>, strides = <span class=\"n\">nil</span>, padding = <span class=\"n\">0</span>, **kwargs)","args_html":"(*, pool_size = <span class=\"n\">2</span>, strides = <span class=\"n\">nil</span>, padding = <span class=\"n\">0</span>, **kwargs)","location":{"filename":"src/mxnet/gluon/nn/layers.cr","line_number":674,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/nn/layers.cr#L674"},"def":{"name":"new","args":[{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"pool_size","doc":null,"default_value":"2","external_name":"pool_size","restriction":""},{"name":"strides","doc":null,"default_value":"nil","external_name":"strides","restriction":""},{"name":"padding","doc":null,"default_value":"0","external_name":"padding","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(**kwargs, pool_size: pool_size, strides: strides, padding: padding)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[],"macros":[],"types":[]},{"html_id":"mxnet/MXNet/Gluon/NN/Sequential","path":"MXNet/Gluon/NN/Sequential.html","kind":"class","full_name":"MXNet::Gluon::NN::Sequential","name":"Sequential","abstract":false,"superclass":{"html_id":"mxnet/MXNet/Gluon/Block","kind":"class","full_name":"MXNet::Gluon::Block","name":"Block"},"ancestors":[{"html_id":"mxnet/MXNet/Gluon/Block","kind":"class","full_name":"MXNet::Gluon::Block","name":"Block"},{"html_id":"mxnet/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"mxnet/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/mxnet/gluon/nn/layers.cr","line_number":16,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/nn/layers.cr#L16"}],"repository_name":"mxnet","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"mxnet/MXNet/Gluon/NN","kind":"module","full_name":"MXNet::Gluon::NN","name":"NN"},"doc":"Stacks blocks sequentially.\n\n```\nnet = MXNet::Gluon::NN::Sequential.new\nnet.with_name_scope do\n  net.add(MXNet::Gluon::NN::Dense.new(10, activation: :relu))\n  net.add(MXNet::Gluon::NN::Dense.new(20))\nend\n```\n","summary":"<p>Stacks blocks sequentially.</p>","class_methods":[],"constructors":[{"id":"new(**kwargs)-class-method","html_id":"new(**kwargs)-class-method","name":"new","doc":"Creates a new instance.\n","summary":"<p>Creates a new instance.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":{"filename":"src/mxnet/gluon/nn/layers.cr","line_number":19,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/nn/layers.cr#L19"},"def":{"name":"new","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(**kwargs)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"[](index)-instance-method","html_id":"[](index)-instance-method","name":"[]","doc":"Returns the block at the specified index.\n\nRaises `IndexError` if the index is out of bounds.\n","summary":"<p>Returns the block at the specified index.</p>","abstract":false,"args":[{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":""}],"args_string":"(index)","args_html":"(index)","location":{"filename":"src/mxnet/gluon/nn/layers.cr","line_number":39,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/nn/layers.cr#L39"},"def":{"name":"[]","args":[{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"children[index]"}},{"id":"[]?(index)-instance-method","html_id":"[]?(index)-instance-method","name":"[]?","doc":"Returns the block at the specified index.\n\nReturns `nil` if the index is out of bounds.\n","summary":"<p>Returns the block at the specified index.</p>","abstract":false,"args":[{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":""}],"args_string":"(index)","args_html":"(index)","location":{"filename":"src/mxnet/gluon/nn/layers.cr","line_number":47,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/nn/layers.cr#L47"},"def":{"name":"[]?","args":[{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"children[index]?"}},{"id":"add(*blocks)-instance-method","html_id":"add(*blocks)-instance-method","name":"add","doc":"Adds blocks on top of the stack.\n","summary":"<p>Adds blocks on top of the stack.</p>","abstract":false,"args":[{"name":"blocks","doc":null,"default_value":"","external_name":"blocks","restriction":""}],"args_string":"(*blocks)","args_html":"(*blocks)","location":{"filename":"src/mxnet/gluon/nn/layers.cr","line_number":25,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/nn/layers.cr#L25"},"def":{"name":"add","args":[{"name":"blocks","doc":null,"default_value":"","external_name":"blocks","restriction":""}],"double_splat":null,"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"blocks.each do |block|\n  register_child(block)\nend"}},{"id":"forward(inputs:Array(T)):Array(T)forallT-instance-method","html_id":"forward(inputs:Array(T)):Array(T)forallT-instance-method","name":"forward","doc":"Runs a forward pass on all child blocks.\n\n### Parameters\n* *inputs* (`Array(Symbol)` or `Array(NDArray)`)\n  Input tensors.\n","summary":"<p>Runs a forward pass on all child blocks.</p>","abstract":false,"args":[{"name":"inputs","doc":null,"default_value":"","external_name":"inputs","restriction":"Array(T)"}],"args_string":"(inputs : Array(T)) : Array(T) forall T","args_html":"(inputs : Array(T)) : Array(T) forall T","location":{"filename":"src/mxnet/gluon/nn/layers.cr","line_number":57,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/nn/layers.cr#L57"},"def":{"name":"forward","args":[{"name":"inputs","doc":null,"default_value":"","external_name":"inputs","restriction":"Array(T)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(T)","visibility":"Public","body":"children.reduce(inputs) do |inputs, child|\n  child.call(inputs)\nend"}},{"id":"size-instance-method","html_id":"size-instance-method","name":"size","doc":"Returns the number of blocks in the sequential stack.\n","summary":"<p>Returns the number of blocks in the sequential stack.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/mxnet/gluon/nn/layers.cr","line_number":31,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/nn/layers.cr#L31"},"def":{"name":"size","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"children.size"}}],"macros":[],"types":[]}]},{"html_id":"mxnet/MXNet/Gluon/Parameter","path":"MXNet/Gluon/Parameter.html","kind":"class","full_name":"MXNet::Gluon::Parameter","name":"Parameter","abstract":false,"superclass":{"html_id":"mxnet/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"mxnet/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"mxnet/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/mxnet/gluon/parameter.cr","line_number":16,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/parameter.cr#L16"}],"repository_name":"mxnet","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[{"html_id":"mxnet/MXNet/Gluon/Constant","kind":"class","full_name":"MXNet::Gluon::Constant","name":"Constant"}],"including_types":[],"namespace":{"html_id":"mxnet/MXNet/Gluon","kind":"module","full_name":"MXNet::Gluon","name":"Gluon"},"doc":"A Container holding parameters (weights) of `Block`s.\n\n`Parameter` holds a copy of the parameter on each `Context`\nafter it is initialized with `#init`. If *grad_req* is not\n`:null`, it also holds a gradient array on each `Context`.\n","summary":"<p>A Container holding parameters (weights) of <code><a href=\"../../MXNet/Gluon/Block.html\">Block</a></code>s.</p>","class_methods":[],"constructors":[{"id":"new(name,shape=nil,dtype=nil,init=nil,allow_deferred_init=false,grad_req=:write)-class-method","html_id":"new(name,shape=nil,dtype=nil,init=nil,allow_deferred_init=false,grad_req=:write)-class-method","name":"new","doc":"Creates a new instance.\n\n### Parameters\n* *name* (`String`)\n  Name of this parameter.\n* *shape* (`Int` | `Array(Int)`, optional)\n  Shape of this parameter.  By default, shape is inferred.\n* *dtype* (`Symbol`, default `:float32`)\n  Data type of this parameter.\n* *init* (`Initializer`, optional)\n  The initializer to use.\n* *allow_deferred_init* (`Bool`, default = `false`)\n  Is deferred initialization allowed.\n* *grad_req* (`Symbol`, default  `:write`)\n  * `:write`: updated is written to the gradient\n  * `:add`: update is added to the existing gradient.\n  * `:null`: gradient is not supported on this parameter\n","summary":"<p>Creates a new instance.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"shape","doc":null,"default_value":"nil","external_name":"shape","restriction":""},{"name":"dtype","doc":null,"default_value":"nil","external_name":"dtype","restriction":""},{"name":"init","doc":null,"default_value":"nil","external_name":"init","restriction":""},{"name":"allow_deferred_init","doc":null,"default_value":"false","external_name":"allow_deferred_init","restriction":""},{"name":"grad_req","doc":null,"default_value":":write","external_name":"grad_req","restriction":""}],"args_string":"(name, shape = <span class=\"n\">nil</span>, dtype = <span class=\"n\">nil</span>, init = <span class=\"n\">nil</span>, allow_deferred_init = <span class=\"n\">false</span>, grad_req = <span class=\"n\">:write</span>)","args_html":"(name, shape = <span class=\"n\">nil</span>, dtype = <span class=\"n\">nil</span>, init = <span class=\"n\">nil</span>, allow_deferred_init = <span class=\"n\">false</span>, grad_req = <span class=\"n\">:write</span>)","location":{"filename":"src/mxnet/gluon/parameter.cr","line_number":52,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/parameter.cr#L52"},"def":{"name":"new","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"shape","doc":null,"default_value":"nil","external_name":"shape","restriction":""},{"name":"dtype","doc":null,"default_value":"nil","external_name":"dtype","restriction":""},{"name":"init","doc":null,"default_value":"nil","external_name":"init","restriction":""},{"name":"allow_deferred_init","doc":null,"default_value":"false","external_name":"allow_deferred_init","restriction":""},{"name":"grad_req","doc":null,"default_value":":write","external_name":"grad_req","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(name, shape, dtype, init, allow_deferred_init, grad_req)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"==(other:self)-instance-method","html_id":"==(other:self)-instance-method","name":"==","doc":"Returns `true` if this reference is the same as *other*. Invokes `same?`.","summary":"<p>Returns <code>true</code> if this reference is the same as <em>other</em>.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"self"}],"args_string":"(other : <span class=\"k\">self</span>)","args_html":"(other : <span class=\"k\">self</span>)","location":{"filename":"src/mxnet/gluon/parameter.cr","line_number":242,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/parameter.cr#L242"},"def":{"name":"==","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"self"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"(self.name == other.name) && (self.shape == other.shape)"}},{"id":"data(ctx=nil)-instance-method","html_id":"data(ctx=nil)-instance-method","name":"data","doc":"Returns a copy of this parameter on one context. Must have been\ninitialized on this context before.\n\n### Parameters\n* *ctx* (`Context`, optional)\n  Desired context.\n","summary":"<p>Returns a copy of this parameter on one context.</p>","abstract":false,"args":[{"name":"ctx","doc":null,"default_value":"nil","external_name":"ctx","restriction":""}],"args_string":"(ctx = <span class=\"n\">nil</span>)","args_html":"(ctx = <span class=\"n\">nil</span>)","location":{"filename":"src/mxnet/gluon/parameter.cr","line_number":155,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/parameter.cr#L155"},"def":{"name":"data","args":[{"name":"ctx","doc":null,"default_value":"nil","external_name":"ctx","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"(check_and_get(@data, ctx)).first"}},{"id":"dtype:Symbol?-instance-method","html_id":"dtype:Symbol?-instance-method","name":"dtype","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Symbol?","args_html":" : Symbol?","location":{"filename":"src/mxnet/gluon/parameter.cr","line_number":60,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/parameter.cr#L60"},"def":{"name":"dtype","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@dtype"}},{"id":"dtype=(dtype)-instance-method","html_id":"dtype=(dtype)-instance-method","name":"dtype=","doc":null,"summary":null,"abstract":false,"args":[{"name":"dtype","doc":null,"default_value":"","external_name":"dtype","restriction":""}],"args_string":"(dtype)","args_html":"(dtype)","location":{"filename":"src/mxnet/gluon/parameter.cr","line_number":75,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/parameter.cr#L75"},"def":{"name":"dtype=","args":[{"name":"dtype","doc":null,"default_value":"","external_name":"dtype","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@dtype = dtype"}},{"id":"grad(ctx=nil)-instance-method","html_id":"grad(ctx=nil)-instance-method","name":"grad","doc":"Returns a gradient buffer for this parameter on one context.\nMust have been initialized on this context before.\n\n### Parameters\n* *ctx* (`Context`, optional)\n  Desired context.\n","summary":"<p>Returns a gradient buffer for this parameter on one context.</p>","abstract":false,"args":[{"name":"ctx","doc":null,"default_value":"nil","external_name":"ctx","restriction":""}],"args_string":"(ctx = <span class=\"n\">nil</span>)","args_html":"(ctx = <span class=\"n\">nil</span>)","location":{"filename":"src/mxnet/gluon/parameter.cr","line_number":197,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/parameter.cr#L197"},"def":{"name":"grad","args":[{"name":"ctx","doc":null,"default_value":"nil","external_name":"ctx","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if (!@grad) && @data\n  raise(Exception.new(\"Cannot get gradient buffer for Parameter '#{name}' because grad_req = :null.\"))\nend\n(check_and_get(@grad, ctx)).first\n"}},{"id":"init(init=nil,ctx=nil,default_init=:uniform,force_reinit=false)-instance-method","html_id":"init(init=nil,ctx=nil,default_init=:uniform,force_reinit=false)-instance-method","name":"init","doc":"Initializes parameter and gradient arrays. Only used with\n`NDArray` API.\n\n### Parameters\n* *init* (`Initializer`, default = `nil`)\n  The initializer to use. Overrides both *init*, set when this\n  instance was created, and *default_init* in this call.\n* *ctx* (`Context` | `Array(Context)`, default = `nil`)\n  Initialize `Parameter` on given `Context`s. A copy will be\n  created for each context. Note: copies are independent\n  arrays. The programmer is responsible for keeping values\n  consistent when updating. Normally `Trainer` does this for\n  you.\n* *default_init* (`Initializer`, default = `:uniform`)\n  Default initializer.\n* *force_reinit* (`Bool`, default = `false`)\n  Whether to force re-initialization if parameter is already\n  initialized.\n\n    weight = MXNet::Gluon::Parameter.new('weight', shape: [2, 2])\n    weight.init(ctx: MXNet.cpu)\n    weight.data # => [[0.0068339, 0.0129982],...\n    weight.grad # => [[0, 0],...\n","summary":"<p>Initializes parameter and gradient arrays.</p>","abstract":false,"args":[{"name":"init","doc":null,"default_value":"nil","external_name":"init","restriction":""},{"name":"ctx","doc":null,"default_value":"nil","external_name":"ctx","restriction":""},{"name":"default_init","doc":null,"default_value":":uniform","external_name":"default_init","restriction":""},{"name":"force_reinit","doc":null,"default_value":"false","external_name":"force_reinit","restriction":""}],"args_string":"(init = <span class=\"n\">nil</span>, ctx = <span class=\"n\">nil</span>, default_init = <span class=\"n\">:uniform</span>, force_reinit = <span class=\"n\">false</span>)","args_html":"(init = <span class=\"n\">nil</span>, ctx = <span class=\"n\">nil</span>, default_init = <span class=\"n\">:uniform</span>, force_reinit = <span class=\"n\">false</span>)","location":{"filename":"src/mxnet/gluon/parameter.cr","line_number":105,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/parameter.cr#L105"},"def":{"name":"init","args":[{"name":"init","doc":null,"default_value":"nil","external_name":"init","restriction":""},{"name":"ctx","doc":null,"default_value":"nil","external_name":"ctx","restriction":""},{"name":"default_init","doc":null,"default_value":":uniform","external_name":"default_init","restriction":""},{"name":"force_reinit","doc":null,"default_value":"false","external_name":"force_reinit","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if @data.nil? || force_reinit\nelse\n  return self\nend\nif init.nil?\n  init = (@init || default_init)\nend\nif ctx.nil?\n  ctx = [MXNet::Context.current]\nend\nif ctx.is_a?(MXNet::Context)\n  ctx = [ctx]\nend\n@ctx = ctx\n@data = @grad = nil\nif (shape = @shape) && shape.flatten.product > 0\nelse\n  if @allow_deferred_init\n  else\n    raise(Exception.new(\"Cannot initialize Parameter '#{@name}' because it has invalid shape: #{shape}.\"))\n  end\n  @deferred_init = DeferredInit.new(ctx, init, nil)\n  return self\nend\n@deferred_init = DeferredInit.new(ctx, init, nil)\n_finish_deferred_init\nself\n"}},{"id":"list_ctx-instance-method","html_id":"list_ctx-instance-method","name":"list_ctx","doc":"Returns a list of contexts this parameter is initialized on.\n","summary":"<p>Returns a list of contexts this parameter is initialized on.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/mxnet/gluon/parameter.cr","line_number":131,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/parameter.cr#L131"},"def":{"name":"list_ctx","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if @data.nil?\n  @deferred_init.try(&.ctx) || (raise(Exception.new(\"Parameter '#{@name}' has not been initialized.\")))\nelse\n  @ctx\nend"}},{"id":"list_data-instance-method","html_id":"list_data-instance-method","name":"list_data","doc":"Returns copies of this parameter on all contexts, in the same\norder as creation.\n","summary":"<p>Returns copies of this parameter on all contexts, in the same order as creation.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/mxnet/gluon/parameter.cr","line_number":162,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/parameter.cr#L162"},"def":{"name":"list_data","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"check_and_get(@data, :all)"}},{"id":"list_grad-instance-method","html_id":"list_grad-instance-method","name":"list_grad","doc":"Returns gradient buffers on all contexts, in the same order as\ncreation.\n","summary":"<p>Returns gradient buffers on all contexts, in the same order as creation.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/mxnet/gluon/parameter.cr","line_number":210,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/parameter.cr#L210"},"def":{"name":"list_grad","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if (!@grad) && @data\n  raise(Exception.new(\"Cannot get gradient buffers for Parameter '#{name}' because grad_req = :null.\"))\nend\ncheck_and_get(@grad, :all)\n"}},{"id":"name:String-instance-method","html_id":"name:String-instance-method","name":"name","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","args_html":" : String","location":{"filename":"src/mxnet/gluon/parameter.cr","line_number":60,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/parameter.cr#L60"},"def":{"name":"name","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@name"}},{"id":"set_data(data)-instance-method","html_id":"set_data(data)-instance-method","name":"set_data","doc":"Sets this parameter's value on all contexts.\n","summary":"<p>Sets this parameter's value on all contexts.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data)","args_html":"(data)","location":{"filename":"src/mxnet/gluon/parameter.cr","line_number":168,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/parameter.cr#L168"},"def":{"name":"set_data","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.shape = data.shape\nif @data\n  (check_and_get(@data, :all)).each do |arr|\n    arr[0..-1] = data\n  end\nelse\n  if @deferred_init.nil?\n    raise(Exception.new(\"Parameter '#{@name}' has not been initialized.\"))\n  end\n  @deferred_init = @deferred_init.try do |deferred_init|\n    DeferredInit.new(deferred_init.ctx, deferred_init.init, data)\n  end\nend\n"}},{"id":"shape:Array(Int32)?-instance-method","html_id":"shape:Array(Int32)?-instance-method","name":"shape","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(Int32)?","args_html":" : Array(Int32)?","location":{"filename":"src/mxnet/gluon/parameter.cr","line_number":60,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/parameter.cr#L60"},"def":{"name":"shape","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@shape"}},{"id":"shape=(shape)-instance-method","html_id":"shape=(shape)-instance-method","name":"shape=","doc":null,"summary":null,"abstract":false,"args":[{"name":"shape","doc":null,"default_value":"","external_name":"shape","restriction":""}],"args_string":"(shape)","args_html":"(shape)","location":{"filename":"src/mxnet/gluon/parameter.cr","line_number":62,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/parameter.cr#L62"},"def":{"name":"shape=","args":[{"name":"shape","doc":null,"default_value":"","external_name":"shape","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if (this = @shape)\n  if (this.size == shape.size) && (this.zip(shape)).all? do |i, j|\n    (i == j) || (i == 0)\n  end\n  else\n    raise(Exception.new(\"Expected shape #{shape} is incompatible with given shape #{this}.\"))\n  end\nend\n@shape = shape\n"}},{"id":"to_s(io)-instance-method","html_id":"to_s(io)-instance-method","name":"to_s","doc":"Writes this object to an `IO`.\n","summary":"<p>Writes this object to an <code>IO</code>.</p>","abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/mxnet/gluon/parameter.cr","line_number":238,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/parameter.cr#L238"},"def":{"name":"to_s","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"io << \"Parameter #{@name} (shape=#{@shape}, dtype=#{@dtype})\""}},{"id":"trainer:MXNet::Gluon::Trainer?-instance-method","html_id":"trainer:MXNet::Gluon::Trainer?-instance-method","name":"trainer","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : MXNet::Gluon::Trainer?","args_html":" : <a href=\"../../MXNet/Gluon/Trainer.html\">MXNet::Gluon::Trainer</a>?","location":{"filename":"src/mxnet/gluon/parameter.cr","line_number":79,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/parameter.cr#L79"},"def":{"name":"trainer","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@trainer"}},{"id":"trainer=(trainer)-instance-method","html_id":"trainer=(trainer)-instance-method","name":"trainer=","doc":null,"summary":null,"abstract":false,"args":[{"name":"trainer","doc":null,"default_value":"","external_name":"trainer","restriction":""}],"args_string":"(trainer)","args_html":"(trainer)","location":{"filename":"src/mxnet/gluon/parameter.cr","line_number":79,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/parameter.cr#L79"},"def":{"name":"trainer=","args":[{"name":"trainer","doc":null,"default_value":"","external_name":"trainer","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@trainer = trainer"}},{"id":"var-instance-method","html_id":"var-instance-method","name":"var","doc":"Returns a symbol representing this parameter.\n","summary":"<p>Returns a symbol representing this parameter.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/mxnet/gluon/parameter.cr","line_number":144,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/parameter.cr#L144"},"def":{"name":"var","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@var || (@var = MXNet::Symbol.var(@name, shape: @shape, dtype: @dtype))"}},{"id":"zero_grad-instance-method","html_id":"zero_grad-instance-method","name":"zero_grad","doc":"Sets gradient buffer to zero on all contexts.\n","summary":"<p>Sets gradient buffer to zero on all contexts.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/mxnet/gluon/parameter.cr","line_number":222,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/parameter.cr#L222"},"def":{"name":"zero_grad","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if @grad\n  (check_and_get(@grad, :all)).each do |arr|\n    arr[0..-1] = 0\n  end\nelse\n  if @deferred_init.nil?\n    raise(Exception.new(\"Parameter '#{@name}' has not been initialized.\"))\n  end\nend"}}],"macros":[],"types":[]},{"html_id":"mxnet/MXNet/Gluon/ParameterDict","path":"MXNet/Gluon/ParameterDict.html","kind":"class","full_name":"MXNet::Gluon::ParameterDict","name":"ParameterDict","abstract":false,"superclass":{"html_id":"mxnet/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"mxnet/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"mxnet/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"mxnet/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/mxnet/gluon/parameter.cr","line_number":437,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/parameter.cr#L437"}],"repository_name":"mxnet","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[{"html_id":"mxnet/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"mxnet/MXNet/Gluon","kind":"module","full_name":"MXNet::Gluon","name":"Gluon"},"doc":"A dictionary managing a set of `Parameter`s.\n","summary":"<p>A dictionary managing a set of <code><a href=\"../../MXNet/Gluon/Parameter.html\">Parameter</a></code>s.</p>","class_methods":[],"constructors":[{"id":"new(prefix=&quot;&quot;,shared=nil)-class-method","html_id":"new(prefix=&quot;&quot;,shared=nil)-class-method","name":"new","doc":"Creates a new instance.\n\n### Parameters\n* *prefix* (`String`, default \"\")\n  The prefix to be prepended to all `Parameter`s' names\n  created by this dict.\n* *shared* (`ParameterDict`, optional)\n  If not `nil`, when this dict's `#get` method creates a new\n  parameter, it will first try to retrieve it from *shared*\n  dict. Usually used for sharing parameters with another\n  `Block`.\n","summary":"<p>Creates a new instance.</p>","abstract":false,"args":[{"name":"prefix","doc":null,"default_value":"\"\"","external_name":"prefix","restriction":""},{"name":"shared","doc":null,"default_value":"nil","external_name":"shared","restriction":""}],"args_string":"(prefix = <span class=\"s\">&quot;&quot;</span>, shared = <span class=\"n\">nil</span>)","args_html":"(prefix = <span class=\"s\">&quot;&quot;</span>, shared = <span class=\"n\">nil</span>)","location":{"filename":"src/mxnet/gluon/parameter.cr","line_number":456,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/parameter.cr#L456"},"def":{"name":"new","args":[{"name":"prefix","doc":null,"default_value":"\"\"","external_name":"prefix","restriction":""},{"name":"shared","doc":null,"default_value":"nil","external_name":"shared","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(prefix, shared)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"==(other:self)-instance-method","html_id":"==(other:self)-instance-method","name":"==","doc":"Returns `true` if this reference is the same as *other*. Invokes `same?`.","summary":"<p>Returns <code>true</code> if this reference is the same as <em>other</em>.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"self"}],"args_string":"(other : <span class=\"k\">self</span>)","args_html":"(other : <span class=\"k\">self</span>)","location":{"filename":"src/mxnet/gluon/parameter.cr","line_number":634,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/parameter.cr#L634"},"def":{"name":"==","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"self"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"(self.prefix == other.prefix) && (self.to_a == other.to_a)"}},{"id":"each(&)-instance-method","html_id":"each(&)-instance-method","name":"each","doc":"Must yield this collection's elements to the block.","summary":"<p>Must yield this collection's elements to the block.</p>","abstract":false,"args":[],"args_string":"(&)","args_html":"(&)","location":{"filename":"src/mxnet/gluon/parameter.cr","line_number":459,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/parameter.cr#L459"},"def":{"name":"each","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"@params.each do |k, v|\n  yield {k, v}\nend"}},{"id":"get(name,**kwargs)-instance-method","html_id":"get(name,**kwargs)-instance-method","name":"get","doc":"Retrieves a `Parameter` with name \"<prefix><name>\". If not\nfound, `#get` will first try to retrieve it from *shared*\ndict. If still not found, `#get` will create a new `Parameter`\nwith key-word arguments and both store and return it.\n\n### Parameters\n* *name* (`String`)\n  Name of the desired `Parameter`. It will be prepended with\n  this dict's *prefix*.\n","summary":"<p>Retrieves a <code><a href=\"../../MXNet/Gluon/Parameter.html\">Parameter</a></code> with name \"&lt;prefix>&lt;name>\".</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"args_string":"(name, **kwargs)","args_html":"(name, **kwargs)","location":{"filename":"src/mxnet/gluon/parameter.cr","line_number":498,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/parameter.cr#L498"},"def":{"name":"get","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"name = @prefix + name\nif param = _get(name)\nelse\n  param = @params[name] = Parameter.new(name, **kwargs)\nend\nparam\n"}},{"id":"has_key?(key)-instance-method","html_id":"has_key?(key)-instance-method","name":"has_key?","doc":null,"summary":null,"abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":""}],"args_string":"(key)","args_html":"(key)","location":{"filename":"src/mxnet/gluon/parameter.cr","line_number":469,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/parameter.cr#L469"},"def":{"name":"has_key?","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@params.has_key?(key)"}},{"id":"has_value?(value)-instance-method","html_id":"has_value?(value)-instance-method","name":"has_value?","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"args_string":"(value)","args_html":"(value)","location":{"filename":"src/mxnet/gluon/parameter.cr","line_number":477,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/parameter.cr#L477"},"def":{"name":"has_value?","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@params.has_value?(value)"}},{"id":"init(init=nil,ctx=nil,force_reinit=false)-instance-method","html_id":"init(init=nil,ctx=nil,force_reinit=false)-instance-method","name":"init","doc":"Initializes all `Parameter`s managed by this dict for use with\n`NDArray` API. It has no effect when using `Symbol` API.\n\n### Parameters\n* *init* (`Initializer`, optional)\n  The initializer to use.\n* *ctx* (`Context` | `Array(Context)`, optional)\n  Desired contexts. Initializes `Parameter` on given contexts.\n* *force_reinit* (`Boolean`, default = `false`)\n   Whether to force re-initialization if parameters are\n   already initialized.\n","summary":"<p>Initializes all <code><a href=\"../../MXNet/Gluon/Parameter.html\">Parameter</a></code>s managed by this dict for use with <code><a href=\"../../MXNet/NDArray.html\">NDArray</a></code> API.</p>","abstract":false,"args":[{"name":"init","doc":null,"default_value":"nil","external_name":"init","restriction":""},{"name":"ctx","doc":null,"default_value":"nil","external_name":"ctx","restriction":""},{"name":"force_reinit","doc":null,"default_value":"false","external_name":"force_reinit","restriction":""}],"args_string":"(init = <span class=\"n\">nil</span>, ctx = <span class=\"n\">nil</span>, force_reinit = <span class=\"n\">false</span>)","args_html":"(init = <span class=\"n\">nil</span>, ctx = <span class=\"n\">nil</span>, force_reinit = <span class=\"n\">false</span>)","location":{"filename":"src/mxnet/gluon/parameter.cr","line_number":537,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/parameter.cr#L537"},"def":{"name":"init","args":[{"name":"init","doc":null,"default_value":"nil","external_name":"init","restriction":""},{"name":"ctx","doc":null,"default_value":"nil","external_name":"ctx","restriction":""},{"name":"force_reinit","doc":null,"default_value":"false","external_name":"force_reinit","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"values.each do |v|\n  v.init(init: init, ctx: ctx, force_reinit: force_reinit)\nend"}},{"id":"keys-instance-method","html_id":"keys-instance-method","name":"keys","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/mxnet/gluon/parameter.cr","line_number":465,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/parameter.cr#L465"},"def":{"name":"keys","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@params.keys"}},{"id":"load(fname,ctx=nil,allow_missing=false,ignore_extra=false,restore_prefix=&quot;&quot;)-instance-method","html_id":"load(fname,ctx=nil,allow_missing=false,ignore_extra=false,restore_prefix=&quot;&quot;)-instance-method","name":"load","doc":"Loads parameters from a file.\n\n### Parameters\n* *fname* (`String`)\n  Path to parameter file.\n* *ctx* (`Context` | `Array(Context)`, default = `nil`)\n  Context(s) to initialize loaded parameters on.\n* *allow_missing* (`Bool`, default = `false`)\n  Whether to silently skip loading parameters not present\n  in the file.\n* *ignore_extra* (`Bool`, default = `false`)\n  Whether to silently ignore parameters from the file that are\n  not present in this dict.\n* *restore_prefix* (`String`, default = \"\")\n  Prefix to prepend to names of stored parameters before\n  loading.\n","summary":"<p>Loads parameters from a file.</p>","abstract":false,"args":[{"name":"fname","doc":null,"default_value":"","external_name":"fname","restriction":""},{"name":"ctx","doc":null,"default_value":"nil","external_name":"ctx","restriction":""},{"name":"allow_missing","doc":null,"default_value":"false","external_name":"allow_missing","restriction":""},{"name":"ignore_extra","doc":null,"default_value":"false","external_name":"ignore_extra","restriction":""},{"name":"restore_prefix","doc":null,"default_value":"\"\"","external_name":"restore_prefix","restriction":""}],"args_string":"(fname, ctx = <span class=\"n\">nil</span>, allow_missing = <span class=\"n\">false</span>, ignore_extra = <span class=\"n\">false</span>, restore_prefix = <span class=\"s\">&quot;&quot;</span>)","args_html":"(fname, ctx = <span class=\"n\">nil</span>, allow_missing = <span class=\"n\">false</span>, ignore_extra = <span class=\"n\">false</span>, restore_prefix = <span class=\"s\">&quot;&quot;</span>)","location":{"filename":"src/mxnet/gluon/parameter.cr","line_number":582,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/parameter.cr#L582"},"def":{"name":"load","args":[{"name":"fname","doc":null,"default_value":"","external_name":"fname","restriction":""},{"name":"ctx","doc":null,"default_value":"nil","external_name":"ctx","restriction":""},{"name":"allow_missing","doc":null,"default_value":"false","external_name":"allow_missing","restriction":""},{"name":"ignore_extra","doc":null,"default_value":"false","external_name":"ignore_extra","restriction":""},{"name":"restore_prefix","doc":null,"default_value":"\"\"","external_name":"restore_prefix","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if restore_prefix.empty?\nelse\n  values.each do |v|\n    if v.name.starts_with?(restore_prefix)\n    else\n      raise(ArgumentError.new(\"Name #{v.name} does not start with #{restore_prefix}.\"))\n    end\n  end\nend\nlprefix = restore_prefix.size\nloaded = MXNet::NDArray.load(fname)\nif loaded.is_a?(Hash(String, NDArray))\nelse\n  raise(Exception.new(\"Can't load from format #{loaded.class}.\"))\nend\narg_dict = loaded.transform_keys do |k|\n  restore_prefix + k\nend\nif allow_missing\nelse\n  keys.each do |k|\n    if arg_dict.has_key?(k)\n    else\n      raise(Exception.new(\"Parameter '#{k[lprefix..-1]}' is missing from file. Set `allow_missing` to `true` to ignore.\"))\n    end\n  end\nend\narg_dict.each do |k, v|\n  if @params.has_key?(k)\n  else\n    if ignore_extra\n    else\n      raise(Exception.new(\"Value '#{k[lprefix..-1]}' from file is not present in dict. Set `ignore_extra` to `true` to ignore.\"))\n    end\n    next\n  end\n  @params[k]._load_init(ctx, v)\nend\n"}},{"id":"prefix:String-instance-method","html_id":"prefix:String-instance-method","name":"prefix","doc":"Prefix of this dict. It will be prepended to a `Parameter`'s\nname created with `#get`.\n","summary":"<p>Prefix of this dict.</p>","abstract":false,"args":[],"args_string":" : String","args_html":" : String","location":{"filename":"src/mxnet/gluon/parameter.cr","line_number":484,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/parameter.cr#L484"},"def":{"name":"prefix","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@prefix"}},{"id":"save(fname,strip_prefix=&quot;&quot;)-instance-method","html_id":"save(fname,strip_prefix=&quot;&quot;)-instance-method","name":"save","doc":"Saves parameters to a file.\n\n### Parameters\n* *fname* (`String`)\n  Path to parameter file.\n* *strip_prefix* (`String`, default = \"\")\n  Prefix to strip from parameter names before saving.\n","summary":"<p>Saves parameters to a file.</p>","abstract":false,"args":[{"name":"fname","doc":null,"default_value":"","external_name":"fname","restriction":""},{"name":"strip_prefix","doc":null,"default_value":"\"\"","external_name":"strip_prefix","restriction":""}],"args_string":"(fname, strip_prefix = <span class=\"s\">&quot;&quot;</span>)","args_html":"(fname, strip_prefix = <span class=\"s\">&quot;&quot;</span>)","location":{"filename":"src/mxnet/gluon/parameter.cr","line_number":551,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/parameter.cr#L551"},"def":{"name":"save","args":[{"name":"fname","doc":null,"default_value":"","external_name":"fname","restriction":""},{"name":"strip_prefix","doc":null,"default_value":"\"\"","external_name":"strip_prefix","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"arg_dict = {} of String => NDArray\nvalues.each do |v|\n  weight = v._reduce\n  if v.name.starts_with?(strip_prefix)\n  else\n    raise(ArgumentError.new(\"Name #{v.name} does not start with #{strip_prefix}.\"))\n  end\n  arg_dict[v.name[strip_prefix.size..-1]] = weight\nend\nNDArray.save(fname, arg_dict)\n"}},{"id":"to_s(io)-instance-method","html_id":"to_s(io)-instance-method","name":"to_s","doc":"Writes this object to an `IO`.\n","summary":"<p>Writes this object to an <code>IO</code>.</p>","abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/mxnet/gluon/parameter.cr","line_number":628,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/parameter.cr#L628"},"def":{"name":"to_s","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"io << \"ParameterDict (\\n\"\nself.each do |_, v|\n  io << \"  #{v}\\n\"\nend\nio << \")\"\n"}},{"id":"update(other:Enumerable(Tuple(String,Parameter)))-instance-method","html_id":"update(other:Enumerable(Tuple(String,Parameter)))-instance-method","name":"update","doc":"Copies all `Parameter`s in *other* into this dict.\n\n### Parameters\n* *other* (`Enumerable({String, Parameter})`)\n  Dict to copy from.\n","summary":"<p>Copies all <code><a href=\"../../MXNet/Gluon/Parameter.html\">Parameter</a></code>s in <em>other</em> into this dict.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Enumerable(::Tuple(String, Parameter))"}],"args_string":"(other : Enumerable(Tuple(String, Parameter)))","args_html":"(other : Enumerable(Tuple(String, <a href=\"../../MXNet/Gluon/Parameter.html\">Parameter</a>)))","location":{"filename":"src/mxnet/gluon/parameter.cr","line_number":512,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/parameter.cr#L512"},"def":{"name":"update","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Enumerable(::Tuple(String, Parameter))"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"other.each do |k, v|\n  if @params[k]? && (@params[k] != v)\n    raise(ArgumentError.new(\"Cannot update because keys have different values: #{@params[k]}, #{v}\"))\n  end\nend\nother.each do |k, v|\n  @params[k] = v\nend\n"}},{"id":"values-instance-method","html_id":"values-instance-method","name":"values","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/mxnet/gluon/parameter.cr","line_number":473,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/parameter.cr#L473"},"def":{"name":"values","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@params.values"}}],"macros":[],"types":[]},{"html_id":"mxnet/MXNet/Gluon/SymbolBlock","path":"MXNet/Gluon/SymbolBlock.html","kind":"class","full_name":"MXNet::Gluon::SymbolBlock","name":"SymbolBlock","abstract":false,"superclass":{"html_id":"mxnet/MXNet/Gluon/Block","kind":"class","full_name":"MXNet::Gluon::Block","name":"Block"},"ancestors":[{"html_id":"mxnet/MXNet/Gluon/CachedGraph","kind":"module","full_name":"MXNet::Gluon::CachedGraph","name":"CachedGraph"},{"html_id":"mxnet/MXNet/Gluon/Block","kind":"class","full_name":"MXNet::Gluon::Block","name":"Block"},{"html_id":"mxnet/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"mxnet/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/mxnet/gluon/block.cr","line_number":550,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/block.cr#L550"}],"repository_name":"mxnet","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[{"html_id":"mxnet/MXNet/Gluon/CachedGraph","kind":"module","full_name":"MXNet::Gluon::CachedGraph","name":"CachedGraph"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"mxnet/MXNet/Gluon","kind":"module","full_name":"MXNet::Gluon","name":"Gluon"},"doc":"A block constructed from a `Symbol`. This is useful for using\npre-trained models as feature extractors.\n","summary":"<p>A block constructed from a <code><a href=\"../../MXNet/Symbol.html\">Symbol</a></code>.</p>","class_methods":[{"id":"import(filename,inputs,epoch=0,ctx=MXNet.cpu,allow_missing=false,ignore_extra=false)-class-method","html_id":"import(filename,inputs,epoch=0,ctx=MXNet.cpu,allow_missing=false,ignore_extra=false)-class-method","name":"import","doc":"Imports model and parameters previously saved by\n`HybridBlock#export` as a `SymbolBlock` for use in Gluon.\n\n### Parameters\n* *filename* (`String`)\n  Path and base filename from which to load model and\n  parameters. Two files, \"[filename]-symbol.json\" and\n  \"[filename]-NNNN.params\" will be loaded, where `NNNN` is\n  the 4 digit epoch number.\n* *inputs* (`String` or `Array(String)`)\n  Input names.\n* *epoch* (`Integer`, default = `0`)\n  Epoch number of saved model.\n* *ctx* (`Context` or `Array(Context)`, default = cpu)\n  Context(s) to initialize loaded parameters on.\n","summary":"<p>Imports model and parameters previously saved by <code><a href=\"../../MXNet/Gluon/HybridBlock.html#export(filename,epoch=0)-instance-method\">HybridBlock#export</a></code> as a <code><a href=\"../../MXNet/Gluon/SymbolBlock.html\">SymbolBlock</a></code> for use in Gluon.</p>","abstract":false,"args":[{"name":"filename","doc":null,"default_value":"","external_name":"filename","restriction":""},{"name":"inputs","doc":null,"default_value":"","external_name":"inputs","restriction":""},{"name":"epoch","doc":null,"default_value":"0","external_name":"epoch","restriction":""},{"name":"ctx","doc":null,"default_value":"MXNet.cpu","external_name":"ctx","restriction":""},{"name":"allow_missing","doc":null,"default_value":"false","external_name":"allow_missing","restriction":""},{"name":"ignore_extra","doc":null,"default_value":"false","external_name":"ignore_extra","restriction":""}],"args_string":"(filename, inputs, epoch = <span class=\"n\">0</span>, ctx = <span class=\"t\">MXNet</span>.cpu, allow_missing = <span class=\"n\">false</span>, ignore_extra = <span class=\"n\">false</span>)","args_html":"(filename, inputs, epoch = <span class=\"n\">0</span>, ctx = <span class=\"t\">MXNet</span>.cpu, allow_missing = <span class=\"n\">false</span>, ignore_extra = <span class=\"n\">false</span>)","location":{"filename":"src/mxnet/gluon/block.cr","line_number":647,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/block.cr#L647"},"def":{"name":"import","args":[{"name":"filename","doc":null,"default_value":"","external_name":"filename","restriction":""},{"name":"inputs","doc":null,"default_value":"","external_name":"inputs","restriction":""},{"name":"epoch","doc":null,"default_value":"0","external_name":"epoch","restriction":""},{"name":"ctx","doc":null,"default_value":"MXNet.cpu","external_name":"ctx","restriction":""},{"name":"allow_missing","doc":null,"default_value":"false","external_name":"allow_missing","restriction":""},{"name":"ignore_extra","doc":null,"default_value":"false","external_name":"ignore_extra","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if inputs.is_a?(Array)\nelse\n  inputs = [inputs]\nend\ninputs = inputs.map do |i|\n  MXNet::Symbol.var(i)\nend\noutputs = [MXNet::Symbol.load(\"%s-symbol.json\" % filename)]\n(SymbolBlock.new(outputs, inputs)).tap do |block|\n  if epoch\n    filename = \"%s-%04d.params\" % [filename, epoch]\n    arg_dict = (MXNet::NDArray.load(filename)).as(Hash(String, MXNet::NDArray))\n    arg_dict = arg_dict.transform_keys do |k|\n      k.gsub(/^(arg:|aux:)/, \"\")\n    end\n    if allow_missing\n    else\n      block.params.keys.each do |key|\n        if arg_dict.has_key?(key)\n        else\n          raise(Exception.new(\"Parameter '#{key}' is missing in file '#{filename}'. Set allow_missing: true to ignore missing parameters.\"))\n        end\n      end\n    end\n    if ignore_extra\n    else\n      arg_dict.keys.each do |key|\n        if block.params.has_key?(key)\n        else\n          raise(Exception.new(\"Parameter '#{key}' loaded from file '#{filename}' is not present in this block. Set ignore_extra: true to ignore extra parameters.\"))\n        end\n      end\n    end\n    arg_dict.each do |key, value|\n      param = block.params.get(key)\n      param.shape = value.shape\n      param._load_init(ctx, value)\n    end\n  end\nend\n"}}],"constructors":[{"id":"new(outputs,inputs,params=nil)-class-method","html_id":"new(outputs,inputs,params=nil)-class-method","name":"new","doc":"Creates a new instance.\n\n### Parameters\n* *outputs* (`Array(Symbol)`)\n  The desired outputs.\n* *inputs* (`Array(Symbol)`)\n  The output's arguments that should be used as inputs.\n* *params* (`ParameterDict`, default = `nil`)\n  Dictionary of arguments and auxiliary states that are not\n  inputs.\n","summary":"<p>Creates a new instance.</p>","abstract":false,"args":[{"name":"outputs","doc":null,"default_value":"","external_name":"outputs","restriction":""},{"name":"inputs","doc":null,"default_value":"","external_name":"inputs","restriction":""},{"name":"params","doc":null,"default_value":"nil","external_name":"params","restriction":""}],"args_string":"(outputs, inputs, params = <span class=\"n\">nil</span>)","args_html":"(outputs, inputs, params = <span class=\"n\">nil</span>)","location":{"filename":"src/mxnet/gluon/block.cr","line_number":564,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/block.cr#L564"},"def":{"name":"new","args":[{"name":"outputs","doc":null,"default_value":"","external_name":"outputs","restriction":""},{"name":"inputs","doc":null,"default_value":"","external_name":"inputs","restriction":""},{"name":"params","doc":null,"default_value":"nil","external_name":"params","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(outputs, inputs, params)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"forward(inputs:Array(MXNet::Symbol))-instance-method","html_id":"forward(inputs:Array(MXNet::Symbol))-instance-method","name":"forward","doc":null,"summary":null,"abstract":false,"args":[{"name":"inputs","doc":null,"default_value":"","external_name":"inputs","restriction":"Array(MXNet::Symbol)"}],"args_string":"(inputs : Array(MXNet::Symbol))","args_html":"(inputs : Array(<a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>))","location":{"filename":"src/mxnet/gluon/block.cr","line_number":592,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/block.cr#L592"},"def":{"name":"forward","args":[{"name":"inputs","doc":null,"default_value":"","external_name":"inputs","restriction":"Array(MXNet::Symbol)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if graph = @graph\nelse\n  raise(Exception.new(\"Ensure that parent classes are initialized by calling `super(...)` in #{self.class}#initialize().\"))\nend\ngraph[1].clone.tap do |outputs|\n  params = (graph[0].zip(inputs)).reduce({} of String => SymbolHandle) do |acc, __arg10|\n    k = __arg10[0]\n    v = __arg10[1]\n    acc[k.name.not_nil!] = v.handle\n    acc\n  end\n  outputs.each do |outout|\n    MXNet::Internal.libcall(NNSymbolCompose, outout.handle, nil, params.size, params.keys.map(&.to_unsafe), params.values)\n  end\n  outputs\nend\n"}},{"id":"forward(inputs:Array(MXNet::NDArray))-instance-method","html_id":"forward(inputs:Array(MXNet::NDArray))-instance-method","name":"forward","doc":null,"summary":null,"abstract":false,"args":[{"name":"inputs","doc":null,"default_value":"","external_name":"inputs","restriction":"Array(MXNet::NDArray)"}],"args_string":"(inputs : Array(MXNet::NDArray))","args_html":"(inputs : Array(<a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>))","location":{"filename":"src/mxnet/gluon/block.cr","line_number":619,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/block.cr#L619"},"def":{"name":"forward","args":[{"name":"inputs","doc":null,"default_value":"","external_name":"inputs","restriction":"Array(MXNet::NDArray)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Context.with(inputs.first.context) do\n  call_cached(inputs)\nend"}},{"id":"hybrid_forward(inputs:Array(T),params:Hash(String,T)={}ofString=>T):Array(T)forallT-instance-method","html_id":"hybrid_forward(inputs:Array(T),params:Hash(String,T)={}ofString=>T):Array(T)forallT-instance-method","name":"hybrid_forward","doc":null,"summary":null,"abstract":false,"args":[{"name":"inputs","doc":null,"default_value":"","external_name":"inputs","restriction":"Array(T)"},{"name":"params","doc":null,"default_value":"{} of String => T","external_name":"params","restriction":"Hash(String, T)"}],"args_string":"(inputs : Array(T), params : Hash(String, T) = {} <span class=\"k\">of</span> <span class=\"t\">String</span> => <span class=\"t\">T</span>) : Array(T) forall T","args_html":"(inputs : Array(T), params : Hash(String, T) = {} <span class=\"k\">of</span> <span class=\"t\">String</span> => <span class=\"t\">T</span>) : Array(T) forall T","location":{"filename":"src/mxnet/gluon/block.cr","line_number":625,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/block.cr#L625"},"def":{"name":"hybrid_forward","args":[{"name":"inputs","doc":null,"default_value":"","external_name":"inputs","restriction":"Array(T)"},{"name":"params","doc":null,"default_value":"{} of String => T","external_name":"params","restriction":"Hash(String, T)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(T)","visibility":"Public","body":"raise(NotImplementedError.new(\"#hybrid_forward is not supported\"))"}}],"macros":[],"types":[]},{"html_id":"mxnet/MXNet/Gluon/Trainer","path":"MXNet/Gluon/Trainer.html","kind":"class","full_name":"MXNet::Gluon::Trainer","name":"Trainer","abstract":false,"superclass":{"html_id":"mxnet/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"mxnet/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"mxnet/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/mxnet/gluon/trainer.cr","line_number":9,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/trainer.cr#L9"}],"repository_name":"mxnet","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"mxnet/MXNet/Gluon","kind":"module","full_name":"MXNet::Gluon","name":"Gluon"},"doc":"Applies an `Optimizer` on a set of `Parameter`s.\n\n`Trainer` should be used together with `Autograd`.\n","summary":"<p>Applies an <code><a href=\"../../MXNet/Optimizer.html\">Optimizer</a></code> on a set of <code><a href=\"../../MXNet/Gluon/Parameter.html\">Parameter</a></code>s.</p>","class_methods":[],"constructors":[{"id":"new(params,optimizer,**optimizer_params)-class-method","html_id":"new(params,optimizer,**optimizer_params)-class-method","name":"new","doc":"Creates a new instance.\n\n### Parameters\n* *params* (`ParameterDict`)\n  The set of parameters to optimize.\n* *optimizer* (`Optimizer`)\n  The optimizer to use.\n* *optimizer_params* (`NamedTuple`)\n  Key-word arguments to be passed to optimizer\n  constructor. See each `Optimizer` for a list of additional\n  supported arguments common to all optimizers.\n","summary":"<p>Creates a new instance.</p>","abstract":false,"args":[{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":""},{"name":"optimizer","doc":null,"default_value":"","external_name":"optimizer","restriction":""}],"args_string":"(params, optimizer, **optimizer_params)","args_html":"(params, optimizer, **optimizer_params)","location":{"filename":"src/mxnet/gluon/trainer.cr","line_number":25,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/trainer.cr#L25"},"def":{"name":"new","args":[{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":""},{"name":"optimizer","doc":null,"default_value":"","external_name":"optimizer","restriction":""}],"double_splat":{"name":"optimizer_params","doc":null,"default_value":"","external_name":"optimizer_params","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(params, optimizer, **optimizer_params)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"learning_rate-instance-method","html_id":"learning_rate-instance-method","name":"learning_rate","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/mxnet/gluon/trainer.cr","line_number":37,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/trainer.cr#L37"},"def":{"name":"learning_rate","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@optimizer.lr"}},{"id":"step(batch_size)-instance-method","html_id":"step(batch_size)-instance-method","name":"step","doc":"Makes one step of parameter update.\n\nThis should be called after `Autograd#backward` and outside\nof `Autograd.record`.\n\n### Parameters\n* *batch_size* (Int)\n  Batch size of data processed. Gradient will be normalized by\n  `1/batch_size`. Set this to 1 if you normalized loss\n  manually with `loss = mean(loss)`.\n","summary":"<p>Makes one step of parameter update.</p>","abstract":false,"args":[{"name":"batch_size","doc":null,"default_value":"","external_name":"batch_size","restriction":""}],"args_string":"(batch_size)","args_html":"(batch_size)","location":{"filename":"src/mxnet/gluon/trainer.cr","line_number":56,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/trainer.cr#L56"},"def":{"name":"step","args":[{"name":"batch_size","doc":null,"default_value":"","external_name":"batch_size","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@optimizer.rescale_grad = @scale / batch_size\n_update\n"}},{"id":"update(batch_size)-instance-method","html_id":"update(batch_size)-instance-method","name":"update","doc":"Makes one step of parameter update.\n\nThis should be called after `Autograd#backward` and outside\nof `Autograd.record`.\n\n### Parameters\n* *batch_size* (Int)\n  Batch size of data processed. Gradient will be normalized by\n  `1/batch_size`. Set this to 1 if you normalized loss\n  manually with `loss = mean(loss)`.\n","summary":"<p>Makes one step of parameter update.</p>","abstract":false,"args":[{"name":"batch_size","doc":null,"default_value":"","external_name":"batch_size","restriction":""}],"args_string":"(batch_size)","args_html":"(batch_size)","location":{"filename":"src/mxnet/gluon/trainer.cr","line_number":72,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/trainer.cr#L72"},"def":{"name":"update","args":[{"name":"batch_size","doc":null,"default_value":"","external_name":"batch_size","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@optimizer.rescale_grad = @scale / batch_size\n_update\n"}},{"id":"weight_decay-instance-method","html_id":"weight_decay-instance-method","name":"weight_decay","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/mxnet/gluon/trainer.cr","line_number":41,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/trainer.cr#L41"},"def":{"name":"weight_decay","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@optimizer.wd"}}],"macros":[],"types":[]},{"html_id":"mxnet/MXNet/Gluon/Utils","path":"MXNet/Gluon/Utils.html","kind":"module","full_name":"MXNet::Gluon::Utils","name":"Utils","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/mxnet/gluon/utils.cr","line_number":7,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/utils.cr#L7"}],"repository_name":"mxnet","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"mxnet/MXNet/Gluon","kind":"module","full_name":"MXNet::Gluon","name":"Gluon"},"doc":null,"summary":null,"class_methods":[{"id":"check_sha1(filename,sha1_hash)-class-method","html_id":"check_sha1(filename,sha1_hash)-class-method","name":"check_sha1","doc":"Checks whether the SHA1 hash of the file matches the specified\nhash.\n\n### Parameters\n* *filename* (`String`)\n  Path to the file to check.\n* *sha1_hash* (`String`)\n  Expected SHA1 hash in hexadecimal.\n","summary":"<p>Checks whether the SHA1 hash of the file matches the specified hash.</p>","abstract":false,"args":[{"name":"filename","doc":null,"default_value":"","external_name":"filename","restriction":""},{"name":"sha1_hash","doc":null,"default_value":"","external_name":"sha1_hash","restriction":""}],"args_string":"(filename, sha1_hash)","args_html":"(filename, sha1_hash)","location":{"filename":"src/mxnet/gluon/utils.cr","line_number":17,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/utils.cr#L17"},"def":{"name":"check_sha1","args":[{"name":"filename","doc":null,"default_value":"","external_name":"filename","restriction":""},{"name":"sha1_hash","doc":null,"default_value":"","external_name":"sha1_hash","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"File.open(filename) do |io|\n  sha1_hash == Digest::SHA1.hexdigest do |digest|\n    slice = Bytes.new(1048576)\n    loop do\n      if (count = io.read(slice)) > 0\n      else\n        break\n      end\n      digest.update(slice[0, count])\n    end\n  end\nend"}},{"id":"download(url,path=nil,overwrite=false,sha1_hash=nil)-class-method","html_id":"download(url,path=nil,overwrite=false,sha1_hash=nil)-class-method","name":"download","doc":"Downloads from a URL.\n\nReturns the file path of the downloaded file.\n\n### Parameters\n* *url* (`String`)\n  URL to download.\n* *path* (`String`, optional)\n  Destination path to store downloaded file. By default,\n  stores to the current directory.\n* *overwrite* (`Bool`, default = `false`)\n  Whether to overwrite destination file if it already exists.\n* *sha1_hash* (`String`, optional)\n  Expected SHA1 hash in hexadecimal. Will overwrite existing\n  file when hash is specified but doesn't match.\n","summary":"<p>Downloads from a URL.</p>","abstract":false,"args":[{"name":"url","doc":null,"default_value":"","external_name":"url","restriction":""},{"name":"path","doc":null,"default_value":"nil","external_name":"path","restriction":""},{"name":"overwrite","doc":null,"default_value":"false","external_name":"overwrite","restriction":""},{"name":"sha1_hash","doc":null,"default_value":"nil","external_name":"sha1_hash","restriction":""}],"args_string":"(url, path = <span class=\"n\">nil</span>, overwrite = <span class=\"n\">false</span>, sha1_hash = <span class=\"n\">nil</span>)","args_html":"(url, path = <span class=\"n\">nil</span>, overwrite = <span class=\"n\">false</span>, sha1_hash = <span class=\"n\">nil</span>)","location":{"filename":"src/mxnet/gluon/utils.cr","line_number":45,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/utils.cr#L45"},"def":{"name":"download","args":[{"name":"url","doc":null,"default_value":"","external_name":"url","restriction":""},{"name":"path","doc":null,"default_value":"nil","external_name":"path","restriction":""},{"name":"overwrite","doc":null,"default_value":"false","external_name":"overwrite","restriction":""},{"name":"sha1_hash","doc":null,"default_value":"nil","external_name":"sha1_hash","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if (fname = (url.split(\"/\")).last).blank?\n  raise(ArgumentError.new(\"can't construct file name from this URL: #{url}\"))\nend\nif path\n  path = File.expand_path(path)\n  if File.directory?(path)\n    fname = File.join(path, fname)\n  else\n    fname = path\n  end\nend\nif (overwrite || (!(File.exists?(fname)))) || (sha1_hash && (!(check_sha1(fname, sha1_hash))))\n  HTTP::Client.get(url) do |response|\n    if response.status_code == 200\n    else\n      raise(\"failed to download URL: #{url}\")\n    end\n    File.open(fname, \"w\") do |io|\n      IO.copy(response.body_io, io)\n    end\n  end\nend\nfname\n"}},{"id":"get_repo_file_url(namespace,filename)-class-method","html_id":"get_repo_file_url(namespace,filename)-class-method","name":"get_repo_file_url","doc":"Returns the URL for hosted file in the Gluon repository.\n\n### Parameters\n* *namespace* (`String`)\n  Namespace of the file.\n* *filename* (`String`)\n  Name of the file.\n","summary":"<p>Returns the URL for hosted file in the Gluon repository.</p>","abstract":false,"args":[{"name":"namespace","doc":null,"default_value":"","external_name":"namespace","restriction":""},{"name":"filename","doc":null,"default_value":"","external_name":"filename","restriction":""}],"args_string":"(namespace, filename)","args_html":"(namespace, filename)","location":{"filename":"src/mxnet/gluon/utils.cr","line_number":85,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/utils.cr#L85"},"def":{"name":"get_repo_file_url","args":[{"name":"namespace","doc":null,"default_value":"","external_name":"namespace","restriction":""},{"name":"filename","doc":null,"default_value":"","external_name":"filename","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"\"#{get_repo_url}#{namespace}/#{filename}\""}},{"id":"get_repo_url-class-method","html_id":"get_repo_url-class-method","name":"get_repo_url","doc":"Returns the base URL for the Gluon dataset and model repository.\n","summary":"<p>Returns the base URL for the Gluon dataset and model repository.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/mxnet/gluon/utils.cr","line_number":70,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/gluon/utils.cr#L70"},"def":{"name":"get_repo_url","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"default_repo = \"https://apache-mxnet.s3-accelerate.dualstack.amazonaws.com/\"\nrepo_url = ENV.fetch(\"MXNET_GLUON_REPO\", default_repo)\nif repo_url.ends_with?(\"/\")\nelse\n  repo_url = repo_url + \"/\"\nend\nrepo_url\n"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]},{"html_id":"mxnet/MXNet/Initializer","path":"MXNet/Initializer.html","kind":"class","full_name":"MXNet::Initializer","name":"Initializer","abstract":true,"superclass":{"html_id":"mxnet/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"mxnet/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"mxnet/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/mxnet/initializer.cr","line_number":17,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/initializer.cr#L17"}],"repository_name":"mxnet","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[{"html_id":"mxnet/MXNet/Initializer/Constant","kind":"class","full_name":"MXNet::Initializer::Constant","name":"Constant"},{"html_id":"mxnet/MXNet/Initializer/Normal","kind":"class","full_name":"MXNet::Initializer::Normal","name":"Normal"},{"html_id":"mxnet/MXNet/Initializer/One","kind":"class","full_name":"MXNet::Initializer::One","name":"One"},{"html_id":"mxnet/MXNet/Initializer/Uniform","kind":"class","full_name":"MXNet::Initializer::Uniform","name":"Uniform"},{"html_id":"mxnet/MXNet/Initializer/Zero","kind":"class","full_name":"MXNet::Initializer::Zero","name":"Zero"}],"including_types":[],"namespace":{"html_id":"mxnet/MXNet","kind":"module","full_name":"MXNet","name":"MXNet"},"doc":"The base class of an initializer.\n\nCustom initializers can be created by subclassing `Initializer`\nand implementing the required function `#init_array`. By default,\nthe created initializer will be registered under its simplified\nclass name (`class.name.split(\"::\").last.downcase`) but it may\nalso be registered under another name by calling `#register`.\n\n    class CustomInit < MXNet::Initializer\n      register :myinit\n      def init_array(array)\n        array[0..-1] = 1.0\n      end\n    end\n","summary":"<p>The base class of an initializer.</p>","class_methods":[{"id":"create(initializer)-class-method","html_id":"create(initializer)-class-method","name":"create","doc":null,"summary":null,"abstract":false,"args":[{"name":"initializer","doc":null,"default_value":"","external_name":"initializer","restriction":""}],"args_string":"(initializer)","args_html":"(initializer)","location":{"filename":"src/mxnet/initializer.cr","line_number":32,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/initializer.cr#L32"},"def":{"name":"create","args":[{"name":"initializer","doc":null,"default_value":"","external_name":"initializer","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"case initializer\nwhen ::String, ::Symbol\n  @@registry[initializer.to_s].new\nwhen .responds_to?(:new)\n  initializer.new\nelse\n  initializer\nend"}}],"constructors":[],"instance_methods":[{"id":"init_array(array:NDArray)-instance-method","html_id":"init_array(array:NDArray)-instance-method","name":"init_array","doc":"Override to initialize array.\n\n### Parameters\n* *array* (`NDArray`)\n  Array to initialize.\n","summary":"<p>Override to initialize array.</p>","abstract":true,"args":[{"name":"array","doc":null,"default_value":"","external_name":"array","restriction":"NDArray"}],"args_string":"(array : NDArray)","args_html":"(array : <a href=\"../MXNet/NDArray.html\">NDArray</a>)","location":{"filename":"src/mxnet/initializer.cr","line_number":49,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/initializer.cr#L49"},"def":{"name":"init_array","args":[{"name":"array","doc":null,"default_value":"","external_name":"array","restriction":"NDArray"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}}],"macros":[],"types":[{"html_id":"mxnet/MXNet/Initializer/Constant","path":"MXNet/Initializer/Constant.html","kind":"class","full_name":"MXNet::Initializer::Constant","name":"Constant","abstract":false,"superclass":{"html_id":"mxnet/MXNet/Initializer","kind":"class","full_name":"MXNet::Initializer","name":"Initializer"},"ancestors":[{"html_id":"mxnet/MXNet/Initializer","kind":"class","full_name":"MXNet::Initializer","name":"Initializer"},{"html_id":"mxnet/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"mxnet/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/mxnet/initializer.cr","line_number":71,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/initializer.cr#L71"}],"repository_name":"mxnet","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"mxnet/MXNet/Initializer","kind":"class","full_name":"MXNet::Initializer","name":"Initializer"},"doc":"Initializes the weights to a given constant value.\n","summary":"<p>Initializes the weights to a given constant value.</p>","class_methods":[],"constructors":[{"id":"new(value:Float32|Float64|NDArray=0.0)-class-method","html_id":"new(value:Float32|Float64|NDArray=0.0)-class-method","name":"new","doc":"Creates a new instance.\n\nThe value passed in can be a scalar or a `NDarray` that matches\nthe shape of the parameter to be set.\n\n### Parameters\n* *value* (`Float` | `NDArray`, required)\n  The value to set.\n","summary":"<p>Creates a new instance.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"0.0","external_name":"value","restriction":"Float32 | Float64 | NDArray"}],"args_string":"(value : Float32 | Float64 | NDArray = <span class=\"n\">0.0</span>)","args_html":"(value : Float32 | Float64 | <a href=\"../../MXNet/NDArray.html\">NDArray</a> = <span class=\"n\">0.0</span>)","location":{"filename":"src/mxnet/initializer.cr","line_number":81,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/initializer.cr#L81"},"def":{"name":"new","args":[{"name":"value","doc":null,"default_value":"0.0","external_name":"value","restriction":"Float32 | Float64 | NDArray"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(value)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"init_array(array)-instance-method","html_id":"init_array(array)-instance-method","name":"init_array","doc":null,"summary":null,"abstract":false,"args":[{"name":"array","doc":null,"default_value":"","external_name":"array","restriction":""}],"args_string":"(array)","args_html":"(array)","location":{"filename":"src/mxnet/initializer.cr","line_number":84,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/initializer.cr#L84"},"def":{"name":"init_array","args":[{"name":"array","doc":null,"default_value":"","external_name":"array","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"array[0..-1] = @value"}}],"macros":[],"types":[]},{"html_id":"mxnet/MXNet/Initializer/Normal","path":"MXNet/Initializer/Normal.html","kind":"class","full_name":"MXNet::Initializer::Normal","name":"Normal","abstract":false,"superclass":{"html_id":"mxnet/MXNet/Initializer","kind":"class","full_name":"MXNet::Initializer","name":"Initializer"},"ancestors":[{"html_id":"mxnet/MXNet/Initializer","kind":"class","full_name":"MXNet::Initializer","name":"Initializer"},{"html_id":"mxnet/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"mxnet/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/mxnet/initializer.cr","line_number":113,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/initializer.cr#L113"}],"repository_name":"mxnet","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"mxnet/MXNet/Initializer","kind":"class","full_name":"MXNet::Initializer","name":"Initializer"},"doc":"Initializes array with random values sampled from a normal\ndistribution with a mean of zero and standard deviation of\n*sigma*.\n","summary":"<p>Initializes array with random values sampled from a normal distribution with a mean of zero and standard deviation of <em>sigma</em>.</p>","class_methods":[],"constructors":[{"id":"new(sigma=0.01)-class-method","html_id":"new(sigma=0.01)-class-method","name":"new","doc":"Creates a new instance.\n\n### Parameters\n* *sigma* (`Float`, optional)\n  Standard deviation of the normal distribution. The default\n  standard deviation is 0.01.\n","summary":"<p>Creates a new instance.</p>","abstract":false,"args":[{"name":"sigma","doc":null,"default_value":"0.01","external_name":"sigma","restriction":""}],"args_string":"(sigma = <span class=\"n\">0.01</span>)","args_html":"(sigma = <span class=\"n\">0.01</span>)","location":{"filename":"src/mxnet/initializer.cr","line_number":121,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/initializer.cr#L121"},"def":{"name":"new","args":[{"name":"sigma","doc":null,"default_value":"0.01","external_name":"sigma","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(sigma)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"init_array(array)-instance-method","html_id":"init_array(array)-instance-method","name":"init_array","doc":null,"summary":null,"abstract":false,"args":[{"name":"array","doc":null,"default_value":"","external_name":"array","restriction":""}],"args_string":"(array)","args_html":"(array)","location":{"filename":"src/mxnet/initializer.cr","line_number":124,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/initializer.cr#L124"},"def":{"name":"init_array","args":[{"name":"array","doc":null,"default_value":"","external_name":"array","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.random_normal(0, @sigma, out: array)"}}],"macros":[],"types":[]},{"html_id":"mxnet/MXNet/Initializer/One","path":"MXNet/Initializer/One.html","kind":"class","full_name":"MXNet::Initializer::One","name":"One","abstract":false,"superclass":{"html_id":"mxnet/MXNet/Initializer","kind":"class","full_name":"MXNet::Initializer","name":"Initializer"},"ancestors":[{"html_id":"mxnet/MXNet/Initializer","kind":"class","full_name":"MXNet::Initializer","name":"Initializer"},{"html_id":"mxnet/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"mxnet/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/mxnet/initializer.cr","line_number":62,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/initializer.cr#L62"}],"repository_name":"mxnet","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"mxnet/MXNet/Initializer","kind":"class","full_name":"MXNet::Initializer","name":"Initializer"},"doc":"Initializes array to one.\n","summary":"<p>Initializes array to one.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"init_array(array)-instance-method","html_id":"init_array(array)-instance-method","name":"init_array","doc":null,"summary":null,"abstract":false,"args":[{"name":"array","doc":null,"default_value":"","external_name":"array","restriction":""}],"args_string":"(array)","args_html":"(array)","location":{"filename":"src/mxnet/initializer.cr","line_number":64,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/initializer.cr#L64"},"def":{"name":"init_array","args":[{"name":"array","doc":null,"default_value":"","external_name":"array","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"array[0..-1] = 1.0"}}],"macros":[],"types":[]},{"html_id":"mxnet/MXNet/Initializer/Uniform","path":"MXNet/Initializer/Uniform.html","kind":"class","full_name":"MXNet::Initializer::Uniform","name":"Uniform","abstract":false,"superclass":{"html_id":"mxnet/MXNet/Initializer","kind":"class","full_name":"MXNet::Initializer","name":"Initializer"},"ancestors":[{"html_id":"mxnet/MXNet/Initializer","kind":"class","full_name":"MXNet::Initializer","name":"Initializer"},{"html_id":"mxnet/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"mxnet/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/mxnet/initializer.cr","line_number":92,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/initializer.cr#L92"}],"repository_name":"mxnet","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"mxnet/MXNet/Initializer","kind":"class","full_name":"MXNet::Initializer","name":"Initializer"},"doc":"Initializes array with random values uniformly sampled from a\ngiven range.\n","summary":"<p>Initializes array with random values uniformly sampled from a given range.</p>","class_methods":[],"constructors":[{"id":"new(scale=0.07)-class-method","html_id":"new(scale=0.07)-class-method","name":"new","doc":"Creates a new instance.\n\n### Parameters\n* *scale* (`Float`, optional)\n  The bound on the range of the generated random values.\n  Values are generated from the range `[-scale, scale]`.\n  Default *scale* is 0.07.\n","summary":"<p>Creates a new instance.</p>","abstract":false,"args":[{"name":"scale","doc":null,"default_value":"0.07","external_name":"scale","restriction":""}],"args_string":"(scale = <span class=\"n\">0.07</span>)","args_html":"(scale = <span class=\"n\">0.07</span>)","location":{"filename":"src/mxnet/initializer.cr","line_number":101,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/initializer.cr#L101"},"def":{"name":"new","args":[{"name":"scale","doc":null,"default_value":"0.07","external_name":"scale","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(scale)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"init_array(array)-instance-method","html_id":"init_array(array)-instance-method","name":"init_array","doc":null,"summary":null,"abstract":false,"args":[{"name":"array","doc":null,"default_value":"","external_name":"array","restriction":""}],"args_string":"(array)","args_html":"(array)","location":{"filename":"src/mxnet/initializer.cr","line_number":104,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/initializer.cr#L104"},"def":{"name":"init_array","args":[{"name":"array","doc":null,"default_value":"","external_name":"array","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.random_uniform(-@scale, @scale, out: array)"}}],"macros":[],"types":[]},{"html_id":"mxnet/MXNet/Initializer/Zero","path":"MXNet/Initializer/Zero.html","kind":"class","full_name":"MXNet::Initializer::Zero","name":"Zero","abstract":false,"superclass":{"html_id":"mxnet/MXNet/Initializer","kind":"class","full_name":"MXNet::Initializer","name":"Initializer"},"ancestors":[{"html_id":"mxnet/MXNet/Initializer","kind":"class","full_name":"MXNet::Initializer","name":"Initializer"},{"html_id":"mxnet/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"mxnet/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/mxnet/initializer.cr","line_number":53,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/initializer.cr#L53"}],"repository_name":"mxnet","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"mxnet/MXNet/Initializer","kind":"class","full_name":"MXNet::Initializer","name":"Initializer"},"doc":"Initializes array to zero.\n","summary":"<p>Initializes array to zero.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"init_array(array)-instance-method","html_id":"init_array(array)-instance-method","name":"init_array","doc":null,"summary":null,"abstract":false,"args":[{"name":"array","doc":null,"default_value":"","external_name":"array","restriction":""}],"args_string":"(array)","args_html":"(array)","location":{"filename":"src/mxnet/initializer.cr","line_number":55,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/initializer.cr#L55"},"def":{"name":"init_array","args":[{"name":"array","doc":null,"default_value":"","external_name":"array","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"array[0..-1] = 0.0"}}],"macros":[],"types":[]}]},{"html_id":"mxnet/MXNet/Internal","path":"MXNet/Internal.html","kind":"module","full_name":"MXNet::Internal","name":"Internal","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/mxnet.cr","line_number":22,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet.cr#L22"},{"filename":"src/mxnet/libmxnet.cr","line_number":2,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/libmxnet.cr#L2"}],"repository_name":"mxnet","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[{"id":"MXNET_VERSION","name":"MXNET_VERSION","value":"\"1.4.0\"","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"mxnet/MXNet","kind":"module","full_name":"MXNet","name":"MXNet"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[{"id":"libcall(expr,*args)-macro","html_id":"libcall(expr,*args)-macro","name":"libcall","doc":null,"summary":null,"abstract":false,"args":[{"name":"expr","doc":null,"default_value":"","external_name":"expr","restriction":""},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(expr, *args)","location":{"filename":"src/mxnet/libmxnet.cr","line_number":6,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/libmxnet.cr#L6"},"def":{"name":"libcall","args":[{"name":"expr","doc":null,"default_value":"","external_name":"expr","restriction":""},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":null,"splat_index":1,"block_arg":null,"visibility":"Public","body":"      unless MXNet::Internal::LibMXNet.\n{{ expr }}\n(\n{{ *args }}\n) == 0\n        raise MXNet::Internal::LibraryException.new(String.new(MXNet::Internal::LibMXNet.MXGetLastError))\n      \nend\n    \n"}}],"types":[{"html_id":"mxnet/MXNet/Internal/LibraryException","path":"MXNet/Internal/LibraryException.html","kind":"class","full_name":"MXNet::Internal::LibraryException","name":"LibraryException","abstract":false,"superclass":{"html_id":"mxnet/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"mxnet/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"mxnet/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"mxnet/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/mxnet/libmxnet.cr","line_number":3,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/libmxnet.cr#L3"}],"repository_name":"mxnet","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"mxnet/MXNet/Internal","kind":"module","full_name":"MXNet::Internal","name":"Internal"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]},{"html_id":"mxnet/MXNet/MXNetException","path":"MXNet/MXNetException.html","kind":"class","full_name":"MXNet::MXNetException","name":"MXNetException","abstract":false,"superclass":{"html_id":"mxnet/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"mxnet/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"mxnet/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"mxnet/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/mxnet.cr","line_number":28,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet.cr#L28"}],"repository_name":"mxnet","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"mxnet/MXNet","kind":"module","full_name":"MXNet","name":"MXNet"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"mxnet/MXNet/Name","path":"MXNet/Name.html","kind":"module","full_name":"MXNet::Name","name":"Name","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/mxnet/name/manager.cr","line_number":2,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/name/manager.cr#L2"}],"repository_name":"mxnet","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"mxnet/MXNet","kind":"module","full_name":"MXNet","name":"MXNet"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"mxnet/MXNet/Name/Manager","path":"MXNet/Name/Manager.html","kind":"class","full_name":"MXNet::Name::Manager","name":"Manager","abstract":false,"superclass":{"html_id":"mxnet/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"mxnet/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"mxnet/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/mxnet/name/manager.cr","line_number":5,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/name/manager.cr#L5"}],"repository_name":"mxnet","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"mxnet/MXNet/Name","kind":"module","full_name":"MXNet::Name","name":"Name"},"doc":"Name manager to do automatic naming.\n","summary":"<p>Name manager to do automatic naming.</p>","class_methods":[{"id":"current-class-method","html_id":"current-class-method","name":"current","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/mxnet/name/manager.cr","line_number":8,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/name/manager.cr#L8"},"def":{"name":"current","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@current"}}],"constructors":[],"instance_methods":[{"id":"get(name:String?,hint:String)-instance-method","html_id":"get(name:String?,hint:String)-instance-method","name":"get","doc":"Gets the canonical name for a symbol.\n\nIf *name* is specified, the specified name will be used.\nOtherwise, automatically generate a unique name based on\n*hint*.\n\n### Parameters\n* *name* (`String` or `nil`)\n  The specified name.\n* *hint* (`String`)\n  The hint string.\n","summary":"<p>Gets the canonical name for a symbol.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String | ::Nil"},{"name":"hint","doc":null,"default_value":"","external_name":"hint","restriction":"String"}],"args_string":"(name : String?, hint : String)","args_html":"(name : String?, hint : String)","location":{"filename":"src/mxnet/name/manager.cr","line_number":26,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/name/manager.cr#L26"},"def":{"name":"get","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String | ::Nil"},{"name":"hint","doc":null,"default_value":"","external_name":"hint","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if name\n  return name\nend\nname = \"#{hint}#{@counter[hint]}\"\n__temp_24 = hint\n@counter[__temp_24] = @counter[__temp_24] + 1\nname\n"}}],"macros":[],"types":[]}]},{"html_id":"mxnet/MXNet/NDArray","path":"MXNet/NDArray.html","kind":"class","full_name":"MXNet::NDArray","name":"NDArray","abstract":false,"superclass":{"html_id":"mxnet/MXNet/Base","kind":"class","full_name":"MXNet::Base","name":"Base"},"ancestors":[{"html_id":"mxnet/Indexable","kind":"module","full_name":"Indexable","name":"Indexable"},{"html_id":"mxnet/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"mxnet/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"},{"html_id":"mxnet/MXNet/Operations","kind":"module","full_name":"MXNet::Operations","name":"Operations"},{"html_id":"mxnet/MXNet/Base","kind":"class","full_name":"MXNet::Base","name":"Base"},{"html_id":"mxnet/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"mxnet/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/mxnet/ndarray.cr","line_number":34,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/ndarray.cr#L34"}],"repository_name":"mxnet","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[{"html_id":"mxnet/Indexable","kind":"module","full_name":"Indexable","name":"Indexable"},{"html_id":"mxnet/MXNet/Operations","kind":"module","full_name":"MXNet::Operations","name":"Operations"}],"extended_modules":[{"html_id":"mxnet/MXNet/Operations","kind":"module","full_name":"MXNet::Operations","name":"Operations"},{"html_id":"mxnet/MXNet/Util","kind":"module","full_name":"MXNet::Util","name":"Util"}],"subclasses":[],"including_types":[],"namespace":{"html_id":"mxnet/MXNet","kind":"module","full_name":"MXNet","name":"MXNet"},"doc":"The `NDArray` API provides imperative tensor operations on\nCPU/GPU. An `NDArray` represents a multi-dimensional, fixed-size\nhomogeneous array.\n\n```\nx = MXNet::NDArray.array([[1, 2, 3], [4, 5, 6]], dtype: :float32)\nx.shape      # [2, 3]\ny = x + MXNet::NDArray.ones(x.shape) * 3\nputs y       # [[4.0, 5.0, 6.0], [7.0, 8.0, 9.0]]\n             # <NDArray 2x3 float32 cpu(0)>\nz = y.as_in_context(MXNet.gpu(0))\nputs z       # [[4.0, 5.0, 6.0], [7.0, 8.0, 9.0]]\n             # <NDArray 2x3 float32 gpu(0)>\n```\n\nA detailed (albeit in Python) tutorial is available at\n[NDArray - Imperative tensor operations on CPU/GPU](https://mxnet.incubator.apache.org/versions/master/tutorials/basic/ndarray.html).\n\nNote: `NDArray` provides almost the same routines as `Symbol`.\nMost routines between these two packages share source code. But\n`NDArray` differs from `Symbol` in few aspects:\n\n* `NDArray` adopts an imperative programming style -- namely\n  expressions are executed step-by-step so that the results can be\n  obtained immediately, whereas `Symbol` adopts a declarative\n  style.\n* Most binary operators in `NDArray` such as `+` and `>` have\n  broadcasting enabled by default.\n","summary":"<p>The <code><a href=\"../MXNet/NDArray.html\">NDArray</a></code> API provides imperative tensor operations on CPU/GPU.</p>","class_methods":[{"id":"abs(data,**kwargs)-class-method","html_id":"abs(data,**kwargs)-class-method","name":"abs","doc":"Returns the element-wise absolute value of the input.\n\nAssume *x* is an array with the following elements:\n    [-2, 0, 3]\n\nThen:\n    abs(x) # => [2, 0, 3]\n\n### Parameters\n* *data* (`NDArray`, required)\n  Input data.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Returns the element-wise absolute value of the input.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"abs","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._abs(data, **kwargs)"}},{"id":"activation(data:self,act_type,**kwargs)-class-method","html_id":"activation(data:self,act_type,**kwargs)-class-method","name":"activation","doc":"Applies an activation function element-wise to the input.\n\nThe following activation functions are supported:\n  * **relu**: Rectified Linear Unit, _y = max(x, 0)_\n  * **softrelu**: Soft ReLU or SoftPlus, _y = log(1 + exp(x))_\n  * **tanh**: Hyperbolic tangent, _y = exp(x) − exp(−x) / exp(x) + exp(−x)_\n  * **sigmoid**: _y = 1 / 1 + exp(−x)_\n  * **softsign**: _y = x / 1 + abs(x)_\n\n### Parameters\n* *data* (`NDArray`, required)\n  The input array.\n* *act_type* (`::Symbol`, `:relu`, `:softrelu`, `:tanh`, `:sigmoid`, or `:softsign`, required)\n  Activation function to be applied.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Applies an activation function element-wise to the input.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"self"},{"name":"act_type","doc":null,"default_value":"","external_name":"act_type","restriction":""}],"args_string":"(data : <span class=\"k\">self</span>, act_type, **kwargs)","args_html":"(data : <span class=\"k\">self</span>, act_type, **kwargs)","location":null,"def":{"name":"activation","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"self"},{"name":"act_type","doc":null,"default_value":"","external_name":"act_type","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._Activation(data, **kwargs.merge({act_type: act_type}))"}},{"id":"add(lhs:self|Number,rhs:self|Number)-class-method","html_id":"add(lhs:self|Number,rhs:self|Number)-class-method","name":"add","doc":"Returns element-wise sum of the input arrays.\n\nIf the corresponding dimensions of two arrays have the same size\nor one of them has size 1, then the arrays are broadcastable to\na common shape.\n\nEquivalent to `lhs + rhs`. Equivalent to `.broadcast_add` and\n`.broadcast_plus` for `NDArray` arguments.\n\n### Parameters\n* *lhs* (`NDArray` or `Number`)\n  The first value to be added.\n* *rhs* (`NDArray` or `Number`)\n  The second value to be added.\n","summary":"<p>Returns element-wise sum of the input arrays.</p>","abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"self | Number"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self | Number"}],"args_string":"(lhs : <span class=\"k\">self</span> | Number, rhs : <span class=\"k\">self</span> | Number)","args_html":"(lhs : <span class=\"k\">self</span> | <a href=\"../Number.html\">Number</a>, rhs : <span class=\"k\">self</span> | <a href=\"../Number.html\">Number</a>)","location":{"filename":"src/mxnet/ndarray.cr","line_number":117,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/ndarray.cr#L117"},"def":{"name":"add","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"self | Number"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self | Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if lhs.is_a?(self)\n  if rhs.is_a?(self)\n    Ops._broadcast_add(lhs, rhs)\n  else\n    Internal._plus_scalar(lhs, scalar: rhs)\n  end\nelse\n  if rhs.is_a?(self)\n    Internal._plus_scalar(rhs, scalar: lhs)\n  else\n    raise(\"should never happen\")\n  end\nend"}},{"id":"add_n(data:Array(self),**kwargs)-class-method","html_id":"add_n(data:Array(self),**kwargs)-class-method","name":"add_n","doc":"Adds all input arguments element-wise.\n\n*add_n(a1,a2,...,an)=a1+a2+...+an*\n\n`.add_n` is potentially more efficient than calling `.add` *n* times.\n\n### Parameters\n* *data* (`Array(NDArray)`, required)\n  List of arrays to add.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Adds all input arguments element-wise.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"Array(self)"}],"args_string":"(data : Array(<span class=\"k\">self</span>), **kwargs)","args_html":"(data : Array(<span class=\"k\">self</span>), **kwargs)","location":null,"def":{"name":"add_n","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"Array(self)"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._add_n(data, **kwargs.merge({num_args: data.size}))"}},{"id":"arange(start:Number,stop:Number?=nil,ctx=Context.current,**kwargs)-class-method","html_id":"arange(start:Number,stop:Number?=nil,ctx=Context.current,**kwargs)-class-method","name":"arange","doc":"Returns evenly spaced values within a given interval.\n\nValues are generated within the half-open interval `[start,\nstop)`. In other words, the interval includes start but\nexcludes stop.\n\nExamples:\n    arange(3)                                       # => [0.0, 1.0, 2.0]\n    arange(2, 6)                                    # => [2.0, 3.0, 4.0, 5.0]\n    arange(2, 6, step: 2)                           # => [2.0, 4.0]\n    arange(2, 6, step: 1.5, repeat: 2)              # => [2.0, 2.0, 3.5, 3.5, 5.0 , 5.0]\n    arange(2, 6, step: 2, repeat: 3, dtype: :int32) # => [2, 2, 2, 4, 4, 4]\n\n### Parameters\n* *data* (`NDArray`, required)\n  Input data.\n* *start* (`Number`, optional, default = `0.0`)\n  Start of interval.\n* *stop* (`Number`, required)\n  End of interval.\n* *step* (`Number`, optional, default = `1.0`)\n  Spacing between values.\n* *repeat* (`Int`, optional, default = `1`)\n  Number of times to repeat each value.\n* *dtype* (`::Symbol`, default = `:float32`)\n  The data type of the output array.\n* *ctx* (`Context`, optional)\n  Device context (default is the current context). Only used\n  for imperative calls.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Returns evenly spaced values within a given interval.</p>","abstract":false,"args":[{"name":"start","doc":null,"default_value":"","external_name":"start","restriction":"Number"},{"name":"stop","doc":null,"default_value":"nil","external_name":"stop","restriction":"Number | ::Nil"},{"name":"ctx","doc":null,"default_value":"Context.current","external_name":"ctx","restriction":""}],"args_string":"(start : Number, stop : Number? = <span class=\"n\">nil</span>, ctx = <span class=\"t\">Context</span>.current, **kwargs)","args_html":"(start : <a href=\"../Number.html\">Number</a>, stop : <a href=\"../Number.html\">Number</a>? = <span class=\"n\">nil</span>, ctx = <span class=\"t\">Context</span>.current, **kwargs)","location":null,"def":{"name":"arange","args":[{"name":"start","doc":null,"default_value":"","external_name":"start","restriction":"Number"},{"name":"stop","doc":null,"default_value":"nil","external_name":"stop","restriction":"Number | ::Nil"},{"name":"ctx","doc":null,"default_value":"Context.current","external_name":"ctx","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Internal._arange(**kwargs.merge({start: start, stop: stop, ctx: ctx}))"}},{"id":"arccos(data,**kwargs)-class-method","html_id":"arccos(data,**kwargs)-class-method","name":"arccos","doc":"Returns element-wise inverse cosine of the input array.\n\nThe input should be in range `[-1, 1]`.\nThe output is in the closed interval `[0, 𝜋]`\n\n    arccos([-1, -.707, 0, .707, 1]) = [𝜋, 3𝜋/4, 𝜋/2, 𝜋/4, 0]\n\n### Parameters\n* *data* (`NDArray`, required)\n  Input data.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Returns element-wise inverse cosine of the input array.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"arccos","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._arccos(data, **kwargs)"}},{"id":"arccosh(data,**kwargs)-class-method","html_id":"arccosh(data,**kwargs)-class-method","name":"arccosh","doc":"Returns the inverse hyperbolic cosine of the input array,\ncomputed element-wise.\n\n### Parameters\n* *data* (`NDArray`, required)\n  Input data.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Returns the inverse hyperbolic cosine of the input array, computed element-wise.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"arccosh","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._arccosh(data, **kwargs)"}},{"id":"arcsin(data,**kwargs)-class-method","html_id":"arcsin(data,**kwargs)-class-method","name":"arcsin","doc":"Returns element-wise inverse sine of the input array.\n\nThe input should be in the range `[-1, 1]`.\nThe output is in the closed interval `[-𝜋/2, 𝜋/2]`.\n\n    arcsin([-1, -.707, 0, .707, 1]) = [-𝜋/2, -𝜋/4, 0, 𝜋/4, 𝜋/2]\n\n### Parameters\n* *data* (`NDArray`, required)\n  Input data.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Returns element-wise inverse sine of the input array.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"arcsin","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._arcsin(data, **kwargs)"}},{"id":"arcsinh(data,**kwargs)-class-method","html_id":"arcsinh(data,**kwargs)-class-method","name":"arcsinh","doc":"Returns the inverse hyperbolic sine of the input array,\ncomputed element-wise.\n\n### Parameters\n* *data* (`NDArray`, required)\n  Input data.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Returns the inverse hyperbolic sine of the input array, computed element-wise.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"arcsinh","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._arcsinh(data, **kwargs)"}},{"id":"arctan(data,**kwargs)-class-method","html_id":"arctan(data,**kwargs)-class-method","name":"arctan","doc":"Returns element-wise inverse tangent of the input array.\n\nThe output is in the closed interval `[-𝜋/2, 𝜋/2]`\n\n    arctan([-1, 0, 1]) = [-𝜋/4, 0, 𝜋/4]\n\n### Parameters\n* *data* (`NDArray`, required)\n  Input data.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Returns element-wise inverse tangent of the input array.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"arctan","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._arctan(data, **kwargs)"}},{"id":"arctanh(data,**kwargs)-class-method","html_id":"arctanh(data,**kwargs)-class-method","name":"arctanh","doc":"Returns the inverse hyperbolic tangent of the input array,\ncomputed element-wise.\n\n### Parameters\n* *data* (`NDArray`, required)\n  Input data.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Returns the inverse hyperbolic tangent of the input array, computed element-wise.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"arctanh","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._arctanh(data, **kwargs)"}},{"id":"argmax(data,**kwargs)-class-method","html_id":"argmax(data,**kwargs)-class-method","name":"argmax","doc":"Returns indices of the maximum values along an axis.\n\nIn the case of multiple occurrences of maximum values, the\nindices corresponding to the first occurrence are returned.\n\nAssume *x* is an array with the following elements:\n    [[0.0, 1.0, 2.0], [3.0, 4.0, 5.0]]\n\nThen:\n    argmax(x, axis: 0) = [1.0, 1.0, 1.0]\n    argmax(x, axis: 1) = [2.0, 2.0]\n    argmax(x, axis: 1, keepdims: true) = [[2.0], [2.0]]\n\n### Parameters\n* *data* (`NDArray`, required)\n  Input data.\n* *axis* (`Int`, optional, default = `-1`)\n  The axis along which to perform the reduction. If omitted,\n  the last axis is used.\n* *keepdims* (`Bool`, optional, default = false)\n  If true, the reduced axis is left in the result as a\n  dimension with size one.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Returns indices of the maximum values along an axis.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"argmax","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._argmax(data, **kwargs)"}},{"id":"argmin(data,**kwargs)-class-method","html_id":"argmin(data,**kwargs)-class-method","name":"argmin","doc":"Returns indices of the minimum values along an axis.\n\nIn the case of multiple occurrences of minimum values, the\nindices corresponding to the first occurrence are returned.\n\nAssume *x* is an array with the following elements:\n    [[0.0, 1.0, 2.0], [3.0, 4.0, 5.0]]\n\nThen:\n    argmin(x, axis: 0) = [0.0, 0.0, 0.0]\n    argmin(x, axis: 1) = [0.0, 0.0]\n    argmin(x, axis: 1, keepdims: true) = [[0.0], [0.0]]\n\n### Parameters\n* *data* (`NDArray`, required)\n  Input data.\n* *axis* (`Int`, optional, default = `-1`)\n  The axis along which to perform the reduction. If omitted,\n  the last axis is used.\n* *keepdims* (`Bool`, optional, default = false)\n  If true, the reduced axis is left in the result as a\n  dimension with size one.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Returns indices of the minimum values along an axis.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"argmin","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._argmin(data, **kwargs)"}},{"id":"argsort(data,**kwargs)-class-method","html_id":"argsort(data,**kwargs)-class-method","name":"argsort","doc":"Returns the indices that would sort an input array along the\ngiven axis.\n\nThis function performs sorting along the given axis and\nreturns an array of indices having the same shape as an input\narray that index data in the sorted order.\n\nAssume *x* is an array with the following elements:\n    [[0.3, 0.2, 0.4], [0.1, 0.3, 0.2]]\n\nThen:\n    argsort(x) = [[1.0, 0.0, 2.0], [0.0, 2.0, 1.0]]\n    argsort(x, axis: 0) = [[1.0, 0.0, 1.0], [0.0, 1.0, 0.0]]\n    argsort(x, axis: None) = [3.0, 1.0, 5.0, 0.0, 4.0, 2.0]\n    argsort(x, is_ascend: false) = [[2.0, 0.0, 1.0], [1.0, 2.0, 0.0]]\n\n### Parameters\n* *data* (`NDArray`, required)\n  Input data.\n* *axis* (`Int` or `None`, optional, default = `-1`)\n  The axis along which to choose sort the input tensor. If\n  omitted, the last axis is used. If `None`, the flattened\n  array is used.\n* *is_ascend* (`Bool`, optional, default = false)\n  Whether to sort in ascending or descending order.\n* *dtype* (`::Symbol`, optional, default = `:float32`)\n  The data type of the output indices.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Returns the indices that would sort an input array along the given axis.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"argsort","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._argsort(data, **kwargs)"}},{"id":"array(source:Enumerable(T),dtype=nil,ctx=nil)forallT-class-method","html_id":"array(source:Enumerable(T),dtype=nil,ctx=nil)forallT-class-method","name":"array","doc":"Creates an MXNet array from any enumerable object.\n\n### Parameters\n* *source* (`Enumerable(T)`)\n  Any enumerable object, or nested enumerable object, whose\n  elements can be converted to numbers.\n* *dtype* (`::Symbol`, optional)\n  The type of the output array. If unspecified, the type is\n  inferred from the source type.\n* *ctx* (`Context`, optional)\n  Device context (default is the current context).\n","summary":"<p>Creates an MXNet array from any enumerable object.</p>","abstract":false,"args":[{"name":"source","doc":null,"default_value":"","external_name":"source","restriction":"Enumerable(T)"},{"name":"dtype","doc":null,"default_value":"nil","external_name":"dtype","restriction":""},{"name":"ctx","doc":null,"default_value":"nil","external_name":"ctx","restriction":""}],"args_string":"(source : Enumerable(T), dtype = <span class=\"n\">nil</span>, ctx = <span class=\"n\">nil</span>) forall T","args_html":"(source : Enumerable(<a href=\"../MXNet/NDArray.html\">T</a>), dtype = <span class=\"n\">nil</span>, ctx = <span class=\"n\">nil</span>) forall T","location":{"filename":"src/mxnet/ndarray.cr","line_number":1076,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/ndarray.cr#L1076"},"def":{"name":"array","args":[{"name":"source","doc":null,"default_value":"","external_name":"source","restriction":"Enumerable(T)"},{"name":"dtype","doc":null,"default_value":"nil","external_name":"dtype","restriction":""},{"name":"ctx","doc":null,"default_value":"nil","external_name":"ctx","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"source = source.to_a\ninferred_shape = _infer_shape(source)\nsource = source.flatten\ninferred_type = _infer_type(source)\nctx || (ctx = Context.current)\nif dtype\n  dtype = T2DT[dtype]? || (raise(MXNet::NDArrayException.new(\"type is unsupported: #{dtype}\")))\nend\nif inferred_type.empty?\n  raise(MXNet::NDArrayException.new(\"type can't be inferred\"))\nelse\n  if (inferred_type.size == 1) && (temp = INFERRED_TYPES[inferred_type.first]?)\n    size = source.size\n    source = source.to_unsafe.as(Pointer(Void))\n    inferred_type = temp\n  else\n    if inferred_type.any?(&.<=(Float64))\n      size = source.size\n      source = source.map(&.to_f64).to_unsafe.as(Pointer(Void))\n      inferred_type = INFERRED_TYPES[Float64]\n    else\n      if inferred_type.any?(&.<(Float))\n        size = source.size\n        source = source.map(&.to_f32).to_unsafe.as(Pointer(Void))\n        inferred_type = INFERRED_TYPES[Float32]\n      else\n        if inferred_type.any?(&.<=(Int64))\n          size = source.size\n          source = source.map(&.to_i64).to_unsafe.as(Pointer(Void))\n          inferred_type = INFERRED_TYPES[Int64]\n        else\n          if inferred_type.any?(&.<(Int))\n            size = source.size\n            source = source.map(&.to_i32).to_unsafe.as(Pointer(Void))\n            inferred_type = INFERRED_TYPES[Int32]\n          else\n            raise(MXNet::NDArrayException.new(\"type is unsupported: #{inferred_type.join(\", \")}\"))\n          end\n        end\n      end\n    end\n  end\nend\nMXNet::Internal.libcall(MXNDArrayCreateEx, inferred_shape, inferred_shape.size, *ctx.device, 0, inferred_type, out handle)\nMXNet::Internal.libcall(MXNDArraySyncCopyFromCPU, handle, source, size)\nif dtype && (dtype != inferred_type)\n  (empty(inferred_shape, ctx: ctx, dtype: DT2T[dtype])).tap do |res|\n    (new(handle)).copy_to(res)\n  end\nelse\n  new(handle)\nend\n"}},{"id":"broadcast_add(lhs,rhs,**kwargs)-class-method","html_id":"broadcast_add(lhs,rhs,**kwargs)-class-method","name":"broadcast_add","doc":"Returns element-wise sum of the input arrays with broadcasting.\n\n`.broadcast_add` is an alias for `.broadcast_plus`.\n\nAssume *x* and *y* are arrays with the following elements:\n    [[1, 1, 1], [1, 1, 1]] # x\n    [[0], [1]]             # y\n\nThen:\n    broadcast_add(x, y) # => [[1, 1, 1], [2, 2, 2]]\n\n### Parameters\n* *lhs* (`NDArray`, required)\n  The first input.\n* *rhs* (`NDArray`, required)\n  The second input.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Returns element-wise sum of the input arrays with broadcasting.</p>","abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":""},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"args_string":"(lhs, rhs, **kwargs)","args_html":"(lhs, rhs, **kwargs)","location":null,"def":{"name":"broadcast_add","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":""},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._broadcast_add(lhs, rhs, **kwargs)"}},{"id":"broadcast_axis(data,**kwargs)-class-method","html_id":"broadcast_axis(data,**kwargs)-class-method","name":"broadcast_axis","doc":"Broadcasts the input array over particular axis.\n\nBroadcasting is allowed on axes with size 1, such as from `[2, 1, 3, 1]`\nto `[2, 8, 3, 9]`. Elements will be duplicated on the broadcasted\naxis.\n\nAssume *x* is an array with the following elements:\n    [[[1], [2]]]\n\nThen:\n    broadcast_axis(x, axis: 2, size: 3) = [[[1, 1, 1], [2, 2, 2]]]\n    broadcast_axis(x, axis: [0, 2], size: [2, 3]) = [[[1, 1, 1], [2, 2, 2]], [[1, 1, 1], [2, 2, 2]]]\n\n### Parameters\n* *out* (`NDArray`, optional)\n  The output array.\n* *axis* (`Int` or `Array(Int)`, optional)\n  The axis on which to perform the broadcasting.\n* *size* (`Int` or `Array(Int)`, optional)\n  Target sizes of the broadcasting axis.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Broadcasts the input array over particular axis.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"broadcast_axis","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._broadcast_axis(data, **kwargs)"}},{"id":"broadcast_div(lhs,rhs,**kwargs)-class-method","html_id":"broadcast_div(lhs,rhs,**kwargs)-class-method","name":"broadcast_div","doc":"Returns element-wise division of the input arrays with broadcasting.\n\nAssume *x* and *y* are arrays with the following elements:\n    [[6, 6, 6], [6, 6, 6]] # x\n    [[2], [3]]             # y\n\nThen:\n    broadcast_div(x, y) # => [[3, 3, 3], [2, 2, 2]]\n\n### Parameters\n* *lhs* (`NDArray`, required)\n  The first input.\n* *rhs* (`NDArray`, required)\n  The second input.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Returns element-wise division of the input arrays with broadcasting.</p>","abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":""},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"args_string":"(lhs, rhs, **kwargs)","args_html":"(lhs, rhs, **kwargs)","location":null,"def":{"name":"broadcast_div","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":""},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._broadcast_div(lhs, rhs, **kwargs)"}},{"id":"broadcast_equal(lhs,rhs,**kwargs)-class-method","html_id":"broadcast_equal(lhs,rhs,**kwargs)-class-method","name":"broadcast_equal","doc":"Returns the result of element-wise equal to (`==`) comparison\noperation with broadcasting.\n\nAssume *x* and *y* are arrays with the following elements:\n    [[1, 1, 1], [1, 1, 1]] # x\n    [[0], [1]]             # y\n\nThen:\n    broadcast_equal(x, y) # => [[0, 0, 0], [1, 1, 1]]\n\n### Parameters\n* *lhs* (`NDArray`, required)\n  The first input to be compared.\n* *rhs* (`NDArray`, required)\n  The second input to be compared.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Returns the result of element-wise equal to (<code><a href=\"../MXNet/NDArray.html#==(other)-instance-method\">#==</a></code>) comparison operation with broadcasting.</p>","abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":""},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"args_string":"(lhs, rhs, **kwargs)","args_html":"(lhs, rhs, **kwargs)","location":null,"def":{"name":"broadcast_equal","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":""},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._broadcast_equal(lhs, rhs, **kwargs)"}},{"id":"broadcast_greater(lhs,rhs,**kwargs)-class-method","html_id":"broadcast_greater(lhs,rhs,**kwargs)-class-method","name":"broadcast_greater","doc":"Returns the result of element-wise greater than (`>`) comparison\noperation with broadcasting.\n\nAssume *x* and *y* are arrays with the following elements:\n    [[1, 1, 1], [1, 1, 1]] # x\n    [[0], [1]]             # y\n\nThen:\n    broadcast_greater(x, y) # => [[1, 1, 1], [0, 0, 0]]\n\n### Parameters\n* *lhs* (`NDArray`, required)\n  The first input to be compared.\n* *rhs* (`NDArray`, required)\n  The second input to be compared.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Returns the result of element-wise greater than (<code><a href=\"../MXNet/NDArray.html#%3E(other)-instance-method\">#></a></code>) comparison operation with broadcasting.</p>","abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":""},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"args_string":"(lhs, rhs, **kwargs)","args_html":"(lhs, rhs, **kwargs)","location":null,"def":{"name":"broadcast_greater","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":""},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._broadcast_greater(lhs, rhs, **kwargs)"}},{"id":"broadcast_greater_equal(lhs,rhs,**kwargs)-class-method","html_id":"broadcast_greater_equal(lhs,rhs,**kwargs)-class-method","name":"broadcast_greater_equal","doc":"Returns the result of element-wise greater than or equal to\n(`>=`) comparison operation with broadcasting.\n\nAssume *x* and *y* are arrays with the following elements:\n    [[1, 1, 1], [1, 1, 1]] # x\n    [[0], [1]]             # y\n\nThen:\n    broadcast_greater_equal(x, y) # => [[1, 1, 1], [1, 1, 1]]\n\n### Parameters\n* *lhs* (`NDArray`, required)\n  The first input to be compared.\n* *rhs* (`NDArray`, required)\n  The second input to be compared.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Returns the result of element-wise greater than or equal to (<code><a href=\"../MXNet/NDArray.html#%3E=(other)-instance-method\">#>=</a></code>) comparison operation with broadcasting.</p>","abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":""},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"args_string":"(lhs, rhs, **kwargs)","args_html":"(lhs, rhs, **kwargs)","location":null,"def":{"name":"broadcast_greater_equal","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":""},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._broadcast_greater_equal(lhs, rhs, **kwargs)"}},{"id":"broadcast_lesser(lhs,rhs,**kwargs)-class-method","html_id":"broadcast_lesser(lhs,rhs,**kwargs)-class-method","name":"broadcast_lesser","doc":"Returns the result of element-wise less than (`<`) comparison\noperation with broadcasting.\n\nAssume *x* and *y* are arrays with the following elements:\n    [[1, 1, 1], [1, 1, 1]] # x\n    [[0], [1]]             # y\n\nThen:\n    broadcast_lesser(x, y) # => [[0, 0, 0], [0, 0, 0]]\n\n### Parameters\n* *lhs* (`NDArray`, required)\n  The first input to be compared.\n* *rhs* (`NDArray`, required)\n  The second input to be compared.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Returns the result of element-wise less than (<code><a href=\"../MXNet/NDArray.html#%3C(other)-instance-method\">#<</a></code>) comparison operation with broadcasting.</p>","abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":""},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"args_string":"(lhs, rhs, **kwargs)","args_html":"(lhs, rhs, **kwargs)","location":null,"def":{"name":"broadcast_lesser","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":""},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._broadcast_lesser(lhs, rhs, **kwargs)"}},{"id":"broadcast_lesser_equal(lhs,rhs,**kwargs)-class-method","html_id":"broadcast_lesser_equal(lhs,rhs,**kwargs)-class-method","name":"broadcast_lesser_equal","doc":"Returns the result of element-wise less than or equal to (`<=`)\ncomparison operation with broadcasting.\n\nAssume *x* and *y* are arrays with the following elements:\n    [[1, 1, 1], [1, 1, 1]] # x\n    [[0], [1]]             # y\n\nThen:\n    broadcast_lesser_equal(x, y) # => [[0, 0, 0], [1, 1, 1]]\n\n### Parameters\n* *lhs* (`NDArray`, required)\n  The first input to be compared.\n* *rhs* (`NDArray`, required)\n  The second input to be compared.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Returns the result of element-wise less than or equal to (<code><a href=\"../MXNet/NDArray.html#%3C=(other)-instance-method\">#<=</a></code>) comparison operation with broadcasting.</p>","abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":""},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"args_string":"(lhs, rhs, **kwargs)","args_html":"(lhs, rhs, **kwargs)","location":null,"def":{"name":"broadcast_lesser_equal","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":""},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._broadcast_lesser_equal(lhs, rhs, **kwargs)"}},{"id":"broadcast_like(lhs,rhs,**kwargs)-class-method","html_id":"broadcast_like(lhs,rhs,**kwargs)-class-method","name":"broadcast_like","doc":"Broadcasts the left hand side to have the same shape as right\nhand side.\n\nBroadcasting is a mechanism that allows `NDArray` to perform\narithmetic operations with other arrays of different shapes\nefficiently without creating multiple copies of arrays. See:\n[Broadcasting](https://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)\nfor explanation.\n\nBroadcasting is allowed on axes with size 1, such as from `[2, 1, 3, 1]`\nto `[2, 8, 3, 9]`. Elements will be duplicated on the broadcasted\naxes.\n\nAssume *x* and *y* are arrays with the following elements:\n    [[1, 2, 3]]            # x\n    [[5, 6, 7], [7, 8, 9]] # y\n\nThen:\n    broadcast_like(x, y) = [[1, 2, 3], [1, 2, 3]])\n\n### Parameters\n* *lhs* (`NDArray`, required)\n  The first input.\n* *rhs* (`NDArray`, required)\n  The second input.\n* *lhs_axes* (`Array(Int)`, optional)\n  Axes to perform broadcast on in the first input array.\n* *rhs_axes* (`Array(Int)`, optional)\n  Axes to copy from the second input array.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Broadcasts the left hand side to have the same shape as right hand side.</p>","abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":""},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"args_string":"(lhs, rhs, **kwargs)","args_html":"(lhs, rhs, **kwargs)","location":null,"def":{"name":"broadcast_like","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":""},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._broadcast_like(lhs, rhs, **kwargs)"}},{"id":"broadcast_logical_and(lhs,rhs,**kwargs)-class-method","html_id":"broadcast_logical_and(lhs,rhs,**kwargs)-class-method","name":"broadcast_logical_and","doc":"Returns element-wise logical and of the input arrays with broadcasting.\n\nAssume *x* and *y* are arrays with the following elements:\n    [[1, 1, 1], [1, 1, 1]] # x\n    [[0], [1]]             # y\n\nThen:\n    broadcast_logical_and(x, y) # => [[0, 0, 0], [1, 1, 1]]\n\n### Parameters\n* *lhs* (`NDArray`, required)\n  The first input.\n* *rhs* (`NDArray`, required)\n  The second input.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Returns element-wise logical and of the input arrays with broadcasting.</p>","abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":""},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"args_string":"(lhs, rhs, **kwargs)","args_html":"(lhs, rhs, **kwargs)","location":null,"def":{"name":"broadcast_logical_and","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":""},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._broadcast_logical_and(lhs, rhs, **kwargs)"}},{"id":"broadcast_logical_or(lhs,rhs,**kwargs)-class-method","html_id":"broadcast_logical_or(lhs,rhs,**kwargs)-class-method","name":"broadcast_logical_or","doc":"Returns element-wise logical or of the input arrays with broadcasting.\n\nAssume *x* and *y* are arrays with the following elements:\n    [[1, 1, 0], [1, 1, 0]] # x\n    [[1], [0]]             # y\n\nThen:\n    broadcast_logical_or(x, y) # => [[1, 1, 1], [1, 1, 0]]\n\n### Parameters\n* *lhs* (`NDArray`, required)\n  The first input.\n* *rhs* (`NDArray`, required)\n  The second input.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Returns element-wise logical or of the input arrays with broadcasting.</p>","abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":""},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"args_string":"(lhs, rhs, **kwargs)","args_html":"(lhs, rhs, **kwargs)","location":null,"def":{"name":"broadcast_logical_or","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":""},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._broadcast_logical_or(lhs, rhs, **kwargs)"}},{"id":"broadcast_logical_xor(lhs,rhs,**kwargs)-class-method","html_id":"broadcast_logical_xor(lhs,rhs,**kwargs)-class-method","name":"broadcast_logical_xor","doc":"Returns element-wise logical xor of the input arrays with broadcasting.\n\nAssume *x* and *y* are arrays with the following elements:\n    [[1, 1, 0], [1, 1, 0]] # x\n    [[1], [0]]             # y\n\nThen:\n    broadcast_logical_or(x, y) # => [[0, 0, 1], [1, 1, 0]]\n\n### Parameters\n* *lhs* (`NDArray`, required)\n  The first input.\n* *rhs* (`NDArray`, required)\n  The second input.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Returns element-wise logical xor of the input arrays with broadcasting.</p>","abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":""},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"args_string":"(lhs, rhs, **kwargs)","args_html":"(lhs, rhs, **kwargs)","location":null,"def":{"name":"broadcast_logical_xor","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":""},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._broadcast_logical_xor(lhs, rhs, **kwargs)"}},{"id":"broadcast_maximum(lhs,rhs,**kwargs)-class-method","html_id":"broadcast_maximum(lhs,rhs,**kwargs)-class-method","name":"broadcast_maximum","doc":"Returns element-wise maximum of the input arrays with broadcasting.\n\nThis function compares two input arrays and returns a new array\nhaving the element-wise maxima.\n\nAssume *x* and *y* are arrays with the following elements:\n    [[1, 1, 1], [1, 1, 1]] # x\n    [[0], [1]]             # y\n\nThen:\n    broadcast_maximum(x, y) # => [[1, 1, 1], [1, 1, 1]]\n\n### Parameters\n* *lhs* (`NDArray`, required)\n  The first input to be compared.\n* *rhs* (`NDArray`, required)\n  The second input to be compared.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Returns element-wise maximum of the input arrays with broadcasting.</p>","abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":""},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"args_string":"(lhs, rhs, **kwargs)","args_html":"(lhs, rhs, **kwargs)","location":null,"def":{"name":"broadcast_maximum","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":""},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._broadcast_maximum(lhs, rhs, **kwargs)"}},{"id":"broadcast_minimum(lhs,rhs,**kwargs)-class-method","html_id":"broadcast_minimum(lhs,rhs,**kwargs)-class-method","name":"broadcast_minimum","doc":"Returns element-wise minimum of the input arrays with broadcasting.\n\nThis function compares two input arrays and returns a new array\nhaving the element-wise minima.\n\nAssume *x* and *y* are arrays with the following elements:\n    [[1, 1, 1], [1, 1, 1]] # x\n    [[0], [1]]             # y\n\nThen:\n    broadcast_minimum(x, y) # => [[0, 0, 0], [1, 1, 1]]\n\n### Parameters\n* *lhs* (`NDArray`, required)\n  The first input to be compared.\n* *rhs* (`NDArray`, required)\n  The second input to be compared.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Returns element-wise minimum of the input arrays with broadcasting.</p>","abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":""},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"args_string":"(lhs, rhs, **kwargs)","args_html":"(lhs, rhs, **kwargs)","location":null,"def":{"name":"broadcast_minimum","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":""},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._broadcast_minimum(lhs, rhs, **kwargs)"}},{"id":"broadcast_minus(lhs,rhs,**kwargs)-class-method","html_id":"broadcast_minus(lhs,rhs,**kwargs)-class-method","name":"broadcast_minus","doc":"Returns element-wise difference of the input arrays with broadcasting.\n\n`.broadcast_minus` is an alias to the function `.broadcast_sub`.\n\nAssume *x* and *y* are arrays with the following elements:\n    [[1, 1, 1], [1, 1, 1]] # x\n    [[0], [1]]             # y\n\nThen:\n    broadcast_minus(x, y) # => [[1, 1, 1], [0, 0, 0]]\n\n### Parameters\n* *lhs* (`NDArray`, required)\n  The first input.\n* *rhs* (`NDArray`, required)\n  The second input.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Returns element-wise difference of the input arrays with broadcasting.</p>","abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":""},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"args_string":"(lhs, rhs, **kwargs)","args_html":"(lhs, rhs, **kwargs)","location":null,"def":{"name":"broadcast_minus","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":""},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._broadcast_minus(lhs, rhs, **kwargs)"}},{"id":"broadcast_mul(lhs,rhs,**kwargs)-class-method","html_id":"broadcast_mul(lhs,rhs,**kwargs)-class-method","name":"broadcast_mul","doc":"Returns element-wise product of the input arrays with broadcasting.\n\nAssume *x* and *y* are arrays with the following elements:\n    [[1, 1, 1], [1, 1, 1]] # x\n    [[0], [1]]             # y\n\nThen:\n    broadcast_mul(x, y) # => [[0, 0, 0], [1, 1, 1]]\n\n### Parameters\n* *lhs* (`NDArray`, required)\n  The first input.\n* *rhs* (`NDArray`, required)\n  The second input.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Returns element-wise product of the input arrays with broadcasting.</p>","abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":""},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"args_string":"(lhs, rhs, **kwargs)","args_html":"(lhs, rhs, **kwargs)","location":null,"def":{"name":"broadcast_mul","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":""},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._broadcast_mul(lhs, rhs, **kwargs)"}},{"id":"broadcast_not_equal(lhs,rhs,**kwargs)-class-method","html_id":"broadcast_not_equal(lhs,rhs,**kwargs)-class-method","name":"broadcast_not_equal","doc":"Returns the result of element-wise not equal to (`!=`)\ncomparison operation with broadcasting.\n\nAssume *x* and *y* are arrays with the following elements:\n    [[1, 1, 1], [1, 1, 1]] # x\n    [[0], [1]]             # y\n\nThen:\n    broadcast_not_equal(x, y) # => [[1, 1, 1], [0, 0, 0]]\n\n### Parameters\n* *lhs* (`NDArray`, required)\n  The first input to be compared.\n* *rhs* (`NDArray`, required)\n  The second input to be compared.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Returns the result of element-wise not equal to (<code><a href=\"../MXNet/NDArray.html#!=(other)-instance-method\">#!=</a></code>) comparison operation with broadcasting.</p>","abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":""},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"args_string":"(lhs, rhs, **kwargs)","args_html":"(lhs, rhs, **kwargs)","location":null,"def":{"name":"broadcast_not_equal","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":""},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._broadcast_not_equal(lhs, rhs, **kwargs)"}},{"id":"broadcast_plus(lhs,rhs,**kwargs)-class-method","html_id":"broadcast_plus(lhs,rhs,**kwargs)-class-method","name":"broadcast_plus","doc":"Returns element-wise sum of the input arrays with broadcasting.\n\n`.broadcast_plus` is an alias for `.broadcast_add`.\n\nAssume *x* and *y* are arrays with the following elements:\n    [[1, 1, 1], [1, 1, 1]] # x\n    [[0], [1]]             # y\n\nThen:\n    broadcast_plus(x, y) # => [[1, 1, 1], [2, 2, 2]]\n\n### Parameters\n* *lhs* (`NDArray`, required)\n  The first input.\n* *rhs* (`NDArray`, required)\n  The second input.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Returns element-wise sum of the input arrays with broadcasting.</p>","abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":""},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"args_string":"(lhs, rhs, **kwargs)","args_html":"(lhs, rhs, **kwargs)","location":null,"def":{"name":"broadcast_plus","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":""},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._broadcast_plus(lhs, rhs, **kwargs)"}},{"id":"broadcast_power(lhs,rhs,**kwargs)-class-method","html_id":"broadcast_power(lhs,rhs,**kwargs)-class-method","name":"broadcast_power","doc":"Returns result of first array elements raised to powers from\nsecond array, element-wise with broadcasting.\n\nAssume *x* and *y* are arrays with the following elements:\n    [[2, 2, 2], [2, 2, 2]] # x\n    [[1], [2]]             # y\n\nThen:\n    broadcast_power(x, y) # => [[2, 2, 2], [4, 4, 4]]\n\n### Parameters\n* *lhs* (`NDArray`, required)\n  The base input.\n* *rhs* (`NDArray`, required)\n  The exponent input.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Returns result of first array elements raised to powers from second array, element-wise with broadcasting.</p>","abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":""},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"args_string":"(lhs, rhs, **kwargs)","args_html":"(lhs, rhs, **kwargs)","location":null,"def":{"name":"broadcast_power","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":""},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._broadcast_power(lhs, rhs, **kwargs)"}},{"id":"broadcast_sub(lhs,rhs,**kwargs)-class-method","html_id":"broadcast_sub(lhs,rhs,**kwargs)-class-method","name":"broadcast_sub","doc":"Returns element-wise difference of the input arrays with broadcasting.\n\n`.broadcast_sub` is an alias to the function `.broadcast_minus`.\n\nAssume *x* and *y* are arrays with the following elements:\n    [[1, 1, 1], [1, 1, 1]] # x\n    [[0], [1]]             # y\n\nThen:\n    broadcast_sub(x, y) # => [[1, 1, 1], [0, 0, 0]]\n\n### Parameters\n* *lhs* (`NDArray`, required)\n  The first input.\n* *rhs* (`NDArray`, required)\n  The second input.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Returns element-wise difference of the input arrays with broadcasting.</p>","abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":""},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"args_string":"(lhs, rhs, **kwargs)","args_html":"(lhs, rhs, **kwargs)","location":null,"def":{"name":"broadcast_sub","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":""},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._broadcast_sub(lhs, rhs, **kwargs)"}},{"id":"broadcast_to(data,**kwargs)-class-method","html_id":"broadcast_to(data,**kwargs)-class-method","name":"broadcast_to","doc":"Broadcasts the input array to a new shape.\n\nBroadcasting is a mechanism that allows `NDArray` to perform\narithmetic operations with other arrays of different shapes\nefficiently without creating multiple copies of arrays. See:\n[Broadcasting](https://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)\nfor explanation.\n\nBroadcasting is allowed on axes with size 1, such as from `[2, 1, 3, 1]`\nto `[2, 8, 3, 9]`. Elements will be duplicated on the broadcasted\naxes.\n\nAssume *x* is an array with the following elements:\n    [[1, 2, 3]]\n\nThen:\n    broadcast_to(x, shape: [2, 3]) = [[1, 2, 3], [1, 2, 3]])\n\nThe dimension which you do not want to change can also be\nspecified as `0`. So with `shape: [2, 0]`, we will obtain the\nsame result as in the above example.\n\n### Parameters\n* *data* (`NDArray`, required)\n  Input data.\n* *shape* (`Int` or `Array(Int)`, required)\n  The shape of the desired array.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Broadcasts the input array to a new shape.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"broadcast_to","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._broadcast_to(data, **kwargs)"}},{"id":"cbrt(data,**kwargs)-class-method","html_id":"cbrt(data,**kwargs)-class-method","name":"cbrt","doc":"Returns element-wise cube-root value of the input.\n\nAssume *x* is an array with the following elements:\n    [1, 8, -125]\n\nThen:\n    cbrt(x) = [1, 2, -5]\n\n### Parameters\n* *data* (`NDArray`, required)\n  Input data.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Returns element-wise cube-root value of the input.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"cbrt","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._cbrt(data, **kwargs)"}},{"id":"ceil(data,**kwargs)-class-method","html_id":"ceil(data,**kwargs)-class-method","name":"ceil","doc":"Returns element-wise ceiling of the input.\n\nThe ceiling  `x` is the smallest integer `i`, such that `i >= x`.\n\nAssume *x* is an array with the following elements:\n    [-2.1, -1.9, 1.5, 1.9, 2.1]\n\nThen:\n    ceil(x) = [-2.0, -1.9, 2.0, 2.0, 3.0]\n\n### Parameters\n* *data* (`NDArray`, required)\n  Input data.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Returns element-wise ceiling of the input.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"ceil","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._ceil(data, **kwargs)"}},{"id":"clip(data,a_min,a_max,**kwargs)-class-method","html_id":"clip(data,a_min,a_max,**kwargs)-class-method","name":"clip","doc":"Clips (limits) the values in an array.\n\nGiven an interval, values outside the interval are clipped to\nthe interval edges. Clipping *x* between *a_min* and *a_x*\nwould be:\n\n    clip(x, a_min, a_max) = max(min(x, a_max), a_min))\n\nAssume *x* is an array with the following elements:\n    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nThen:\n    clip(x, 1, 8) # => [1, 1, 2, 3, 4, 5, 6, 7, 8, 8]\n\n### Parameters\n* *data* (`NDArray`, required)\n  Input data.\n* *a_min* (`Float`, required)\n  Minimum value.\n* *a_max* (`Float`, required)\n  Maximum value.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Clips (limits) the values in an array.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""},{"name":"a_min","doc":null,"default_value":"","external_name":"a_min","restriction":""},{"name":"a_max","doc":null,"default_value":"","external_name":"a_max","restriction":""}],"args_string":"(data, a_min, a_max, **kwargs)","args_html":"(data, a_min, a_max, **kwargs)","location":null,"def":{"name":"clip","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""},{"name":"a_min","doc":null,"default_value":"","external_name":"a_min","restriction":""},{"name":"a_max","doc":null,"default_value":"","external_name":"a_max","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._clip(data, a_min, a_max, **kwargs)"}},{"id":"concat(data:Array(self),**kwargs)-class-method","html_id":"concat(data:Array(self),**kwargs)-class-method","name":"concat","doc":"Joins input arrays along a given axis.\n\nThe dimensions of the input arrays should be the same except\nfor the axis along which they will be concatenated. The\ndimension of the output array along the concatenated axis will\nbe equal to the sum of the corresponding dimensions of the\ninput arrays.\n\nAssume *x* and *y* are arrays with the following elements:\n    [[1, 2], [3, 4]] # x\n    [[1, 4], [1, 1]] # y\n\nThen:\n    concat(x, y) # => [[1, 2, 1, 4], [3, 4, 1, 1]]\n\n### Parameters\n* *data* (`Array(NDArray)`, required)\n  List of arrays to concatenate.\n* *dim* (`Int`, default = 1)\n  The dimension to be concated.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Joins input arrays along a given axis.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"Array(self)"}],"args_string":"(data : Array(<span class=\"k\">self</span>), **kwargs)","args_html":"(data : Array(<span class=\"k\">self</span>), **kwargs)","location":null,"def":{"name":"concat","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"Array(self)"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._concat(data, **kwargs.merge({num_args: data.size}))"}},{"id":"convolution(data:self,weight:self?,bias:self?,kernel,num_filter,**kwargs)-class-method","html_id":"convolution(data:self,weight:self?,bias:self?,kernel,num_filter,**kwargs)-class-method","name":"convolution","doc":"Compute *N*-D convolution on *(N+2)*-D input.\n\nFor general 2-D convolution, the shapes are:\n  * **data**: *[batch_size, channel, height, width]*\n  * **weight**: *[num_filter, channel, kernel[0], kernel[1]]*\n  * **bias**: *[num_filter]*\n  * **out**: *[batch_size, num_filter, out_height, out_width]*\n\nIf *no_bias* is set to be true, then the *bias* term is\nignored.\n\nThe default data *layout* is *NCHW*, namely *(batch_size,\nchannel, height, width)*. We can choose other layouts such as\n*NWC*.\n\nIf *num_group* is larger than 1, denoted by *g*, then split\nthe input data evenly into *g* parts along the channel axis,\nand also evenly split *weight* along the first dimension. Next\ncompute the convolution on the *i*-th part of the data with\nthe *i*-th weight part. The output is obtained by\nconcatenating all the *g* results.\n\n1-D convolution does not have *height* dimension but only\n*width* in space.  The shapes are:\n  * **data**: *[batch_size, channel, width]*\n  * **weight**: *[num_filter, channel, kernel[0]]*\n  * **bias**: *[num_filter]*\n  * **out**: *[batch_size, num_filter, out_width]*\n\n3-D convolution adds an additional *depth* dimension besides\n*height* and *width*. The shapes are:\n  * **data**: *[batch_size, channel, depth, height, width]*\n  * **weight**: *[num_filter, channel, kernel[0], kernel[1], kernel[2]]*\n  * **bias**: *[num_filter]*\n  * **out**: *[batch_size, num_filter, out_depth, out_height, out_width]*\n\nBoth *weight* and *bias* are learnable parameters.\n\nThere are other options to tune the performance:\n  * **cudnn_tune**: enabling this option leads to higher\n  startup time but may give faster speed. Options are: \"off\" -\n  no tuning, \"limited_workspace\" - run test and pick the\n  fastest algorithm that doesn't exceed workspace limit,\n  \"fastest\" - pick the fastest algorithm and ignore workspace\n  limit, `nil` (default) - the behavior is determined by the\n  environment variable \"MXNET_CUDNN_AUTOTUNE_DEFAULT\" -- 0 for\n  off, 1 for limited workspace (default), 2 for fastest.\n  * **workspace**: a larger number leads to more (GPU) memory\n  usage but may improve the performance.\n\n### Parameters\n* *data* (`NDArray`, required)\n  Input data.\n* *weight* (`NDArray`, required)\n  Weight matrix.\n* *bias* (`NDArray`, required)\n  Bias parameter.\n* *kernel* (`Array(Int)`, shape, required)\n  Convolution kernel size: `[w]`, `[h, w]` or `[d, h, w]`.\n* *stride* (`Array(Int)`, shape, optional, default = [])\n  Convolution stride: `[w]`, `[h, w]` or `[d, h, w]`. Defaults\n  to 1 for each dimension.\n* *dilate* (`Array(Int)`, shape, optional, default = [])\n  Convolution dilation: `[w]`, `[h, w]` or `[d, h, w]`.\n  Defaults to 1 for each dimension.\n* *pad* (`Array(Int)`, shape, optional, default = [])\n  Zero pad for convolution: `[w]`, `[h, w]` or `[d, h, w]`.\n  Defaults to no padding.\n* *num_filter* (`Int::Unsigned`, required)\n  Convolution filter (channel) number.\n* *num_group* (`Int::Unsigned`, optional, default = 1)\n  Number of group partitions.\n* *workspace* (`Int::Unsigned`, optional, default = 1024)\n  Maximum temporary workspace allowed (MB) for convolution.\n  This parameter has two usages. When CUDNN is not used, it\n  determines the effective batch size of the convolution\n  kernel. When CUDNN is used, it controls the maximum\n  temporary storage used for tuning the best CUDNN kernel\n  when \"limited_workspace\" strategy is used.\n* *no_bias* (`Bool`, optional, default = false)\n  Whether to disable bias parameter.\n* *cudnn_tune* (`::Symbol`, `:fastest`, `:limited_workspace`, `:off` or `nil`, optional)\n  Whether to pick the convolution algorithm by running a\n  performance test.\n* *cudnn_off* (`Bool`, optional, default = false)\n  Turn off cudnn for this layer.\n* *layout* (`String`, `\"NCDHW\"`, `\"NCHW\"`, `\"NCW\"`, `\"NDHWC\"`, `\"NHWC\"`, `\"NWC\"` or `nil`, optional)\n  Set layout for input, output and weight. Empty for default\n  layout: \"NCW\" for 1D, \"NCHW\" for 2D and \"NCDHW\" for\n  3D. \"NHWC\" and \"NDHWC\" are only supported on GPU.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Compute <em>N</em>-D convolution on <em>(N+2)</em>-D input.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"self"},{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"self | ::Nil"},{"name":"bias","doc":null,"default_value":"","external_name":"bias","restriction":"self | ::Nil"},{"name":"kernel","doc":null,"default_value":"","external_name":"kernel","restriction":""},{"name":"num_filter","doc":null,"default_value":"","external_name":"num_filter","restriction":""}],"args_string":"(data : <span class=\"k\">self</span>, weight : <span class=\"k\">self</span>?, bias : <span class=\"k\">self</span>?, kernel, num_filter, **kwargs)","args_html":"(data : <span class=\"k\">self</span>, weight : <span class=\"k\">self</span>?, bias : <span class=\"k\">self</span>?, kernel, num_filter, **kwargs)","location":null,"def":{"name":"convolution","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"self"},{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"self | ::Nil"},{"name":"bias","doc":null,"default_value":"","external_name":"bias","restriction":"self | ::Nil"},{"name":"kernel","doc":null,"default_value":"","external_name":"kernel","restriction":""},{"name":"num_filter","doc":null,"default_value":"","external_name":"num_filter","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._Convolution(data, weight, bias, **kwargs.merge({kernel: kernel, num_filter: num_filter}))"}},{"id":"cos(data,**kwargs)-class-method","html_id":"cos(data,**kwargs)-class-method","name":"cos","doc":"Computes the element-wise cosine of the input array.\n\nThe input should be in radians (`2\\𝜋` radians equals 360 degrees).\n\n    cos([0, 𝜋/4, 𝜋/2]) = [1, 0.707, 0]\n\n### Parameters\n* *data* (`NDArray`, required)\n  Input data.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Computes the element-wise cosine of the input array.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"cos","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._cos(data, **kwargs)"}},{"id":"cosh(data,**kwargs)-class-method","html_id":"cosh(data,**kwargs)-class-method","name":"cosh","doc":"Returns the hyperbolic cosine of the input array, computed element-wise.\n\n    cosh(x) = (exp(x) + exp(-x)) / 2\n\n### Parameters\n* *data* (`NDArray`, required)\n  Input data.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Returns the hyperbolic cosine of the input array, computed element-wise.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"cosh","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._cosh(data, **kwargs)"}},{"id":"degrees(data,**kwargs)-class-method","html_id":"degrees(data,**kwargs)-class-method","name":"degrees","doc":"Converts each element of the input array from radians to\ndegrees.\n\n    degrees([0, 𝜋/2, 𝜋, 3𝜋/2, 2𝜋]) = [0, 90, 180, 270, 360]\n\n### Parameters\n* *data* (`NDArray`, required)\n  Input data.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Converts each element of the input array from radians to degrees.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"degrees","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._degrees(data, **kwargs)"}},{"id":"diag(data,**kwargs)-class-method","html_id":"diag(data,**kwargs)-class-method","name":"diag","doc":"Extracts a diagonal or constructs a diagonal array.\n\n`.diag`‘s behavior depends on the input array dimensions:\n  * *1-D* arrays: constructs a 2-D array with the input as its\n  diagonal, all other elements are zero.\n  * *N-D* arrays: extracts the diagonals of the sub-arrays\n  with axes specified by *axis1* and *axis2*. The output shape\n  is decided by removing the axes numbered *axis1* and *axis2*\n  from the input shape and appending to the result a new axis\n  with the size of the diagonals in question.\n\nFor example, when the input shape is `[2, 3, 4, 5]`, *axis1*\nand *axis2* are 0 and 2 respectively and *k* is 0, the\nresulting shape is `[3, 5, 2]`.\n\nAssume *x* and *y* are arrays with the following elements:\n    [[1, 2, 3], [4, 5, 6]]               # x\n    [[[1, 2], [3, 4]], [[5, 6], [7, 8]]] # y\n\nThen:\n    diag(x) = [1, 5]\n    diag(x, k: 1) = [2, 6]\n    diag(x, k: -1) = [4]\n\n    diag(y) = [[1, 7], [2, 8]]\n    diag(y, k: 1) = [[3], [4]]\n    diag(y, axis1: -2, axis2: -1) = [[1, 4], [5, 8]]\n\n### Parameters\n* *data* (`NDArray`, required)\n  Input data.\n* *k* (`Int`, optional, default = 0)\n  The diagonal in question. The default is 0. Use `k > 0` for\n  diagonals above the main diagonal, and `k < 0` for diagonals\n  below the main diagonal.\n* *axis1* (`Int`, optional, default = 0)\n  The first axis of the sub-arrays of interest. Ignored when\n  the input is a 1-D array.\n* *axis2* (`Int`, optional, default = 1)\n  The second axis of the sub-arrays of interest. Ignored when\n  the input is a 1-D array.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Extracts a diagonal or constructs a diagonal array.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"diag","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._diag(data, **kwargs)"}},{"id":"divide(lhs:self|Number,rhs:self|Number)-class-method","html_id":"divide(lhs:self|Number,rhs:self|Number)-class-method","name":"divide","doc":"Returns element-wise division of the input arrays.\n\nIf the corresponding dimensions of two arrays have the same size\nor one of them has size 1, then the arrays are broadcastable to\na common shape.\n\nEquivalent to `lhs / rhs`. Equivalent to `.broadcast_div` for\n`NDArray` arguments.\n\n### Parameters\n* *lhs* (`NDArray` or `Number`)\n  The first value to be divided.\n* *rhs* (`NDArray` or `Number`)\n  The second value to be divided.\n","summary":"<p>Returns element-wise division of the input arrays.</p>","abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"self | Number"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self | Number"}],"args_string":"(lhs : <span class=\"k\">self</span> | Number, rhs : <span class=\"k\">self</span> | Number)","args_html":"(lhs : <span class=\"k\">self</span> | <a href=\"../Number.html\">Number</a>, rhs : <span class=\"k\">self</span> | <a href=\"../Number.html\">Number</a>)","location":{"filename":"src/mxnet/ndarray.cr","line_number":189,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/ndarray.cr#L189"},"def":{"name":"divide","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"self | Number"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self | Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if lhs.is_a?(self)\n  if rhs.is_a?(self)\n    Ops._broadcast_div(lhs, rhs)\n  else\n    Internal._div_scalar(lhs, scalar: rhs)\n  end\nelse\n  if rhs.is_a?(self)\n    Internal._rdiv_scalar(rhs, scalar: lhs)\n  else\n    raise(\"should never happen\")\n  end\nend"}},{"id":"dot(lhs,rhs,**kwargs)-class-method","html_id":"dot(lhs,rhs,**kwargs)-class-method","name":"dot","doc":"Computes the dot product of two arrays.\n\n`.dot`‘s behavior depends on the input array dimensions:\n  * *1-D* arrays: inner product of vectors\n  * *2-D* arrays: matrix multiplication\n  * *N-D* arrays: a sum product over the last axis of the first\n  input and the first axis of the second input\n\nAssume *x* and *y* are arrays with the following elements:\n    [[1, 2], [3, 4]] # x\n    [[4, 3], [1, 1]] # y\n\nThen:\n    dot(x, y) # => [[8, 5], [20, 13]]\n\n### Parameters\n* *lhs* (`NDArray`, required)\n  The first input.\n* *rhs* (`NDArray`, required)\n  The second input.\n* *transpose_a* (`Bool`, default = false)\n  If true then transpose the first input before dot.\n* *transpose_b* (`Bool`, default = false)\n  If true then transpose the second input before dot.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Computes the dot product of two arrays.</p>","abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":""},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"args_string":"(lhs, rhs, **kwargs)","args_html":"(lhs, rhs, **kwargs)","location":null,"def":{"name":"dot","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":""},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._dot(lhs, rhs, **kwargs)"}},{"id":"empty(shape:Int|Array(Int),dtype=:float32,ctx=nil)-class-method","html_id":"empty(shape:Int|Array(Int),dtype=:float32,ctx=nil)-class-method","name":"empty","doc":"Returns an MXNet array of given shape and type, without\ninitializing entries.\n\n### Parameters\n* *shape* (`Int` or `Array(Int)`)\n  The shape of the empty array.\n* *dtype* (`::Symbol`, default = `:float32`)\n  The data type of the output array.\n* *ctx* (`Context`, optional)\n  Device context (default is the current context).\n","summary":"<p>Returns an MXNet array of given shape and type, without initializing entries.</p>","abstract":false,"args":[{"name":"shape","doc":null,"default_value":"","external_name":"shape","restriction":"Int | Array(Int)"},{"name":"dtype","doc":null,"default_value":":float32","external_name":"dtype","restriction":""},{"name":"ctx","doc":null,"default_value":"nil","external_name":"ctx","restriction":""}],"args_string":"(shape : Int | Array(Int), dtype = <span class=\"n\">:float32</span>, ctx = <span class=\"n\">nil</span>)","args_html":"(shape : Int | Array(Int), dtype = <span class=\"n\">:float32</span>, ctx = <span class=\"n\">nil</span>)","location":{"filename":"src/mxnet/ndarray.cr","line_number":1011,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/ndarray.cr#L1011"},"def":{"name":"empty","args":[{"name":"shape","doc":null,"default_value":"","external_name":"shape","restriction":"Int | Array(Int)"},{"name":"dtype","doc":null,"default_value":":float32","external_name":"dtype","restriction":""},{"name":"ctx","doc":null,"default_value":"nil","external_name":"ctx","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"shape = shape.is_a?(Int) ? [shape] : shape\ndtype = T2DT[dtype]? || (raise(MXNet::NDArrayException.new(\"type is unsupported: #{dtype}\")))\nctx || (ctx = Context.current)\nMXNet::Internal.libcall(MXNDArrayCreateEx, shape.map(&.to_u32), shape.size, *ctx.device, 0, dtype, out handle)\nnew(handle)\n"}},{"id":"equal(lhs:self|Number,rhs:self|Number)-class-method","html_id":"equal(lhs:self|Number,rhs:self|Number)-class-method","name":"equal","doc":"Returns the result of element-wise equal to (`==`) comparison\noperation.\n\nFor each element in input arrays, return 1 (true) if\ncorresponding elements are same, otherwise return 0 (false).\n\nIf the corresponding dimensions of two arrays have the same size\nor one of them has size 1, then the arrays are broadcastable to\na common shape.\n\nEquivalent to `lhs == rhs`. Equivalent to `.broadcast_equal` for\n`NDArray` arguments.\n\n### Parameters\n* *lhs* (`NDArray` or `Number`)\n  The first value to be compared.\n* *rhs* (`NDArray` or `Number`)\n  The second value to be compared.\n","summary":"<p>Returns the result of element-wise equal to (<code><a href=\"../MXNet/NDArray.html#==(other)-instance-method\">#==</a></code>) comparison operation.</p>","abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"self | Number"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self | Number"}],"args_string":"(lhs : <span class=\"k\">self</span> | Number, rhs : <span class=\"k\">self</span> | Number)","args_html":"(lhs : <span class=\"k\">self</span> | <a href=\"../Number.html\">Number</a>, rhs : <span class=\"k\">self</span> | <a href=\"../Number.html\">Number</a>)","location":{"filename":"src/mxnet/ndarray.cr","line_number":312,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/ndarray.cr#L312"},"def":{"name":"equal","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"self | Number"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self | Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if lhs.is_a?(self)\n  if rhs.is_a?(self)\n    Ops._broadcast_equal(lhs, rhs)\n  else\n    Internal._equal_scalar(lhs, scalar: rhs)\n  end\nelse\n  if rhs.is_a?(self)\n    Internal._equal_scalar(rhs, scalar: lhs)\n  else\n    raise(\"should never happen\")\n  end\nend"}},{"id":"exp(data,**kwargs)-class-method","html_id":"exp(data,**kwargs)-class-method","name":"exp","doc":"Returns element-wise exponential value of the input.\n\nAssume *x* is an array with the following elements:\n    [0.0, 1.0, 2.0]\n\nThen:\n    exp(x) = [1.0, 2.71828175, 7.38905621]\n\nThe storage type of `.exp` output is always dense.\n\n### Parameters\n* *data* (`NDArray`, required)\n  Input data.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Returns element-wise exponential value of the input.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"exp","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._exp(data, **kwargs)"}},{"id":"expand_dims(data,axis,**kwargs)-class-method","html_id":"expand_dims(data,axis,**kwargs)-class-method","name":"expand_dims","doc":"Inserts a new axis of size 1 into the array shape.\n\nFor example, given *x* with shape *[2, 3, 4]*, then\n`expand_dims(x, axis: 1)` will return a new array with shape\n*[2, 1, 3, 4]*.\n\n### Parameters\n* *data* (`NDArray`, required)\n  Input data.\n* *axis* (`Int`, required)\n  Position where new axis is to be inserted. Suppose that the\n  input array‘s dimension is `ndim`, the range of the inserted\n  axis is `[-ndim, ndim]`.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Inserts a new axis of size 1 into the array shape.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""},{"name":"axis","doc":null,"default_value":"","external_name":"axis","restriction":""}],"args_string":"(data, axis, **kwargs)","args_html":"(data, axis, **kwargs)","location":null,"def":{"name":"expand_dims","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""},{"name":"axis","doc":null,"default_value":"","external_name":"axis","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._expand_dims(data, axis, **kwargs)"}},{"id":"expm1(data,**kwargs)-class-method","html_id":"expm1(data,**kwargs)-class-method","name":"expm1","doc":"Returns `exp(x) - 1` computed element-wise on the input.\n\nThis function provides greater precision than explicitly\ncalculating `exp(x) - 1` for small values of *x*.\n\nAssume *x* is an array with the following elements:\n    [0.0, 1.0, 2.0]\n\nThen:\n    expm1(x) = [0.0, 1.71828182, 6.38905609]\n\n### Parameters\n* *data* (`NDArray`, required)\n  Input data.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Returns <code>exp(x) - 1</code> computed element-wise on the input.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"expm1","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._expm1(data, **kwargs)"}},{"id":"fix(data,**kwargs)-class-method","html_id":"fix(data,**kwargs)-class-method","name":"fix","doc":"Returns element-wise rounded value to the nearest integer\ntowards zero.\n\nAssume *x* is an array with the following elements:\n    [-2.1, -1.9, 1.5, 1.9, 2.1]\n\nThen:\n    fix(x) = [-2.0, -1.0, 1.0, 1.0, 2.0]\n\n### Parameters\n* *data* (`NDArray`, required)\n  Input data.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Returns element-wise rounded value to the nearest integer towards zero.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"fix","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._fix(data, **kwargs)"}},{"id":"flatten(data,**kwargs)-class-method","html_id":"flatten(data,**kwargs)-class-method","name":"flatten","doc":"Flattens the input array into a 2-D array by collapsing the\nhigher dimensions.\n\nFor an input array with shape *(d1, d2, ..., dk)*, `.flatten`\nreshapes the input array into an output array of shape\n_(d1, d2 * ... * dk)_.\n\nNote that the bahavior of this function is different from\n`Array#flatten`, which behaves similar to `.reshape(shape: [-1])`.\n\nAssume *x* is an array with the following elements:\n    [[[1, 2, 3], [4, 5, 6]], [[1, 2, 3], [4, 5, 6]]]\n\nThen:\n    flatten(x).shape # => [2, 6]\n\n### Parameters\n* *data* (`NDArray`, required)\n  Input data.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Flattens the input array into a 2-D array by collapsing the higher dimensions.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"flatten","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._flatten(data, **kwargs)"}},{"id":"flip(data,axis,**kwargs)-class-method","html_id":"flip(data,axis,**kwargs)-class-method","name":"flip","doc":"Reverses the order of elements along given axis while preserving array shape.\n\nAssume *x* is an array with the following elements:\n    [[0, 1, 2, 3, 4], [5, 6, 7, 8, 9]]\n\nThen:\n    flip(x, axis: 0) # => [[5, 6, 7, 8, 9], [0, 1, 2, 3, 4]]\n    flip(x, axis: 1) # => [[4, 3, 2, 1, 0], [9, 8, 7, 6, 5]]\n\n### Parameters\n* *data* (`NDArray`, required)\n  Input data.\n* *axis* (`Int`, required)\n  The axis on which to reverse elements.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Reverses the order of elements along given axis while preserving array shape.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""},{"name":"axis","doc":null,"default_value":"","external_name":"axis","restriction":""}],"args_string":"(data, axis, **kwargs)","args_html":"(data, axis, **kwargs)","location":null,"def":{"name":"flip","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""},{"name":"axis","doc":null,"default_value":"","external_name":"axis","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._flip(data, axis, **kwargs)"}},{"id":"floor(data,**kwargs)-class-method","html_id":"floor(data,**kwargs)-class-method","name":"floor","doc":"Returns the element-wise floor of the input.\n\nThe floor of `x` is the largest integer `i`, such that `i <= x`.\n\nAssume *x* is an array with the following elements:\n    [-2.1, -1.9, 1.5, 1.9, 2.1]\n\nThen:\n    floor(x) = [-3.0, -2.0, 1.0, 1.0, 2.0]\n\n### Parameters\n* *data* (`NDArray`, required)\n  Input data.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Returns the element-wise floor of the input.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"floor","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._floor(data, **kwargs)"}},{"id":"full(shape:Int|Array(Int),value:T,dtype=nil,ctx=nil)forallT-class-method","html_id":"full(shape:Int|Array(Int),value:T,dtype=nil,ctx=nil)forallT-class-method","name":"full","doc":"Returns a new array of given shape, filled with the given\n*value*.\n\n### Parameters\n* *shape* (`Int` or `Array(Int)`)\n  The shape of the new array.\n* *value* (`T`)\n  A fill value of any supported numeric type.\n* *dtype* (`::Symbol`, optional)\n  The data type of the output array. If unspecified, the type is\n  inferred from the value.\n* *ctx* (`Context`, optional)\n  Device context (default is the current context).\n","summary":"<p>Returns a new array of given shape, filled with the given <em>value</em>.</p>","abstract":false,"args":[{"name":"shape","doc":null,"default_value":"","external_name":"shape","restriction":"Int | Array(Int)"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"T"},{"name":"dtype","doc":null,"default_value":"nil","external_name":"dtype","restriction":""},{"name":"ctx","doc":null,"default_value":"nil","external_name":"ctx","restriction":""}],"args_string":"(shape : Int | Array(Int), value : T, dtype = <span class=\"n\">nil</span>, ctx = <span class=\"n\">nil</span>) forall T","args_html":"(shape : Int | Array(Int), value : <a href=\"../MXNet/NDArray.html\">T</a>, dtype = <span class=\"n\">nil</span>, ctx = <span class=\"n\">nil</span>) forall T","location":{"filename":"src/mxnet/ndarray.cr","line_number":1051,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/ndarray.cr#L1051"},"def":{"name":"full","args":[{"name":"shape","doc":null,"default_value":"","external_name":"shape","restriction":"Int | Array(Int)"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"T"},{"name":"dtype","doc":null,"default_value":"nil","external_name":"dtype","restriction":""},{"name":"ctx","doc":null,"default_value":"nil","external_name":"ctx","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"ctx || (ctx = Context.current)\nif dtype\nelse\n  dtype = INFERRED_TYPES[T]? || (raise(MXNet::NDArrayException.new(\"type is unsupported: #{T}\")))\n  dtype = DT2T[dtype]\nend\n(MXNet::NDArray.empty(shape, dtype, ctx)).tap do |arr|\n  arr[..] = value\nend\n"}},{"id":"fully_connected(data:self,weight:self?,bias:self?,num_hidden:Int,**kwargs)-class-method","html_id":"fully_connected(data:self,weight:self?,bias:self?,num_hidden:Int,**kwargs)-class-method","name":"fully_connected","doc":"Applies a linear transformation: _Y = XWᵀ + b_.\n\nIf *flatten* is true, then the shapes are:\n  * **data**: *[batch_size, x1, x2, ..., xn]*\n  * **weight**: *[num_hidden, x1 * x2 * ... * xn]*\n  * **bias**: *[num_hidden]*\n  * **out**: *[batch_size, num_hidden]*\n\nIf *flatten* is false, then the shapes are:\n  * **data**: *[x1, x2, ..., xn, input_dim]*\n  * **weight**: *[num_hidden, input_dim]*\n  * **bias**: *[num_hidden]*\n  * **out**: *[x1, x2, ..., xn, num_hidden]*\n\nThe learnable parameters include both *weight* and *bias*.\n\nIf *no_bias* is true, then the *bias* term is ignored.\n\n### Parameters\n* *data* (`NDArray`, required)\n  Input data.\n* *weight* (`NDArray`, required)\n  Weight matrix.\n* *bias* (`NDArray`, required)\n  Bias parameter.\n* *num_hidden* (`Int`, required)\n  Number of hidden nodes of the output.\n* *no_bias* (`Bool`, optional, default = false)\n  Whether to disable bias parameter.\n* *flatten* (`Bool`, optional, default = true)\n  Whether to collapse all but the first axis of the input data\n  tensor.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Applies a linear transformation: <em>Y = XWᵀ + b</em>.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"self"},{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"self | ::Nil"},{"name":"bias","doc":null,"default_value":"","external_name":"bias","restriction":"self | ::Nil"},{"name":"num_hidden","doc":null,"default_value":"","external_name":"num_hidden","restriction":"Int"}],"args_string":"(data : <span class=\"k\">self</span>, weight : <span class=\"k\">self</span>?, bias : <span class=\"k\">self</span>?, num_hidden : Int, **kwargs)","args_html":"(data : <span class=\"k\">self</span>, weight : <span class=\"k\">self</span>?, bias : <span class=\"k\">self</span>?, num_hidden : Int, **kwargs)","location":null,"def":{"name":"fully_connected","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"self"},{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"self | ::Nil"},{"name":"bias","doc":null,"default_value":"","external_name":"bias","restriction":"self | ::Nil"},{"name":"num_hidden","doc":null,"default_value":"","external_name":"num_hidden","restriction":"Int"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._FullyConnected(data, weight, bias, **kwargs.merge({num_hidden: num_hidden}))"}},{"id":"gamma(data,**kwargs)-class-method","html_id":"gamma(data,**kwargs)-class-method","name":"gamma","doc":"Returns the gamma function (extension of the factorial\nfunction to the reals), computed element-wise on the input\narray.\n\n### Parameters\n* *data* (`NDArray`, required)\n  Input data.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Returns the gamma function (extension of the factorial function to the reals), computed element-wise on the input array.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"gamma","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._gamma(data, **kwargs)"}},{"id":"gammaln(data,**kwargs)-class-method","html_id":"gammaln(data,**kwargs)-class-method","name":"gammaln","doc":"Returns the log of the absolute value of the gamma function,\ncomputed element-wise on the input array.\n\n### Parameters\n* *data* (`NDArray`, required)\n  Input data.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Returns the log of the absolute value of the gamma function, computed element-wise on the input array.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"gammaln","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._gammaln(data, **kwargs)"}},{"id":"greater(lhs:self|Number,rhs:self|Number)-class-method","html_id":"greater(lhs:self|Number,rhs:self|Number)-class-method","name":"greater","doc":"Returns the result of element-wise greater than (`>`) comparison\noperation.\n\nFor each element in input arrays, return 1 (true) if *lhs*\nelement is greater than corresponding *rhs* element, otherwise\nreturn 0 (false).\n\nIf the corresponding dimensions of two arrays have the same size\nor one of them has size 1, then the arrays are broadcastable to\na common shape.\n\nEquivalent to `lhs > rhs`. Equivalent to `.broadcast_greater`\nfor `NDArray` arguments.\n\n### Parameters\n* *lhs* (`NDArray` or `Number`)\n  The first value to be compared.\n* *rhs* (`NDArray` or `Number`)\n  The second value to be compared.\n","summary":"<p>Returns the result of element-wise greater than (<code><a href=\"../MXNet/NDArray.html#%3E(other)-instance-method\">#></a></code>) comparison operation.</p>","abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"self | Number"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self | Number"}],"args_string":"(lhs : <span class=\"k\">self</span> | Number, rhs : <span class=\"k\">self</span> | Number)","args_html":"(lhs : <span class=\"k\">self</span> | <a href=\"../Number.html\">Number</a>, rhs : <span class=\"k\">self</span> | <a href=\"../Number.html\">Number</a>)","location":{"filename":"src/mxnet/ndarray.cr","line_number":370,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/ndarray.cr#L370"},"def":{"name":"greater","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"self | Number"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self | Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if lhs.is_a?(self)\n  if rhs.is_a?(self)\n    Ops._broadcast_greater(lhs, rhs)\n  else\n    Internal._greater_scalar(lhs, scalar: rhs)\n  end\nelse\n  if rhs.is_a?(self)\n    Internal._lesser_scalar(rhs, scalar: lhs)\n  else\n    raise(\"should never happen\")\n  end\nend"}},{"id":"greater_equal(lhs:self|Number,rhs:self|Number)-class-method","html_id":"greater_equal(lhs:self|Number,rhs:self|Number)-class-method","name":"greater_equal","doc":"Returns the result of element-wise greater than or equal to\n(`>=`) comparison operation.\n\nFor each element in input arrays, return 1 (true) if *lhs*\nelement is greater than or equal to *rhs* element, otherwise\nreturn 0 (false).\n\nIf the corresponding dimensions of two arrays have the same size\nor one of them has size 1, then the arrays are broadcastable to\na common shape.\n\nEquivalent to `lhs >= rhs`. Equivalent to\n`.broadcast_greater_equal` for `NDArray` arguments.\n\n### Parameters\n* *lhs* (`NDArray` or `Number`)\n  The first value to be compared.\n* *rhs* (`NDArray` or `Number`)\n  The second value to be compared.\n","summary":"<p>Returns the result of element-wise greater than or equal to (<code><a href=\"../MXNet/NDArray.html#%3E=(other)-instance-method\">#>=</a></code>) comparison operation.</p>","abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"self | Number"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self | Number"}],"args_string":"(lhs : <span class=\"k\">self</span> | Number, rhs : <span class=\"k\">self</span> | Number)","args_html":"(lhs : <span class=\"k\">self</span> | <a href=\"../Number.html\">Number</a>, rhs : <span class=\"k\">self</span> | <a href=\"../Number.html\">Number</a>)","location":{"filename":"src/mxnet/ndarray.cr","line_number":399,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/ndarray.cr#L399"},"def":{"name":"greater_equal","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"self | Number"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self | Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if lhs.is_a?(self)\n  if rhs.is_a?(self)\n    Ops._broadcast_greater_equal(lhs, rhs)\n  else\n    Internal._greater_equal_scalar(lhs, scalar: rhs)\n  end\nelse\n  if rhs.is_a?(self)\n    Internal._lesser_equal_scalar(rhs, scalar: lhs)\n  else\n    raise(\"should never happen\")\n  end\nend"}},{"id":"hypot(lhs:self,rhs:self,**kwargs)-class-method","html_id":"hypot(lhs:self,rhs:self,**kwargs)-class-method","name":"hypot","doc":"Given the legs of a right triangle, return its hypotenuse.\n\n### Parameters\n* *lhs* (`NDArray`, required)\n  Input data.\n* *rhs* (`NDArray`, required)\n  Input data.\n","summary":"<p>Given the legs of a right triangle, return its hypotenuse.</p>","abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"self"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self"}],"args_string":"(lhs : <span class=\"k\">self</span>, rhs : <span class=\"k\">self</span>, **kwargs)","args_html":"(lhs : <span class=\"k\">self</span>, rhs : <span class=\"k\">self</span>, **kwargs)","location":null,"def":{"name":"hypot","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"self"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Internal._hypot(lhs, rhs, **kwargs)"}},{"id":"imperative_invoke(op,*ndargs,out_out:self?=nil,**kwargs)-class-method","html_id":"imperative_invoke(op,*ndargs,out_out:self?=nil,**kwargs)-class-method","name":"imperative_invoke","doc":"TODO: cache op handles","summary":"<p><span class=\"flag orange\">TODO</span>  cache op handles</p>","abstract":false,"args":[{"name":"op","doc":null,"default_value":"","external_name":"op","restriction":""},{"name":"ndargs","doc":null,"default_value":"","external_name":"ndargs","restriction":""},{"name":"_out","doc":null,"default_value":"nil","external_name":"out","restriction":"self | ::Nil"}],"args_string":"(op, *ndargs, out _out : <span class=\"k\">self</span>? = <span class=\"n\">nil</span>, **kwargs)","args_html":"(op, *ndargs, out _out : <span class=\"k\">self</span>? = <span class=\"n\">nil</span>, **kwargs)","location":{"filename":"src/mxnet/ndarray.cr","line_number":1231,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/ndarray.cr#L1231"},"def":{"name":"imperative_invoke","args":[{"name":"op","doc":null,"default_value":"","external_name":"op","restriction":""},{"name":"ndargs","doc":null,"default_value":"","external_name":"ndargs","restriction":""},{"name":"_out","doc":null,"default_value":"nil","external_name":"out","restriction":"self | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":1,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"ndargs = ndargs.size > 0 ? ndargs.to_a.flatten.compact.map do |v|\n  v.handle\nend : [] of NDArrayHandle\nkwargs = kwargs.size > 0 ? kwargs.map do |k, v|\n  [output(k), output(v)]\nend.reject do |__arg20|\n  k = __arg20[0]\n  v = __arg20[1]\n  v.empty? || (k == \"name\")\nend.to_h : {} of String => String\nnum_outputs = 0\noutputs = Pointer(NDArrayHandle).null\nif _out\n  num_outputs = 1\n  outputs = Pointer(NDArrayHandle).malloc(1)\n  outputs[0] = _out.handle\nend\nkwargs.delete(:name)\nMXNet::Internal.libcall(NNGetOpHandle, op.to_s, out op_handle)\nMXNet::Internal.libcall(MXImperativeInvoke, op_handle, ndargs.size, ndargs, pointerof(num_outputs), pointerof(outputs), kwargs.size, kwargs.keys.map(&.to_unsafe), kwargs.values.map(&.to_unsafe))\n_out || (new(outputs[0]))\n"}},{"id":"lesser(lhs:self|Number,rhs:self|Number)-class-method","html_id":"lesser(lhs:self|Number,rhs:self|Number)-class-method","name":"lesser","doc":"Returns the result of element-wise less than (`<`) comparison\noperation.\n\nFor each element in input arrays, return 1 (true) if *lhs*\nelement is less than corresponding *rhs* element, otherwise\nreturn 0 (false).\n\nIf the corresponding dimensions of two arrays have the same size\nor one of them has size 1, then the arrays are broadcastable to\na common shape.\n\nEquivalent to `lhs < rhs`. Equivalent to `.broadcast_lesser`\nfor `NDArray` arguments.\n\n### Parameters\n* *lhs* (`NDArray` or `Number`)\n  The first value to be compared.\n* *rhs* (`NDArray` or `Number`)\n  The second value to be compared.\n","summary":"<p>Returns the result of element-wise less than (<code><a href=\"../MXNet/NDArray.html#%3C(other)-instance-method\">#<</a></code>) comparison operation.</p>","abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"self | Number"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self | Number"}],"args_string":"(lhs : <span class=\"k\">self</span> | Number, rhs : <span class=\"k\">self</span> | Number)","args_html":"(lhs : <span class=\"k\">self</span> | <a href=\"../Number.html\">Number</a>, rhs : <span class=\"k\">self</span> | <a href=\"../Number.html\">Number</a>)","location":{"filename":"src/mxnet/ndarray.cr","line_number":428,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/ndarray.cr#L428"},"def":{"name":"lesser","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"self | Number"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self | Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if lhs.is_a?(self)\n  if rhs.is_a?(self)\n    Ops._broadcast_lesser(lhs, rhs)\n  else\n    Internal._lesser_scalar(lhs, scalar: rhs)\n  end\nelse\n  if rhs.is_a?(self)\n    Internal._greater_scalar(rhs, scalar: lhs)\n  else\n    raise(\"should never happen\")\n  end\nend"}},{"id":"lesser_equal(lhs:self|Number,rhs:self|Number)-class-method","html_id":"lesser_equal(lhs:self|Number,rhs:self|Number)-class-method","name":"lesser_equal","doc":"Returns the result of element-wise less than or equal to (`<=`)\ncomparison operation.\n\nFor each element in input arrays, return 1 (true) if *lhs*\nelement is less than or equal to *rhs* element, otherwise return\n0 (false).\n\nIf the corresponding dimensions of two arrays have the same size\nor one of them has size 1, then the arrays are broadcastable to\na common shape.\n\nEquivalent to `lhs <= rhs`. Equivalent to\n`.broadcast_lesser_equal` for `NDArray` arguments.\n\n### Parameters\n* *lhs* (`NDArray` or `Number`)\n  The first value to be compared.\n* *rhs* (`NDArray` or `Number`)\n  The second value to be compared.\n","summary":"<p>Returns the result of element-wise less than or equal to (<code><a href=\"../MXNet/NDArray.html#%3C=(other)-instance-method\">#<=</a></code>) comparison operation.</p>","abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"self | Number"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self | Number"}],"args_string":"(lhs : <span class=\"k\">self</span> | Number, rhs : <span class=\"k\">self</span> | Number)","args_html":"(lhs : <span class=\"k\">self</span> | <a href=\"../Number.html\">Number</a>, rhs : <span class=\"k\">self</span> | <a href=\"../Number.html\">Number</a>)","location":{"filename":"src/mxnet/ndarray.cr","line_number":457,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/ndarray.cr#L457"},"def":{"name":"lesser_equal","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"self | Number"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self | Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if lhs.is_a?(self)\n  if rhs.is_a?(self)\n    Ops._broadcast_lesser_equal(lhs, rhs)\n  else\n    Internal._lesser_equal_scalar(lhs, scalar: rhs)\n  end\nelse\n  if rhs.is_a?(self)\n    Internal._greater_equal_scalar(rhs, scalar: lhs)\n  else\n    raise(\"should never happen\")\n  end\nend"}},{"id":"load(fname)-class-method","html_id":"load(fname)-class-method","name":"load","doc":"Loads arrays from a file.\n\nReturns `Array(NDArray)` or `Hash(String, NDArray)`.\nSee `.save` for more detail on format.\n\nExamples of filenames:\n- `/path/to/file`\n- `s3://my-bucket/path/to/file` (if MXNet is compiled with AWS S3 supports)\n- `hdfs://path/to/file` (if MXNet is compiled with HDFS supports)\n\n### Parameters\n* *fname* (`String`)\n  The filename.\n","summary":"<p>Loads arrays from a file.</p>","abstract":false,"args":[{"name":"fname","doc":null,"default_value":"","external_name":"fname","restriction":""}],"args_string":"(fname)","args_html":"(fname)","location":{"filename":"src/mxnet/ndarray.cr","line_number":1204,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/ndarray.cr#L1204"},"def":{"name":"load","args":[{"name":"fname","doc":null,"default_value":"","external_name":"fname","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Internal.libcall(MXNDArrayLoad, fname, out size, out arr, out name_size, out names)\nif name_size == 0\n  size.times.reduce([] of NDArray) do |array, i|\n    value = new(arr[i])\n    array << value\n  end\nelse\n  if name_size == size\n    size.times.reduce({} of String => NDArray) do |hash, i|\n      key = String.new(names[i])\n      value = new(arr[i])\n      hash[key] = value\n      hash\n    end\n  else\n    raise(Exception.new(\"invalid file format\"))\n  end\nend\n"}},{"id":"log(data,**kwargs)-class-method","html_id":"log(data,**kwargs)-class-method","name":"log","doc":"Returns element-wise natural logarithmic value of the input.\n\nThe natural logarithm is the logarithm in base *e*, so that\n`log(exp(x)) = x`.\n\nThe storage type of `.log` output is always dense.\n\n### Parameters\n* *data* (`NDArray`, required)\n  Input data.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Returns element-wise natural logarithmic value of the input.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"log","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._log(data, **kwargs)"}},{"id":"log10(data,**kwargs)-class-method","html_id":"log10(data,**kwargs)-class-method","name":"log10","doc":"Returns element-wise base-10 logarithmic value of the input.\n\n    10**log10(x) = x\n\n### Parameters\n* *data* (`NDArray`, required)\n  Input data.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Returns element-wise base-10 logarithmic value of the input.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"log10","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._log10(data, **kwargs)"}},{"id":"log1p(data,**kwargs)-class-method","html_id":"log1p(data,**kwargs)-class-method","name":"log1p","doc":"Returns `log(1 + x)` computed element-wise on the input.\n\nThis function is more accurate than explicitly calculating\n`log(1 + x)` for small *x*.\n\n### Parameters\n* *data* (`NDArray`, required)\n  Input data.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Returns <code><a href=\"../MXNet/NDArray.html#log(data,**kwargs)-class-method\">.log(1 + x)</a></code> computed element-wise on the input.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"log1p","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._log1p(data, **kwargs)"}},{"id":"log2(data,**kwargs)-class-method","html_id":"log2(data,**kwargs)-class-method","name":"log2","doc":"Returns element-wise base-2 logarithmic value of the input.\n\n    2**log2(x) = x\n\n### Parameters\n* *data* (`NDArray`, required)\n  Input data.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Returns element-wise base-2 logarithmic value of the input.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"log2","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._log2(data, **kwargs)"}},{"id":"log_softmax(data,**kwargs)-class-method","html_id":"log_softmax(data,**kwargs)-class-method","name":"log_softmax","doc":"Computes the log softmax of the input.\n\nThis is equivalent to computing `.softmax` followed by `.log`.\n\nAssume *x* is an array with the following elements:\n    [[1.0, 1.0, 1.0], [1.0, 1.0, 1.0]]\n\nThen:\n    softmax(x, axis: 0) # => [[-0.6931, -0.6931, -0.6931], [-0.6931, -0.6931, -0.6931]]\n    softmax(x, axis: 1) # => [[-1.0986, -1.0986, -1.0986], [-1.0986, -1.0986, -1.0986]]\n\n### Parameters\n* *data* (`NDArray`, required)\n  Input data.\n* *axis* (`Int`, optional, default = -1)\n  The axis along which to compute softmax.\n* *temperature* (`Float`, optional, default = 1.0)\n  Temperature parameter in softmax.\n* *dtype* (`::Symbol`, `:float16`, `:float32` or `:float64`, optional)\n  Type of the output in case this can't be inferred. Defaults\n  to the same type as the input if not defined.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Computes the log softmax of the input.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"log_softmax","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._log_softmax(data, **kwargs)"}},{"id":"logical_and(lhs:self|Number,rhs:self|Number)-class-method","html_id":"logical_and(lhs:self|Number,rhs:self|Number)-class-method","name":"logical_and","doc":"Returns the result of element-wise logical and (`&`) comparison\noperation.\n\nFor each element in input arrays, return 1 (true) if *lhs*\nelement and *rhs* element is true (not zero), otherwise return 0\n(false).\n\nIf the corresponding dimensions of two arrays have the same size\nor one of them has size 1, then the arrays are broadcastable to\na common shape.\n\nEquivalent to `lhs & rhs`. Equivalent to\n`.broadcast_logical_and` for `NDArray` arguments.\n\n### Parameters\n* *lhs* (`NDArray` or `Number`)\n  The first value to be compared.\n* *rhs* (`NDArray` or `Number`)\n  The second value to be compared.\n","summary":"<p>Returns the result of element-wise logical and (<code><a href=\"../MXNet/NDArray.html#&(other)-instance-method\">#&</a></code>) comparison operation.</p>","abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"self | Number"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self | Number"}],"args_string":"(lhs : <span class=\"k\">self</span> | Number, rhs : <span class=\"k\">self</span> | Number)","args_html":"(lhs : <span class=\"k\">self</span> | <a href=\"../Number.html\">Number</a>, rhs : <span class=\"k\">self</span> | <a href=\"../Number.html\">Number</a>)","location":{"filename":"src/mxnet/ndarray.cr","line_number":486,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/ndarray.cr#L486"},"def":{"name":"logical_and","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"self | Number"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self | Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if lhs.is_a?(self)\n  if rhs.is_a?(self)\n    Ops._broadcast_logical_and(lhs, rhs)\n  else\n    Internal._logical_and_scalar(lhs, scalar: rhs)\n  end\nelse\n  if rhs.is_a?(self)\n    Internal._logical_and_scalar(rhs, scalar: lhs)\n  else\n    raise(\"should never happen\")\n  end\nend"}},{"id":"logical_not(data,**kwargs)-class-method","html_id":"logical_not(data,**kwargs)-class-method","name":"logical_not","doc":"Performs element-wise logical not of the input array.\n\n    logical_not([-2, 0, 1]) = [0, 1, 0]\n\n* *data* (`NDArray`, required)\n  Input data.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Performs element-wise logical not of the input array.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"logical_not","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._logical_not(data, **kwargs)"}},{"id":"logical_or(lhs:self|Number,rhs:self|Number)-class-method","html_id":"logical_or(lhs:self|Number,rhs:self|Number)-class-method","name":"logical_or","doc":"Returns the result of element-wise logical or (`|`) comparison\noperation.\n\nFor each element in input arrays, return 1 (true) if *lhs*\nelement or *rhs* element is true (not zero), otherwise return 0\n(false).\n\nIf the corresponding dimensions of two arrays have the same size\nor one of them has size 1, then the arrays are broadcastable to\na common shape.\n\nEquivalent to `lhs | rhs`. Equivalent to\n`.broadcast_logical_or` for `NDArray` arguments.\n\n### Parameters\n* *lhs* (`NDArray` or `Number`)\n  The first value to be compared.\n* *rhs* (`NDArray` or `Number`)\n  The second value to be compared.\n","summary":"<p>Returns the result of element-wise logical or (<code><a href=\"../MXNet/NDArray.html#%7C(other)-instance-method\">#|</a></code>) comparison operation.</p>","abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"self | Number"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self | Number"}],"args_string":"(lhs : <span class=\"k\">self</span> | Number, rhs : <span class=\"k\">self</span> | Number)","args_html":"(lhs : <span class=\"k\">self</span> | <a href=\"../Number.html\">Number</a>, rhs : <span class=\"k\">self</span> | <a href=\"../Number.html\">Number</a>)","location":{"filename":"src/mxnet/ndarray.cr","line_number":515,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/ndarray.cr#L515"},"def":{"name":"logical_or","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"self | Number"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self | Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if lhs.is_a?(self)\n  if rhs.is_a?(self)\n    Ops._broadcast_logical_or(lhs, rhs)\n  else\n    Internal._logical_or_scalar(lhs, scalar: rhs)\n  end\nelse\n  if rhs.is_a?(self)\n    Internal._logical_or_scalar(rhs, scalar: lhs)\n  else\n    raise(\"should never happen\")\n  end\nend"}},{"id":"logical_xor(lhs:self|Number,rhs:self|Number)-class-method","html_id":"logical_xor(lhs:self|Number,rhs:self|Number)-class-method","name":"logical_xor","doc":"Returns the result of element-wise logical xor (`^`) comparison\noperation.\n\nFor each element in input arrays, return 1 (true) if either\n*lhs* element or *rhs* element is true (not zero) but not both,\notherwise return 0 (false).\n\nIf the corresponding dimensions of two arrays have the same size\nor one of them has size 1, then the arrays are broadcastable to\na common shape.\n\nEquivalent to `lhs ^ rhs`. Equivalent to\n`.broadcast_logical_xor` for `NDArray` arguments.\n\n### Parameters\n* *lhs* (`NDArray` or `Number`)\n  The first value to be compared.\n* *rhs* (`NDArray` or `Number`)\n  The second value to be compared.\n","summary":"<p>Returns the result of element-wise logical xor (<code><a href=\"../MXNet/NDArray.html#%5E(other)-instance-method\">#^</a></code>) comparison operation.</p>","abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"self | Number"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self | Number"}],"args_string":"(lhs : <span class=\"k\">self</span> | Number, rhs : <span class=\"k\">self</span> | Number)","args_html":"(lhs : <span class=\"k\">self</span> | <a href=\"../Number.html\">Number</a>, rhs : <span class=\"k\">self</span> | <a href=\"../Number.html\">Number</a>)","location":{"filename":"src/mxnet/ndarray.cr","line_number":544,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/ndarray.cr#L544"},"def":{"name":"logical_xor","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"self | Number"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self | Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if lhs.is_a?(self)\n  if rhs.is_a?(self)\n    Ops._broadcast_logical_xor(lhs, rhs)\n  else\n    Internal._logical_xor_scalar(lhs, scalar: rhs)\n  end\nelse\n  if rhs.is_a?(self)\n    Internal._logical_xor_scalar(rhs, scalar: lhs)\n  else\n    raise(\"should never happen\")\n  end\nend"}},{"id":"max(data,**kwargs)-class-method","html_id":"max(data,**kwargs)-class-method","name":"max","doc":"Computes the max of array elements over given axes.\n\n### Parameters\n* *data* (`NDArray`, required)\n  Input data.\n* *axis* (`Int` or `Array(Int)`, optional)\n  The axis or axes along which to perform the reduction.\n  By default it computes over all elements into a scalar array\n  with shape `[1]`. If axis is `Int`, a reduction is performed\n  on a particular axis. If axis is `Array(Int)`, a reduction is\n  performed on all the axes specified in the list. If *exclude*\n  is `true`, reduction will be performed on the axes that are\n  **not** in axis instead. Negative values means indexing from\n  right to left.\n* *keepdims* (`Bool`, optional, default = false)\n  If `true`, the reduced axes are left in the result as\n  a dimension with size one.\n* *exclude* (`Bool`, optional, default = false)\n  Whether to perform reduction on axes that are not in *axis*\n  instead.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Computes the max of array elements over given axes.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"max","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._max(data, **kwargs)"}},{"id":"maximum(lhs:self|Number,rhs:self|Number)-class-method","html_id":"maximum(lhs:self|Number,rhs:self|Number)-class-method","name":"maximum","doc":"Returns element-wise maximum of the input arrays.\n\nIf the corresponding dimensions of two arrays have the same size\nor one of them has size 1, then the arrays are broadcastable to\na common shape.\n\nEquivalent to `.broadcast_maximum` for `NDArray` arguments.\n\n### Parameters\n* *lhs* (`NDArray` or `Number`)\n  The first value to be compared.\n* *rhs* (`NDArray` or `Number`)\n  The second value to be compared.\n","summary":"<p>Returns element-wise maximum of the input arrays.</p>","abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"self | Number"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self | Number"}],"args_string":"(lhs : <span class=\"k\">self</span> | Number, rhs : <span class=\"k\">self</span> | Number)","args_html":"(lhs : <span class=\"k\">self</span> | <a href=\"../Number.html\">Number</a>, rhs : <span class=\"k\">self</span> | <a href=\"../Number.html\">Number</a>)","location":{"filename":"src/mxnet/ndarray.cr","line_number":261,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/ndarray.cr#L261"},"def":{"name":"maximum","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"self | Number"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self | Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if lhs.is_a?(self)\n  if rhs.is_a?(self)\n    Ops._broadcast_maximum(lhs, rhs)\n  else\n    Internal._maximum_scalar(lhs, scalar: rhs)\n  end\nelse\n  if rhs.is_a?(self)\n    Internal._maximum_scalar(rhs, scalar: lhs)\n  else\n    raise(\"should never happen\")\n  end\nend"}},{"id":"mean(data,**kwargs)-class-method","html_id":"mean(data,**kwargs)-class-method","name":"mean","doc":"Computes the mean of array elements over given axes.\n\n### Parameters\n* *data* (`NDArray`, required)\n  Input data.\n* *axis* (`Int` or `Array(Int)`, optional)\n  The axis or axes along which to perform the reduction.\n  By default it computes over all elements into a scalar array\n  with shape `[1]`. If axis is `Int`, a reduction is performed\n  on a particular axis. If axis is `Array(Int)`, a reduction is\n  performed on all the axes specified in the list. If *exclude*\n  is `true`, reduction will be performed on the axes that are\n  **not** in axis instead. Negative values means indexing from\n  right to left.\n* *keepdims* (`Bool`, optional, default = false)\n  If `true`, the reduced axes are left in the result as\n  a dimension with size one.\n* *exclude* (`Bool`, optional, default = false)\n  Whether to perform reduction on axes that are not in *axis*\n  instead.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Computes the mean of array elements over given axes.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"mean","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._mean(data, **kwargs)"}},{"id":"min(data,**kwargs)-class-method","html_id":"min(data,**kwargs)-class-method","name":"min","doc":"Computes the min of array elements over given axes.\n\n### Parameters\n* *data* (`NDArray`, required)\n  Input data.\n* *axis* (`Int` or `Array(Int)`, optional)\n  The axis or axes along which to perform the reduction.\n  By default it computes over all elements into a scalar array\n  with shape `[1]`. If axis is `Int`, a reduction is performed\n  on a particular axis. If axis is `Array(Int)`, a reduction is\n  performed on all the axes specified in the list. If *exclude*\n  is `true`, reduction will be performed on the axes that are\n  **not** in axis instead. Negative values means indexing from\n  right to left.\n* *keepdims* (`Bool`, optional, default = false)\n  If `true`, the reduced axes are left in the result as\n  a dimension with size one.\n* *exclude* (`Bool`, optional, default = false)\n  Whether to perform reduction on axes that are not in *axis*\n  instead.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Computes the min of array elements over given axes.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"min","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._min(data, **kwargs)"}},{"id":"minimum(lhs:self|Number,rhs:self|Number)-class-method","html_id":"minimum(lhs:self|Number,rhs:self|Number)-class-method","name":"minimum","doc":"Returns element-wise minimum of the input arrays.\n\nIf the corresponding dimensions of two arrays have the same size\nor one of them has size 1, then the arrays are broadcastable to\na common shape.\n\nEquivalent to `.broadcast_minimum` for `NDArray` arguments.\n\n### Parameters\n* *lhs* (`NDArray` or `Number`)\n  The first value to be compared.\n* *rhs* (`NDArray` or `Number`)\n  The second value to be compared.\n","summary":"<p>Returns element-wise minimum of the input arrays.</p>","abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"self | Number"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self | Number"}],"args_string":"(lhs : <span class=\"k\">self</span> | Number, rhs : <span class=\"k\">self</span> | Number)","args_html":"(lhs : <span class=\"k\">self</span> | <a href=\"../Number.html\">Number</a>, rhs : <span class=\"k\">self</span> | <a href=\"../Number.html\">Number</a>)","location":{"filename":"src/mxnet/ndarray.cr","line_number":284,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/ndarray.cr#L284"},"def":{"name":"minimum","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"self | Number"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self | Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if lhs.is_a?(self)\n  if rhs.is_a?(self)\n    Ops._broadcast_minimum(lhs, rhs)\n  else\n    Internal._minimum_scalar(lhs, scalar: rhs)\n  end\nelse\n  if rhs.is_a?(self)\n    Internal._minimum_scalar(rhs, scalar: lhs)\n  else\n    raise(\"should never happen\")\n  end\nend"}},{"id":"modulo(lhs:self|Number,rhs:self|Number)-class-method","html_id":"modulo(lhs:self|Number,rhs:self|Number)-class-method","name":"modulo","doc":"Returns element-wise modulo of the input arrays.\n\nIf the corresponding dimensions of two arrays have the same size\nor one of them has size 1, then the arrays are broadcastable to\na common shape.\n\nEquivalent to `lhs % rhs`. Equivalent to `.broadcast_mod` for\n`NDArray` arguments.\n\n### Parameters\n* *lhs* (`NDArray` or `Number`)\n  The first value to modulo.\n* *rhs* (`NDArray` or `Number`)\n  The second value to modulo.\n","summary":"<p>Returns element-wise modulo of the input arrays.</p>","abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"self | Number"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self | Number"}],"args_string":"(lhs : <span class=\"k\">self</span> | Number, rhs : <span class=\"k\">self</span> | Number)","args_html":"(lhs : <span class=\"k\">self</span> | <a href=\"../Number.html\">Number</a>, rhs : <span class=\"k\">self</span> | <a href=\"../Number.html\">Number</a>)","location":{"filename":"src/mxnet/ndarray.cr","line_number":213,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/ndarray.cr#L213"},"def":{"name":"modulo","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"self | Number"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self | Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if lhs.is_a?(self)\n  if rhs.is_a?(self)\n    Ops._broadcast_mod(lhs, rhs)\n  else\n    Internal._mod_scalar(lhs, scalar: rhs)\n  end\nelse\n  if rhs.is_a?(self)\n    Internal._rmod_scalar(rhs, scalar: lhs)\n  else\n    raise(\"should never happen\")\n  end\nend"}},{"id":"multiply(lhs:self|Number,rhs:self|Number)-class-method","html_id":"multiply(lhs:self|Number,rhs:self|Number)-class-method","name":"multiply","doc":"Returns element-wise product of the input arrays.\n\nIf the corresponding dimensions of two arrays have the same size\nor one of them has size 1, then the arrays are broadcastable to\na common shape.\n\nEquivalent to `lhs * rhs`. Equivalent to `.broadcast_mul` for\n`NDArray` arguments.\n\n### Parameters\n* *lhs* (`NDArray` or `Number`)\n  The first value to be multiplied.\n* *rhs* (`NDArray` or `Number`)\n  The second value to be multiplied.\n","summary":"<p>Returns element-wise product of the input arrays.</p>","abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"self | Number"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self | Number"}],"args_string":"(lhs : <span class=\"k\">self</span> | Number, rhs : <span class=\"k\">self</span> | Number)","args_html":"(lhs : <span class=\"k\">self</span> | <a href=\"../Number.html\">Number</a>, rhs : <span class=\"k\">self</span> | <a href=\"../Number.html\">Number</a>)","location":{"filename":"src/mxnet/ndarray.cr","line_number":165,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/ndarray.cr#L165"},"def":{"name":"multiply","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"self | Number"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self | Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if lhs.is_a?(self)\n  if rhs.is_a?(self)\n    Ops._broadcast_mul(lhs, rhs)\n  else\n    Internal._mul_scalar(lhs, scalar: rhs)\n  end\nelse\n  if rhs.is_a?(self)\n    Internal._mul_scalar(rhs, scalar: lhs)\n  else\n    raise(\"should never happen\")\n  end\nend"}},{"id":"nanprod(data,**kwargs)-class-method","html_id":"nanprod(data,**kwargs)-class-method","name":"nanprod","doc":"Computes the product of array elements over given axes\ntreating not-a-number values (*NaN*) as one.\n\nSee `.prod`.\n\n### Parameters\n* *data* (`NDArray`, required)\n  Input data.\n* *axis* (`Int` or `Array(Int)`, optional)\n  The axis or axes along which to perform the\n  reduction. `axis: []` or `axis: nil` will compute over all\n  elements into a scalar array with shape `[1]`. If *axis* is\n  an `Int`, a reduction is performed on a particular axis. If\n  *axis* is an array of `Int`, a reduction is performed on all\n  the axes specified in the array. If *exclude* is true,\n  reduction will be performed on the axes that are **not** in\n  *axis* instead. Negative values means indexing from right to\n  left.\n* *keepdims* (`Bool`, optional, default = false)\n  If this is set to true, the reduced axes are left in the\n  result as dimension with size one.\n* *exclude* (`Bool`, optional, default = false)\n  Whether to perform reduction on axis that are **not** in\n  axis instead.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Computes the product of array elements over given axes treating not-a-number values (<em>NaN</em>) as one.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"nanprod","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._nanprod(data, **kwargs)"}},{"id":"nansum(data,**kwargs)-class-method","html_id":"nansum(data,**kwargs)-class-method","name":"nansum","doc":"Computes the sum of array elements over given axes treating\nnot-a-number values (*NaN*) as zero.\n\nSee `.sum`.\n\n### Parameters\n* *data* (`NDArray`, required)\n  Input data.\n* *axis* (`Int` or `Array(Int)`, optional)\n  The axis or axes along which to perform the\n  reduction. `axis: []` or `axis: nil` will compute over all\n  elements into a scalar array with shape `[1]`. If *axis* is\n  an `Int`, a reduction is performed on a particular axis. If\n  *axis* is an array of `Int`, a reduction is performed on all\n  the axes specified in the array. If *exclude* is true,\n  reduction will be performed on the axes that are **not** in\n  *axis* instead. Negative values means indexing from right to\n  left.\n* *keepdims* (`Bool`, optional, default = false)\n  If this is set to true, the reduced axes are left in the\n  result as dimension with size one.\n* *exclude* (`Bool`, optional, default = false)\n  Whether to perform reduction on axis that are **not** in\n  axis instead.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Computes the sum of array elements over given axes treating not-a-number values (<em>NaN</em>) as zero.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"nansum","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._nansum(data, **kwargs)"}},{"id":"norm(data,**kwargs)-class-method","html_id":"norm(data,**kwargs)-class-method","name":"norm","doc":"Computes the norm.\n\nThis operator computes the norm on an array with the specified\naxis, depending on the value of the `ord` parameter. By default,\nit computes the L2 norm on the entire array. Currently only\n`ord: 2` supports sparse arrays.\n\nAssume *x* is an array with the following elements:\n    [[[1.0, 2.0], [3.0, 4.0]], [[2.0, 2.0], [5.0, 6.0]]]\n\nThen:\n    norm(x, ord: 2, axis: 1) # => [[3.1622, 4.4721], [5.3851, 6.3245]]\n    norm(x, ord: 1, axis: 1) # => [[40., 6.0], [7.0, 8.0]]\n\n### Parameters\n* *data* (`NDArray`, required)\n  Input data.\n* *ord* (`Int`, optional, default = `2`)\n  Order of the norm. Currently `ord: 1` and `ord: 2` are\n  supported.\n* *axis* (`Int` or `Array(Int)`, optional)\n  The axis or axes along which to perform the reduction.\n  By default it computes over all elements into a scalar array\n  with shape `[1]`. If axis is `Int`, a reduction is performed\n  on a particular axis. If axis is `Array(Int)`, it specifies\n  the axes that hold 2-D matrices, and the matrix norms of\n  these matrices are computed.\n* *out_dtype* (`::Symbol`, `:float16`, `:float32`, `:float64`, `:int32`, `:int64` or `:int8`, optional)\n  The data type of the output.\n* *keepdims* (`Bool`, optional, default = false)\n  If `true`, the reduced axes are left in the result as\n  a dimension with size one.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Computes the norm.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"norm","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._norm(data, **kwargs)"}},{"id":"not_equal(lhs:self|Number,rhs:self|Number)-class-method","html_id":"not_equal(lhs:self|Number,rhs:self|Number)-class-method","name":"not_equal","doc":"Returns the result of element-wise not equal to (`!=`)\ncomparison operation.\n\nFor each element in input arrays, return 1 (true) if\ncorresponding elements are different, otherwise return 0\n(false).\n\nIf the corresponding dimensions of two arrays have the same size\nor one of them has size 1, then the arrays are broadcastable to\na common shape.\n\nEquivalent to `lhs != rhs`. Equivalent to `.broadcast_not_equal`\nfor `NDArray` arguments.\n\n### Parameters\n* *lhs* (`NDArray` or `Number`)\n  The first value to be compared.\n* *rhs* (`NDArray` or `Number`)\n  The second value to be compared.\n","summary":"<p>Returns the result of element-wise not equal to (<code><a href=\"../MXNet/NDArray.html#!=(other)-instance-method\">#!=</a></code>) comparison operation.</p>","abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"self | Number"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self | Number"}],"args_string":"(lhs : <span class=\"k\">self</span> | Number, rhs : <span class=\"k\">self</span> | Number)","args_html":"(lhs : <span class=\"k\">self</span> | <a href=\"../Number.html\">Number</a>, rhs : <span class=\"k\">self</span> | <a href=\"../Number.html\">Number</a>)","location":{"filename":"src/mxnet/ndarray.cr","line_number":341,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/ndarray.cr#L341"},"def":{"name":"not_equal","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"self | Number"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self | Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if lhs.is_a?(self)\n  if rhs.is_a?(self)\n    Ops._broadcast_not_equal(lhs, rhs)\n  else\n    Internal._not_equal_scalar(lhs, scalar: rhs)\n  end\nelse\n  if rhs.is_a?(self)\n    Internal._not_equal_scalar(rhs, scalar: lhs)\n  else\n    raise(\"should never happen\")\n  end\nend"}},{"id":"one_hot(indices,depth,**kwargs)-class-method","html_id":"one_hot(indices,depth,**kwargs)-class-method","name":"one_hot","doc":"Returns a one-hot array.\n\nThe locations represented by *indices* take value *on_value*,\nwhile all other locations take value *off_value*.\n\n`.one_hot` with *indices* of shape `[i0, i1]` and depth of `d`\nwould result in an output array of shape `[i0, i1, d]` with:\n    output[i, j, 0..-1] = off_value\n    output[i, j, indices[i, j]] = on_value\n\nAssume *x* is an array with the following elements:\n    [1, 0, 2, 0]\n\nThen:\n    one_hot(x, 3) # => [[0, 1, 0], [1, 0, 0], [0, 0, 1], [1, 0, 0]]\n\n### Parameters\n* *indices* (`NDArray`, required)\n  Array of locations where to set *on_value*.\n* *depth* (`Int`, required)\n  Depth of the one hot dimension.\n* *on_value* (`Float`, optional, default = 1.0)\n  The value assigned to the locations represented by indices.\n* *off_value* (`Float`, optional, default = 0.0)\n  The value assigned to the locations not represented by indices.\n* *dtype* (`::Symbol`, optional, default = `:float32`)\n  Type of the output.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Returns a one-hot array.</p>","abstract":false,"args":[{"name":"indices","doc":null,"default_value":"","external_name":"indices","restriction":""},{"name":"depth","doc":null,"default_value":"","external_name":"depth","restriction":""}],"args_string":"(indices, depth, **kwargs)","args_html":"(indices, depth, **kwargs)","location":null,"def":{"name":"one_hot","args":[{"name":"indices","doc":null,"default_value":"","external_name":"indices","restriction":""},{"name":"depth","doc":null,"default_value":"","external_name":"depth","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._one_hot(indices, depth, **kwargs)"}},{"id":"ones(shape:Int|Array(Int),ctx=Context.current,**kwargs)-class-method","html_id":"ones(shape:Int|Array(Int),ctx=Context.current,**kwargs)-class-method","name":"ones","doc":"Returns an array filled with all ones, with the given shape.\n\n### Parameters\n* *data* (`NDArray`, required)\n  Input data.\n* *shape* (`Int` or `Array(Int)`)\n  The shape of the array.\n* *dtype* (`::Symbol`, default = `:float32`)\n  The data type of the output array.\n* *ctx* (`Context`, optional)\n  Device context (default is the current context). Only used\n  for imperative calls.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Returns an array filled with all ones, with the given shape.</p>","abstract":false,"args":[{"name":"shape","doc":null,"default_value":"","external_name":"shape","restriction":"Int | Array(Int)"},{"name":"ctx","doc":null,"default_value":"Context.current","external_name":"ctx","restriction":""}],"args_string":"(shape : Int | Array(Int), ctx = <span class=\"t\">Context</span>.current, **kwargs)","args_html":"(shape : Int | Array(Int), ctx = <span class=\"t\">Context</span>.current, **kwargs)","location":null,"def":{"name":"ones","args":[{"name":"shape","doc":null,"default_value":"","external_name":"shape","restriction":"Int | Array(Int)"},{"name":"ctx","doc":null,"default_value":"Context.current","external_name":"ctx","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Internal._ones(**kwargs.merge({shape: shape, ctx: ctx}))"}},{"id":"ones_like(data,**kwargs)-class-method","html_id":"ones_like(data,**kwargs)-class-method","name":"ones_like","doc":"Returns an array of ones with the same shape, data type and\nstorage type as the input array.\n\nAssume *x* is an array with the following elements:\n    [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]\n\nThen:\n    ones_like(x) # => [[1.0, 1.0, 1.0], [1.0, 1.0, 1.0]]\n\n### Parameters\n* *data* (`NDArray`, required)\n  Input data.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Returns an array of ones with the same shape, data type and storage type as the input array.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"ones_like","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._ones_like(data, **kwargs)"}},{"id":"pick(data,index,**kwargs)-class-method","html_id":"pick(data,index,**kwargs)-class-method","name":"pick","doc":"Picks elements from an input array according to the indices\nalong the given axis.\n\nGiven an input array of shape `[d0, d1]` and indices of shape\n`[i0]`, the result will be an output array of shape `[i0]`\nwith:\n    output[i] = input[i, indices[i]]\n\nBy default, if any index mentioned is too large, it is\nreplaced by the index that addresses the last element along an\naxis (clip mode).\n\nThis function supports n-dimensional input and\n(n-1)-dimensional indices arrays.\n\nAssume *x*, *i*, *j*, and *k* are arrays with the following\nelements:\n    [[1, 2], [3, 4], [5, 6]] # x\n    [0, 1]                   # i\n    [0, 1, 0]                # j\n    [1, 0, 2]                # k\n\nThen:\n    # pick elements with specified indices along axis 0\n    pick(x, index: i, 0) # => [1, 4]\n    # pick elements with specified indices along axis 1\n    pick(x, index: j, 1) # => [1, 4, 5]\n    # pick elements with specified indices along axis 1 --\n    # dims are maintained\n    pick(x, index: k, 1, keepdims: true) # => [[2], [3], [6]]\n\n### Parameters\n* *data* (`NDArray`, required)\n  The input array.\n* *index* (`NDArray`, required)\n  The index array.\n* *axis* (`Int` or `nil`, optional, default = -1)\n  The axis to pick the elements. Negative values mean\n  indexing from right to left. If `nil`, elements in the index\n  with respect to the flattened input will be picked.\n* *keepdims* (`Bool`, optional, default = false)\n  If true, the axis where we pick the elements is left in the\n  result as a dimension with size one.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Picks elements from an input array according to the indices along the given axis.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""},{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":""}],"args_string":"(data, index, **kwargs)","args_html":"(data, index, **kwargs)","location":null,"def":{"name":"pick","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""},{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._pick(data, index, **kwargs)"}},{"id":"pooling(data:self,**kwargs)-class-method","html_id":"pooling(data:self,**kwargs)-class-method","name":"pooling","doc":"Performs pooling on the input.\n\nThe shapes for 1-D pooling are:\n  * **data** and **out**:\n  *[batch_size, channel, width]* (\"NCW\" layout) or\n  *[batch_size, width, channel]* (\"NWC\" layout)\n\nThe shapes for 2-D pooling are:\n  * **data** and **out**:\n  *[batch_size, channel, height, width]* (\"NCHW\" layout) or\n  *[batch_size, height, width, channel]* (\"NHWC\" layout)\n\nThree pooling options are supported by *pool_type*:\n  * **avg**: average pooling\n  * **max**: max pooling\n  * **sum**: sum pooling\n  * **lp**: Lp pooling\n\nFor 3-D pooling, an additional *depth* dimension is added\nbefore *height*. Namely the input data and output will have\nshape:\n  *[batch_size, channel, depth, height, width]* (\"NCDHW\" layout) or\n  *[batch_size, depth, height, width, channel]* (\"NDHWC\" layout).\n\nNotes on Lp pooling:\n\nLp pooling was first introduced by this paper:\nhttps://arxiv.org/pdf/1204.3968.pdf. L-1 pooling is simply\nsum pooling, while L-inf pooling is simply max pooling. We can\nsee that Lp pooling stands between those two, in practice the\nmost common value for *p* is 2.\n\n### Parameters\n* *data* (`NDArray`, required)\n  Input data.\n* *kernel* (`Array(Int)`, shape, optional, default = [])\n  Pooling kernel size: *[y, x]* or *[d, y, x]*.\n* *pool_type* (`::Symbol`, `:avg`, `:lp`, `:max` or `:sum`, optional, default = `:max`)\n  Pooling type to be applied.\n* *global_pool* (`Bool`, optional, default = false)\n  Ignore kernel size; do global pooling based on current input\n  feature map.\n* *cudnn_off* (`Bool`, optional, default = false)\n  Turn off cudnn pooling and use MXNet pooling operator.\n* *pooling_convention* (`::Symbol`, `:full`, `:same`, or `:valid`, optional, default = `:valid`)\n  Pooling convention to be applied.\n* *stride* (`Array(Int)`, shape, optional, default = [])\n  Stride for pooling: *[y, x]* or *[d, y, x]*. Defaults to 1\n  for each dimension.\n* *pad* (`Array(Int)`, shape, optional, default = [])\n  Pad for pooling: *[y, x]* or *[d, y, x]*. Defaults to no\n  padding.\n* *p_value* (`Int`, optional)\n  Value of *p* for Lp pooling, can be 1 or 2, required for Lp\n  pooling.\n* *count_include_pad* (`Bool`, optional)\n  Only used for average pooling. Specify whether to count\n  padding elements for average calculation. For example, with\n  a 5*5 kernel on a 3*3 corner of a image, the sum of the 9\n  valid elements will be divided by 25 if this is set to\n  true, or it will be divided by 9 if this is set to\n  false. Defaults to true.\n* *layout* (`String`, `\"NCDHW\"`, `\"NCHW\"`, `\"NCW\"`, `\"NDHWC\"`, `\"NHWC\"`, `\"NWC\"` or `nil`, optional)\n  Set layout for input, output and weight. Empty for default\n  layout: \"NCW\" for 1D, \"NCHW\" for 2D and \"NCDHW\" for\n  3D. \"NHWC\" and \"NDHWC\" are only supported on GPU.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Performs pooling on the input.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"self"}],"args_string":"(data : <span class=\"k\">self</span>, **kwargs)","args_html":"(data : <span class=\"k\">self</span>, **kwargs)","location":null,"def":{"name":"pooling","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"self"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._Pooling(data, **kwargs)"}},{"id":"power(base:self|Number,exp:self|Number)-class-method","html_id":"power(base:self|Number,exp:self|Number)-class-method","name":"power","doc":"Returns result of first array elements raised to powers from\nsecond array, element-wise.\n\nIf the corresponding dimensions of two arrays have the same size\nor one of them has size 1, then the arrays are broadcastable to\na common shape.\n\nEquivalent to `base ** exp`. Equivalent to `.broadcast_power`\nfor `NDArray` arguments.\n\n### Parameters\n* *base* (`NDArray` or `Number`)\n  The base value.\n* *exp* (`NDArray` or `Number`)\n  The exponent value.\n","summary":"<p>Returns result of first array elements raised to powers from second array, element-wise.</p>","abstract":false,"args":[{"name":"base","doc":null,"default_value":"","external_name":"base","restriction":"self | Number"},{"name":"exp","doc":null,"default_value":"","external_name":"exp","restriction":"self | Number"}],"args_string":"(base : <span class=\"k\">self</span> | Number, exp : <span class=\"k\">self</span> | Number)","args_html":"(base : <span class=\"k\">self</span> | <a href=\"../Number.html\">Number</a>, exp : <span class=\"k\">self</span> | <a href=\"../Number.html\">Number</a>)","location":{"filename":"src/mxnet/ndarray.cr","line_number":238,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/ndarray.cr#L238"},"def":{"name":"power","args":[{"name":"base","doc":null,"default_value":"","external_name":"base","restriction":"self | Number"},{"name":"exp","doc":null,"default_value":"","external_name":"exp","restriction":"self | Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if base.is_a?(self)\n  if exp.is_a?(self)\n    Ops._broadcast_power(base, exp)\n  else\n    Internal._power_scalar(base, scalar: exp)\n  end\nelse\n  if exp.is_a?(self)\n    Internal._rpower_scalar(exp, scalar: base)\n  else\n    raise(\"should never happen\")\n  end\nend"}},{"id":"prod(data,**kwargs)-class-method","html_id":"prod(data,**kwargs)-class-method","name":"prod","doc":"Computes the product of array elements over given axes.\n\nAssume *x* is an array with the following elements:\n    [[[1, 2], [2, 3], [1, 3]],\n     [[1, 4], [4, 3], [5, 2]],\n     [[7, 1], [7, 2], [7, 3]]]\n\nThen:\n    prod(x, axis: 1) # => [[2, 18], [20, 24], [343, 6]]\n    prod(x, axis: [1, 2]) # => [36, 480, 2058]\n\n### Parameters\n* *data* (`NDArray`, required)\n  Input data.\n* *axis* (`Int` or `Array(Int)`, optional)\n  The axis or axes along which to perform the\n  reduction. `axis: []` or `axis: nil` will compute over all\n  elements into a scalar array with shape `[1]`. If *axis* is\n  an `Int`, a reduction is performed on a particular axis. If\n  *axis* is an array of `Int`, a reduction is performed on all\n  the axes specified in the array. If *exclude* is true,\n  reduction will be performed on the axes that are **not** in\n  *axis* instead. Negative values means indexing from right to\n  left.\n* *keepdims* (`Bool`, optional, default = false)\n  If this is set to true, the reduced axes are left in the\n  result as dimension with size one.\n* *exclude* (`Bool`, optional, default = false)\n  Whether to perform reduction on axis that are **not** in\n  axis instead.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Computes the product of array elements over given axes.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"prod","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._prod(data, **kwargs)"}},{"id":"radians(data,**kwargs)-class-method","html_id":"radians(data,**kwargs)-class-method","name":"radians","doc":"Converts each element of the input array from degrees to\nradians.\n\n    radians([0, 90, 180, 270, 360]) = [0, 𝜋/2, 𝜋, 3𝜋/2, 2𝜋]\n\n### Parameters\n* *data* (`NDArray`, required)\n  Input data.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Converts each element of the input array from degrees to radians.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"radians","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._radians(data, **kwargs)"}},{"id":"random_exponential(lam:Number=1.0,ctx:Context=Context.current,**kwargs)-class-method","html_id":"random_exponential(lam:Number=1.0,ctx:Context=Context.current,**kwargs)-class-method","name":"random_exponential","doc":"Draws random samples from an exponential distribution.\n\nSamples are distributed according to an exponential distribution\nparametrized by `lam` (rate).\n\n    random_exponential(4.0, shape: [2, 2]) # => [[0.0097189 , 0.08999364], [0.04146638, 0.31715935]]\n\n### Parameters\n* *lam* (`Float`, default = 1.0)\n  Lambda parameter (rate) of the exponential distribution.\n* *shape* (`Int` or `Array(Int)`)\n  The shape of the output.\n* *dtype* (`::Symbol`, default = `:float32`)\n  The data type of the output in case this can’t be inferred.\n* *ctx* (`Context`, optional)\n  Device context (default is the current context). Only used\n  for imperative calls.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Draws random samples from an exponential distribution.</p>","abstract":false,"args":[{"name":"lam","doc":null,"default_value":"1.0","external_name":"lam","restriction":"Number"},{"name":"ctx","doc":null,"default_value":"Context.current","external_name":"ctx","restriction":"Context"}],"args_string":"(lam : Number = <span class=\"n\">1.0</span>, ctx : Context = <span class=\"t\">Context</span>.current, **kwargs)","args_html":"(lam : <a href=\"../Number.html\">Number</a> = <span class=\"n\">1.0</span>, ctx : <a href=\"../MXNet/Context.html\">Context</a> = <span class=\"t\">Context</span>.current, **kwargs)","location":null,"def":{"name":"random_exponential","args":[{"name":"lam","doc":null,"default_value":"1.0","external_name":"lam","restriction":"Number"},{"name":"ctx","doc":null,"default_value":"Context.current","external_name":"ctx","restriction":"Context"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Internal._random_exponential(**kwargs.merge({lam: lam, ctx: ctx}))"}},{"id":"random_gamma(alpha:Number=1.0,beta:Number=1.0,ctx:Context=Context.current,**kwargs)-class-method","html_id":"random_gamma(alpha:Number=1.0,beta:Number=1.0,ctx:Context=Context.current,**kwargs)-class-method","name":"random_gamma","doc":"Draws random samples from a gamma distribution.\n\nSamples are distributed according to a gamma distribution\nparametrized by `alpha` (shape) and `beta` (scale).\n\n    random_gamma(9.0, 0.5, shape: [2, 2]) # => [[6.2806954, 6.1658335], [4.5625057, 6.479337]]\n\n### Parameters\n* *alpha* (`Float`, default = 1.0)\n  Alpha parameter (shape) of the gamma distribution.\n* *beta* (`Float`, default = 1.0)\n  Beta parameter (scale) of the gamma distribution.\n* *shape* (`Int` or `Array(Int)`)\n  The shape of the output.\n* *dtype* (`::Symbol`, default = `:float32`)\n  The data type of the output in case this can’t be inferred.\n* *ctx* (`Context`, optional)\n  Device context (default is the current context). Only used\n  for imperative calls.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Draws random samples from a gamma distribution.</p>","abstract":false,"args":[{"name":"alpha","doc":null,"default_value":"1.0","external_name":"alpha","restriction":"Number"},{"name":"beta","doc":null,"default_value":"1.0","external_name":"beta","restriction":"Number"},{"name":"ctx","doc":null,"default_value":"Context.current","external_name":"ctx","restriction":"Context"}],"args_string":"(alpha : Number = <span class=\"n\">1.0</span>, beta : Number = <span class=\"n\">1.0</span>, ctx : Context = <span class=\"t\">Context</span>.current, **kwargs)","args_html":"(alpha : <a href=\"../Number.html\">Number</a> = <span class=\"n\">1.0</span>, beta : <a href=\"../Number.html\">Number</a> = <span class=\"n\">1.0</span>, ctx : <a href=\"../MXNet/Context.html\">Context</a> = <span class=\"t\">Context</span>.current, **kwargs)","location":null,"def":{"name":"random_gamma","args":[{"name":"alpha","doc":null,"default_value":"1.0","external_name":"alpha","restriction":"Number"},{"name":"beta","doc":null,"default_value":"1.0","external_name":"beta","restriction":"Number"},{"name":"ctx","doc":null,"default_value":"Context.current","external_name":"ctx","restriction":"Context"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Internal._random_gamma(**kwargs.merge({alpha: alpha, beta: beta, ctx: ctx}))"}},{"id":"random_normal(loc:Number=0.0,scale:Number=1.0,ctx:Context=Context.current,**kwargs)-class-method","html_id":"random_normal(loc:Number=0.0,scale:Number=1.0,ctx:Context=Context.current,**kwargs)-class-method","name":"random_normal","doc":"Draws random samples from a normal (Gaussian) distribution.\n\nSamples are distributed according to a normal distribution\nparametrized by `loc` (mean) and `scale` (standard deviation).\n\n    random_normal(0.0, 1.0, shape: [2, 2]) # => [[1.89171135, -1.16881478], [-1.23474145, 1.55807114]]\n\n### Parameters\n* *loc* (`Float`, default = 0.0)\n  Mean of the distribution.\n* *scale* (`Float`, default = 1.0)\n  Standard deviation of the distribution.\n* *shape* (`Int` or `Array(Int)`)\n  The shape of the output.\n* *dtype* (`::Symbol`, default = `:float32`)\n  The data type of the output in case this can’t be inferred.\n* *ctx* (`Context`, optional)\n  Device context (default is the current context). Only used\n  for imperative calls.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Draws random samples from a normal (Gaussian) distribution.</p>","abstract":false,"args":[{"name":"loc","doc":null,"default_value":"0.0","external_name":"loc","restriction":"Number"},{"name":"scale","doc":null,"default_value":"1.0","external_name":"scale","restriction":"Number"},{"name":"ctx","doc":null,"default_value":"Context.current","external_name":"ctx","restriction":"Context"}],"args_string":"(loc : Number = <span class=\"n\">0.0</span>, scale : Number = <span class=\"n\">1.0</span>, ctx : Context = <span class=\"t\">Context</span>.current, **kwargs)","args_html":"(loc : <a href=\"../Number.html\">Number</a> = <span class=\"n\">0.0</span>, scale : <a href=\"../Number.html\">Number</a> = <span class=\"n\">1.0</span>, ctx : <a href=\"../MXNet/Context.html\">Context</a> = <span class=\"t\">Context</span>.current, **kwargs)","location":null,"def":{"name":"random_normal","args":[{"name":"loc","doc":null,"default_value":"0.0","external_name":"loc","restriction":"Number"},{"name":"scale","doc":null,"default_value":"1.0","external_name":"scale","restriction":"Number"},{"name":"ctx","doc":null,"default_value":"Context.current","external_name":"ctx","restriction":"Context"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Internal._random_normal(**kwargs.merge({loc: loc, scale: scale, ctx: ctx}))"}},{"id":"random_poisson(lam:Number=1.0,ctx:Context=Context.current,**kwargs)-class-method","html_id":"random_poisson(lam:Number=1.0,ctx:Context=Context.current,**kwargs)-class-method","name":"random_poisson","doc":"Draws random samples from a Poisson distribution.\n\nSamples are distributed according to a Poisson distribution\nparametrized by `lam` (rate). Samples will always be returned\nas a floating point data type.\n\n    random_poisson(4.0, shape: [2, 2]) # => [[5.0, 2.0], [4.0, 6.0]]\n\n### Parameters\n* *lam* (`Float`, default = 1.0)\n  Lambda parameter (rate) of the Poisson distribution.\n* *shape* (`Int` or `Array(Int)`)\n  The shape of the output.\n* *dtype* (`::Symbol`, default = `:float32`)\n  The data type of the output in case this can’t be inferred.\n* *ctx* (`Context`, optional)\n  Device context (default is the current context). Only used\n  for imperative calls.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Draws random samples from a Poisson distribution.</p>","abstract":false,"args":[{"name":"lam","doc":null,"default_value":"1.0","external_name":"lam","restriction":"Number"},{"name":"ctx","doc":null,"default_value":"Context.current","external_name":"ctx","restriction":"Context"}],"args_string":"(lam : Number = <span class=\"n\">1.0</span>, ctx : Context = <span class=\"t\">Context</span>.current, **kwargs)","args_html":"(lam : <a href=\"../Number.html\">Number</a> = <span class=\"n\">1.0</span>, ctx : <a href=\"../MXNet/Context.html\">Context</a> = <span class=\"t\">Context</span>.current, **kwargs)","location":null,"def":{"name":"random_poisson","args":[{"name":"lam","doc":null,"default_value":"1.0","external_name":"lam","restriction":"Number"},{"name":"ctx","doc":null,"default_value":"Context.current","external_name":"ctx","restriction":"Context"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Internal._random_poisson(**kwargs.merge({lam: lam, ctx: ctx}))"}},{"id":"random_randint(low:Int,high:Int,ctx:Context=Context.current,**kwargs)-class-method","html_id":"random_randint(low:Int,high:Int,ctx:Context=Context.current,**kwargs)-class-method","name":"random_randint","doc":"Draws random samples from a discrete uniform distribution.\n\nSamples are uniformly distributed over the half-open interval\n`[low, high)` (includes low, but excludes high).\n\n    random_randint(0, 5, shape: [2, 2]) # => [[0, 2], [3, 1]]\n\n### Parameters\n* *low* (`Int`, required)\n  Lower boundary of the output interval.\n* *high* (`Int`, required)\n  Upper boundary of the output interval.\n* *shape* (`Int` or `Array(Int)`)\n  The shape of the output.\n* *dtype* (`::Symbol`, default = `:int32`)\n  The data type of the output.\n* *ctx* (`Context`, optional)\n  Device context (default is the current context). Only used\n  for imperative calls.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Draws random samples from a discrete uniform distribution.</p>","abstract":false,"args":[{"name":"low","doc":null,"default_value":"","external_name":"low","restriction":"Int"},{"name":"high","doc":null,"default_value":"","external_name":"high","restriction":"Int"},{"name":"ctx","doc":null,"default_value":"Context.current","external_name":"ctx","restriction":"Context"}],"args_string":"(low : Int, high : Int, ctx : Context = <span class=\"t\">Context</span>.current, **kwargs)","args_html":"(low : Int, high : Int, ctx : <a href=\"../MXNet/Context.html\">Context</a> = <span class=\"t\">Context</span>.current, **kwargs)","location":null,"def":{"name":"random_randint","args":[{"name":"low","doc":null,"default_value":"","external_name":"low","restriction":"Int"},{"name":"high","doc":null,"default_value":"","external_name":"high","restriction":"Int"},{"name":"ctx","doc":null,"default_value":"Context.current","external_name":"ctx","restriction":"Context"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Internal._random_randint(**kwargs.merge({low: low, high: high, ctx: ctx}))"}},{"id":"random_uniform(low:Number=0.0,high:Number=1.0,ctx:Context=Context.current,**kwargs)-class-method","html_id":"random_uniform(low:Number=0.0,high:Number=1.0,ctx:Context=Context.current,**kwargs)-class-method","name":"random_uniform","doc":"Draws random samples from a uniform distribution.\n\nSamples are uniformly distributed over the half-open interval\n`[low, high)` (includes low, but excludes high).\n\n    random_uniform(0.0, 1.0, shape: [2, 2]) # => [[0.60276335, 0.85794562], [0.54488319, 0.84725171]]\n\n### Parameters\n* *low* (`Float`, default = 0.0)\n  Lower bound of the distribution.\n* *high* (`Float`, default = 1.0)\n  Upper bound of the distribution.\n* *shape* (`Int` or `Array(Int)`)\n  The shape of the output.\n* *dtype* (`::Symbol`, default = `:float32`)\n  The data type of the output in case this can’t be inferred.\n* *ctx* (`Context`, optional)\n  Device context (default is the current context). Only used\n  for imperative calls.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Draws random samples from a uniform distribution.</p>","abstract":false,"args":[{"name":"low","doc":null,"default_value":"0.0","external_name":"low","restriction":"Number"},{"name":"high","doc":null,"default_value":"1.0","external_name":"high","restriction":"Number"},{"name":"ctx","doc":null,"default_value":"Context.current","external_name":"ctx","restriction":"Context"}],"args_string":"(low : Number = <span class=\"n\">0.0</span>, high : Number = <span class=\"n\">1.0</span>, ctx : Context = <span class=\"t\">Context</span>.current, **kwargs)","args_html":"(low : <a href=\"../Number.html\">Number</a> = <span class=\"n\">0.0</span>, high : <a href=\"../Number.html\">Number</a> = <span class=\"n\">1.0</span>, ctx : <a href=\"../MXNet/Context.html\">Context</a> = <span class=\"t\">Context</span>.current, **kwargs)","location":null,"def":{"name":"random_uniform","args":[{"name":"low","doc":null,"default_value":"0.0","external_name":"low","restriction":"Number"},{"name":"high","doc":null,"default_value":"1.0","external_name":"high","restriction":"Number"},{"name":"ctx","doc":null,"default_value":"Context.current","external_name":"ctx","restriction":"Context"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Internal._random_uniform(**kwargs.merge({low: low, high: high, ctx: ctx}))"}},{"id":"rcbrt(data,**kwargs)-class-method","html_id":"rcbrt(data,**kwargs)-class-method","name":"rcbrt","doc":"Returns element-wise inverse cube-root value of the input.\n\n    rcbrt(x) = 1/cbrt(x)\n\nAssume *x* is an array with the following elements:\n    [1, 8, -125]\n\nThen:\n    rcbrt(x) = [1.0, 0.5, -0.2]\n\n### Parameters\n* *data* (`NDArray`, required)\n  Input data.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Returns element-wise inverse cube-root value of the input.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"rcbrt","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._rcbrt(data, **kwargs)"}},{"id":"reciprocal(data,**kwargs)-class-method","html_id":"reciprocal(data,**kwargs)-class-method","name":"reciprocal","doc":"Returns the reciprocal of the argument, element-wise.\n\n    reciprocal(x) = 1/x\n\nAssume *x* is an array with the following elements:\n    [-2, 1, 3, 1.6, 0.2]\n\nThen:\n    reciprocal(x) = [-0.5, 1.0, 0.33333334, 0.625, 5.0]\n\n### Parameters\n* *data* (`NDArray`, required)\n  Input data.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Returns the reciprocal of the argument, element-wise.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"reciprocal","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._reciprocal(data, **kwargs)"}},{"id":"relu(data,**kwargs)-class-method","html_id":"relu(data,**kwargs)-class-method","name":"relu","doc":"Computes the rectified linear activation.\n\n_y=max(input,0)_\n\n### Parameters\n* *data* (`NDArray`, required)\n  Input data.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Computes the rectified linear activation.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"relu","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._relu(data, **kwargs)"}},{"id":"reshape(data,shape,**kwargs)-class-method","html_id":"reshape(data,shape,**kwargs)-class-method","name":"reshape","doc":"Reshapes the input array.\n\nReturns a copy of the array with a new shape without altering\nany data.\n\nAssume *x* is an array with the following elements:\n    [1, 2, 3, 4]\n\nThen:\n    reshape(shape: [2, 2]) # => [[1, 2], [3, 4]]\n\nSome dimensions of the shape can take special values from the\nset *{0, -1, -2, -3, -4}*. The significance of each is explained\nbelow:\n\n* *0* copies this dimension from the input to the output shape:\n    zeros([2, 3, 4]).reshape([4, 0, 2]).shape # => [4, 3, 2]\n    zeros([2, 3, 4]).reshape([2, 0, 0]).shape # => [2, 3, 4]\n* *-1* infers the dimension of the output shape by using the\n  remainder of the input dimensions, keeping the size of the\n  new array the same as that of the input array. At most one\n  dimension can be *-1*:\n    zeros([2, 3, 4]).reshape([6, 1, -1]).shape # => [6, 1, 4]\n    zeros([2, 3, 4]).reshape([3, -1, 8]).shape # => [3, 1, 8]\n    zeros([2, 3, 4]).reshape([-1]).shape # => [24]\n* *-2* copies all/the remainder of the input dimensions to the\n  output shape:\n    zeros([2, 3, 4]).reshape([-2]).shape # => [2, 3, 4]\n    zeros([2, 3, 4]).reshape([2, -2]).shape # => [2, 3, 4]\n    zeros([2, 3, 4]).reshape([-2, 1, 1]).shape # => [2, 3, 4, 1, 1]\n* *-3* uses the product of two consecutive dimensions of the\n  input shape as the output dimension:\n    zeros([2, 3, 4]).reshape([-3, 4]).shape # => [6, 4]\n    zeros([2, 3, 4, 5]).reshape([-3, -3]).shape # => [6, 20]\n    zeros([2, 3, 4]).reshape([0, -3]).shape # => [2, 12]\n    zeros([2, 3, 4]).reshape([-3, -2]).shape # => [6, 4]\n* *-4* splits one dimension of the input into the two dimensions\n  passed subsequent to *-4* (which can contain *-1*):\n    zeros([2, 3, 4]).reshape([-4, 1, 2, -2]).shape # => [1, 2, 3, 4]\n    zeros([2, 3, 4]).reshape([2, -4, -1, 3, -2]).shape # => [2, 1, 3, 4]\n\n### Parameters\n* *data* (`NDArray`, required)\n  Input data.\n* *shape* (`Int` or `Array(Int)`)\n  The target shape.\n* *reverse* (`Bool`, optional, default `false`)\n  If `true` then the special values are inferred from right to left.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Reshapes the input array.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""},{"name":"shape","doc":null,"default_value":"","external_name":"shape","restriction":""}],"args_string":"(data, shape, **kwargs)","args_html":"(data, shape, **kwargs)","location":null,"def":{"name":"reshape","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""},{"name":"shape","doc":null,"default_value":"","external_name":"shape","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._reshape(data, shape, **kwargs)"}},{"id":"reshape_like(lhs,rhs,**kwargs)-class-method","html_id":"reshape_like(lhs,rhs,**kwargs)-class-method","name":"reshape_like","doc":"Reshape some or all dimensions of *lhs* to have the same shape\nas some or all dimensions of *rhs*.\n\nReturns a view of the *lhs* array with a new shape without\naltering any data.\n\nAssume *x* and *y* are arrays with the following elements:\n    [1, 2, 3, 4, 5, 6]        # x\n    [[0, -4], [3, 2], [2, 2]] # y\n\nThen:\n    reshape_like(x, y) # => [[1, 2], [3, 4], [5, 6]]\n\n\n### Parameters\n* *lhs* (`NDArray`, required)\n  The first input.\n* *rhs* (`NDArray`, required)\n  The second input.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Reshape some or all dimensions of <em>lhs</em> to have the same shape as some or all dimensions of <em>rhs</em>.</p>","abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":""},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"args_string":"(lhs, rhs, **kwargs)","args_html":"(lhs, rhs, **kwargs)","location":null,"def":{"name":"reshape_like","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":""},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._reshape_like(lhs, rhs, **kwargs)"}},{"id":"rint(data,**kwargs)-class-method","html_id":"rint(data,**kwargs)-class-method","name":"rint","doc":"Returns element-wise rounded value to the nearest integer.\n\nNote:\n   - For input *N.5* *rint* returns *N* while *round* returns *N+1*.\n   - For input *-N.5* both *rint* and *round* return *-N-1*.\n\nAssume *x* is an array with the following elements:\n    [-2.1, -1.9, 1.5, 1.9, 2.1]\n\nThen:\n    rint(x) = [-2.0, -2.0, 1.0, 2.0, 2.0]\n\n### Parameters\n* *data* (`NDArray`, required)\n  Input data.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Returns element-wise rounded value to the nearest integer.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"rint","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._rint(data, **kwargs)"}},{"id":"round(data,**kwargs)-class-method","html_id":"round(data,**kwargs)-class-method","name":"round","doc":"Returns element-wise rounded value to the nearest integer.\n\nAssume *x* is an array with the following elements:\n    [-2.1, -1.9, 1.5, 1.9, 2.1]\n\nThen:\n    round(x) = [-2.0, -2.0, 2.0, 2.0, 2.0]\n\n### Parameters\n* *data* (`NDArray`, required)\n  Input data.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Returns element-wise rounded value to the nearest integer.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"round","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._round(data, **kwargs)"}},{"id":"rsqrt(data,**kwargs)-class-method","html_id":"rsqrt(data,**kwargs)-class-method","name":"rsqrt","doc":"Returns element-wise inverse square-root value of the input.\n\n    rsqrt(x) = 1/sqrt(x)\n\nAssume *x* is an array with the following elements:\n    [4, 9, 16]\n\nThen:\n    rsqrt(x) = [0.5, 0.33333, 0.25]\n\n### Parameters\n* *data* (`NDArray`, required)\n  Input data.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Returns element-wise inverse square-root value of the input.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"rsqrt","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._rsqrt(data, **kwargs)"}},{"id":"sample_exponential(lam:self,shape=[]ofInt32,**kwargs)-class-method","html_id":"sample_exponential(lam:self,shape=[]ofInt32,**kwargs)-class-method","name":"sample_exponential","doc":"Draws concurrent samples from exponential distributions.\n\nSamples are drawn from multiple exponential distributions with\nparameters `lam` (rate).\n\nThe parameters of the distributions are provided as an input\narray. Let `[s]` be the shape of the input array, `n` be the\ndimension of `[s]`, `[t]` be the shape specified as the\nparameter of the operator, and `m` be the dimension of `[t]`.\nThen the output will be a (`n+m`)-dimensional array with shape\n`[s]x[t]`.\n\nFor any valid `n`-dimensional index `i` with respect to the\ninput array, output[i] will be an `m`-dimensional array that\nholds randomly drawn samples from the distribution which is\nparameterized by the input value at index `i`. If the shape\nparameter of the operator is not set, then one sample will be\ndrawn per distribution and the output array has the same shape\nas the input array.\n\nAssume *lam* is an array with the following elements:\n    [1.0, 8.5]\n\nThen:\n    sample_exponential(lam)             # => [0.51837951, 0.09994757]\n    sample_exponential(lam, shape: [2]) # => [[0.51837951, 0.19866663], [0.09994757, 0.50447971]]\n\n### Parameters\n* *lam* (`NDArray`)\n  Lambda parameters (rates) of the exponential distributions.\n* *shape* (`Int` or `Array(Int)`)\n  Shape to be sampled from each random distribution.\n* *dtype* (`::Symbol`, default = `:float32`)\n  The data type of the output in case this can’t be inferred.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Draws concurrent samples from exponential distributions.</p>","abstract":false,"args":[{"name":"lam","doc":null,"default_value":"","external_name":"lam","restriction":"self"},{"name":"shape","doc":null,"default_value":"[] of Int32","external_name":"shape","restriction":""}],"args_string":"(lam : <span class=\"k\">self</span>, shape = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Int32</span>, **kwargs)","args_html":"(lam : <span class=\"k\">self</span>, shape = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Int32</span>, **kwargs)","location":null,"def":{"name":"sample_exponential","args":[{"name":"lam","doc":null,"default_value":"","external_name":"lam","restriction":"self"},{"name":"shape","doc":null,"default_value":"[] of Int32","external_name":"shape","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Internal._sample_exponential(**kwargs.merge({lam: lam, shape: shape}))"}},{"id":"sample_gamma(alpha:self,beta:self,shape=[]ofInt32,**kwargs)-class-method","html_id":"sample_gamma(alpha:self,beta:self,shape=[]ofInt32,**kwargs)-class-method","name":"sample_gamma","doc":"Draws random samples from gamma distributions.\n\nSamples are drawn from multiple gamma distributions with\nparameters `alpha` (shape) and `beta` (scale).\n\nThe parameters of the distributions are provided as input\narrays. Let `[s]` be the shape of the input arrays, `n` be the\ndimension of `[s]`, `[t]` be the shape specified as the\nparameter of the operator, and `m` be the dimension of `[t]`.\nThen the output will be a (`n+m`)-dimensional array with shape\n`[s]x[t]`.\n\nFor any valid `n`-dimensional index `i` with respect to the\ninput arrays, `output[i]` will be an `m`-dimensional array\nthat holds randomly drawn samples from the distribution which\nis parameterized by the input values at index `i`. If the\nshape parameter of the operator is not set, then one sample\nwill be drawn per distribution and the output array has the\nsame shape as the input arrays.\n\nAssume *alpha* and *beta* are arrays with the following elements:\n    [0.0, 2.5] # alpha\n    [1.0, 0.7] # beta\n\nThen:\n    sample_gamma(alpha, beta)             # => [0.0, 2.25797319]\n    sample_gamma(alpha, beta, shape: [2]) # => [[0.0, 0.0], [2.25797319, 1.70734084]]\n\n### Parameters\n* *alpha* (`NDArray`)\n  Alpha parameters (shapes) of the distributions.\n* *beta* (`NDArray`)\n  Beta parameters (scales) of the distributions.\n* *shape* (`Int` or `Array(Int)`)\n  Shape to be sampled from each random distribution.\n* *dtype* (`::Symbol`, default = `:float32`)\n  The data type of the output in case this can’t be inferred.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Draws random samples from gamma distributions.</p>","abstract":false,"args":[{"name":"alpha","doc":null,"default_value":"","external_name":"alpha","restriction":"self"},{"name":"beta","doc":null,"default_value":"","external_name":"beta","restriction":"self"},{"name":"shape","doc":null,"default_value":"[] of Int32","external_name":"shape","restriction":""}],"args_string":"(alpha : <span class=\"k\">self</span>, beta : <span class=\"k\">self</span>, shape = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Int32</span>, **kwargs)","args_html":"(alpha : <span class=\"k\">self</span>, beta : <span class=\"k\">self</span>, shape = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Int32</span>, **kwargs)","location":null,"def":{"name":"sample_gamma","args":[{"name":"alpha","doc":null,"default_value":"","external_name":"alpha","restriction":"self"},{"name":"beta","doc":null,"default_value":"","external_name":"beta","restriction":"self"},{"name":"shape","doc":null,"default_value":"[] of Int32","external_name":"shape","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Internal._sample_gamma(**kwargs.merge({alpha: alpha, beta: beta, shape: shape}))"}},{"id":"sample_multinomial(data:self,get_prob:Bool=false,**kwargs)-class-method","html_id":"sample_multinomial(data:self,get_prob:Bool=false,**kwargs)-class-method","name":"sample_multinomial","doc":"Draws random samples from multinomial distributions.\n\nSamples are drawn from multiple multinomial distributions.\nNote that the input distribution must be normalized (data must\nsum to 1 along its last axis).\n\n`data` is an `n` dimensional array whose last dimension has\nlength `k`, where `k` is the number of possible outcomes of\neach multinomial distribution. This operator will draw shape\nsamples from each distribution. If `shape` is empty one sample\nwill be drawn from each distribution.\n\nIf `get_prob` is `true`, a second array containing log\nlikelihood of the drawn samples will also be returned. This is\nusually used for reinforcement learning where you can provide\nreward as head gradient for this array to estimate gradient.\n\nGiven:\n    probs = [[0.0, 0.1, 0.2, 0.3, 0.4], [0.4, 0.3, 0.2, 0.1, 0.0]]\n\nThen:\n    sample_multinomial(probs)                 # => [3, 0]\n    sample_multinomial(probs, shape: [2])     # => [[4, 2], [0, 0]]\n    sample_multinomial(probs, get_prob: true) # => [2, 1], [0.2, 0.3]\n\n### Parameters\n* *data* (`NDArray`)\n  Distribution probabilities. Must sum to one on the last axis.\n* *get_prob* (`Bool`, default = false)\n  Whether to also return the log probabilities of sampled\n  results. This is usually used for differentiating through\n  stochastic variables, e.g. in reinforcement learning.\n* *shape* (`Int` or `Array(Int)`)\n  Shape to be sampled from each random distribution.\n* *dtype* (`::Symbol`, default = `:float32`)\n  The data type of the output in case this can’t be inferred.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Draws random samples from multinomial distributions.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"self"},{"name":"get_prob","doc":null,"default_value":"false","external_name":"get_prob","restriction":"Bool"}],"args_string":"(data : <span class=\"k\">self</span>, get_prob : Bool = <span class=\"n\">false</span>, **kwargs)","args_html":"(data : <span class=\"k\">self</span>, get_prob : Bool = <span class=\"n\">false</span>, **kwargs)","location":null,"def":{"name":"sample_multinomial","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"self"},{"name":"get_prob","doc":null,"default_value":"false","external_name":"get_prob","restriction":"Bool"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Internal._sample_multinomial(**kwargs.merge({data: data, get_prob: get_prob}))"}},{"id":"sample_normal(mu:self,sigma:self,shape=[]ofInt32,**kwargs)-class-method","html_id":"sample_normal(mu:self,sigma:self,shape=[]ofInt32,**kwargs)-class-method","name":"sample_normal","doc":"Draws concurrent samples from normal (Gaussian) distributions.\n\nSamples are drawn from multiple normal distributions with\nparameters `mu` (mean) and `sigma` (standard deviation).\n\nThe parameters of the distributions are provided as input\narrays. Let `[s]` be the shape of the input arrays, `n` be the\ndimension of `[s]`, `[t]` be the shape specified as the\nparameter of the operator, and `m` be the dimension of `[t]`.\nThen the output will be a (`n+m`)-dimensional array with shape\n`[s]x[t]`.\n\nFor any valid `n`-dimensional index `i` with respect to the\ninput arrays, `output[i]` will be an `m`-dimensional array\nthat holds randomly drawn samples from the distribution which\nis parameterized by the input values at index `i`. If the\nshape parameter of the operator is not set, then one sample\nwill be drawn per distribution and the output array has the\nsame shape as the input arrays.\n\nAssume *mu* and *sigma* are arrays with the following elements:\n    [0.0, 2.5] # mu\n    [1.0, 3.7] # sigma\n\nThen:\n    sample_normal(mu, sigma)             # => [-0.56410581, 0.95934606]\n    sample_normal(mu, sigma, shape: [2]) # => [[-0.56410581, 0.2928229 ], [0.95934606, 4.48287058]]\n\n### Parameters\n* *mu* (`NDArray`)\n  Means of the distributions.\n* *sigma* (`NDArray`)\n  Standard deviations of the distributions.\n* *shape* (`Int` or `Array(Int)`)\n  Shape to be sampled from each random distribution.\n* *dtype* (`::Symbol`, default = `:float32`)\n  The data type of the output in case this can’t be inferred.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Draws concurrent samples from normal (Gaussian) distributions.</p>","abstract":false,"args":[{"name":"mu","doc":null,"default_value":"","external_name":"mu","restriction":"self"},{"name":"sigma","doc":null,"default_value":"","external_name":"sigma","restriction":"self"},{"name":"shape","doc":null,"default_value":"[] of Int32","external_name":"shape","restriction":""}],"args_string":"(mu : <span class=\"k\">self</span>, sigma : <span class=\"k\">self</span>, shape = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Int32</span>, **kwargs)","args_html":"(mu : <span class=\"k\">self</span>, sigma : <span class=\"k\">self</span>, shape = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Int32</span>, **kwargs)","location":null,"def":{"name":"sample_normal","args":[{"name":"mu","doc":null,"default_value":"","external_name":"mu","restriction":"self"},{"name":"sigma","doc":null,"default_value":"","external_name":"sigma","restriction":"self"},{"name":"shape","doc":null,"default_value":"[] of Int32","external_name":"shape","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Internal._sample_normal(**kwargs.merge({mu: mu, sigma: sigma, shape: shape}))"}},{"id":"sample_poisson(lam:self,shape=[]ofInt32,**kwargs)-class-method","html_id":"sample_poisson(lam:self,shape=[]ofInt32,**kwargs)-class-method","name":"sample_poisson","doc":"Draws concurrent samples from Poisson distributions.\n\nSamples are drawn from multiple Poisson distributions with\nparameters `lam` (rate). Samples will always be returned as\na floating point data type.\n\nThe parameters of the distributions are provided as an input\narray. Let `[s]` be the shape of the input array, `n` be the\ndimension of `[s]`, `[t]` be the shape specified as the\nparameter of the operator, and `m` be the dimension of `[t]`.\nThen the output will be a (`n+m`)-dimensional array with shape\n`[s]x[t]`.\n\nFor any valid `n`-dimensional index `i` with respect to the\ninput array, output[i] will be an `m`-dimensional array that\nholds randomly drawn samples from the distribution which is\nparameterized by the input value at index `i`. If the shape\nparameter of the operator is not set, then one sample will be\ndrawn per distribution and the output array has the same shape\nas the input array.\n\nAssume *lam* is an array with the following elements:\n    [1.0, 8.5]\n\nThen:\n    sample_poisson(lam)             # => [0.0, 13.0]\n    sample_poisson(lam, shape: [2]) # => [[0.0, 4.0], [13.0, 8.0]]\n\n### Parameters\n* *lam* (`NDArray`)\n  Lambda parameters (rates) of the Poisson distributions.\n* *shape* (`Int` or `Array(Int)`)\n  Shape to be sampled from each random distribution.\n* *dtype* (`::Symbol`, default = `:float32`)\n  The data type of the output in case this can’t be inferred.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Draws concurrent samples from Poisson distributions.</p>","abstract":false,"args":[{"name":"lam","doc":null,"default_value":"","external_name":"lam","restriction":"self"},{"name":"shape","doc":null,"default_value":"[] of Int32","external_name":"shape","restriction":""}],"args_string":"(lam : <span class=\"k\">self</span>, shape = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Int32</span>, **kwargs)","args_html":"(lam : <span class=\"k\">self</span>, shape = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Int32</span>, **kwargs)","location":null,"def":{"name":"sample_poisson","args":[{"name":"lam","doc":null,"default_value":"","external_name":"lam","restriction":"self"},{"name":"shape","doc":null,"default_value":"[] of Int32","external_name":"shape","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Internal._sample_poisson(**kwargs.merge({lam: lam, shape: shape}))"}},{"id":"sample_uniform(low:self,high:self,shape=[]ofInt32,**kwargs)-class-method","html_id":"sample_uniform(low:self,high:self,shape=[]ofInt32,**kwargs)-class-method","name":"sample_uniform","doc":"Draws concurrent samples from uniform distributions.\n\nSamples are drawn from multiple uniform distributions on the\nintervals given by `[low, high)`.\n\nThe parameters of the distributions are provided as input\narrays. Let `[s]` be the shape of the input arrays, `n` be the\ndimension of `[s]`, `[t]` be the shape specified as the\nparameter of the operator, and `m` be the dimension of `[t]`.\nThen the output will be a (`n+m`)-dimensional array with shape\n`[s]x[t]`.\n\nFor any valid `n`-dimensional index `i` with respect to the\ninput arrays, `output[i]` will be an `m`-dimensional array\nthat holds randomly drawn samples from the distribution which\nis parameterized by the input values at index `i`. If the\nshape parameter of the operator is not set, then one sample\nwill be drawn per distribution and the output array has the\nsame shape as the input arrays.\n\nAssume *low* and *high* are arrays with the following elements:\n    [0.0, 2.5] # low\n    [1.0, 3.7] # high\n\nThen:\n    sample_uniform(low, high)             # => [0.40451524, 3.18687344]\n    sample_uniform(low, high, shape: [2]) # => [[0.40451524, 0.18017688], [3.18687344, 3.68352246]]\n\n### Parameters\n* *low* (`NDArray`)\n  Lower bounds of the distributions.\n* *high* (`NDArray`)\n  Upper bounds of the distributions.\n* *shape* (`Int` or `Array(Int)`)\n  Shape to be sampled from each random distribution.\n* *dtype* (`::Symbol`, default = `:float32`)\n  The data type of the output in case this can’t be inferred.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Draws concurrent samples from uniform distributions.</p>","abstract":false,"args":[{"name":"low","doc":null,"default_value":"","external_name":"low","restriction":"self"},{"name":"high","doc":null,"default_value":"","external_name":"high","restriction":"self"},{"name":"shape","doc":null,"default_value":"[] of Int32","external_name":"shape","restriction":""}],"args_string":"(low : <span class=\"k\">self</span>, high : <span class=\"k\">self</span>, shape = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Int32</span>, **kwargs)","args_html":"(low : <span class=\"k\">self</span>, high : <span class=\"k\">self</span>, shape = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Int32</span>, **kwargs)","location":null,"def":{"name":"sample_uniform","args":[{"name":"low","doc":null,"default_value":"","external_name":"low","restriction":"self"},{"name":"high","doc":null,"default_value":"","external_name":"high","restriction":"self"},{"name":"shape","doc":null,"default_value":"[] of Int32","external_name":"shape","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Internal._sample_uniform(**kwargs.merge({low: low, high: high, shape: shape}))"}},{"id":"save(fname,data)-class-method","html_id":"save(fname,data)-class-method","name":"save","doc":"Saves arrays to a file.\n\nExamples of filenames:\n- `/path/to/file`\n- `s3://my-bucket/path/to/file` (if MXNet is compiled with AWS S3 supports)\n- `hdfs://path/to/file` (if MXNet is compiled with HDFS supports)\n\n### Parameters\n* *fname* (`String`)\n  The filename.\n* *data* (`NDArray` or `Enumerable({String, NDArray})` or `Enumerable(NDArray)`)\n  The data to save.\n","summary":"<p>Saves arrays to a file.</p>","abstract":false,"args":[{"name":"fname","doc":null,"default_value":"","external_name":"fname","restriction":""},{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(fname, data)","args_html":"(fname, data)","location":{"filename":"src/mxnet/ndarray.cr","line_number":1164,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/ndarray.cr#L1164"},"def":{"name":"save","args":[{"name":"fname","doc":null,"default_value":"","external_name":"fname","restriction":""},{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"case data\nwhen NDArray\n  data = [data]\n  keys = [] of String\nwhen Enumerable(::Tuple(String, NDArray))\n  keys = data.map(&.first)\n  data = data.map(&.last)\nwhen Enumerable(NDArray)\n  data = data.to_a\n  keys = [] of String\nelse\n  raise(ArgumentError.new(\"Data must either be an NDArray, an enumerable of NDArrays, or a enumerable of String, NDArray tuples.\"))\nend\nMXNet::Internal.libcall(MXNDArraySave, fname, data.size, data.map do |__arg18|\n  __arg18.handle.as(NDArrayHandle)\nend, keys.map(&.to_unsafe))\n"}},{"id":"sgd_mom_update(weight:self,grad:self,mom:self,lr:Float,**kwargs)-class-method","html_id":"sgd_mom_update(weight:self,grad:self,mom:self,lr:Float,**kwargs)-class-method","name":"sgd_mom_update","doc":"Momentum update function for Stochastic Gradient Descent (SGD)\noptimizer.\n\nMomentum update has better convergence rates on neural\nnetworks.\n\n### Parameters:\n* *weight* (`NDArray`, required)\n  Weights.\n* *grad* (`NDArray`, required)\n  Gradients.\n* *mom* (`NDArray`, required)\n  Momentum.\n* *lr* (`Float`, required)\n  Learning rate.\n* *momentum* (`Float`, optional, default = 0)\n  The decay rate of momentum estimates at each epoch.\n* *wd* (`Float`, optional, default = 0)\n  Weight decay augments the objective function with a\n  regularization term that penalizes large weights. The\n  penalty scales with the square of the magnitude of each\n  weight.\n* *rescale_grad* (`Float`, optional, default = 1.0)\n  Rescale gradient to `grad = rescale_grad * grad`.\n* *clip_gradient* (`Float`, optional, default = -1.0)\n  Clip gradient to the range of *[-clip_gradient,\n  clip_gradient]*. If `clip_gradient <= 0`, gradient clipping\n  is turned off.\n* *lazy_update* (`Bool`, optional, default = true)\n  If true, lazy updates are applied if gradient's stype is\n  row_sparse.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Momentum update function for Stochastic Gradient Descent (SGD) optimizer.</p>","abstract":false,"args":[{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"self"},{"name":"grad","doc":null,"default_value":"","external_name":"grad","restriction":"self"},{"name":"mom","doc":null,"default_value":"","external_name":"mom","restriction":"self"},{"name":"lr","doc":null,"default_value":"","external_name":"lr","restriction":"Float"}],"args_string":"(weight : <span class=\"k\">self</span>, grad : <span class=\"k\">self</span>, mom : <span class=\"k\">self</span>, lr : Float, **kwargs)","args_html":"(weight : <span class=\"k\">self</span>, grad : <span class=\"k\">self</span>, mom : <span class=\"k\">self</span>, lr : Float, **kwargs)","location":null,"def":{"name":"sgd_mom_update","args":[{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"self"},{"name":"grad","doc":null,"default_value":"","external_name":"grad","restriction":"self"},{"name":"mom","doc":null,"default_value":"","external_name":"mom","restriction":"self"},{"name":"lr","doc":null,"default_value":"","external_name":"lr","restriction":"Float"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._sgd_mom_update(weight, grad, mom, **kwargs.merge({lr: lr}))"}},{"id":"sgd_update(weight:self,grad:self,lr:Float,**kwargs)-class-method","html_id":"sgd_update(weight:self,grad:self,lr:Float,**kwargs)-class-method","name":"sgd_update","doc":"Update function for Stochastic Gradient Descent (SGD)\noptimizer.\n\nSGD updates the weights using:\n    weight = weight - learning_rate * (gradient + wd * weight)\n\n### Parameters\n* *weight* (`NDArray`, required)\n  Weights.\n* *grad* (`NDArray`, required)\n  Gradients.\n* *lr* (`Float`, required)\n  Learning rate.\n* *wd* (`Float`, optional, default = 0)\n  Weight decay augments the objective function with a\n  regularization term that penalizes large weights. The\n  penalty scales with the square of the magnitude of each\n  weight.\n* *rescale_grad* (`Float`, optional, default = 1.0)\n  Rescale gradient to `grad = rescale_grad * grad`.\n* *clip_gradient* (`Float`, optional, default = -1.0)\n  Clip gradient to the range of *[-clip_gradient,\n  clip_gradient]*. If `clip_gradient <= 0`, gradient clipping\n  is turned off.\n* *lazy_update* (`Bool`, optional, default = true)\n  If true, lazy updates are applied if gradient's stype is\n  row_sparse.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Update function for Stochastic Gradient Descent (SGD) optimizer.</p>","abstract":false,"args":[{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"self"},{"name":"grad","doc":null,"default_value":"","external_name":"grad","restriction":"self"},{"name":"lr","doc":null,"default_value":"","external_name":"lr","restriction":"Float"}],"args_string":"(weight : <span class=\"k\">self</span>, grad : <span class=\"k\">self</span>, lr : Float, **kwargs)","args_html":"(weight : <span class=\"k\">self</span>, grad : <span class=\"k\">self</span>, lr : Float, **kwargs)","location":null,"def":{"name":"sgd_update","args":[{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"self"},{"name":"grad","doc":null,"default_value":"","external_name":"grad","restriction":"self"},{"name":"lr","doc":null,"default_value":"","external_name":"lr","restriction":"Float"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._sgd_update(weight, grad, **kwargs.merge({lr: lr}))"}},{"id":"shape_array(data,**kwargs)-class-method","html_id":"shape_array(data,**kwargs)-class-method","name":"shape_array","doc":"Returns a 1-D array containing the shape of the data.\n\nAssume *x* is an array with the following elements:\n    [[1, 2, 3, 4], [5, 6, 7, 8]]\n\nThen:\n    shape_array(x) = [2, 4]\n\n### Parameters:\n* *data* (`NDArray`, required)\n  Input data.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Returns a 1-D array containing the shape of the data.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"shape_array","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._shape_array(data, **kwargs)"}},{"id":"shuffle(data,**kwargs)-class-method","html_id":"shuffle(data,**kwargs)-class-method","name":"shuffle","doc":"Randomly shuffles the elements.\n\nShuffles the array along the first axis. The order of the\nelements in each subarray does not change. For example, if a\n2-D array is given, the order of the rows randomly changes,\nbut the order of the elements in each row does not change.\n\n### Parameters\n* *data* (`NDArray`, required)\n  Input data.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Randomly shuffles the elements.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"shuffle","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._shuffle(data, **kwargs)"}},{"id":"sigmoid(data,**kwargs)-class-method","html_id":"sigmoid(data,**kwargs)-class-method","name":"sigmoid","doc":"Computes the sigmoid activation.\n\n_y=1/(1+exp(−x))_\n\n### Parameters\n* *data* (`NDArray`, required)\n  Input data.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Computes the sigmoid activation.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"sigmoid","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._sigmoid(data, **kwargs)"}},{"id":"sign(data,**kwargs)-class-method","html_id":"sign(data,**kwargs)-class-method","name":"sign","doc":"Returns the element-wise sign of the input.\n\nAssume *x* is an array with the following elements:\n    [-2, 0, 3]\n\nThen:\n    sign(x) # => [-1, 0, 1]\n\n### Parameters\n* *data* (`NDArray`, required)\n  Input data.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Returns the element-wise sign of the input.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"sign","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._sign(data, **kwargs)"}},{"id":"sin(data,**kwargs)-class-method","html_id":"sin(data,**kwargs)-class-method","name":"sin","doc":"Computes the element-wise sine of the input array.\n\nThe input should be in radians (`2\\𝜋` radians equals 360 degrees).\n\n    sin([0, 𝜋/4, 𝜋/2]) = [0, 0.707, 1]\n\n### Parameters\n* *data* (`NDArray`, required)\n  Input data.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Computes the element-wise sine of the input array.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"sin","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._sin(data, **kwargs)"}},{"id":"sinh(data,**kwargs)-class-method","html_id":"sinh(data,**kwargs)-class-method","name":"sinh","doc":"Returns the hyperbolic sine of the input array, computed element-wise.\n\n    sinh(x) = (exp(x) - exp(-x)) / 2\n\n### Parameters\n* *data* (`NDArray`, required)\n  Input data.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Returns the hyperbolic sine of the input array, computed element-wise.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"sinh","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._sinh(data, **kwargs)"}},{"id":"size_array(data,**kwargs)-class-method","html_id":"size_array(data,**kwargs)-class-method","name":"size_array","doc":"Returns a 1-D array containing the size of the data.\n\nAssume *x* is an array with the following elements:\n    [[1, 2, 3, 4], [5, 6, 7, 8]]\n\nThen:\n    size_array(x) = [8]\n\n### Parameters:\n* *data* (`NDArray`, required)\n  Input data.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Returns a 1-D array containing the size of the data.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"size_array","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._size_array(data, **kwargs)"}},{"id":"slice(data,begin_begin,end_end,**kwargs)-class-method","html_id":"slice(data,begin_begin,end_end,**kwargs)-class-method","name":"slice","doc":"Slices a region of the array.\n\nThis function returns a sliced array between the indices given\nby *begin* and *end* with the corresponding *step*.\n\nFor an input array of *shape=[d_0, d_1, ..., d_n-1]*, a slice\noperation with *begin=[b_0, b_1, ..., b_m-1]*, *end=[e_0, e_1,\n..., e_m-1]*, and *step=[s_0, s_1, ..., s_m-1]*, where *m <= n*,\nresults in an array with the shape *(|e_0-b_0|/|s_0|, ...,\n|e_m-1-b_m-1|/|s_m-1|, d_m, ..., d_n-1)*.\n\nThe resulting array's _k_-th dimension contains elements from\nthe _k_-th dimension of the input array starting from index\n*b_k* (inclusive) with step *s_k* until reaching *e_k*\n(exclusive).\n\nIf the _k_-th elements are `nil` in the sequence of *begin*,\n*end*, and *step*, the following rule will be used to set\ndefault values: if `s_k` is `nil`, set `s_k = 1`. If `s_k > 0`,\nset `b_k = 0`, `e_k = d_k`, else set `b_k = d_k-1`, `e_k = -1`.\n\n### Parameters\n* *data* (`NDArray`, required)\n  Input data.\n* *begin* (`Array(Int)`, required)\n  Beginning indices for the slice operation, supports negative\n  indices.\n* *end* (`Array(Int)`, required)\n  Ending indices for the slice operation, supports negative\n  indices.\n* *step* (`Array(Int)`, optional)\n  Step for the slice operation, supports negative values.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Slices a region of the array.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""},{"name":"_begin","doc":null,"default_value":"","external_name":"begin","restriction":""},{"name":"_end","doc":null,"default_value":"","external_name":"end","restriction":""}],"args_string":"(data, begin _begin, end _end, **kwargs)","args_html":"(data, begin _begin, end _end, **kwargs)","location":null,"def":{"name":"slice","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""},{"name":"_begin","doc":null,"default_value":"","external_name":"begin","restriction":""},{"name":"_end","doc":null,"default_value":"","external_name":"end","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._slice(data, _begin, _end, **kwargs)"}},{"id":"slice_axis(data,axis,begin_begin,end_end,**kwargs)-class-method","html_id":"slice_axis(data,axis,begin_begin,end_end,**kwargs)-class-method","name":"slice_axis","doc":"Slices along a given axis.\n\nReturns an array slice along a given *axis* starting from the\n*begin* index to the *end* index.\n\nAssume *x* is an array with the following elements:\n    [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]\n\nThen:\n    slice_axis(x, axis: 1, begin: 0, end: 2) # => [[1, 2], [5, 6], [9, 10]]\n\n### Parameters\n* *data* (`NDArray`, required)\n  Input data.\n* *axis* (`Int`, required)\n  Axis along which to slice. Supports negative indexes.\n* *begin* (`Int`, required)\n  The beginning index along the axis to be sliced. Supports\n  negative indexes.\n* *end* (`Int` or `nil`, required)\n  The ending index along the axis to be sliced. Supports\n  negative indexes.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Slices along a given axis.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""},{"name":"axis","doc":null,"default_value":"","external_name":"axis","restriction":""},{"name":"_begin","doc":null,"default_value":"","external_name":"begin","restriction":""},{"name":"_end","doc":null,"default_value":"","external_name":"end","restriction":""}],"args_string":"(data, axis, begin _begin, end _end, **kwargs)","args_html":"(data, axis, begin _begin, end _end, **kwargs)","location":null,"def":{"name":"slice_axis","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""},{"name":"axis","doc":null,"default_value":"","external_name":"axis","restriction":""},{"name":"_begin","doc":null,"default_value":"","external_name":"begin","restriction":""},{"name":"_end","doc":null,"default_value":"","external_name":"end","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._slice_axis(data, axis, _begin, _end, **kwargs)"}},{"id":"slice_like(data,shape_like,**kwargs)-class-method","html_id":"slice_like(data,shape_like,**kwargs)-class-method","name":"slice_like","doc":"Slices like the shape of another array.\n\nThis function is similar to `.slice`, however, the *begin*\nvalues are always `0` and the *end* values of specific axes\nare inferred from the second input *shape_like*.\n\nGiven a value of *shape_like* of *shape=[d_0, d_1, ..., d_n-1]*\nand default empty *axes*, `.slice_like` performs the following\noperation:\n\n    out = slice(input, begin: [0, 0, ..., 0], end: [d_0, d_1, ..., d_n-1])\n\nWhen *axes* is present, it is used to specify which axes are\nbeing sliced.\n\nIt is allowed to have first and second inputs with different\ndimensions, however, you have to make sure *axes* are\nspecified and do not exceed the dimension limits.\n\nFor example, given an input *a* with *shape=[2, 3, 4, 5]* and\nan input *b* with *shape=[1, 2, 3]*, the following is not\nallowed because the number of dimensions of *a* is 4 and the\nnumber of dimension of *b* is 3:\n\n    out = slice_like(a, b)\n\nThe following is allowed in this situation:\n\n    out = slice_like(a, b, axes: [0, 2])\n\nAssume *x* and *y* are arrays with the following elements:\n    [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]] # x\n    [[0, 0, 0], [0, 0, 0]]                        # y\n\n    slice_like(x, y) = [[1, 2, 3], [5, 6, 7]]\n    slice_like(x, y, axes: [0, 1]) = [[1, 2, 3], [5, 6, 7]]\n    slice_like(x, y, axes: [0]) = [[1, 2, 3, 4], [5, 6, 7, 8]]\n    slice_like(x, y, axes: [-1]) = [[1, 2, 3], [5, 6, 7], [9, 10, 11]]\n\n### Parameters\n* *data* (`NDArray`, required)\n  Input data.\n* *shape_like* (`NDArray`)\n  Input to shape like.\n* *axes* (`Int` or `Array(Int)`)\n  List of axes on which input data will be sliced according to\n  the corresponding size of the second input. By default it\n  will slice on all axes. Negative axes are supported.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Slices like the shape of another array.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""},{"name":"shape_like","doc":null,"default_value":"","external_name":"shape_like","restriction":""}],"args_string":"(data, shape_like, **kwargs)","args_html":"(data, shape_like, **kwargs)","location":null,"def":{"name":"slice_like","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""},{"name":"shape_like","doc":null,"default_value":"","external_name":"shape_like","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._slice_like(data, shape_like, **kwargs)"}},{"id":"softmax(data,**kwargs)-class-method","html_id":"softmax(data,**kwargs)-class-method","name":"softmax","doc":"Applies the softmax function.\n\nThe resulting array contains elements in the range *(0, 1)*\nand the elements along the given axis sum up to 1.\n\nAssume *x* is an array with the following elements:\n    [[1.0, 1.0, 1.0], [1.0, 1.0, 1.0]]\n\nThen:\n    softmax(x, axis: 0) # => [[0.5, 0.5, 0.5], [0.5, 0.5, 0.5]]\n    softmax(x, axis: 1) # => [[0.3334, 0.3334, 0.3334], [0.3334, 0.3334, 0.3334]]\n\n### Parameters\n* *data* (`NDArray`, required)\n  Input data.\n* *axis* (`Int`, optional, default = -1)\n  The axis along which to compute softmax.\n* *temperature* (`Float`, optional, default = 1.0)\n  Temperature parameter in softmax.\n* *dtype* (`::Symbol`, `:float16`, `:float32` or `:float64`, optional)\n  Type of the output in case this can't be inferred. Defaults\n  to the same type as the input if not defined.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Applies the softmax function.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"softmax","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._softmax(data, **kwargs)"}},{"id":"sort(data,**kwargs)-class-method","html_id":"sort(data,**kwargs)-class-method","name":"sort","doc":"Returns a sorted copy of an input array along the given axis.\n\nAssume *x* is an array with the following elements:\n    [[1, 4], [3, 1]]\n\nThen:\n    sort(x) = [[1, 4], [1, 3]]\n    sort(x, axis: 0) = [[1, 1], [3, 4]]\n    sort(x, axis: None) = [1, 1, 3, 4]\n    sort(x, is_ascend: false) = [[4, 1], [3, 1]]\n\n### Parameters\n* *data* (`NDArray`, required)\n  Input data.\n* *axis* (`Int` or `None`, optional, default = `-1`)\n  The axis along which to choose sort the input tensor. If\n  omitted, the last axis is used. If `None`, the flattened\n  array is used.\n* *is_ascend* (`Bool`, optional, default = false)\n  Whether to sort in ascending or descending order.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Returns a sorted copy of an input array along the given axis.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"sort","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._sort(data, **kwargs)"}},{"id":"sqrt(data,**kwargs)-class-method","html_id":"sqrt(data,**kwargs)-class-method","name":"sqrt","doc":"Returns element-wise square-root value of the input.\n\nAssume *x* is an array with the following elements:\n    [4, 9, 16]\n\nThen:\n    sqrt(x) # => [2, 3, 4]\n\n### Parameters\n* *data* (`NDArray`, required)\n  Input data.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Returns element-wise square-root value of the input.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"sqrt","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._sqrt(data, **kwargs)"}},{"id":"square(data,**kwargs)-class-method","html_id":"square(data,**kwargs)-class-method","name":"square","doc":"Returns element-wise squared value of the input.\n\nAssume *x* is an array with the following elements:\n    [2, 3, 4]\n\nThen:\n    square(x) # => [4, 9, 16]\n\n### Parameters\n* *data* (`NDArray`, required)\n  Input data.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Returns element-wise squared value of the input.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"square","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._square(data, **kwargs)"}},{"id":"subtract(lhs:self|Number,rhs:self|Number)-class-method","html_id":"subtract(lhs:self|Number,rhs:self|Number)-class-method","name":"subtract","doc":"Returns element-wise difference of the input arrays.\n\nIf the corresponding dimensions of two arrays have the same size\nor one of them has size 1, then the arrays are broadcastable to\na common shape.\n\nEquivalent to `lhs - rhs`. Equivalent to `.broadcast_sub` and\n`.broadcast_minus` for `NDArray` arguments.\n\n### Parameters\n* *lhs* (`NDArray` or `Number`)\n  The first value to be subtracted.\n* *rhs* (`NDArray` or `Number`)\n  The second value to be subtracted.\n","summary":"<p>Returns element-wise difference of the input arrays.</p>","abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"self | Number"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self | Number"}],"args_string":"(lhs : <span class=\"k\">self</span> | Number, rhs : <span class=\"k\">self</span> | Number)","args_html":"(lhs : <span class=\"k\">self</span> | <a href=\"../Number.html\">Number</a>, rhs : <span class=\"k\">self</span> | <a href=\"../Number.html\">Number</a>)","location":{"filename":"src/mxnet/ndarray.cr","line_number":141,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/ndarray.cr#L141"},"def":{"name":"subtract","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"self | Number"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self | Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if lhs.is_a?(self)\n  if rhs.is_a?(self)\n    Ops._broadcast_sub(lhs, rhs)\n  else\n    Internal._minus_scalar(lhs, scalar: rhs)\n  end\nelse\n  if rhs.is_a?(self)\n    Internal._rminus_scalar(rhs, scalar: lhs)\n  else\n    raise(\"should never happen\")\n  end\nend"}},{"id":"sum(data,**kwargs)-class-method","html_id":"sum(data,**kwargs)-class-method","name":"sum","doc":"Computes the sum of array elements over given axes.\n\nAssume *x* is an array with the following elements:\n    [[[1, 2], [2, 3], [1, 3]],\n     [[1, 4], [4, 3], [5, 2]],\n     [[7, 1], [7, 2], [7, 3]]]\n\nThen:\n    sum(x, axis: 1) # => [[4, 8], [10, 9], [21, 6]]\n    sum(x, axis: [1, 2]) # => [12, 19, 27]\n\n### Parameters\n* *data* (`NDArray`, required)\n  Input data.\n* *axis* (`Int` or `Array(Int)`, optional)\n  The axis or axes along which to perform the\n  reduction. `axis: []` or `axis: nil` will compute over all\n  elements into a scalar array with shape `[1]`. If *axis* is\n  an `Int`, a reduction is performed on a particular axis. If\n  *axis* is an array of `Int`, a reduction is performed on all\n  the axes specified in the array. If *exclude* is true,\n  reduction will be performed on the axes that are **not** in\n  *axis* instead. Negative values means indexing from right to\n  left.\n* *keepdims* (`Bool`, optional, default = false)\n  If this is set to true, the reduced axes are left in the\n  result as dimension with size one.\n* *exclude* (`Bool`, optional, default = false)\n  Whether to perform reduction on axis that are **not** in\n  axis instead.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Computes the sum of array elements over given axes.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"sum","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._sum(data, **kwargs)"}},{"id":"take(a,indices,**kwargs)-class-method","html_id":"take(a,indices,**kwargs)-class-method","name":"take","doc":"Takes elements from an input array along the given axis.\n\nThis function slices the input array along a particular axis\nwith the provided indices.\n\nGiven data tensor of rank *r >= 1*, and indices tensor of rank\n*q*, gather entries of the axis dimension of data (by default\nouter-most one as axis=0) indexed by indices, and concatenate\nthem in an output tensor of rank *q + (r - 1)*.\n\nAssume *x* and *i* are arrays with the following elements:\n    [[1, 2], [3, 4], [5, 6]] # x\n    [[0, 1], [1, 2]]]        # i\n\nThen:\n    # get rows 0 and 1, then 1 and 2, along axis 0\n    take(x, i) # => [[[1, 2], [3, 4]], [[3, 4], [5, 6]]]\n\n### Parameters\n* *a* (`NDArray`, required)\n  The input array.\n* *indices* (`NDArray`, required)\n  The indices of the values to be extracted.\n* *axis* (`Int`, optional, default = 0)\n  The axis of input array to be taken. For input tensor of\n  rank *r*, it could be in the range of *[-r, r-1]*.\n* *mode* (`::Symbol`, `:clip` or `:wrap`, optional, default = :clip)\n  Specify how out-of-bound indices bahave. *:clip* means to\n  clip to the range. If all indices mentioned are too large,\n  they are replaced by the index that addresses the last\n  element along an axis. *:wrap* means to wrap around.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Takes elements from an input array along the given axis.</p>","abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":""},{"name":"indices","doc":null,"default_value":"","external_name":"indices","restriction":""}],"args_string":"(a, indices, **kwargs)","args_html":"(a, indices, **kwargs)","location":null,"def":{"name":"take","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":""},{"name":"indices","doc":null,"default_value":"","external_name":"indices","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._take(a, indices, **kwargs)"}},{"id":"tan(data,**kwargs)-class-method","html_id":"tan(data,**kwargs)-class-method","name":"tan","doc":"Computes the element-wise tangent of the input array.\n\nThe input should be in radians (`2\\𝜋` radians equals 360 degrees).\n\n    tan([0, 𝜋, 𝜋/2]) = [0, 1, -∞)]\n\n### Parameters\n* *data* (`NDArray`, required)\n  Input data.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Computes the element-wise tangent of the input array.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"tan","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._tan(data, **kwargs)"}},{"id":"tanh(data,**kwargs)-class-method","html_id":"tanh(data,**kwargs)-class-method","name":"tanh","doc":"Returns the hyperbolic tangent of the input array, computed element-wise.\n\n    tanh(x) = sinh(x) / cosh(x)\n\n### Parameters\n* *data* (`NDArray`, required)\n  Input data.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Returns the hyperbolic tangent of the input array, computed element-wise.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"tanh","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._tanh(data, **kwargs)"}},{"id":"tile(data,reps,**kwargs)-class-method","html_id":"tile(data,reps,**kwargs)-class-method","name":"tile","doc":"Repeats the array multiple times.\n\nAssume *x* is an array with the following elements:\n    [[1, 2], [3, 4]]\n\nIf *reps* has length *d*, and the input array has a\ncorresponding dimension of *n*. There are three cases:\n\n- **n=d**. Repeat *i*-th dimension of the input *reps[i]* times:\n    tile(x, reps: [2, 3]) = [[1, 2, 1, 2, 1, 2],\n                             [3, 4, 3, 4, 3, 4],\n                             [1, 2, 1, 2, 1, 2],\n                             [3, 4, 3, 4, 3, 4]]\n\n- **n>d**. *reps* is promoted to length *n* by pre-pending\n  1's. For an input shape `[2, 3]`, `reps: [2]` is treated\n  as `[1, 2]`:\n    tile(x, reps: [2]) = [[1, 2, 1, 2],\n                          [3, 4, 3, 4]]\n\n- **n<d**. The input is promoted to be d-dimensional by\n  prepending new axes. A shape `[2, 2]` array is promoted\n  to `[1, 2, 2]` for 3-D replication:\n    tile(x, reps: [2, 2, 3]) = [[[1, 2, 1, 2, 1, 2],\n                                 [3, 4, 3, 4, 3, 4],\n                                 [1, 2, 1, 2, 1, 2],\n                                 [3, 4, 3, 4, 3, 4]],\n                                [[1, 2, 1, 2, 1, 2],\n                                 [3, 4, 3, 4, 3, 4],\n                                 [1, 2, 1, 2, 1, 2],\n                                 [3, 4, 3, 4, 3, 4]]]\n\n### Parameters\n* *data* (`NDArray`, required)\n  Input data.\n* *reps* (`Array(Int)`)\n  The number of times to repeat the input array. Each\n  element of *reps* must be a positive integer.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Repeats the array multiple times.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""},{"name":"reps","doc":null,"default_value":"","external_name":"reps","restriction":""}],"args_string":"(data, reps, **kwargs)","args_html":"(data, reps, **kwargs)","location":null,"def":{"name":"tile","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""},{"name":"reps","doc":null,"default_value":"","external_name":"reps","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._tile(data, reps, **kwargs)"}},{"id":"topk(data,**kwargs)-class-method","html_id":"topk(data,**kwargs)-class-method","name":"topk","doc":"Returns the top *k* elements in an input array along the given\naxis.\n\nExamples::\n\nAssume *x* is an array with the following elements:\n    [[0.3, 0.2, 0.4], [0.1, 0.3, 0.2]]\n\nThen:\n    topk(x) = [[2.0], [1.0]]\n    topk(x, ret_typ: :value, k: 2) = [[0.4, 0.3], [0.3, 0.2]]\n    topk(x, ret_typ: :value, k: 2, is_ascend: true) = [[0.2, 0.3], [0.1, 0.2]]\n    topk(x, axis: 0, k: 2) = [[0.0, 1.0, 0.0], [1.0, 0.0, 1.0]]\n\n### Parameters\n* *data* (`NDArray`, required)\n  Input data.\n* *axis* (`Int` or `None`, optional, default = `-1`)\n  Axis along which to choose the top k indices. If omitted,\n  the last axis is used. If `None`, the flattened array is\n  used.\n* *k* (`Int`, optional, default = `1`)\n  Number of top elements to select. It should be always\n  smaller than or equal to the element number in the given\n  axis.\n* *ret_typ* (`::Symbol`, `:value`, `:indices`, `:mask`, `:both`, optional, default = `:indices`)\n  The return type. `:value` means to return the top *k*\n  values, `:indices` means to return the indices of the top\n  *k* values, `:mask` means to return a mask array containing\n  0 and 1 (1 means the top *k* value). `:both` means to return\n  a list of both values and indices of top *k* elements.\n* *is_ascend* (`Bool`, optional, default = false)\n  Whether to choose *k* largest or *k* smallest elements. Top\n  *k* largest elements will be chosen if set to `false`.\n* *dtype* (`::Symbol`, optional, default = `:float32`)\n  The data type of the output indices when *ret_typ* is\n  `:indices` or `:both`.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Returns the top <em>k</em> elements in an input array along the given axis.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"topk","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._topk(data, **kwargs)"}},{"id":"transpose(data,**kwargs)-class-method","html_id":"transpose(data,**kwargs)-class-method","name":"transpose","doc":"Permutes the dimensions of an array.\n\nAssume *x* and *y* are arrays with the following elements:\n    [[[1, 2], [3, 4], [5, 6], [7, 8]]] # x\n    [[1, 2], [3, 4]]                   # y\n\nThen:\n    transpose(x) # => [[[1], [3], [5], [7]], [[2], [4], [6], [8]]]\n    transpose(x, axes: [1, 0, 2]) # => [[[1, 2]], [[3, 4]], [[5, 6]], [[7, 8]]]\n    transpose(y) # => [[1, 3], [2, 4]]\n\n### Parameters\n* *data* (`NDArray`, required)\n  Input data.\n* *axes* (`Int` or `Array(Int)`, optional)\n  Target axis order. By default the axes will be inverted.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Permutes the dimensions of an array.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"transpose","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._transpose(data, **kwargs)"}},{"id":"trunc(data,**kwargs)-class-method","html_id":"trunc(data,**kwargs)-class-method","name":"trunc","doc":"Return the element-wise truncated value of the input.\n\nThe truncated value of `x` is the nearest integer `i` which is\ncloser to zero than `x` is. In short, the fractional part of\nthe signed number `x` is discarded.\n\nAssume *x* is an array with the following elements:\n    [-2.1, -1.9, 1.5, 1.9, 2.1]\n\nThen:\n    trunc(x) = [-2.0, -1.0, 1.0, 1.0, 2.0]\n\n### Parameters\n* *data* (`NDArray`, required)\n  Input data.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Return the element-wise truncated value of the input.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"trunc","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._trunc(data, **kwargs)"}},{"id":"where(condition,x,y,**kwargs)-class-method","html_id":"where(condition,x,y,**kwargs)-class-method","name":"where","doc":"Returns elements, either from *x* or *y*, depending on the\n*condition*.\n\nGiven three arrays, *condition*, *x* and *y*, return an array\nwith the elements from *x* or *y*, depending on whether the\nelements from *condition* are true or false. *x* and *y* must\nhave the same shape.\n\nIf *condition* has the same shape as *x*, each element in the\noutput array is from *x* if the corresponding element in\n*condition* is true and from *y* if false.\n\nIf *condition* does not have the same shape as *x*, it must be\na 1-D array whose size is the same as the size of the first\ndimension of *x*. Each row of the output array is from *x* if\nthe corresponding element from *condition* is true and from\n*y* if false.\n\nNote: all non-zero values are interpreted as `true` in\n*condition*.\n\nAssume *x*, *y* and *condition* are arrays with the following\nelements:\n    [[1, 2], [3, 4]]  # x\n    [[5, 6], [7, 8]]  # y\n    [[0, 1], [-1, 0]] # condition\n\nThen:\n    where(condition, x, y) = [[5, 2], [3, 8]]\n\n### Parameters\n* *condition* ((`NDArray`, required))\n  The condition array.\n* *x* ((`NDArray`, required))\n  The first input.\n* *y* ((`NDArray`, required))\n  The second input.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Returns elements, either from <em>x</em> or <em>y</em>, depending on the <em>condition</em>.</p>","abstract":false,"args":[{"name":"condition","doc":null,"default_value":"","external_name":"condition","restriction":""},{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":""},{"name":"y","doc":null,"default_value":"","external_name":"y","restriction":""}],"args_string":"(condition, x, y, **kwargs)","args_html":"(condition, x, y, **kwargs)","location":null,"def":{"name":"where","args":[{"name":"condition","doc":null,"default_value":"","external_name":"condition","restriction":""},{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":""},{"name":"y","doc":null,"default_value":"","external_name":"y","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._where(condition, x, y, **kwargs)"}},{"id":"zeros(shape:Int|Array(Int),ctx=Context.current,**kwargs)-class-method","html_id":"zeros(shape:Int|Array(Int),ctx=Context.current,**kwargs)-class-method","name":"zeros","doc":"Returns an array filled with all zeros, with the given shape.\n\n### Parameters\n* *data* (`NDArray`, required)\n  Input data.\n* *shape* (`Int` or `Array(Int)`)\n  The shape of the array.\n* *dtype* (`::Symbol`, default = `:float32`)\n  The data type of the output array.\n* *ctx* (`Context`, optional)\n  Device context (default is the current context). Only used\n  for imperative calls.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Returns an array filled with all zeros, with the given shape.</p>","abstract":false,"args":[{"name":"shape","doc":null,"default_value":"","external_name":"shape","restriction":"Int | Array(Int)"},{"name":"ctx","doc":null,"default_value":"Context.current","external_name":"ctx","restriction":""}],"args_string":"(shape : Int | Array(Int), ctx = <span class=\"t\">Context</span>.current, **kwargs)","args_html":"(shape : Int | Array(Int), ctx = <span class=\"t\">Context</span>.current, **kwargs)","location":null,"def":{"name":"zeros","args":[{"name":"shape","doc":null,"default_value":"","external_name":"shape","restriction":"Int | Array(Int)"},{"name":"ctx","doc":null,"default_value":"Context.current","external_name":"ctx","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Internal._zeros(**kwargs.merge({shape: shape, ctx: ctx}))"}},{"id":"zeros_like(data,**kwargs)-class-method","html_id":"zeros_like(data,**kwargs)-class-method","name":"zeros_like","doc":"Returns an array of zeros with the same shape, data type and\nstorage type as the input array.\n\nAssume *x* is an array with the following elements:\n    [[1.0, 1.0, 1.0], [1.0, 1.0, 1.0]]\n\nThen:\n    zeros_like(x) # => [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]\n\n### Parameters\n* *data* (`NDArray`, required)\n  Input data.\n* *out* (`NDArray`, optional)\n  The output array.\n","summary":"<p>Returns an array of zeros with the same shape, data type and storage type as the input array.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"zeros_like","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._zeros_like(data, **kwargs)"}}],"constructors":[],"instance_methods":[{"id":"!=(other)-instance-method","html_id":"!=(other)-instance-method","name":"!=","doc":"Performs element-wise not equal to (`!=`) comparison operation\nwith broadcasting.","summary":"<p>Performs element-wise not equal to (<code><a href=\"../MXNet/NDArray.html#!=(other)-instance-method\">#!=</a></code>) comparison operation with broadcasting.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":""}],"args_string":"(other)","args_html":"(other)","location":{"filename":"src/mxnet/ndarray.cr","line_number":593,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/ndarray.cr#L593"},"def":{"name":"!=","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.class.not_equal(self, other)"}},{"id":"%(other)-instance-method","html_id":"%(other)-instance-method","name":"%","doc":"Performs element-wise modulo with broadcasting.","summary":"<p>Performs element-wise modulo with broadcasting.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":""}],"args_string":"(other)","args_html":"(other)","location":{"filename":"src/mxnet/ndarray.cr","line_number":574,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/ndarray.cr#L574"},"def":{"name":"%","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.class.modulo(self, other)"}},{"id":"&(other)-instance-method","html_id":"&(other)-instance-method","name":"&","doc":"Performs element-wise logical and (`&`) comparison operation\nwith broadcasting.","summary":"<p>Performs element-wise logical and (<code><a href=\"../MXNet/NDArray.html#&(other)-instance-method\">#&</a></code>) comparison operation with broadcasting.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":""}],"args_string":"(other)","args_html":"(other)","location":{"filename":"src/mxnet/ndarray.cr","line_number":623,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/ndarray.cr#L623"},"def":{"name":"&","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.class.logical_and(self, other)"}},{"id":"*(other)-instance-method","html_id":"*(other)-instance-method","name":"*","doc":"Performs element-wise multiplication with broadcasting.","summary":"<p>Performs element-wise multiplication with broadcasting.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":""}],"args_string":"(other)","args_html":"(other)","location":{"filename":"src/mxnet/ndarray.cr","line_number":564,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/ndarray.cr#L564"},"def":{"name":"*","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.class.multiply(self, other)"}},{"id":"**(other)-instance-method","html_id":"**(other)-instance-method","name":"**","doc":"Returns the result of the first array elements raised to powers\nfrom the second array (or scalar), element-wise with\nbroadcasting.","summary":"<p>Returns the result of the first array elements raised to powers from the second array (or scalar), element-wise with broadcasting.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":""}],"args_string":"(other)","args_html":"(other)","location":{"filename":"src/mxnet/ndarray.cr","line_number":581,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/ndarray.cr#L581"},"def":{"name":"**","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.class.power(self, other)"}},{"id":"+-instance-method","html_id":"+-instance-method","name":"+","doc":"Leaves the values unchanged.","summary":"<p>Leaves the values unchanged.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/mxnet/ndarray.cr","line_number":645,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/ndarray.cr#L645"},"def":{"name":"+","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self"}},{"id":"+(other)-instance-method","html_id":"+(other)-instance-method","name":"+","doc":"Performs element-wise addition with broadcasting.","summary":"<p>Performs element-wise addition with broadcasting.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":""}],"args_string":"(other)","args_html":"(other)","location":{"filename":"src/mxnet/ndarray.cr","line_number":554,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/ndarray.cr#L554"},"def":{"name":"+","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.class.add(self, other)"}},{"id":"-(other)-instance-method","html_id":"-(other)-instance-method","name":"-","doc":"Performs element-wise subtraction with broadcasting.","summary":"<p>Performs element-wise subtraction with broadcasting.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":""}],"args_string":"(other)","args_html":"(other)","location":{"filename":"src/mxnet/ndarray.cr","line_number":559,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/ndarray.cr#L559"},"def":{"name":"-","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.class.subtract(self, other)"}},{"id":"--instance-method","html_id":"--instance-method","name":"-","doc":"Performs element-wise numerical negative.","summary":"<p>Performs element-wise numerical negative.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/mxnet/ndarray.cr","line_number":640,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/ndarray.cr#L640"},"def":{"name":"-","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"NDArray::Internal._mul_scalar(self, scalar: -1)"}},{"id":"/(other)-instance-method","html_id":"/(other)-instance-method","name":"/","doc":"Performs element-wise division with broadcasting.","summary":"<p>Performs element-wise division with broadcasting.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":""}],"args_string":"(other)","args_html":"(other)","location":{"filename":"src/mxnet/ndarray.cr","line_number":569,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/ndarray.cr#L569"},"def":{"name":"/","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.class.divide(self, other)"}},{"id":"<(other)-instance-method","html_id":"<(other)-instance-method","name":"<","doc":"Performs element-wise less than (`<`) comparison operation\nwith broadcasting.","summary":"<p>Performs element-wise less than (<code><a href=\"../MXNet/NDArray.html#%3C(other)-instance-method\">#<</a></code>) comparison operation with broadcasting.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":""}],"args_string":"(other)","args_html":"(other)","location":{"filename":"src/mxnet/ndarray.cr","line_number":611,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/ndarray.cr#L611"},"def":{"name":"<","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.class.lesser(self, other)"}},{"id":"<=(other)-instance-method","html_id":"<=(other)-instance-method","name":"<=","doc":"Performs element-wise less than or equal to (`<=`) comparison\noperation with broadcasting.","summary":"<p>Performs element-wise less than or equal to (<code><a href=\"../MXNet/NDArray.html#%3C=(other)-instance-method\">#<=</a></code>) comparison operation with broadcasting.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":""}],"args_string":"(other)","args_html":"(other)","location":{"filename":"src/mxnet/ndarray.cr","line_number":617,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/ndarray.cr#L617"},"def":{"name":"<=","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.class.lesser_equal(self, other)"}},{"id":"==(other)-instance-method","html_id":"==(other)-instance-method","name":"==","doc":"Performs element-wise equal to (`==`) comparison operation with\nbroadcasting.","summary":"<p>Performs element-wise equal to (<code><a href=\"../MXNet/NDArray.html#==(other)-instance-method\">#==</a></code>) comparison operation with broadcasting.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":""}],"args_string":"(other)","args_html":"(other)","location":{"filename":"src/mxnet/ndarray.cr","line_number":587,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/ndarray.cr#L587"},"def":{"name":"==","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.class.equal(self, other)"}},{"id":">(other)-instance-method","html_id":">(other)-instance-method","name":">","doc":"Performs element-wise greater than (`>`) comparison operation\nwith broadcasting.","summary":"<p>Performs element-wise greater than (<code><a href=\"../MXNet/NDArray.html#%3E(other)-instance-method\">#></a></code>) comparison operation with broadcasting.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":""}],"args_string":"(other)","args_html":"(other)","location":{"filename":"src/mxnet/ndarray.cr","line_number":599,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/ndarray.cr#L599"},"def":{"name":">","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.class.greater(self, other)"}},{"id":">=(other)-instance-method","html_id":">=(other)-instance-method","name":">=","doc":"Performs element-wise greater than or equal to (`>=`) comparison\noperation with broadcasting.","summary":"<p>Performs element-wise greater than or equal to (<code><a href=\"../MXNet/NDArray.html#%3E=(other)-instance-method\">#>=</a></code>) comparison operation with broadcasting.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":""}],"args_string":"(other)","args_html":"(other)","location":{"filename":"src/mxnet/ndarray.cr","line_number":605,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/ndarray.cr#L605"},"def":{"name":">=","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.class.greater_equal(self, other)"}},{"id":"[](keys:Array(Int|Range(Int?,Int?)))-instance-method","html_id":"[](keys:Array(Int|Range(Int?,Int?)))-instance-method","name":"[]","doc":"Returns a sliced view of this array.\n\nThis method assumes the key is `Array` of `Int` or `Range(Int, Int)`.\nA macro is provided that rewrites a key presented as a variable\nnumber of `Int` or `Range(Int, Int)` arguments to array syntax.\n\n### Parameters\n* *keys* (`Array(Int | Range(Int, Int))`)\n  Indexing key.\n\nUsing variable argument syntax:\n\n```\na = MXNet::NDArray.array([1, 2, 3, 4])\na[1] # => MXNet::NDArray.array([2])\na[1...3] # => MXNet::NDArray.array([2, 3])\na[1..-2] # => MXNet::NDArray.array([2, 3])\nb = MXNet::NDArray.array([[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 0], [1, 2]]])\nb[1...3, 1] # => MXNet::NDArray.array([[7, 8], [1, 2]])\nb[1...3, 1...2] # => MXNet::NDArray.array([[[7, 8]], [[1, 2]]])\nb[1, 1...2] # => MXNet::NDArray.array([[7, 8]])\n```\n","summary":"<p>Returns a sliced view of this array.</p>","abstract":false,"args":[{"name":"keys","doc":null,"default_value":"","external_name":"keys","restriction":"Array(Int | Range(Int | ::Nil, Int | ::Nil))"}],"args_string":"(keys : Array(Int | Range(Int?, Int?)))","args_html":"(keys : Array(Int | Range(Int?, Int?)))","location":{"filename":"src/mxnet/ndarray.cr","line_number":731,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/ndarray.cr#L731"},"def":{"name":"[]","args":[{"name":"keys","doc":null,"default_value":"","external_name":"keys","restriction":"Array(Int | Range(Int | ::Nil, Int | ::Nil))"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"ranges, dims = ranges_and_dims(keys, compact: true)\nout = Ops._slice(self, begin: ranges.map(&.first), end: ranges.map(&.last))\ndims.size > 0 ? out.reshape(shape: dims) : out.reshape(shape: [1])\n"}},{"id":"[]=(keys:Array(Int|Range(Int?,Int?)),value:Number|self)-instance-method","html_id":"[]=(keys:Array(Int|Range(Int?,Int?)),value:Number|self)-instance-method","name":"[]=","doc":"Sets sliced view of this array to the specified value.\n\nThis method assumes the key is `Array` of `Int` or `Range(Int, Int)`.\nA macro is provided that rewrites a key presented as a variable\nnumber of `Int` or `Range(Int, Int)` arguments to array syntax.\n\n### Parameters\n* *keys* (`Array(Int | Range(Int, Int))`)\n  Indexing key.\n* *value* (`Number` or `MXNet::NDArray)`)\n  The value to set.\n\nUsing variable argument syntax:\n\n```\na = MXNet::NDArray.array([1, 2, 3, 4])\na[1] = 99\na # => MXNet::NDArray.array([1, 99, 3, 4])\na[1..-2] = 98\na # => MXNet::NDArray.array([1, 98, 98, 4])\na[1...3] = MXNet::NDArray.array([97, 97])\na # => MXNet::NDArray.array([1, 97, 97, 4])\nb = MXNet::NDArray.array([[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 0], [1, 2]]])\nb[1...3, 1] = 99\nb # => MXNet::NDArray.array([[[1, 2], [3, 4]], [[5, 6], [99, 99]], [[9, 0], [99, 99]]])\nb[1...3, 1...2] = MXNet::NDArray.array([[[98, 98]], [[98, 98]]])\nb # => MXNet::NDArray.array([[[1, 2], [3, 4]], [[5, 6], [98, 98]], [[9, 0], [98, 98]]])\nb[1, 1...2] = MXNet::NDArray.array([[97, 97]])\nb # => MXNet::NDArray.array([[[1, 2], [3, 4]], [[5, 6], [97, 97]], [[9, 0], [98, 98]]])\n```\n","summary":"<p>Sets sliced view of this array to the specified value.</p>","abstract":false,"args":[{"name":"keys","doc":null,"default_value":"","external_name":"keys","restriction":"Array(Int | Range(Int | ::Nil, Int | ::Nil))"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Number | self"}],"args_string":"(keys : Array(Int | Range(Int?, Int?)), value : Number | <span class=\"k\">self</span>)","args_html":"(keys : Array(Int | Range(Int?, Int?)), value : <a href=\"../Number.html\">Number</a> | <span class=\"k\">self</span>)","location":{"filename":"src/mxnet/ndarray.cr","line_number":768,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/ndarray.cr#L768"},"def":{"name":"[]=","args":[{"name":"keys","doc":null,"default_value":"","external_name":"keys","restriction":"Array(Int | Range(Int | ::Nil, Int | ::Nil))"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Number | self"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"ranges, dims = ranges_and_dims(keys, compact: false)\nif value.is_a?(self)\n  Internal._slice_assign(self, value.reshape(shape: dims), begin: ranges.map(&.first), end: ranges.map(&.last), out: self)\nelse\n  Internal._slice_assign_scalar(self, begin: ranges.map(&.first), end: ranges.map(&.last), scalar: value, out: self)\nend\nvalue\n"}},{"id":"^(other)-instance-method","html_id":"^(other)-instance-method","name":"^","doc":"Performs element-wise logical xor (`^`) comparison operation\nwith broadcasting.","summary":"<p>Performs element-wise logical xor (<code><a href=\"../MXNet/NDArray.html#%5E(other)-instance-method\">#^</a></code>) comparison operation with broadcasting.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":""}],"args_string":"(other)","args_html":"(other)","location":{"filename":"src/mxnet/ndarray.cr","line_number":635,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/ndarray.cr#L635"},"def":{"name":"^","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.class.logical_xor(self, other)"}},{"id":"abs(**kwargs)-instance-method","html_id":"abs(**kwargs)-instance-method","name":"abs","doc":"Convenience fluent method for `.abs`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/NDArray.html#abs(data,**kwargs)-class-method\">.abs</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"abs","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.abs(self, **kwargs)"}},{"id":"arccos(**kwargs)-instance-method","html_id":"arccos(**kwargs)-instance-method","name":"arccos","doc":"Convenience fluent method for `.arccos`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/NDArray.html#arccos(data,**kwargs)-class-method\">.arccos</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"arccos","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.arccos(self, **kwargs)"}},{"id":"arccosh(**kwargs)-instance-method","html_id":"arccosh(**kwargs)-instance-method","name":"arccosh","doc":"Convenience fluent method for `.arccosh`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/NDArray.html#arccosh(data,**kwargs)-class-method\">.arccosh</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"arccosh","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.arccosh(self, **kwargs)"}},{"id":"arcsin(**kwargs)-instance-method","html_id":"arcsin(**kwargs)-instance-method","name":"arcsin","doc":"Convenience fluent method for `.arcsin`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/NDArray.html#arcsin(data,**kwargs)-class-method\">.arcsin</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"arcsin","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.arcsin(self, **kwargs)"}},{"id":"arcsinh(**kwargs)-instance-method","html_id":"arcsinh(**kwargs)-instance-method","name":"arcsinh","doc":"Convenience fluent method for `.arcsinh`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/NDArray.html#arcsinh(data,**kwargs)-class-method\">.arcsinh</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"arcsinh","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.arcsinh(self, **kwargs)"}},{"id":"arctan(**kwargs)-instance-method","html_id":"arctan(**kwargs)-instance-method","name":"arctan","doc":"Convenience fluent method for `.arctan`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/NDArray.html#arctan(data,**kwargs)-class-method\">.arctan</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"arctan","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.arctan(self, **kwargs)"}},{"id":"arctanh(**kwargs)-instance-method","html_id":"arctanh(**kwargs)-instance-method","name":"arctanh","doc":"Convenience fluent method for `.arctanh`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/NDArray.html#arctanh(data,**kwargs)-class-method\">.arctanh</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"arctanh","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.arctanh(self, **kwargs)"}},{"id":"argmax(**kwargs)-instance-method","html_id":"argmax(**kwargs)-instance-method","name":"argmax","doc":"Convenience fluent method for `.argmax`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/NDArray.html#argmax(data,**kwargs)-class-method\">.argmax</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"argmax","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.argmax(self, **kwargs)"}},{"id":"argmin(**kwargs)-instance-method","html_id":"argmin(**kwargs)-instance-method","name":"argmin","doc":"Convenience fluent method for `.argmin`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/NDArray.html#argmin(data,**kwargs)-class-method\">.argmin</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"argmin","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.argmin(self, **kwargs)"}},{"id":"argsort(**kwargs)-instance-method","html_id":"argsort(**kwargs)-instance-method","name":"argsort","doc":"Convenience fluent method for `.argsort`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/NDArray.html#argsort(data,**kwargs)-class-method\">.argsort</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"argsort","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.argsort(self, **kwargs)"}},{"id":"as_in_context(context:Context,copy=false)-instance-method","html_id":"as_in_context(context:Context,copy=false)-instance-method","name":"as_in_context","doc":"Returns a copy of the array on the target device with the same\nvalues as this array.\n\n### Parameters\n* *context* (`Context`)\n  The target context.\n* *copy* (`Bool`, default = `false`)\n  By default, if the target context is the same as this context,\n  this array is returned and no copy is made. If *copy* is set\n  to `true`, and the target context is the same as this context,\n  a copy is returned instead.\n","summary":"<p>Returns a copy of the array on the target device with the same values as this array.</p>","abstract":false,"args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"Context"},{"name":"copy","doc":null,"default_value":"false","external_name":"copy","restriction":""}],"args_string":"(context : Context, copy = <span class=\"n\">false</span>)","args_html":"(context : <a href=\"../MXNet/Context.html\">Context</a>, copy = <span class=\"n\">false</span>)","location":{"filename":"src/mxnet/ndarray.cr","line_number":847,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/ndarray.cr#L847"},"def":{"name":"as_in_context","args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"Context"},{"name":"copy","doc":null,"default_value":"false","external_name":"copy","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if (!copy) && (context == self.context)\n  return self\nend\nNDArray.empty(shape: shape, dtype: dtype, ctx: context).tap do |res|\n  copy_to(res)\nend\n"}},{"id":"as_scalar-instance-method","html_id":"as_scalar-instance-method","name":"as_scalar","doc":"Returns a scalar whose value is copied from this array.\n\nThe array must have shape `[1]`.\n\n```\nMXNet::NDArray.zeros([1], dtype: :float64).as_scalar # => 0.0\n```\n","summary":"<p>Returns a scalar whose value is copied from this array.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/mxnet/ndarray.cr","line_number":862,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/ndarray.cr#L862"},"def":{"name":"as_scalar","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if shape == [1_u32]\nelse\n  raise(NDArrayException.new(\"the array is not scalar\"))\nend\nraw[0]\n"}},{"id":"as_type(dtype:::Symbol,copy=true)-instance-method","html_id":"as_type(dtype:::Symbol,copy=true)-instance-method","name":"as_type","doc":"Returns a copy of the array after casting to the specified type.\n\n### Parameters\n* *dtype* (`::Symbol`)\n  The type of the copy.\n* *copy* (`Bool`, default = `true`)\n  By default, `#as_type` always returns a newly allocated array\n  on the same context. If *copy* is set to `false`, and the\n  *dtype* requested is the same as this array's dtype, this\n  array is returned instead of a copy.\n","summary":"<p>Returns a copy of the array after casting to the specified type.</p>","abstract":false,"args":[{"name":"dtype","doc":null,"default_value":"","external_name":"dtype","restriction":"::Symbol"},{"name":"copy","doc":null,"default_value":"true","external_name":"copy","restriction":""}],"args_string":"(dtype : ::Symbol, copy = <span class=\"n\">true</span>)","args_html":"(dtype : ::Symbol, copy = <span class=\"n\">true</span>)","location":{"filename":"src/mxnet/ndarray.cr","line_number":828,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/ndarray.cr#L828"},"def":{"name":"as_type","args":[{"name":"dtype","doc":null,"default_value":"","external_name":"dtype","restriction":"::Symbol"},{"name":"copy","doc":null,"default_value":"true","external_name":"copy","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if (!copy) && (dtype == self.dtype)\n  return self\nend\nNDArray.empty(shape: shape, dtype: dtype, ctx: context).tap do |res|\n  copy_to(res)\nend\n"}},{"id":"attach_grad(grad_req=:write)-instance-method","html_id":"attach_grad(grad_req=:write)-instance-method","name":"attach_grad","doc":"Attach a gradient buffer to this array, so that `#backward`\ncan compute gradient with respect to it.\n\n### Parameters\n* *grad_req* (`::Symbol`, default = `:write`)\n  * `:write`: gradient will be overwritten on every backward pass\n  * `:add`: gradient will be added to existing value on every backward pass\n  * `:null`: do not compute gradient\n","summary":"<p>Attach a gradient buffer to this array, so that <code><a href=\"../MXNet/NDArray.html#backward(gradient=nil,retain_graph=false,train_mode=true)-instance-method\">#backward</a></code> can compute gradient with respect to it.</p>","abstract":false,"args":[{"name":"grad_req","doc":null,"default_value":":write","external_name":"grad_req","restriction":""}],"args_string":"(grad_req = <span class=\"n\">:write</span>)","args_html":"(grad_req = <span class=\"n\">:write</span>)","location":{"filename":"src/mxnet/ndarray.cr","line_number":80,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/ndarray.cr#L80"},"def":{"name":"attach_grad","args":[{"name":"grad_req","doc":null,"default_value":":write","external_name":"grad_req","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Autograd.mark_variables(self, Ops._zeros_like(self))\nself\n"}},{"id":"backward(gradient=nil,retain_graph=false,train_mode=true)-instance-method","html_id":"backward(gradient=nil,retain_graph=false,train_mode=true)-instance-method","name":"backward","doc":"Compute the gradients of this array with respect to previously\nmarked variables.\n\n### Parameters\n* *gradient* (`MXNet::NDArray`, optional)\n  Gradient with respect to this array.\n* *retain_graph* (`Bool`, default = `false`)\n  Whether to keep computation graph to differentiate again,\n  instead of clearing history and releasing memory.\n* *train_mode* (`Bool`, default = `true`)\n  Whether the backward pass is in training or predicting mode.\n","summary":"<p>Compute the gradients of this array with respect to previously marked variables.</p>","abstract":false,"args":[{"name":"gradient","doc":null,"default_value":"nil","external_name":"gradient","restriction":""},{"name":"retain_graph","doc":null,"default_value":"false","external_name":"retain_graph","restriction":""},{"name":"train_mode","doc":null,"default_value":"true","external_name":"train_mode","restriction":""}],"args_string":"(gradient = <span class=\"n\">nil</span>, retain_graph = <span class=\"n\">false</span>, train_mode = <span class=\"n\">true</span>)","args_html":"(gradient = <span class=\"n\">nil</span>, retain_graph = <span class=\"n\">false</span>, train_mode = <span class=\"n\">true</span>)","location":{"filename":"src/mxnet/ndarray.cr","line_number":97,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/ndarray.cr#L97"},"def":{"name":"backward","args":[{"name":"gradient","doc":null,"default_value":"nil","external_name":"gradient","restriction":""},{"name":"retain_graph","doc":null,"default_value":"false","external_name":"retain_graph","restriction":""},{"name":"train_mode","doc":null,"default_value":"true","external_name":"train_mode","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Autograd.backward(self, gradient, retain_graph, train_mode)\nself\n"}},{"id":"broadcast_add(rhs,**kwargs)-instance-method","html_id":"broadcast_add(rhs,**kwargs)-instance-method","name":"broadcast_add","doc":"Convenience fluent method for `.broadcast_add`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/NDArray.html#broadcast_add(lhs,rhs,**kwargs)-class-method\">.broadcast_add</a></code>.</p>","abstract":false,"args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"args_string":"(rhs, **kwargs)","args_html":"(rhs, **kwargs)","location":null,"def":{"name":"broadcast_add","args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.broadcast_add(self, rhs, **kwargs)"}},{"id":"broadcast_axis(**kwargs)-instance-method","html_id":"broadcast_axis(**kwargs)-instance-method","name":"broadcast_axis","doc":"Convenience fluent method for `.broadcast_axis`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/NDArray.html#broadcast_axis(data,**kwargs)-class-method\">.broadcast_axis</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"broadcast_axis","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.broadcast_axis(self, **kwargs)"}},{"id":"broadcast_div(rhs,**kwargs)-instance-method","html_id":"broadcast_div(rhs,**kwargs)-instance-method","name":"broadcast_div","doc":"Convenience fluent method for `.broadcast_div`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/NDArray.html#broadcast_div(lhs,rhs,**kwargs)-class-method\">.broadcast_div</a></code>.</p>","abstract":false,"args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"args_string":"(rhs, **kwargs)","args_html":"(rhs, **kwargs)","location":null,"def":{"name":"broadcast_div","args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.broadcast_div(self, rhs, **kwargs)"}},{"id":"broadcast_equal(rhs,**kwargs)-instance-method","html_id":"broadcast_equal(rhs,**kwargs)-instance-method","name":"broadcast_equal","doc":"Convenience fluent method for `.broadcast_equal`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/NDArray.html#broadcast_equal(lhs,rhs,**kwargs)-class-method\">.broadcast_equal</a></code>.</p>","abstract":false,"args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"args_string":"(rhs, **kwargs)","args_html":"(rhs, **kwargs)","location":null,"def":{"name":"broadcast_equal","args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.broadcast_equal(self, rhs, **kwargs)"}},{"id":"broadcast_greater(rhs,**kwargs)-instance-method","html_id":"broadcast_greater(rhs,**kwargs)-instance-method","name":"broadcast_greater","doc":"Convenience fluent method for `.broadcast_greater`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/NDArray.html#broadcast_greater(lhs,rhs,**kwargs)-class-method\">.broadcast_greater</a></code>.</p>","abstract":false,"args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"args_string":"(rhs, **kwargs)","args_html":"(rhs, **kwargs)","location":null,"def":{"name":"broadcast_greater","args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.broadcast_greater(self, rhs, **kwargs)"}},{"id":"broadcast_greater_equal(rhs,**kwargs)-instance-method","html_id":"broadcast_greater_equal(rhs,**kwargs)-instance-method","name":"broadcast_greater_equal","doc":"Convenience fluent method for `.broadcast_greater_equal`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/NDArray.html#broadcast_greater_equal(lhs,rhs,**kwargs)-class-method\">.broadcast_greater_equal</a></code>.</p>","abstract":false,"args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"args_string":"(rhs, **kwargs)","args_html":"(rhs, **kwargs)","location":null,"def":{"name":"broadcast_greater_equal","args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.broadcast_greater_equal(self, rhs, **kwargs)"}},{"id":"broadcast_lesser(rhs,**kwargs)-instance-method","html_id":"broadcast_lesser(rhs,**kwargs)-instance-method","name":"broadcast_lesser","doc":"Convenience fluent method for `.broadcast_lesser`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/NDArray.html#broadcast_lesser(lhs,rhs,**kwargs)-class-method\">.broadcast_lesser</a></code>.</p>","abstract":false,"args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"args_string":"(rhs, **kwargs)","args_html":"(rhs, **kwargs)","location":null,"def":{"name":"broadcast_lesser","args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.broadcast_lesser(self, rhs, **kwargs)"}},{"id":"broadcast_lesser_equal(rhs,**kwargs)-instance-method","html_id":"broadcast_lesser_equal(rhs,**kwargs)-instance-method","name":"broadcast_lesser_equal","doc":"Convenience fluent method for `.broadcast_lesser_equal`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/NDArray.html#broadcast_lesser_equal(lhs,rhs,**kwargs)-class-method\">.broadcast_lesser_equal</a></code>.</p>","abstract":false,"args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"args_string":"(rhs, **kwargs)","args_html":"(rhs, **kwargs)","location":null,"def":{"name":"broadcast_lesser_equal","args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.broadcast_lesser_equal(self, rhs, **kwargs)"}},{"id":"broadcast_like(rhs,**kwargs)-instance-method","html_id":"broadcast_like(rhs,**kwargs)-instance-method","name":"broadcast_like","doc":"Convenience fluent method for `.broadcast_like`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/NDArray.html#broadcast_like(lhs,rhs,**kwargs)-class-method\">.broadcast_like</a></code>.</p>","abstract":false,"args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"args_string":"(rhs, **kwargs)","args_html":"(rhs, **kwargs)","location":null,"def":{"name":"broadcast_like","args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.broadcast_like(self, rhs, **kwargs)"}},{"id":"broadcast_logical_and(rhs,**kwargs)-instance-method","html_id":"broadcast_logical_and(rhs,**kwargs)-instance-method","name":"broadcast_logical_and","doc":"Convenience fluent method for `.broadcast_logical_and`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/NDArray.html#broadcast_logical_and(lhs,rhs,**kwargs)-class-method\">.broadcast_logical_and</a></code>.</p>","abstract":false,"args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"args_string":"(rhs, **kwargs)","args_html":"(rhs, **kwargs)","location":null,"def":{"name":"broadcast_logical_and","args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.broadcast_logical_and(self, rhs, **kwargs)"}},{"id":"broadcast_logical_or(rhs,**kwargs)-instance-method","html_id":"broadcast_logical_or(rhs,**kwargs)-instance-method","name":"broadcast_logical_or","doc":"Convenience fluent method for `.broadcast_logical_or`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/NDArray.html#broadcast_logical_or(lhs,rhs,**kwargs)-class-method\">.broadcast_logical_or</a></code>.</p>","abstract":false,"args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"args_string":"(rhs, **kwargs)","args_html":"(rhs, **kwargs)","location":null,"def":{"name":"broadcast_logical_or","args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.broadcast_logical_or(self, rhs, **kwargs)"}},{"id":"broadcast_logical_xor(rhs,**kwargs)-instance-method","html_id":"broadcast_logical_xor(rhs,**kwargs)-instance-method","name":"broadcast_logical_xor","doc":"Convenience fluent method for `.broadcast_logical_xor`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/NDArray.html#broadcast_logical_xor(lhs,rhs,**kwargs)-class-method\">.broadcast_logical_xor</a></code>.</p>","abstract":false,"args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"args_string":"(rhs, **kwargs)","args_html":"(rhs, **kwargs)","location":null,"def":{"name":"broadcast_logical_xor","args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.broadcast_logical_xor(self, rhs, **kwargs)"}},{"id":"broadcast_maximum(rhs,**kwargs)-instance-method","html_id":"broadcast_maximum(rhs,**kwargs)-instance-method","name":"broadcast_maximum","doc":"Convenience fluent method for `.broadcast_maximum`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/NDArray.html#broadcast_maximum(lhs,rhs,**kwargs)-class-method\">.broadcast_maximum</a></code>.</p>","abstract":false,"args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"args_string":"(rhs, **kwargs)","args_html":"(rhs, **kwargs)","location":null,"def":{"name":"broadcast_maximum","args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.broadcast_maximum(self, rhs, **kwargs)"}},{"id":"broadcast_minimum(rhs,**kwargs)-instance-method","html_id":"broadcast_minimum(rhs,**kwargs)-instance-method","name":"broadcast_minimum","doc":"Convenience fluent method for `.broadcast_minimum`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/NDArray.html#broadcast_minimum(lhs,rhs,**kwargs)-class-method\">.broadcast_minimum</a></code>.</p>","abstract":false,"args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"args_string":"(rhs, **kwargs)","args_html":"(rhs, **kwargs)","location":null,"def":{"name":"broadcast_minimum","args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.broadcast_minimum(self, rhs, **kwargs)"}},{"id":"broadcast_minus(rhs,**kwargs)-instance-method","html_id":"broadcast_minus(rhs,**kwargs)-instance-method","name":"broadcast_minus","doc":"Convenience fluent method for `.broadcast_minus`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/NDArray.html#broadcast_minus(lhs,rhs,**kwargs)-class-method\">.broadcast_minus</a></code>.</p>","abstract":false,"args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"args_string":"(rhs, **kwargs)","args_html":"(rhs, **kwargs)","location":null,"def":{"name":"broadcast_minus","args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.broadcast_minus(self, rhs, **kwargs)"}},{"id":"broadcast_mul(rhs,**kwargs)-instance-method","html_id":"broadcast_mul(rhs,**kwargs)-instance-method","name":"broadcast_mul","doc":"Convenience fluent method for `.broadcast_mul`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/NDArray.html#broadcast_mul(lhs,rhs,**kwargs)-class-method\">.broadcast_mul</a></code>.</p>","abstract":false,"args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"args_string":"(rhs, **kwargs)","args_html":"(rhs, **kwargs)","location":null,"def":{"name":"broadcast_mul","args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.broadcast_mul(self, rhs, **kwargs)"}},{"id":"broadcast_not_equal(rhs,**kwargs)-instance-method","html_id":"broadcast_not_equal(rhs,**kwargs)-instance-method","name":"broadcast_not_equal","doc":"Convenience fluent method for `.broadcast_not_equal`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/NDArray.html#broadcast_not_equal(lhs,rhs,**kwargs)-class-method\">.broadcast_not_equal</a></code>.</p>","abstract":false,"args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"args_string":"(rhs, **kwargs)","args_html":"(rhs, **kwargs)","location":null,"def":{"name":"broadcast_not_equal","args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.broadcast_not_equal(self, rhs, **kwargs)"}},{"id":"broadcast_plus(rhs,**kwargs)-instance-method","html_id":"broadcast_plus(rhs,**kwargs)-instance-method","name":"broadcast_plus","doc":"Convenience fluent method for `.broadcast_plus`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/NDArray.html#broadcast_plus(lhs,rhs,**kwargs)-class-method\">.broadcast_plus</a></code>.</p>","abstract":false,"args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"args_string":"(rhs, **kwargs)","args_html":"(rhs, **kwargs)","location":null,"def":{"name":"broadcast_plus","args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.broadcast_plus(self, rhs, **kwargs)"}},{"id":"broadcast_power(rhs,**kwargs)-instance-method","html_id":"broadcast_power(rhs,**kwargs)-instance-method","name":"broadcast_power","doc":"Convenience fluent method for `.broadcast_power`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/NDArray.html#broadcast_power(lhs,rhs,**kwargs)-class-method\">.broadcast_power</a></code>.</p>","abstract":false,"args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"args_string":"(rhs, **kwargs)","args_html":"(rhs, **kwargs)","location":null,"def":{"name":"broadcast_power","args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.broadcast_power(self, rhs, **kwargs)"}},{"id":"broadcast_sub(rhs,**kwargs)-instance-method","html_id":"broadcast_sub(rhs,**kwargs)-instance-method","name":"broadcast_sub","doc":"Convenience fluent method for `.broadcast_sub`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/NDArray.html#broadcast_sub(lhs,rhs,**kwargs)-class-method\">.broadcast_sub</a></code>.</p>","abstract":false,"args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"args_string":"(rhs, **kwargs)","args_html":"(rhs, **kwargs)","location":null,"def":{"name":"broadcast_sub","args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.broadcast_sub(self, rhs, **kwargs)"}},{"id":"broadcast_to(**kwargs)-instance-method","html_id":"broadcast_to(**kwargs)-instance-method","name":"broadcast_to","doc":"Convenience fluent method for `.broadcast_to`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/NDArray.html#broadcast_to(data,**kwargs)-class-method\">.broadcast_to</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"broadcast_to","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.broadcast_to(self, **kwargs)"}},{"id":"cbrt(**kwargs)-instance-method","html_id":"cbrt(**kwargs)-instance-method","name":"cbrt","doc":"Convenience fluent method for `.cbrt`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/NDArray.html#cbrt(data,**kwargs)-class-method\">.cbrt</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"cbrt","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.cbrt(self, **kwargs)"}},{"id":"ceil(**kwargs)-instance-method","html_id":"ceil(**kwargs)-instance-method","name":"ceil","doc":"Convenience fluent method for `.ceil`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/NDArray.html#ceil(data,**kwargs)-class-method\">.ceil</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"ceil","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.ceil(self, **kwargs)"}},{"id":"clip(a_min,a_max,**kwargs)-instance-method","html_id":"clip(a_min,a_max,**kwargs)-instance-method","name":"clip","doc":"Convenience fluent method for `.clip`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/NDArray.html#clip(data,a_min,a_max,**kwargs)-class-method\">.clip</a></code>.</p>","abstract":false,"args":[{"name":"a_min","doc":null,"default_value":"","external_name":"a_min","restriction":""},{"name":"a_max","doc":null,"default_value":"","external_name":"a_max","restriction":""}],"args_string":"(a_min, a_max, **kwargs)","args_html":"(a_min, a_max, **kwargs)","location":null,"def":{"name":"clip","args":[{"name":"a_min","doc":null,"default_value":"","external_name":"a_min","restriction":""},{"name":"a_max","doc":null,"default_value":"","external_name":"a_max","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.clip(self, a_min, a_max, **kwargs)"}},{"id":"context-instance-method","html_id":"context-instance-method","name":"context","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/mxnet/ndarray.cr","line_number":53,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/ndarray.cr#L53"},"def":{"name":"context","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Internal.libcall(MXNDArrayGetContext, @handle, out dev_type, out dev_id)\nContext.new(dev_type, dev_id)\n"}},{"id":"copy_to(other:Context|self)-instance-method","html_id":"copy_to(other:Context|self)-instance-method","name":"copy_to","doc":"Copies the values of this array to another array.\n\nIf *other* is a `NDArray` object, then `other.shape` and\n`self.shape` must be the same. This method copies the data from\n*self* to *other*.\n\nIf *other* is a `Context` object, then a new `NDArray` will be\ncreated on the target context, and the method copies the data\nfrom *self* to the new array.\n\n### Parameters\n* *other* (`NDArray` or `Context`)\n  The destination array or context.\n","summary":"<p>Copies the values of this array to another array.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Context | self"}],"args_string":"(other : Context | <span class=\"k\">self</span>)","args_html":"(other : <a href=\"../MXNet/Context.html\">Context</a> | <span class=\"k\">self</span>)","location":{"filename":"src/mxnet/ndarray.cr","line_number":804,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/ndarray.cr#L804"},"def":{"name":"copy_to","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Context | self"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if other.is_a?(self)\n  if self.handle == other.handle\n    raise(NDArrayException.new(\"cannot copy an array onto itself\"))\n  end\n  Internal._copyto(self, out: other)\nelse\n  NDArray.empty(shape: shape, dtype: dtype, ctx: other).tap do |res|\n    Internal._copyto(self, out: res)\n  end\nend"}},{"id":"cos(**kwargs)-instance-method","html_id":"cos(**kwargs)-instance-method","name":"cos","doc":"Convenience fluent method for `.cos`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/NDArray.html#cos(data,**kwargs)-class-method\">.cos</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"cos","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.cos(self, **kwargs)"}},{"id":"cosh(**kwargs)-instance-method","html_id":"cosh(**kwargs)-instance-method","name":"cosh","doc":"Convenience fluent method for `.cosh`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/NDArray.html#cosh(data,**kwargs)-class-method\">.cosh</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"cosh","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.cosh(self, **kwargs)"}},{"id":"degrees(**kwargs)-instance-method","html_id":"degrees(**kwargs)-instance-method","name":"degrees","doc":"Convenience fluent method for `.degrees`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/NDArray.html#degrees(data,**kwargs)-class-method\">.degrees</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"degrees","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.degrees(self, **kwargs)"}},{"id":"diag(**kwargs)-instance-method","html_id":"diag(**kwargs)-instance-method","name":"diag","doc":"Convenience fluent method for `.diag`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/NDArray.html#diag(data,**kwargs)-class-method\">.diag</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"diag","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.diag(self, **kwargs)"}},{"id":"dot(rhs,**kwargs)-instance-method","html_id":"dot(rhs,**kwargs)-instance-method","name":"dot","doc":"Convenience fluent method for `.dot`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/NDArray.html#dot(lhs,rhs,**kwargs)-class-method\">.dot</a></code>.</p>","abstract":false,"args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"args_string":"(rhs, **kwargs)","args_html":"(rhs, **kwargs)","location":null,"def":{"name":"dot","args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.dot(self, rhs, **kwargs)"}},{"id":"dtype-instance-method","html_id":"dtype-instance-method","name":"dtype","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/mxnet/ndarray.cr","line_number":58,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/ndarray.cr#L58"},"def":{"name":"dtype","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Internal.libcall(MXNDArrayGetDType, @handle, out dtype)\nDT2T[dtype]\n"}},{"id":"exp(**kwargs)-instance-method","html_id":"exp(**kwargs)-instance-method","name":"exp","doc":"Convenience fluent method for `.exp`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/NDArray.html#exp(data,**kwargs)-class-method\">.exp</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"exp","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.exp(self, **kwargs)"}},{"id":"expand_dims(axis,**kwargs)-instance-method","html_id":"expand_dims(axis,**kwargs)-instance-method","name":"expand_dims","doc":"Convenience fluent method for `.expand_dims`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/NDArray.html#expand_dims(data,axis,**kwargs)-class-method\">.expand_dims</a></code>.</p>","abstract":false,"args":[{"name":"axis","doc":null,"default_value":"","external_name":"axis","restriction":""}],"args_string":"(axis, **kwargs)","args_html":"(axis, **kwargs)","location":null,"def":{"name":"expand_dims","args":[{"name":"axis","doc":null,"default_value":"","external_name":"axis","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.expand_dims(self, axis, **kwargs)"}},{"id":"expm1(**kwargs)-instance-method","html_id":"expm1(**kwargs)-instance-method","name":"expm1","doc":"Convenience fluent method for `.expm1`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/NDArray.html#expm1(data,**kwargs)-class-method\">.expm1</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"expm1","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.expm1(self, **kwargs)"}},{"id":"fix(**kwargs)-instance-method","html_id":"fix(**kwargs)-instance-method","name":"fix","doc":"Convenience fluent method for `.fix`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/NDArray.html#fix(data,**kwargs)-class-method\">.fix</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"fix","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.fix(self, **kwargs)"}},{"id":"flatten(**kwargs)-instance-method","html_id":"flatten(**kwargs)-instance-method","name":"flatten","doc":"Convenience fluent method for `.flatten`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/NDArray.html#flatten(data,**kwargs)-class-method\">.flatten</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"flatten","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.flatten(self, **kwargs)"}},{"id":"flip(axis,**kwargs)-instance-method","html_id":"flip(axis,**kwargs)-instance-method","name":"flip","doc":"Convenience fluent method for `.flip`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/NDArray.html#flip(data,axis,**kwargs)-class-method\">.flip</a></code>.</p>","abstract":false,"args":[{"name":"axis","doc":null,"default_value":"","external_name":"axis","restriction":""}],"args_string":"(axis, **kwargs)","args_html":"(axis, **kwargs)","location":null,"def":{"name":"flip","args":[{"name":"axis","doc":null,"default_value":"","external_name":"axis","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.flip(self, axis, **kwargs)"}},{"id":"floor(**kwargs)-instance-method","html_id":"floor(**kwargs)-instance-method","name":"floor","doc":"Convenience fluent method for `.floor`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/NDArray.html#floor(data,**kwargs)-class-method\">.floor</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"floor","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.floor(self, **kwargs)"}},{"id":"gamma(**kwargs)-instance-method","html_id":"gamma(**kwargs)-instance-method","name":"gamma","doc":"Convenience fluent method for `.gamma`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/NDArray.html#gamma(data,**kwargs)-class-method\">.gamma</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"gamma","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.gamma(self, **kwargs)"}},{"id":"gammaln(**kwargs)-instance-method","html_id":"gammaln(**kwargs)-instance-method","name":"gammaln","doc":"Convenience fluent method for `.gammaln`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/NDArray.html#gammaln(data,**kwargs)-class-method\">.gammaln</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"gammaln","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.gammaln(self, **kwargs)"}},{"id":"grad-instance-method","html_id":"grad-instance-method","name":"grad","doc":"Returns gradient buffer attached to this array.\n","summary":"<p>Returns gradient buffer attached to this array.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/mxnet/ndarray.cr","line_number":65,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/ndarray.cr#L65"},"def":{"name":"grad","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Internal.libcall(MXNDArrayGetGrad, @handle, out grad_handle)\nif grad_handle.null?\n  raise(NDArrayException.new(\"no gradient is attached\"))\nend\nNDArray.new(grad_handle)\n"}},{"id":"log(**kwargs)-instance-method","html_id":"log(**kwargs)-instance-method","name":"log","doc":"Convenience fluent method for `.log`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/NDArray.html#log(data,**kwargs)-class-method\">.log</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"log","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.log(self, **kwargs)"}},{"id":"log10(**kwargs)-instance-method","html_id":"log10(**kwargs)-instance-method","name":"log10","doc":"Convenience fluent method for `.log10`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/NDArray.html#log10(data,**kwargs)-class-method\">.log10</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"log10","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.log10(self, **kwargs)"}},{"id":"log1p(**kwargs)-instance-method","html_id":"log1p(**kwargs)-instance-method","name":"log1p","doc":"Convenience fluent method for `.log1p`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/NDArray.html#log1p(data,**kwargs)-class-method\">.log1p</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"log1p","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.log1p(self, **kwargs)"}},{"id":"log2(**kwargs)-instance-method","html_id":"log2(**kwargs)-instance-method","name":"log2","doc":"Convenience fluent method for `.log2`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/NDArray.html#log2(data,**kwargs)-class-method\">.log2</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"log2","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.log2(self, **kwargs)"}},{"id":"log_softmax(**kwargs)-instance-method","html_id":"log_softmax(**kwargs)-instance-method","name":"log_softmax","doc":"Convenience fluent method for `.log_softmax`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/NDArray.html#log_softmax(data,**kwargs)-class-method\">.log_softmax</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"log_softmax","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.log_softmax(self, **kwargs)"}},{"id":"logical_not(**kwargs)-instance-method","html_id":"logical_not(**kwargs)-instance-method","name":"logical_not","doc":"Convenience fluent method for `.logical_not`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/NDArray.html#logical_not(data,**kwargs)-class-method\">.logical_not</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"logical_not","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.logical_not(self, **kwargs)"}},{"id":"max(**kwargs)-instance-method","html_id":"max(**kwargs)-instance-method","name":"max","doc":"Convenience fluent method for `.max`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/NDArray.html#max(data,**kwargs)-class-method\">.max</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"max","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.max(self, **kwargs)"}},{"id":"mean(**kwargs)-instance-method","html_id":"mean(**kwargs)-instance-method","name":"mean","doc":"Convenience fluent method for `.mean`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/NDArray.html#mean(data,**kwargs)-class-method\">.mean</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"mean","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.mean(self, **kwargs)"}},{"id":"min(**kwargs)-instance-method","html_id":"min(**kwargs)-instance-method","name":"min","doc":"Convenience fluent method for `.min`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/NDArray.html#min(data,**kwargs)-class-method\">.min</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"min","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.min(self, **kwargs)"}},{"id":"nanprod(**kwargs)-instance-method","html_id":"nanprod(**kwargs)-instance-method","name":"nanprod","doc":"Convenience fluent method for `.nanprod`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/NDArray.html#nanprod(data,**kwargs)-class-method\">.nanprod</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"nanprod","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.nanprod(self, **kwargs)"}},{"id":"nansum(**kwargs)-instance-method","html_id":"nansum(**kwargs)-instance-method","name":"nansum","doc":"Convenience fluent method for `.nansum`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/NDArray.html#nansum(data,**kwargs)-class-method\">.nansum</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"nansum","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.nansum(self, **kwargs)"}},{"id":"norm(**kwargs)-instance-method","html_id":"norm(**kwargs)-instance-method","name":"norm","doc":"Convenience fluent method for `.norm`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/NDArray.html#norm(data,**kwargs)-class-method\">.norm</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"norm","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.norm(self, **kwargs)"}},{"id":"one_hot(depth,**kwargs)-instance-method","html_id":"one_hot(depth,**kwargs)-instance-method","name":"one_hot","doc":"Convenience fluent method for `.one_hot`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/NDArray.html#one_hot(indices,depth,**kwargs)-class-method\">.one_hot</a></code>.</p>","abstract":false,"args":[{"name":"depth","doc":null,"default_value":"","external_name":"depth","restriction":""}],"args_string":"(depth, **kwargs)","args_html":"(depth, **kwargs)","location":null,"def":{"name":"one_hot","args":[{"name":"depth","doc":null,"default_value":"","external_name":"depth","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.one_hot(self, depth, **kwargs)"}},{"id":"ones_like(**kwargs)-instance-method","html_id":"ones_like(**kwargs)-instance-method","name":"ones_like","doc":"Convenience fluent method for `.ones_like`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/NDArray.html#ones_like(data,**kwargs)-class-method\">.ones_like</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"ones_like","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.ones_like(self, **kwargs)"}},{"id":"pick(index,**kwargs)-instance-method","html_id":"pick(index,**kwargs)-instance-method","name":"pick","doc":"Convenience fluent method for `.pick`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/NDArray.html#pick(data,index,**kwargs)-class-method\">.pick</a></code>.</p>","abstract":false,"args":[{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":""}],"args_string":"(index, **kwargs)","args_html":"(index, **kwargs)","location":null,"def":{"name":"pick","args":[{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.pick(self, index, **kwargs)"}},{"id":"prod(**kwargs)-instance-method","html_id":"prod(**kwargs)-instance-method","name":"prod","doc":"Convenience fluent method for `.prod`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/NDArray.html#prod(data,**kwargs)-class-method\">.prod</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"prod","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.prod(self, **kwargs)"}},{"id":"radians(**kwargs)-instance-method","html_id":"radians(**kwargs)-instance-method","name":"radians","doc":"Convenience fluent method for `.radians`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/NDArray.html#radians(data,**kwargs)-class-method\">.radians</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"radians","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.radians(self, **kwargs)"}},{"id":"rcbrt(**kwargs)-instance-method","html_id":"rcbrt(**kwargs)-instance-method","name":"rcbrt","doc":"Convenience fluent method for `.rcbrt`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/NDArray.html#rcbrt(data,**kwargs)-class-method\">.rcbrt</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"rcbrt","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.rcbrt(self, **kwargs)"}},{"id":"reciprocal(**kwargs)-instance-method","html_id":"reciprocal(**kwargs)-instance-method","name":"reciprocal","doc":"Convenience fluent method for `.reciprocal`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/NDArray.html#reciprocal(data,**kwargs)-class-method\">.reciprocal</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"reciprocal","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.reciprocal(self, **kwargs)"}},{"id":"relu(**kwargs)-instance-method","html_id":"relu(**kwargs)-instance-method","name":"relu","doc":"Convenience fluent method for `.relu`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/NDArray.html#relu(data,**kwargs)-class-method\">.relu</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"relu","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.relu(self, **kwargs)"}},{"id":"reshape(shape,**kwargs)-instance-method","html_id":"reshape(shape,**kwargs)-instance-method","name":"reshape","doc":"Convenience fluent method for `.reshape`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/NDArray.html#reshape(data,shape,**kwargs)-class-method\">.reshape</a></code>.</p>","abstract":false,"args":[{"name":"shape","doc":null,"default_value":"","external_name":"shape","restriction":""}],"args_string":"(shape, **kwargs)","args_html":"(shape, **kwargs)","location":null,"def":{"name":"reshape","args":[{"name":"shape","doc":null,"default_value":"","external_name":"shape","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.reshape(self, shape, **kwargs)"}},{"id":"reshape_like(rhs,**kwargs)-instance-method","html_id":"reshape_like(rhs,**kwargs)-instance-method","name":"reshape_like","doc":"Convenience fluent method for `.reshape_like`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/NDArray.html#reshape_like(lhs,rhs,**kwargs)-class-method\">.reshape_like</a></code>.</p>","abstract":false,"args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"args_string":"(rhs, **kwargs)","args_html":"(rhs, **kwargs)","location":null,"def":{"name":"reshape_like","args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.reshape_like(self, rhs, **kwargs)"}},{"id":"rint(**kwargs)-instance-method","html_id":"rint(**kwargs)-instance-method","name":"rint","doc":"Convenience fluent method for `.rint`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/NDArray.html#rint(data,**kwargs)-class-method\">.rint</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"rint","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.rint(self, **kwargs)"}},{"id":"round(**kwargs)-instance-method","html_id":"round(**kwargs)-instance-method","name":"round","doc":"Convenience fluent method for `.round`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/NDArray.html#round(data,**kwargs)-class-method\">.round</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"round","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.round(self, **kwargs)"}},{"id":"rsqrt(**kwargs)-instance-method","html_id":"rsqrt(**kwargs)-instance-method","name":"rsqrt","doc":"Convenience fluent method for `.rsqrt`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/NDArray.html#rsqrt(data,**kwargs)-class-method\">.rsqrt</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"rsqrt","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.rsqrt(self, **kwargs)"}},{"id":"shape-instance-method","html_id":"shape-instance-method","name":"shape","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/mxnet/ndarray.cr","line_number":48,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/ndarray.cr#L48"},"def":{"name":"shape","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Internal.libcall(MXNDArrayGetShape, @handle, out dim, out pdata)\n(pdata.to_slice(dim)).map(&.to_i32).to_a\n"}},{"id":"shape_array(**kwargs)-instance-method","html_id":"shape_array(**kwargs)-instance-method","name":"shape_array","doc":"Convenience fluent method for `.shape_array`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/NDArray.html#shape_array(data,**kwargs)-class-method\">.shape_array</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"shape_array","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.shape_array(self, **kwargs)"}},{"id":"shuffle(**kwargs)-instance-method","html_id":"shuffle(**kwargs)-instance-method","name":"shuffle","doc":"Convenience fluent method for `.shuffle`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/NDArray.html#shuffle(data,**kwargs)-class-method\">.shuffle</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"shuffle","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.shuffle(self, **kwargs)"}},{"id":"sigmoid(**kwargs)-instance-method","html_id":"sigmoid(**kwargs)-instance-method","name":"sigmoid","doc":"Convenience fluent method for `.sigmoid`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/NDArray.html#sigmoid(data,**kwargs)-class-method\">.sigmoid</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"sigmoid","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.sigmoid(self, **kwargs)"}},{"id":"sign(**kwargs)-instance-method","html_id":"sign(**kwargs)-instance-method","name":"sign","doc":"Convenience fluent method for `.sign`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/NDArray.html#sign(data,**kwargs)-class-method\">.sign</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"sign","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.sign(self, **kwargs)"}},{"id":"sin(**kwargs)-instance-method","html_id":"sin(**kwargs)-instance-method","name":"sin","doc":"Convenience fluent method for `.sin`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/NDArray.html#sin(data,**kwargs)-class-method\">.sin</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"sin","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.sin(self, **kwargs)"}},{"id":"sinh(**kwargs)-instance-method","html_id":"sinh(**kwargs)-instance-method","name":"sinh","doc":"Convenience fluent method for `.sinh`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/NDArray.html#sinh(data,**kwargs)-class-method\">.sinh</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"sinh","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.sinh(self, **kwargs)"}},{"id":"size-instance-method","html_id":"size-instance-method","name":"size","doc":"Returns the number of elements in this container.","summary":"<p>Returns the number of elements in this container.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/mxnet/ndarray.cr","line_number":651,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/ndarray.cr#L651"},"def":{"name":"size","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"shape[0]"}},{"id":"size_array(**kwargs)-instance-method","html_id":"size_array(**kwargs)-instance-method","name":"size_array","doc":"Convenience fluent method for `.size_array`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/NDArray.html#size_array(data,**kwargs)-class-method\">.size_array</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"size_array","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.size_array(self, **kwargs)"}},{"id":"slice(begin_begin,end_end,**kwargs)-instance-method","html_id":"slice(begin_begin,end_end,**kwargs)-instance-method","name":"slice","doc":"Convenience fluent method for `.slice`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/NDArray.html#slice(data,begin_begin,end_end,**kwargs)-class-method\">.slice</a></code>.</p>","abstract":false,"args":[{"name":"_begin","doc":null,"default_value":"","external_name":"begin","restriction":""},{"name":"_end","doc":null,"default_value":"","external_name":"end","restriction":""}],"args_string":"(begin _begin, end _end, **kwargs)","args_html":"(begin _begin, end _end, **kwargs)","location":null,"def":{"name":"slice","args":[{"name":"_begin","doc":null,"default_value":"","external_name":"begin","restriction":""},{"name":"_end","doc":null,"default_value":"","external_name":"end","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.slice(self, _begin, _end, **kwargs)"}},{"id":"slice_axis(axis,begin_begin,end_end,**kwargs)-instance-method","html_id":"slice_axis(axis,begin_begin,end_end,**kwargs)-instance-method","name":"slice_axis","doc":"Convenience fluent method for `.slice_axis`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/NDArray.html#slice_axis(data,axis,begin_begin,end_end,**kwargs)-class-method\">.slice_axis</a></code>.</p>","abstract":false,"args":[{"name":"axis","doc":null,"default_value":"","external_name":"axis","restriction":""},{"name":"_begin","doc":null,"default_value":"","external_name":"begin","restriction":""},{"name":"_end","doc":null,"default_value":"","external_name":"end","restriction":""}],"args_string":"(axis, begin _begin, end _end, **kwargs)","args_html":"(axis, begin _begin, end _end, **kwargs)","location":null,"def":{"name":"slice_axis","args":[{"name":"axis","doc":null,"default_value":"","external_name":"axis","restriction":""},{"name":"_begin","doc":null,"default_value":"","external_name":"begin","restriction":""},{"name":"_end","doc":null,"default_value":"","external_name":"end","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.slice_axis(self, axis, _begin, _end, **kwargs)"}},{"id":"slice_like(shape_like,**kwargs)-instance-method","html_id":"slice_like(shape_like,**kwargs)-instance-method","name":"slice_like","doc":"Convenience fluent method for `.slice_like`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/NDArray.html#slice_like(data,shape_like,**kwargs)-class-method\">.slice_like</a></code>.</p>","abstract":false,"args":[{"name":"shape_like","doc":null,"default_value":"","external_name":"shape_like","restriction":""}],"args_string":"(shape_like, **kwargs)","args_html":"(shape_like, **kwargs)","location":null,"def":{"name":"slice_like","args":[{"name":"shape_like","doc":null,"default_value":"","external_name":"shape_like","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.slice_like(self, shape_like, **kwargs)"}},{"id":"softmax(**kwargs)-instance-method","html_id":"softmax(**kwargs)-instance-method","name":"softmax","doc":"Convenience fluent method for `.softmax`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/NDArray.html#softmax(data,**kwargs)-class-method\">.softmax</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"softmax","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.softmax(self, **kwargs)"}},{"id":"sort(**kwargs)-instance-method","html_id":"sort(**kwargs)-instance-method","name":"sort","doc":"Convenience fluent method for `.sort`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/NDArray.html#sort(data,**kwargs)-class-method\">.sort</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"sort","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.sort(self, **kwargs)"}},{"id":"sqrt(**kwargs)-instance-method","html_id":"sqrt(**kwargs)-instance-method","name":"sqrt","doc":"Convenience fluent method for `.sqrt`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/NDArray.html#sqrt(data,**kwargs)-class-method\">.sqrt</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"sqrt","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.sqrt(self, **kwargs)"}},{"id":"square(**kwargs)-instance-method","html_id":"square(**kwargs)-instance-method","name":"square","doc":"Convenience fluent method for `.square`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/NDArray.html#square(data,**kwargs)-class-method\">.square</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"square","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.square(self, **kwargs)"}},{"id":"sum(**kwargs)-instance-method","html_id":"sum(**kwargs)-instance-method","name":"sum","doc":"Convenience fluent method for `.sum`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/NDArray.html#sum(data,**kwargs)-class-method\">.sum</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"sum","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.sum(self, **kwargs)"}},{"id":"take(indices,**kwargs)-instance-method","html_id":"take(indices,**kwargs)-instance-method","name":"take","doc":"Convenience fluent method for `.take`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/NDArray.html#take(a,indices,**kwargs)-class-method\">.take</a></code>.</p>","abstract":false,"args":[{"name":"indices","doc":null,"default_value":"","external_name":"indices","restriction":""}],"args_string":"(indices, **kwargs)","args_html":"(indices, **kwargs)","location":null,"def":{"name":"take","args":[{"name":"indices","doc":null,"default_value":"","external_name":"indices","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.take(self, indices, **kwargs)"}},{"id":"tan(**kwargs)-instance-method","html_id":"tan(**kwargs)-instance-method","name":"tan","doc":"Convenience fluent method for `.tan`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/NDArray.html#tan(data,**kwargs)-class-method\">.tan</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"tan","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.tan(self, **kwargs)"}},{"id":"tanh(**kwargs)-instance-method","html_id":"tanh(**kwargs)-instance-method","name":"tanh","doc":"Convenience fluent method for `.tanh`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/NDArray.html#tanh(data,**kwargs)-class-method\">.tanh</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"tanh","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.tanh(self, **kwargs)"}},{"id":"tile(reps,**kwargs)-instance-method","html_id":"tile(reps,**kwargs)-instance-method","name":"tile","doc":"Convenience fluent method for `.tile`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/NDArray.html#tile(data,reps,**kwargs)-class-method\">.tile</a></code>.</p>","abstract":false,"args":[{"name":"reps","doc":null,"default_value":"","external_name":"reps","restriction":""}],"args_string":"(reps, **kwargs)","args_html":"(reps, **kwargs)","location":null,"def":{"name":"tile","args":[{"name":"reps","doc":null,"default_value":"","external_name":"reps","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.tile(self, reps, **kwargs)"}},{"id":"to_a(as:Array(Array(Array(T))).class):Array(Array(Array(Array(T))))forallT-instance-method","html_id":"to_a(as:Array(Array(Array(T))).class):Array(Array(Array(Array(T))))forallT-instance-method","name":"to_a","doc":"Returns an `Array` with values copied from this array.\n\nOnly supports arrays up to 4 dimensions (`shape.size <= 4`).\n\n```\nMXNet::NDArray.zeros([4], dtype: :float32).to_a(Float32) # => [0.0, 0.0, 0.0, 0.0]\n```\n\nTo return a 1-dimensional array without checking and restricting\nthe return type, see `#to_a`.\n\n### Parameters\n* *as* (`Class`)\n  The class of the contained item. For example, to check and\n  restrict the return type to `Array(Float32)` specify\n  `Float32`.\n","summary":"<p>Returns an <code>Array</code> with values copied from this array.</p>","abstract":false,"args":[{"name":"as","doc":null,"default_value":"","external_name":"as","restriction":"Array(Array(Array(T))).class"}],"args_string":"(as : <span class=\"t\">Array</span>(<span class=\"t\">Array</span>(<span class=\"t\">Array</span>(<span class=\"t\">T</span>))).<span class=\"k\">class</span>) : Array(Array(Array(Array(T)))) forall T","args_html":"(as : <span class=\"t\">Array</span>(<span class=\"t\">Array</span>(<span class=\"t\">Array</span>(<span class=\"t\">T</span>))).<span class=\"k\">class</span>) : Array(Array(Array(Array(<a href=\"../MXNet/NDArray.html\">T</a>)))) forall T","location":{"filename":"src/mxnet/ndarray.cr","line_number":906,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/ndarray.cr#L906"},"def":{"name":"to_a","args":[{"name":"as","doc":null,"default_value":"","external_name":"as","restriction":"Array(Array(Array(T))).class"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(Array(Array(Array(T))))","visibility":"Public","body":"{% puts(@def) %}\nif shape.size == 4\nelse\n  raise(NDArrayException.new(\"the array must have 4 dimensions\"))\nend\n(((raw.in_groups_of(shape[-1], T.zero)).in_groups_of(shape[-2], [] of T)).in_groups_of(shape[-3], [] of Array(T))).as(Array(Array(Array(Array(T)))))\n"}},{"id":"to_a(as:Array(Array(T)).class):Array(Array(Array(T)))forallT-instance-method","html_id":"to_a(as:Array(Array(T)).class):Array(Array(Array(T)))forallT-instance-method","name":"to_a","doc":"Returns an `Array` with values copied from this array.\n\nOnly supports arrays up to 4 dimensions (`shape.size <= 4`).\n\n```\nMXNet::NDArray.zeros([4], dtype: :float32).to_a(Float32) # => [0.0, 0.0, 0.0, 0.0]\n```\n\nTo return a 1-dimensional array without checking and restricting\nthe return type, see `#to_a`.\n\n### Parameters\n* *as* (`Class`)\n  The class of the contained item. For example, to check and\n  restrict the return type to `Array(Float32)` specify\n  `Float32`.\n","summary":"<p>Returns an <code>Array</code> with values copied from this array.</p>","abstract":false,"args":[{"name":"as","doc":null,"default_value":"","external_name":"as","restriction":"Array(Array(T)).class"}],"args_string":"(as : <span class=\"t\">Array</span>(<span class=\"t\">Array</span>(<span class=\"t\">T</span>)).<span class=\"k\">class</span>) : Array(Array(Array(T))) forall T","args_html":"(as : <span class=\"t\">Array</span>(<span class=\"t\">Array</span>(<span class=\"t\">T</span>)).<span class=\"k\">class</span>) : Array(Array(Array(<a href=\"../MXNet/NDArray.html\">T</a>))) forall T","location":{"filename":"src/mxnet/ndarray.cr","line_number":919,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/ndarray.cr#L919"},"def":{"name":"to_a","args":[{"name":"as","doc":null,"default_value":"","external_name":"as","restriction":"Array(Array(T)).class"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(Array(Array(T)))","visibility":"Public","body":"if shape.size == 3\nelse\n  raise(NDArrayException.new(\"the array must have 3 dimensions\"))\nend\n((raw.in_groups_of(shape[-1], T.zero)).in_groups_of(shape[-2], [] of T)).as(Array(Array(Array(T))))\n"}},{"id":"to_a(as:Array(T).class):Array(Array(T))forallT-instance-method","html_id":"to_a(as:Array(T).class):Array(Array(T))forallT-instance-method","name":"to_a","doc":"Returns an `Array` with values copied from this array.\n\nOnly supports arrays up to 4 dimensions (`shape.size <= 4`).\n\n```\nMXNet::NDArray.zeros([4], dtype: :float32).to_a(Float32) # => [0.0, 0.0, 0.0, 0.0]\n```\n\nTo return a 1-dimensional array without checking and restricting\nthe return type, see `#to_a`.\n\n### Parameters\n* *as* (`Class`)\n  The class of the contained item. For example, to check and\n  restrict the return type to `Array(Float32)` specify\n  `Float32`.\n","summary":"<p>Returns an <code>Array</code> with values copied from this array.</p>","abstract":false,"args":[{"name":"as","doc":null,"default_value":"","external_name":"as","restriction":"Array(T).class"}],"args_string":"(as : <span class=\"t\">Array</span>(<span class=\"t\">T</span>).<span class=\"k\">class</span>) : Array(Array(T)) forall T","args_html":"(as : <span class=\"t\">Array</span>(<span class=\"t\">T</span>).<span class=\"k\">class</span>) : Array(Array(<a href=\"../MXNet/NDArray.html\">T</a>)) forall T","location":{"filename":"src/mxnet/ndarray.cr","line_number":930,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/ndarray.cr#L930"},"def":{"name":"to_a","args":[{"name":"as","doc":null,"default_value":"","external_name":"as","restriction":"Array(T).class"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(Array(T))","visibility":"Public","body":"if shape.size == 2\nelse\n  raise(NDArrayException.new(\"the array must have 2 dimensions\"))\nend\n(raw.in_groups_of(shape[-1], T.zero)).as(Array(Array(T)))\n"}},{"id":"to_a(as:T.class):Array(T)forallT-instance-method","html_id":"to_a(as:T.class):Array(T)forallT-instance-method","name":"to_a","doc":"Returns an `Array` with values copied from this array.\n\nOnly supports arrays up to 4 dimensions (`shape.size <= 4`).\n\n```\nMXNet::NDArray.zeros([4], dtype: :float32).to_a(Float32) # => [0.0, 0.0, 0.0, 0.0]\n```\n\nTo return a 1-dimensional array without checking and restricting\nthe return type, see `#to_a`.\n\n### Parameters\n* *as* (`Class`)\n  The class of the contained item. For example, to check and\n  restrict the return type to `Array(Float32)` specify\n  `Float32`.\n","summary":"<p>Returns an <code>Array</code> with values copied from this array.</p>","abstract":false,"args":[{"name":"as","doc":null,"default_value":"","external_name":"as","restriction":"T.class"}],"args_string":"(as : <span class=\"t\">T</span>.<span class=\"k\">class</span>) : Array(T) forall T","args_html":"(as : <span class=\"t\">T</span>.<span class=\"k\">class</span>) : Array(<a href=\"../MXNet/NDArray.html\">T</a>) forall T","location":{"filename":"src/mxnet/ndarray.cr","line_number":940,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/ndarray.cr#L940"},"def":{"name":"to_a","args":[{"name":"as","doc":null,"default_value":"","external_name":"as","restriction":"T.class"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(T)","visibility":"Public","body":"if shape.size == 1\nelse\n  raise(NDArrayException.new(\"the array must have 1 dimension\"))\nend\nraw.as(Array(T))\n"}},{"id":"to_a-instance-method","html_id":"to_a-instance-method","name":"to_a","doc":"Returns an `Array` with values copied from this array.\n\nOnly supports 1-dimensional arrays (`shape.size == 1`).\n\n```\nMXNet::NDArray.zeros([4], dtype: :float64).to_a # => [0.0, 0.0, 0.0, 0.0]\n```\n\nThe return type of this method is the union of all possible\narray types (e.g. `Array(Float32) | Array(Float64) | ...`). To\nreturn an array and check and restrict the return type in a\nsingle operation, see `#to_a(as)`.\n","summary":"<p>Returns an <code>Array</code> with values copied from this array.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/mxnet/ndarray.cr","line_number":882,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/ndarray.cr#L882"},"def":{"name":"to_a","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if shape.size == 1\nelse\n  raise(NDArrayException.new(\"the array must have only 1 dimension\"))\nend\nraw\n"}},{"id":"to_s(io)-instance-method","html_id":"to_s(io)-instance-method","name":"to_s","doc":null,"summary":null,"abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/mxnet/ndarray.cr","line_number":948,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/ndarray.cr#L948"},"def":{"name":"to_s","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"data = [\"[]\"]\nif shape.product > 0\n  data = raw\n  shape.reverse.each do |dim|\n    data = (data.in_groups_of(dim)).map do |group|\n      \"[#{group.join(\", \")}]\"\n    end\n  end\nend\ndata.each do |line|\n  (io << line) << \"\\n\"\nend\nio << \"<NDArray\"\nif shape.size > 0\n  (io << \" \") << (shape.join(\"x\"))\nend\n(io << \" \") << dtype\n(io << \" \") << context\nio << \">\"\n"}},{"id":"topk(**kwargs)-instance-method","html_id":"topk(**kwargs)-instance-method","name":"topk","doc":"Convenience fluent method for `.topk`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/NDArray.html#topk(data,**kwargs)-class-method\">.topk</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"topk","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.topk(self, **kwargs)"}},{"id":"transpose(**kwargs)-instance-method","html_id":"transpose(**kwargs)-instance-method","name":"transpose","doc":"Convenience fluent method for `.transpose`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/NDArray.html#transpose(data,**kwargs)-class-method\">.transpose</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"transpose","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.transpose(self, **kwargs)"}},{"id":"trunc(**kwargs)-instance-method","html_id":"trunc(**kwargs)-instance-method","name":"trunc","doc":"Convenience fluent method for `.trunc`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/NDArray.html#trunc(data,**kwargs)-class-method\">.trunc</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"trunc","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.trunc(self, **kwargs)"}},{"id":"unsafe_fetch(idx)-instance-method","html_id":"unsafe_fetch(idx)-instance-method","name":"unsafe_fetch","doc":null,"summary":null,"abstract":false,"args":[{"name":"idx","doc":null,"default_value":"","external_name":"idx","restriction":""}],"args_string":"(idx)","args_html":"(idx)","location":{"filename":"src/mxnet/ndarray.cr","line_number":655,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/ndarray.cr#L655"},"def":{"name":"unsafe_fetch","args":[{"name":"idx","doc":null,"default_value":"","external_name":"idx","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"shape = self.shape\nshape.shift\nout = Ops._slice(self, begin: [idx], end: [idx + 1])\nshape.size > 0 ? out.reshape(shape: shape) : out\n"}},{"id":"where(x,y,**kwargs)-instance-method","html_id":"where(x,y,**kwargs)-instance-method","name":"where","doc":"Convenience fluent method for `.where`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/NDArray.html#where(condition,x,y,**kwargs)-class-method\">.where</a></code>.</p>","abstract":false,"args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":""},{"name":"y","doc":null,"default_value":"","external_name":"y","restriction":""}],"args_string":"(x, y, **kwargs)","args_html":"(x, y, **kwargs)","location":null,"def":{"name":"where","args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":""},{"name":"y","doc":null,"default_value":"","external_name":"y","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.where(self, x, y, **kwargs)"}},{"id":"zeros_like(**kwargs)-instance-method","html_id":"zeros_like(**kwargs)-instance-method","name":"zeros_like","doc":"Convenience fluent method for `.zeros_like`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/NDArray.html#zeros_like(data,**kwargs)-class-method\">.zeros_like</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"zeros_like","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.zeros_like(self, **kwargs)"}},{"id":"|(other)-instance-method","html_id":"|(other)-instance-method","name":"|","doc":"Performs element-wise logical or (`|`) comparison operation\nwith broadcasting.","summary":"<p>Performs element-wise logical or (<code><a href=\"../MXNet/NDArray.html#%7C(other)-instance-method\">#|</a></code>) comparison operation with broadcasting.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":""}],"args_string":"(other)","args_html":"(other)","location":{"filename":"src/mxnet/ndarray.cr","line_number":629,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/ndarray.cr#L629"},"def":{"name":"|","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.class.logical_or(self, other)"}}],"macros":[],"types":[{"html_id":"mxnet/MXNet/NDArray/Contrib","path":"MXNet/NDArray/Contrib.html","kind":"class","full_name":"MXNet::NDArray::Contrib","name":"Contrib","abstract":false,"superclass":{"html_id":"mxnet/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"mxnet/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"mxnet/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"mxnet","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"mxnet/MXNet/NDArray","kind":"class","full_name":"MXNet::NDArray","name":"NDArray"},"doc":null,"summary":null,"class_methods":[{"id":"_AdaptiveAvgPooling2D(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_AdaptiveAvgPooling2D(data:MXNet::NDArray?,**kwargs)-class-method","name":"_AdaptiveAvgPooling2D","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_AdaptiveAvgPooling2D","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_contrib_AdaptiveAvgPooling2D\", data, **kwargs)"}},{"id":"_backward_quadratic(**kwargs)-class-method","html_id":"_backward_quadratic(**kwargs)-class-method","name":"_backward_quadratic","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"_backward_quadratic","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_contrib_backward_quadratic\", **kwargs)"}},{"id":"_BilinearResize2D(data:MXNet::NDArray?,height,width,**kwargs)-class-method","html_id":"_BilinearResize2D(data:MXNet::NDArray?,height,width,**kwargs)-class-method","name":"_BilinearResize2D","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"height","doc":null,"default_value":"","external_name":"height","restriction":""},{"name":"width","doc":null,"default_value":"","external_name":"width","restriction":""}],"args_string":"(data : MXNet::NDArray?, height, width, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, height, width, **kwargs)","location":null,"def":{"name":"_BilinearResize2D","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"height","doc":null,"default_value":"","external_name":"height","restriction":""},{"name":"width","doc":null,"default_value":"","external_name":"width","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_contrib_BilinearResize2D\", data, **kwargs.merge(height: height, width: width))"}},{"id":"_bipartite_matching(data:MXNet::NDArray?,threshold,**kwargs)-class-method","html_id":"_bipartite_matching(data:MXNet::NDArray?,threshold,**kwargs)-class-method","name":"_bipartite_matching","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"threshold","doc":null,"default_value":"","external_name":"threshold","restriction":""}],"args_string":"(data : MXNet::NDArray?, threshold, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, threshold, **kwargs)","location":null,"def":{"name":"_bipartite_matching","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"threshold","doc":null,"default_value":"","external_name":"threshold","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_contrib_bipartite_matching\", data, **kwargs.merge(threshold: threshold))"}},{"id":"_box_iou(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","html_id":"_box_iou(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","name":"_box_iou","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(lhs : MXNet::NDArray?, rhs : MXNet::NDArray?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, rhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_box_iou","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_contrib_box_iou\", lhs, rhs, **kwargs)"}},{"id":"_box_nms(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_box_nms(data:MXNet::NDArray?,**kwargs)-class-method","name":"_box_nms","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_box_nms","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_contrib_box_nms\", data, **kwargs)"}},{"id":"_box_non_maximum_suppression(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_box_non_maximum_suppression(data:MXNet::NDArray?,**kwargs)-class-method","name":"_box_non_maximum_suppression","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_box_non_maximum_suppression","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_contrib_box_non_maximum_suppression\", data, **kwargs)"}},{"id":"_count_sketch(data:MXNet::NDArray?,h:MXNet::NDArray?,s:MXNet::NDArray?,out_dim,**kwargs)-class-method","html_id":"_count_sketch(data:MXNet::NDArray?,h:MXNet::NDArray?,s:MXNet::NDArray?,out_dim,**kwargs)-class-method","name":"_count_sketch","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"h","doc":null,"default_value":"","external_name":"h","restriction":"MXNet::NDArray | ::Nil"},{"name":"s","doc":null,"default_value":"","external_name":"s","restriction":"MXNet::NDArray | ::Nil"},{"name":"out_dim","doc":null,"default_value":"","external_name":"out_dim","restriction":""}],"args_string":"(data : MXNet::NDArray?, h : MXNet::NDArray?, s : MXNet::NDArray?, out_dim, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, h : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, s : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, out_dim, **kwargs)","location":null,"def":{"name":"_count_sketch","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"h","doc":null,"default_value":"","external_name":"h","restriction":"MXNet::NDArray | ::Nil"},{"name":"s","doc":null,"default_value":"","external_name":"s","restriction":"MXNet::NDArray | ::Nil"},{"name":"out_dim","doc":null,"default_value":"","external_name":"out_dim","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_contrib_count_sketch\", data, h, s, **kwargs.merge(out_dim: out_dim))"}},{"id":"_ctc_loss(data:MXNet::NDArray?,label:MXNet::NDArray?,data_lengths:MXNet::NDArray?,label_lengths:MXNet::NDArray?,**kwargs)-class-method","html_id":"_ctc_loss(data:MXNet::NDArray?,label:MXNet::NDArray?,data_lengths:MXNet::NDArray?,label_lengths:MXNet::NDArray?,**kwargs)-class-method","name":"_ctc_loss","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"label","doc":null,"default_value":"","external_name":"label","restriction":"MXNet::NDArray | ::Nil"},{"name":"data_lengths","doc":null,"default_value":"","external_name":"data_lengths","restriction":"MXNet::NDArray | ::Nil"},{"name":"label_lengths","doc":null,"default_value":"","external_name":"label_lengths","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, label : MXNet::NDArray?, data_lengths : MXNet::NDArray?, label_lengths : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, label : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, data_lengths : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, label_lengths : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_ctc_loss","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"label","doc":null,"default_value":"","external_name":"label","restriction":"MXNet::NDArray | ::Nil"},{"name":"data_lengths","doc":null,"default_value":"","external_name":"data_lengths","restriction":"MXNet::NDArray | ::Nil"},{"name":"label_lengths","doc":null,"default_value":"","external_name":"label_lengths","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_contrib_ctc_loss\", data, label, data_lengths, label_lengths, **kwargs)"}},{"id":"_CTCLoss(data:MXNet::NDArray?,label:MXNet::NDArray?,data_lengths:MXNet::NDArray?,label_lengths:MXNet::NDArray?,**kwargs)-class-method","html_id":"_CTCLoss(data:MXNet::NDArray?,label:MXNet::NDArray?,data_lengths:MXNet::NDArray?,label_lengths:MXNet::NDArray?,**kwargs)-class-method","name":"_CTCLoss","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"label","doc":null,"default_value":"","external_name":"label","restriction":"MXNet::NDArray | ::Nil"},{"name":"data_lengths","doc":null,"default_value":"","external_name":"data_lengths","restriction":"MXNet::NDArray | ::Nil"},{"name":"label_lengths","doc":null,"default_value":"","external_name":"label_lengths","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, label : MXNet::NDArray?, data_lengths : MXNet::NDArray?, label_lengths : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, label : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, data_lengths : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, label_lengths : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_CTCLoss","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"label","doc":null,"default_value":"","external_name":"label","restriction":"MXNet::NDArray | ::Nil"},{"name":"data_lengths","doc":null,"default_value":"","external_name":"data_lengths","restriction":"MXNet::NDArray | ::Nil"},{"name":"label_lengths","doc":null,"default_value":"","external_name":"label_lengths","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_contrib_CTCLoss\", data, label, data_lengths, label_lengths, **kwargs)"}},{"id":"_DeformableConvolution(data:MXNet::NDArray?,offset:MXNet::NDArray?,weight:MXNet::NDArray?,bias:MXNet::NDArray?,kernel,num_filter,**kwargs)-class-method","html_id":"_DeformableConvolution(data:MXNet::NDArray?,offset:MXNet::NDArray?,weight:MXNet::NDArray?,bias:MXNet::NDArray?,kernel,num_filter,**kwargs)-class-method","name":"_DeformableConvolution","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"offset","doc":null,"default_value":"","external_name":"offset","restriction":"MXNet::NDArray | ::Nil"},{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::NDArray | ::Nil"},{"name":"bias","doc":null,"default_value":"","external_name":"bias","restriction":"MXNet::NDArray | ::Nil"},{"name":"kernel","doc":null,"default_value":"","external_name":"kernel","restriction":""},{"name":"num_filter","doc":null,"default_value":"","external_name":"num_filter","restriction":""}],"args_string":"(data : MXNet::NDArray?, offset : MXNet::NDArray?, weight : MXNet::NDArray?, bias : MXNet::NDArray?, kernel, num_filter, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, offset : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, weight : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, bias : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, kernel, num_filter, **kwargs)","location":null,"def":{"name":"_DeformableConvolution","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"offset","doc":null,"default_value":"","external_name":"offset","restriction":"MXNet::NDArray | ::Nil"},{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::NDArray | ::Nil"},{"name":"bias","doc":null,"default_value":"","external_name":"bias","restriction":"MXNet::NDArray | ::Nil"},{"name":"kernel","doc":null,"default_value":"","external_name":"kernel","restriction":""},{"name":"num_filter","doc":null,"default_value":"","external_name":"num_filter","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_contrib_DeformableConvolution\", data, offset, weight, bias, **kwargs.merge(kernel: kernel, num_filter: num_filter))"}},{"id":"_DeformablePSROIPooling(spatial_scale,output_dim,group_size,pooled_size,**kwargs)-class-method","html_id":"_DeformablePSROIPooling(spatial_scale,output_dim,group_size,pooled_size,**kwargs)-class-method","name":"_DeformablePSROIPooling","doc":null,"summary":null,"abstract":false,"args":[{"name":"spatial_scale","doc":null,"default_value":"","external_name":"spatial_scale","restriction":""},{"name":"output_dim","doc":null,"default_value":"","external_name":"output_dim","restriction":""},{"name":"group_size","doc":null,"default_value":"","external_name":"group_size","restriction":""},{"name":"pooled_size","doc":null,"default_value":"","external_name":"pooled_size","restriction":""}],"args_string":"(spatial_scale, output_dim, group_size, pooled_size, **kwargs)","args_html":"(spatial_scale, output_dim, group_size, pooled_size, **kwargs)","location":null,"def":{"name":"_DeformablePSROIPooling","args":[{"name":"spatial_scale","doc":null,"default_value":"","external_name":"spatial_scale","restriction":""},{"name":"output_dim","doc":null,"default_value":"","external_name":"output_dim","restriction":""},{"name":"group_size","doc":null,"default_value":"","external_name":"group_size","restriction":""},{"name":"pooled_size","doc":null,"default_value":"","external_name":"pooled_size","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_contrib_DeformablePSROIPooling\", **kwargs.merge(spatial_scale: spatial_scale, output_dim: output_dim, group_size: group_size, pooled_size: pooled_size))"}},{"id":"_dequantize(data:MXNet::NDArray?,min_range:MXNet::NDArray?,max_range:MXNet::NDArray?,**kwargs)-class-method","html_id":"_dequantize(data:MXNet::NDArray?,min_range:MXNet::NDArray?,max_range:MXNet::NDArray?,**kwargs)-class-method","name":"_dequantize","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"min_range","doc":null,"default_value":"","external_name":"min_range","restriction":"MXNet::NDArray | ::Nil"},{"name":"max_range","doc":null,"default_value":"","external_name":"max_range","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, min_range : MXNet::NDArray?, max_range : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, min_range : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, max_range : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_dequantize","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"min_range","doc":null,"default_value":"","external_name":"min_range","restriction":"MXNet::NDArray | ::Nil"},{"name":"max_range","doc":null,"default_value":"","external_name":"max_range","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_contrib_dequantize\", data, min_range, max_range, **kwargs)"}},{"id":"_div_sqrt_dim(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_div_sqrt_dim(data:MXNet::NDArray?,**kwargs)-class-method","name":"_div_sqrt_dim","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_div_sqrt_dim","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_contrib_div_sqrt_dim\", data, **kwargs)"}},{"id":"_fft(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_fft(data:MXNet::NDArray?,**kwargs)-class-method","name":"_fft","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_fft","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_contrib_fft\", data, **kwargs)"}},{"id":"_ifft(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_ifft(data:MXNet::NDArray?,**kwargs)-class-method","name":"_ifft","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_ifft","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_contrib_ifft\", data, **kwargs)"}},{"id":"_MultiBoxDetection(cls_prob:MXNet::NDArray?,loc_pred:MXNet::NDArray?,anchor:MXNet::NDArray?,**kwargs)-class-method","html_id":"_MultiBoxDetection(cls_prob:MXNet::NDArray?,loc_pred:MXNet::NDArray?,anchor:MXNet::NDArray?,**kwargs)-class-method","name":"_MultiBoxDetection","doc":null,"summary":null,"abstract":false,"args":[{"name":"cls_prob","doc":null,"default_value":"","external_name":"cls_prob","restriction":"MXNet::NDArray | ::Nil"},{"name":"loc_pred","doc":null,"default_value":"","external_name":"loc_pred","restriction":"MXNet::NDArray | ::Nil"},{"name":"anchor","doc":null,"default_value":"","external_name":"anchor","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(cls_prob : MXNet::NDArray?, loc_pred : MXNet::NDArray?, anchor : MXNet::NDArray?, **kwargs)","args_html":"(cls_prob : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, loc_pred : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, anchor : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_MultiBoxDetection","args":[{"name":"cls_prob","doc":null,"default_value":"","external_name":"cls_prob","restriction":"MXNet::NDArray | ::Nil"},{"name":"loc_pred","doc":null,"default_value":"","external_name":"loc_pred","restriction":"MXNet::NDArray | ::Nil"},{"name":"anchor","doc":null,"default_value":"","external_name":"anchor","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_contrib_MultiBoxDetection\", cls_prob, loc_pred, anchor, **kwargs)"}},{"id":"_MultiBoxPrior(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_MultiBoxPrior(data:MXNet::NDArray?,**kwargs)-class-method","name":"_MultiBoxPrior","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_MultiBoxPrior","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_contrib_MultiBoxPrior\", data, **kwargs)"}},{"id":"_MultiBoxTarget(anchor:MXNet::NDArray?,label:MXNet::NDArray?,cls_pred:MXNet::NDArray?,**kwargs)-class-method","html_id":"_MultiBoxTarget(anchor:MXNet::NDArray?,label:MXNet::NDArray?,cls_pred:MXNet::NDArray?,**kwargs)-class-method","name":"_MultiBoxTarget","doc":null,"summary":null,"abstract":false,"args":[{"name":"anchor","doc":null,"default_value":"","external_name":"anchor","restriction":"MXNet::NDArray | ::Nil"},{"name":"label","doc":null,"default_value":"","external_name":"label","restriction":"MXNet::NDArray | ::Nil"},{"name":"cls_pred","doc":null,"default_value":"","external_name":"cls_pred","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(anchor : MXNet::NDArray?, label : MXNet::NDArray?, cls_pred : MXNet::NDArray?, **kwargs)","args_html":"(anchor : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, label : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, cls_pred : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_MultiBoxTarget","args":[{"name":"anchor","doc":null,"default_value":"","external_name":"anchor","restriction":"MXNet::NDArray | ::Nil"},{"name":"label","doc":null,"default_value":"","external_name":"label","restriction":"MXNet::NDArray | ::Nil"},{"name":"cls_pred","doc":null,"default_value":"","external_name":"cls_pred","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_contrib_MultiBoxTarget\", anchor, label, cls_pred, **kwargs)"}},{"id":"_MultiProposal(cls_prob:MXNet::NDArray?,bbox_pred:MXNet::NDArray?,im_info:MXNet::NDArray?,**kwargs)-class-method","html_id":"_MultiProposal(cls_prob:MXNet::NDArray?,bbox_pred:MXNet::NDArray?,im_info:MXNet::NDArray?,**kwargs)-class-method","name":"_MultiProposal","doc":null,"summary":null,"abstract":false,"args":[{"name":"cls_prob","doc":null,"default_value":"","external_name":"cls_prob","restriction":"MXNet::NDArray | ::Nil"},{"name":"bbox_pred","doc":null,"default_value":"","external_name":"bbox_pred","restriction":"MXNet::NDArray | ::Nil"},{"name":"im_info","doc":null,"default_value":"","external_name":"im_info","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(cls_prob : MXNet::NDArray?, bbox_pred : MXNet::NDArray?, im_info : MXNet::NDArray?, **kwargs)","args_html":"(cls_prob : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, bbox_pred : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, im_info : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_MultiProposal","args":[{"name":"cls_prob","doc":null,"default_value":"","external_name":"cls_prob","restriction":"MXNet::NDArray | ::Nil"},{"name":"bbox_pred","doc":null,"default_value":"","external_name":"bbox_pred","restriction":"MXNet::NDArray | ::Nil"},{"name":"im_info","doc":null,"default_value":"","external_name":"im_info","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_contrib_MultiProposal\", cls_prob, bbox_pred, im_info, **kwargs)"}},{"id":"_Proposal(cls_prob:MXNet::NDArray?,bbox_pred:MXNet::NDArray?,im_info:MXNet::NDArray?,**kwargs)-class-method","html_id":"_Proposal(cls_prob:MXNet::NDArray?,bbox_pred:MXNet::NDArray?,im_info:MXNet::NDArray?,**kwargs)-class-method","name":"_Proposal","doc":null,"summary":null,"abstract":false,"args":[{"name":"cls_prob","doc":null,"default_value":"","external_name":"cls_prob","restriction":"MXNet::NDArray | ::Nil"},{"name":"bbox_pred","doc":null,"default_value":"","external_name":"bbox_pred","restriction":"MXNet::NDArray | ::Nil"},{"name":"im_info","doc":null,"default_value":"","external_name":"im_info","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(cls_prob : MXNet::NDArray?, bbox_pred : MXNet::NDArray?, im_info : MXNet::NDArray?, **kwargs)","args_html":"(cls_prob : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, bbox_pred : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, im_info : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_Proposal","args":[{"name":"cls_prob","doc":null,"default_value":"","external_name":"cls_prob","restriction":"MXNet::NDArray | ::Nil"},{"name":"bbox_pred","doc":null,"default_value":"","external_name":"bbox_pred","restriction":"MXNet::NDArray | ::Nil"},{"name":"im_info","doc":null,"default_value":"","external_name":"im_info","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_contrib_Proposal\", cls_prob, bbox_pred, im_info, **kwargs)"}},{"id":"_PSROIPooling(spatial_scale,output_dim,pooled_size,**kwargs)-class-method","html_id":"_PSROIPooling(spatial_scale,output_dim,pooled_size,**kwargs)-class-method","name":"_PSROIPooling","doc":null,"summary":null,"abstract":false,"args":[{"name":"spatial_scale","doc":null,"default_value":"","external_name":"spatial_scale","restriction":""},{"name":"output_dim","doc":null,"default_value":"","external_name":"output_dim","restriction":""},{"name":"pooled_size","doc":null,"default_value":"","external_name":"pooled_size","restriction":""}],"args_string":"(spatial_scale, output_dim, pooled_size, **kwargs)","args_html":"(spatial_scale, output_dim, pooled_size, **kwargs)","location":null,"def":{"name":"_PSROIPooling","args":[{"name":"spatial_scale","doc":null,"default_value":"","external_name":"spatial_scale","restriction":""},{"name":"output_dim","doc":null,"default_value":"","external_name":"output_dim","restriction":""},{"name":"pooled_size","doc":null,"default_value":"","external_name":"pooled_size","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_contrib_PSROIPooling\", **kwargs.merge(spatial_scale: spatial_scale, output_dim: output_dim, pooled_size: pooled_size))"}},{"id":"_quadratic(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_quadratic(data:MXNet::NDArray?,**kwargs)-class-method","name":"_quadratic","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_quadratic","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_contrib_quadratic\", data, **kwargs)"}},{"id":"_quantize(data:MXNet::NDArray?,min_range:MXNet::NDArray?,max_range:MXNet::NDArray?,**kwargs)-class-method","html_id":"_quantize(data:MXNet::NDArray?,min_range:MXNet::NDArray?,max_range:MXNet::NDArray?,**kwargs)-class-method","name":"_quantize","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"min_range","doc":null,"default_value":"","external_name":"min_range","restriction":"MXNet::NDArray | ::Nil"},{"name":"max_range","doc":null,"default_value":"","external_name":"max_range","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, min_range : MXNet::NDArray?, max_range : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, min_range : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, max_range : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_quantize","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"min_range","doc":null,"default_value":"","external_name":"min_range","restriction":"MXNet::NDArray | ::Nil"},{"name":"max_range","doc":null,"default_value":"","external_name":"max_range","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_contrib_quantize\", data, min_range, max_range, **kwargs)"}},{"id":"_quantized_conv(data:MXNet::NDArray?,weight:MXNet::NDArray?,bias:MXNet::NDArray?,min_data:MXNet::NDArray?,max_data:MXNet::NDArray?,min_weight:MXNet::NDArray?,max_weight:MXNet::NDArray?,min_bias:MXNet::NDArray?,max_bias:MXNet::NDArray?,kernel,num_filter,**kwargs)-class-method","html_id":"_quantized_conv(data:MXNet::NDArray?,weight:MXNet::NDArray?,bias:MXNet::NDArray?,min_data:MXNet::NDArray?,max_data:MXNet::NDArray?,min_weight:MXNet::NDArray?,max_weight:MXNet::NDArray?,min_bias:MXNet::NDArray?,max_bias:MXNet::NDArray?,kernel,num_filter,**kwargs)-class-method","name":"_quantized_conv","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::NDArray | ::Nil"},{"name":"bias","doc":null,"default_value":"","external_name":"bias","restriction":"MXNet::NDArray | ::Nil"},{"name":"min_data","doc":null,"default_value":"","external_name":"min_data","restriction":"MXNet::NDArray | ::Nil"},{"name":"max_data","doc":null,"default_value":"","external_name":"max_data","restriction":"MXNet::NDArray | ::Nil"},{"name":"min_weight","doc":null,"default_value":"","external_name":"min_weight","restriction":"MXNet::NDArray | ::Nil"},{"name":"max_weight","doc":null,"default_value":"","external_name":"max_weight","restriction":"MXNet::NDArray | ::Nil"},{"name":"min_bias","doc":null,"default_value":"","external_name":"min_bias","restriction":"MXNet::NDArray | ::Nil"},{"name":"max_bias","doc":null,"default_value":"","external_name":"max_bias","restriction":"MXNet::NDArray | ::Nil"},{"name":"kernel","doc":null,"default_value":"","external_name":"kernel","restriction":""},{"name":"num_filter","doc":null,"default_value":"","external_name":"num_filter","restriction":""}],"args_string":"(data : MXNet::NDArray?, weight : MXNet::NDArray?, bias : MXNet::NDArray?, min_data : MXNet::NDArray?, max_data : MXNet::NDArray?, min_weight : MXNet::NDArray?, max_weight : MXNet::NDArray?, min_bias : MXNet::NDArray?, max_bias : MXNet::NDArray?, kernel, num_filter, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, weight : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, bias : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, min_data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, max_data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, min_weight : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, max_weight : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, min_bias : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, max_bias : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, kernel, num_filter, **kwargs)","location":null,"def":{"name":"_quantized_conv","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::NDArray | ::Nil"},{"name":"bias","doc":null,"default_value":"","external_name":"bias","restriction":"MXNet::NDArray | ::Nil"},{"name":"min_data","doc":null,"default_value":"","external_name":"min_data","restriction":"MXNet::NDArray | ::Nil"},{"name":"max_data","doc":null,"default_value":"","external_name":"max_data","restriction":"MXNet::NDArray | ::Nil"},{"name":"min_weight","doc":null,"default_value":"","external_name":"min_weight","restriction":"MXNet::NDArray | ::Nil"},{"name":"max_weight","doc":null,"default_value":"","external_name":"max_weight","restriction":"MXNet::NDArray | ::Nil"},{"name":"min_bias","doc":null,"default_value":"","external_name":"min_bias","restriction":"MXNet::NDArray | ::Nil"},{"name":"max_bias","doc":null,"default_value":"","external_name":"max_bias","restriction":"MXNet::NDArray | ::Nil"},{"name":"kernel","doc":null,"default_value":"","external_name":"kernel","restriction":""},{"name":"num_filter","doc":null,"default_value":"","external_name":"num_filter","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_contrib_quantized_conv\", data, weight, bias, min_data, max_data, min_weight, max_weight, min_bias, max_bias, **kwargs.merge(kernel: kernel, num_filter: num_filter))"}},{"id":"_quantized_flatten(data:MXNet::NDArray?,min_data:MXNet::NDArray?,max_data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_quantized_flatten(data:MXNet::NDArray?,min_data:MXNet::NDArray?,max_data:MXNet::NDArray?,**kwargs)-class-method","name":"_quantized_flatten","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"min_data","doc":null,"default_value":"","external_name":"min_data","restriction":"MXNet::NDArray | ::Nil"},{"name":"max_data","doc":null,"default_value":"","external_name":"max_data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, min_data : MXNet::NDArray?, max_data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, min_data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, max_data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_quantized_flatten","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"min_data","doc":null,"default_value":"","external_name":"min_data","restriction":"MXNet::NDArray | ::Nil"},{"name":"max_data","doc":null,"default_value":"","external_name":"max_data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_contrib_quantized_flatten\", data, min_data, max_data, **kwargs)"}},{"id":"_quantized_fully_connected(data:MXNet::NDArray?,weight:MXNet::NDArray?,bias:MXNet::NDArray?,min_data:MXNet::NDArray?,max_data:MXNet::NDArray?,min_weight:MXNet::NDArray?,max_weight:MXNet::NDArray?,min_bias:MXNet::NDArray?,max_bias:MXNet::NDArray?,num_hidden,**kwargs)-class-method","html_id":"_quantized_fully_connected(data:MXNet::NDArray?,weight:MXNet::NDArray?,bias:MXNet::NDArray?,min_data:MXNet::NDArray?,max_data:MXNet::NDArray?,min_weight:MXNet::NDArray?,max_weight:MXNet::NDArray?,min_bias:MXNet::NDArray?,max_bias:MXNet::NDArray?,num_hidden,**kwargs)-class-method","name":"_quantized_fully_connected","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::NDArray | ::Nil"},{"name":"bias","doc":null,"default_value":"","external_name":"bias","restriction":"MXNet::NDArray | ::Nil"},{"name":"min_data","doc":null,"default_value":"","external_name":"min_data","restriction":"MXNet::NDArray | ::Nil"},{"name":"max_data","doc":null,"default_value":"","external_name":"max_data","restriction":"MXNet::NDArray | ::Nil"},{"name":"min_weight","doc":null,"default_value":"","external_name":"min_weight","restriction":"MXNet::NDArray | ::Nil"},{"name":"max_weight","doc":null,"default_value":"","external_name":"max_weight","restriction":"MXNet::NDArray | ::Nil"},{"name":"min_bias","doc":null,"default_value":"","external_name":"min_bias","restriction":"MXNet::NDArray | ::Nil"},{"name":"max_bias","doc":null,"default_value":"","external_name":"max_bias","restriction":"MXNet::NDArray | ::Nil"},{"name":"num_hidden","doc":null,"default_value":"","external_name":"num_hidden","restriction":""}],"args_string":"(data : MXNet::NDArray?, weight : MXNet::NDArray?, bias : MXNet::NDArray?, min_data : MXNet::NDArray?, max_data : MXNet::NDArray?, min_weight : MXNet::NDArray?, max_weight : MXNet::NDArray?, min_bias : MXNet::NDArray?, max_bias : MXNet::NDArray?, num_hidden, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, weight : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, bias : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, min_data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, max_data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, min_weight : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, max_weight : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, min_bias : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, max_bias : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, num_hidden, **kwargs)","location":null,"def":{"name":"_quantized_fully_connected","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::NDArray | ::Nil"},{"name":"bias","doc":null,"default_value":"","external_name":"bias","restriction":"MXNet::NDArray | ::Nil"},{"name":"min_data","doc":null,"default_value":"","external_name":"min_data","restriction":"MXNet::NDArray | ::Nil"},{"name":"max_data","doc":null,"default_value":"","external_name":"max_data","restriction":"MXNet::NDArray | ::Nil"},{"name":"min_weight","doc":null,"default_value":"","external_name":"min_weight","restriction":"MXNet::NDArray | ::Nil"},{"name":"max_weight","doc":null,"default_value":"","external_name":"max_weight","restriction":"MXNet::NDArray | ::Nil"},{"name":"min_bias","doc":null,"default_value":"","external_name":"min_bias","restriction":"MXNet::NDArray | ::Nil"},{"name":"max_bias","doc":null,"default_value":"","external_name":"max_bias","restriction":"MXNet::NDArray | ::Nil"},{"name":"num_hidden","doc":null,"default_value":"","external_name":"num_hidden","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_contrib_quantized_fully_connected\", data, weight, bias, min_data, max_data, min_weight, max_weight, min_bias, max_bias, **kwargs.merge(num_hidden: num_hidden))"}},{"id":"_quantized_pooling(data:MXNet::NDArray?,min_data:MXNet::NDArray?,max_data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_quantized_pooling(data:MXNet::NDArray?,min_data:MXNet::NDArray?,max_data:MXNet::NDArray?,**kwargs)-class-method","name":"_quantized_pooling","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"min_data","doc":null,"default_value":"","external_name":"min_data","restriction":"MXNet::NDArray | ::Nil"},{"name":"max_data","doc":null,"default_value":"","external_name":"max_data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, min_data : MXNet::NDArray?, max_data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, min_data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, max_data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_quantized_pooling","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"min_data","doc":null,"default_value":"","external_name":"min_data","restriction":"MXNet::NDArray | ::Nil"},{"name":"max_data","doc":null,"default_value":"","external_name":"max_data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_contrib_quantized_pooling\", data, min_data, max_data, **kwargs)"}},{"id":"_requantize(data:MXNet::NDArray?,min_range:MXNet::NDArray?,max_range:MXNet::NDArray?,**kwargs)-class-method","html_id":"_requantize(data:MXNet::NDArray?,min_range:MXNet::NDArray?,max_range:MXNet::NDArray?,**kwargs)-class-method","name":"_requantize","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"min_range","doc":null,"default_value":"","external_name":"min_range","restriction":"MXNet::NDArray | ::Nil"},{"name":"max_range","doc":null,"default_value":"","external_name":"max_range","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, min_range : MXNet::NDArray?, max_range : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, min_range : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, max_range : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_requantize","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"min_range","doc":null,"default_value":"","external_name":"min_range","restriction":"MXNet::NDArray | ::Nil"},{"name":"max_range","doc":null,"default_value":"","external_name":"max_range","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_contrib_requantize\", data, min_range, max_range, **kwargs)"}},{"id":"_ROIAlign(data:MXNet::NDArray?,rois:MXNet::NDArray?,pooled_size,spatial_scale,**kwargs)-class-method","html_id":"_ROIAlign(data:MXNet::NDArray?,rois:MXNet::NDArray?,pooled_size,spatial_scale,**kwargs)-class-method","name":"_ROIAlign","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"rois","doc":null,"default_value":"","external_name":"rois","restriction":"MXNet::NDArray | ::Nil"},{"name":"pooled_size","doc":null,"default_value":"","external_name":"pooled_size","restriction":""},{"name":"spatial_scale","doc":null,"default_value":"","external_name":"spatial_scale","restriction":""}],"args_string":"(data : MXNet::NDArray?, rois : MXNet::NDArray?, pooled_size, spatial_scale, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, rois : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, pooled_size, spatial_scale, **kwargs)","location":null,"def":{"name":"_ROIAlign","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"rois","doc":null,"default_value":"","external_name":"rois","restriction":"MXNet::NDArray | ::Nil"},{"name":"pooled_size","doc":null,"default_value":"","external_name":"pooled_size","restriction":""},{"name":"spatial_scale","doc":null,"default_value":"","external_name":"spatial_scale","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_contrib_ROIAlign\", data, rois, **kwargs.merge(pooled_size: pooled_size, spatial_scale: spatial_scale))"}},{"id":"_SparseEmbedding(data:MXNet::NDArray?,weight:MXNet::NDArray?,input_dim,output_dim,**kwargs)-class-method","html_id":"_SparseEmbedding(data:MXNet::NDArray?,weight:MXNet::NDArray?,input_dim,output_dim,**kwargs)-class-method","name":"_SparseEmbedding","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::NDArray | ::Nil"},{"name":"input_dim","doc":null,"default_value":"","external_name":"input_dim","restriction":""},{"name":"output_dim","doc":null,"default_value":"","external_name":"output_dim","restriction":""}],"args_string":"(data : MXNet::NDArray?, weight : MXNet::NDArray?, input_dim, output_dim, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, weight : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, input_dim, output_dim, **kwargs)","location":null,"def":{"name":"_SparseEmbedding","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::NDArray | ::Nil"},{"name":"input_dim","doc":null,"default_value":"","external_name":"input_dim","restriction":""},{"name":"output_dim","doc":null,"default_value":"","external_name":"output_dim","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_contrib_SparseEmbedding\", data, weight, **kwargs.merge(input_dim: input_dim, output_dim: output_dim))"}},{"id":"_SyncBatchNorm(data:MXNet::NDArray?,gamma:MXNet::NDArray?,beta:MXNet::NDArray?,moving_mean:MXNet::NDArray?,moving_var:MXNet::NDArray?,**kwargs)-class-method","html_id":"_SyncBatchNorm(data:MXNet::NDArray?,gamma:MXNet::NDArray?,beta:MXNet::NDArray?,moving_mean:MXNet::NDArray?,moving_var:MXNet::NDArray?,**kwargs)-class-method","name":"_SyncBatchNorm","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"gamma","doc":null,"default_value":"","external_name":"gamma","restriction":"MXNet::NDArray | ::Nil"},{"name":"beta","doc":null,"default_value":"","external_name":"beta","restriction":"MXNet::NDArray | ::Nil"},{"name":"moving_mean","doc":null,"default_value":"","external_name":"moving_mean","restriction":"MXNet::NDArray | ::Nil"},{"name":"moving_var","doc":null,"default_value":"","external_name":"moving_var","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, gamma : MXNet::NDArray?, beta : MXNet::NDArray?, moving_mean : MXNet::NDArray?, moving_var : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, gamma : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, beta : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, moving_mean : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, moving_var : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_SyncBatchNorm","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"gamma","doc":null,"default_value":"","external_name":"gamma","restriction":"MXNet::NDArray | ::Nil"},{"name":"beta","doc":null,"default_value":"","external_name":"beta","restriction":"MXNet::NDArray | ::Nil"},{"name":"moving_mean","doc":null,"default_value":"","external_name":"moving_mean","restriction":"MXNet::NDArray | ::Nil"},{"name":"moving_var","doc":null,"default_value":"","external_name":"moving_var","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_contrib_SyncBatchNorm\", data, gamma, beta, moving_mean, moving_var, **kwargs)"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"mxnet/MXNet/NDArray/Internal","path":"MXNet/NDArray/Internal.html","kind":"class","full_name":"MXNet::NDArray::Internal","name":"Internal","abstract":false,"superclass":{"html_id":"mxnet/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"mxnet/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"mxnet/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"mxnet","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"mxnet/MXNet/NDArray","kind":"class","full_name":"MXNet::NDArray","name":"NDArray"},"doc":null,"summary":null,"class_methods":[{"id":"_add(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","html_id":"_add(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","name":"_add","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(lhs : MXNet::NDArray?, rhs : MXNet::NDArray?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, rhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_add","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_add\", lhs, rhs, **kwargs)"}},{"id":"_arange(start,**kwargs)-class-method","html_id":"_arange(start,**kwargs)-class-method","name":"_arange","doc":null,"summary":null,"abstract":false,"args":[{"name":"start","doc":null,"default_value":"","external_name":"start","restriction":""}],"args_string":"(start, **kwargs)","args_html":"(start, **kwargs)","location":null,"def":{"name":"_arange","args":[{"name":"start","doc":null,"default_value":"","external_name":"start","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_arange\", **kwargs.merge(start: start))"}},{"id":"_broadcast_backward(**kwargs)-class-method","html_id":"_broadcast_backward(**kwargs)-class-method","name":"_broadcast_backward","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"_broadcast_backward","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_broadcast_backward\", **kwargs)"}},{"id":"_CachedOp(**kwargs)-class-method","html_id":"_CachedOp(**kwargs)-class-method","name":"_CachedOp","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"_CachedOp","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_CachedOp\", **kwargs)"}},{"id":"_cond(data:Array(MXNet::NDArray),num_args,num_outputs,cond_input_locs,then_input_locs,else_input_locs,**kwargs)-class-method","html_id":"_cond(data:Array(MXNet::NDArray),num_args,num_outputs,cond_input_locs,then_input_locs,else_input_locs,**kwargs)-class-method","name":"_cond","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"Array(MXNet::NDArray)"},{"name":"num_args","doc":null,"default_value":"","external_name":"num_args","restriction":""},{"name":"num_outputs","doc":null,"default_value":"","external_name":"num_outputs","restriction":""},{"name":"cond_input_locs","doc":null,"default_value":"","external_name":"cond_input_locs","restriction":""},{"name":"then_input_locs","doc":null,"default_value":"","external_name":"then_input_locs","restriction":""},{"name":"else_input_locs","doc":null,"default_value":"","external_name":"else_input_locs","restriction":""}],"args_string":"(data : Array(MXNet::NDArray), num_args, num_outputs, cond_input_locs, then_input_locs, else_input_locs, **kwargs)","args_html":"(data : Array(<a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>), num_args, num_outputs, cond_input_locs, then_input_locs, else_input_locs, **kwargs)","location":null,"def":{"name":"_cond","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"Array(MXNet::NDArray)"},{"name":"num_args","doc":null,"default_value":"","external_name":"num_args","restriction":""},{"name":"num_outputs","doc":null,"default_value":"","external_name":"num_outputs","restriction":""},{"name":"cond_input_locs","doc":null,"default_value":"","external_name":"cond_input_locs","restriction":""},{"name":"then_input_locs","doc":null,"default_value":"","external_name":"then_input_locs","restriction":""},{"name":"else_input_locs","doc":null,"default_value":"","external_name":"else_input_locs","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_cond\", data, **kwargs.merge(num_args: num_args, num_outputs: num_outputs, cond_input_locs: cond_input_locs, then_input_locs: then_input_locs, else_input_locs: else_input_locs))"}},{"id":"_copy(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_copy(data:MXNet::NDArray?,**kwargs)-class-method","name":"_copy","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_copy","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_copy\", data, **kwargs)"}},{"id":"_copyto(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_copyto(data:MXNet::NDArray?,**kwargs)-class-method","name":"_copyto","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_copyto","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_copyto\", data, **kwargs)"}},{"id":"_crop_assign(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,begin_begin,end_end,**kwargs)-class-method","html_id":"_crop_assign(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,begin_begin,end_end,**kwargs)-class-method","name":"_crop_assign","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"_begin","doc":null,"default_value":"","external_name":"begin","restriction":""},{"name":"_end","doc":null,"default_value":"","external_name":"end","restriction":""}],"args_string":"(lhs : MXNet::NDArray?, rhs : MXNet::NDArray?, begin _begin, end _end, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, rhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, begin _begin, end _end, **kwargs)","location":null,"def":{"name":"_crop_assign","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"_begin","doc":null,"default_value":"","external_name":"begin","restriction":""},{"name":"_end","doc":null,"default_value":"","external_name":"end","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_crop_assign\", lhs, rhs, **kwargs.merge(begin: _begin, end: _end))"}},{"id":"_crop_assign_scalar(data:MXNet::NDArray?,begin_begin,end_end,**kwargs)-class-method","html_id":"_crop_assign_scalar(data:MXNet::NDArray?,begin_begin,end_end,**kwargs)-class-method","name":"_crop_assign_scalar","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"_begin","doc":null,"default_value":"","external_name":"begin","restriction":""},{"name":"_end","doc":null,"default_value":"","external_name":"end","restriction":""}],"args_string":"(data : MXNet::NDArray?, begin _begin, end _end, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, begin _begin, end _end, **kwargs)","location":null,"def":{"name":"_crop_assign_scalar","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"_begin","doc":null,"default_value":"","external_name":"begin","restriction":""},{"name":"_end","doc":null,"default_value":"","external_name":"end","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_crop_assign_scalar\", data, **kwargs.merge(begin: _begin, end: _end))"}},{"id":"_CrossDeviceCopy(**kwargs)-class-method","html_id":"_CrossDeviceCopy(**kwargs)-class-method","name":"_CrossDeviceCopy","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"_CrossDeviceCopy","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_CrossDeviceCopy\", **kwargs)"}},{"id":"_CustomFunction(**kwargs)-class-method","html_id":"_CustomFunction(**kwargs)-class-method","name":"_CustomFunction","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"_CustomFunction","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_CustomFunction\", **kwargs)"}},{"id":"_cvcopyMakeBorder(top,bot,left,right,**kwargs)-class-method","html_id":"_cvcopyMakeBorder(top,bot,left,right,**kwargs)-class-method","name":"_cvcopyMakeBorder","doc":null,"summary":null,"abstract":false,"args":[{"name":"top","doc":null,"default_value":"","external_name":"top","restriction":""},{"name":"bot","doc":null,"default_value":"","external_name":"bot","restriction":""},{"name":"left","doc":null,"default_value":"","external_name":"left","restriction":""},{"name":"right","doc":null,"default_value":"","external_name":"right","restriction":""}],"args_string":"(top, bot, left, right, **kwargs)","args_html":"(top, bot, left, right, **kwargs)","location":null,"def":{"name":"_cvcopyMakeBorder","args":[{"name":"top","doc":null,"default_value":"","external_name":"top","restriction":""},{"name":"bot","doc":null,"default_value":"","external_name":"bot","restriction":""},{"name":"left","doc":null,"default_value":"","external_name":"left","restriction":""},{"name":"right","doc":null,"default_value":"","external_name":"right","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_cvcopyMakeBorder\", **kwargs.merge(top: top, bot: bot, left: left, right: right))"}},{"id":"_cvimdecode(**kwargs)-class-method","html_id":"_cvimdecode(**kwargs)-class-method","name":"_cvimdecode","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"_cvimdecode","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_cvimdecode\", **kwargs)"}},{"id":"_cvimread(filename,**kwargs)-class-method","html_id":"_cvimread(filename,**kwargs)-class-method","name":"_cvimread","doc":null,"summary":null,"abstract":false,"args":[{"name":"filename","doc":null,"default_value":"","external_name":"filename","restriction":""}],"args_string":"(filename, **kwargs)","args_html":"(filename, **kwargs)","location":null,"def":{"name":"_cvimread","args":[{"name":"filename","doc":null,"default_value":"","external_name":"filename","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_cvimread\", **kwargs.merge(filename: filename))"}},{"id":"_cvimresize(w,h,**kwargs)-class-method","html_id":"_cvimresize(w,h,**kwargs)-class-method","name":"_cvimresize","doc":null,"summary":null,"abstract":false,"args":[{"name":"w","doc":null,"default_value":"","external_name":"w","restriction":""},{"name":"h","doc":null,"default_value":"","external_name":"h","restriction":""}],"args_string":"(w, h, **kwargs)","args_html":"(w, h, **kwargs)","location":null,"def":{"name":"_cvimresize","args":[{"name":"w","doc":null,"default_value":"","external_name":"w","restriction":""},{"name":"h","doc":null,"default_value":"","external_name":"h","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_cvimresize\", **kwargs.merge(w: w, h: h))"}},{"id":"_Div(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","html_id":"_Div(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","name":"_Div","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(lhs : MXNet::NDArray?, rhs : MXNet::NDArray?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, rhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_Div","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_Div\", lhs, rhs, **kwargs)"}},{"id":"_div(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","html_id":"_div(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","name":"_div","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(lhs : MXNet::NDArray?, rhs : MXNet::NDArray?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, rhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_div","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_div\", lhs, rhs, **kwargs)"}},{"id":"_div_scalar(data:MXNet::NDArray?,scalar,**kwargs)-class-method","html_id":"_div_scalar(data:MXNet::NDArray?,scalar,**kwargs)-class-method","name":"_div_scalar","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"args_string":"(data : MXNet::NDArray?, scalar, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, scalar, **kwargs)","location":null,"def":{"name":"_div_scalar","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_div_scalar\", data, **kwargs.merge(scalar: scalar))"}},{"id":"_DivScalar(data:MXNet::NDArray?,scalar,**kwargs)-class-method","html_id":"_DivScalar(data:MXNet::NDArray?,scalar,**kwargs)-class-method","name":"_DivScalar","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"args_string":"(data : MXNet::NDArray?, scalar, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, scalar, **kwargs)","location":null,"def":{"name":"_DivScalar","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_DivScalar\", data, **kwargs.merge(scalar: scalar))"}},{"id":"_equal(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","html_id":"_equal(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","name":"_equal","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(lhs : MXNet::NDArray?, rhs : MXNet::NDArray?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, rhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_equal","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_equal\", lhs, rhs, **kwargs)"}},{"id":"_Equal(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","html_id":"_Equal(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","name":"_Equal","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(lhs : MXNet::NDArray?, rhs : MXNet::NDArray?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, rhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_Equal","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_Equal\", lhs, rhs, **kwargs)"}},{"id":"_equal_scalar(data:MXNet::NDArray?,scalar,**kwargs)-class-method","html_id":"_equal_scalar(data:MXNet::NDArray?,scalar,**kwargs)-class-method","name":"_equal_scalar","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"args_string":"(data : MXNet::NDArray?, scalar, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, scalar, **kwargs)","location":null,"def":{"name":"_equal_scalar","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_equal_scalar\", data, **kwargs.merge(scalar: scalar))"}},{"id":"_EqualScalar(data:MXNet::NDArray?,scalar,**kwargs)-class-method","html_id":"_EqualScalar(data:MXNet::NDArray?,scalar,**kwargs)-class-method","name":"_EqualScalar","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"args_string":"(data : MXNet::NDArray?, scalar, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, scalar, **kwargs)","location":null,"def":{"name":"_EqualScalar","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_EqualScalar\", data, **kwargs.merge(scalar: scalar))"}},{"id":"_eye(n,**kwargs)-class-method","html_id":"_eye(n,**kwargs)-class-method","name":"_eye","doc":null,"summary":null,"abstract":false,"args":[{"name":"n","doc":null,"default_value":"","external_name":"n","restriction":""}],"args_string":"(n, **kwargs)","args_html":"(n, **kwargs)","location":null,"def":{"name":"_eye","args":[{"name":"n","doc":null,"default_value":"","external_name":"n","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_eye\", **kwargs.merge(n: n))"}},{"id":"_foreach(data:Array(MXNet::NDArray),num_args,num_outputs,num_out_data,in_state_locs,in_data_locs,remain_locs,**kwargs)-class-method","html_id":"_foreach(data:Array(MXNet::NDArray),num_args,num_outputs,num_out_data,in_state_locs,in_data_locs,remain_locs,**kwargs)-class-method","name":"_foreach","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"Array(MXNet::NDArray)"},{"name":"num_args","doc":null,"default_value":"","external_name":"num_args","restriction":""},{"name":"num_outputs","doc":null,"default_value":"","external_name":"num_outputs","restriction":""},{"name":"num_out_data","doc":null,"default_value":"","external_name":"num_out_data","restriction":""},{"name":"in_state_locs","doc":null,"default_value":"","external_name":"in_state_locs","restriction":""},{"name":"in_data_locs","doc":null,"default_value":"","external_name":"in_data_locs","restriction":""},{"name":"remain_locs","doc":null,"default_value":"","external_name":"remain_locs","restriction":""}],"args_string":"(data : Array(MXNet::NDArray), num_args, num_outputs, num_out_data, in_state_locs, in_data_locs, remain_locs, **kwargs)","args_html":"(data : Array(<a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>), num_args, num_outputs, num_out_data, in_state_locs, in_data_locs, remain_locs, **kwargs)","location":null,"def":{"name":"_foreach","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"Array(MXNet::NDArray)"},{"name":"num_args","doc":null,"default_value":"","external_name":"num_args","restriction":""},{"name":"num_outputs","doc":null,"default_value":"","external_name":"num_outputs","restriction":""},{"name":"num_out_data","doc":null,"default_value":"","external_name":"num_out_data","restriction":""},{"name":"in_state_locs","doc":null,"default_value":"","external_name":"in_state_locs","restriction":""},{"name":"in_data_locs","doc":null,"default_value":"","external_name":"in_data_locs","restriction":""},{"name":"remain_locs","doc":null,"default_value":"","external_name":"remain_locs","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_foreach\", data, **kwargs.merge(num_args: num_args, num_outputs: num_outputs, num_out_data: num_out_data, in_state_locs: in_state_locs, in_data_locs: in_data_locs, remain_locs: remain_locs))"}},{"id":"_full(value,**kwargs)-class-method","html_id":"_full(value,**kwargs)-class-method","name":"_full","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"args_string":"(value, **kwargs)","args_html":"(value, **kwargs)","location":null,"def":{"name":"_full","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_full\", **kwargs.merge(value: value))"}},{"id":"_grad_add(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","html_id":"_grad_add(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","name":"_grad_add","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(lhs : MXNet::NDArray?, rhs : MXNet::NDArray?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, rhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_grad_add","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_grad_add\", lhs, rhs, **kwargs)"}},{"id":"_greater(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","html_id":"_greater(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","name":"_greater","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(lhs : MXNet::NDArray?, rhs : MXNet::NDArray?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, rhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_greater","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_greater\", lhs, rhs, **kwargs)"}},{"id":"_Greater(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","html_id":"_Greater(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","name":"_Greater","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(lhs : MXNet::NDArray?, rhs : MXNet::NDArray?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, rhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_Greater","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_Greater\", lhs, rhs, **kwargs)"}},{"id":"_Greater_Equal(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","html_id":"_Greater_Equal(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","name":"_Greater_Equal","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(lhs : MXNet::NDArray?, rhs : MXNet::NDArray?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, rhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_Greater_Equal","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_Greater_Equal\", lhs, rhs, **kwargs)"}},{"id":"_greater_equal(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","html_id":"_greater_equal(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","name":"_greater_equal","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(lhs : MXNet::NDArray?, rhs : MXNet::NDArray?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, rhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_greater_equal","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_greater_equal\", lhs, rhs, **kwargs)"}},{"id":"_greater_equal_scalar(data:MXNet::NDArray?,scalar,**kwargs)-class-method","html_id":"_greater_equal_scalar(data:MXNet::NDArray?,scalar,**kwargs)-class-method","name":"_greater_equal_scalar","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"args_string":"(data : MXNet::NDArray?, scalar, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, scalar, **kwargs)","location":null,"def":{"name":"_greater_equal_scalar","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_greater_equal_scalar\", data, **kwargs.merge(scalar: scalar))"}},{"id":"_greater_scalar(data:MXNet::NDArray?,scalar,**kwargs)-class-method","html_id":"_greater_scalar(data:MXNet::NDArray?,scalar,**kwargs)-class-method","name":"_greater_scalar","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"args_string":"(data : MXNet::NDArray?, scalar, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, scalar, **kwargs)","location":null,"def":{"name":"_greater_scalar","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_greater_scalar\", data, **kwargs.merge(scalar: scalar))"}},{"id":"_GreaterEqualScalar(data:MXNet::NDArray?,scalar,**kwargs)-class-method","html_id":"_GreaterEqualScalar(data:MXNet::NDArray?,scalar,**kwargs)-class-method","name":"_GreaterEqualScalar","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"args_string":"(data : MXNet::NDArray?, scalar, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, scalar, **kwargs)","location":null,"def":{"name":"_GreaterEqualScalar","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_GreaterEqualScalar\", data, **kwargs.merge(scalar: scalar))"}},{"id":"_GreaterScalar(data:MXNet::NDArray?,scalar,**kwargs)-class-method","html_id":"_GreaterScalar(data:MXNet::NDArray?,scalar,**kwargs)-class-method","name":"_GreaterScalar","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"args_string":"(data : MXNet::NDArray?, scalar, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, scalar, **kwargs)","location":null,"def":{"name":"_GreaterScalar","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_GreaterScalar\", data, **kwargs.merge(scalar: scalar))"}},{"id":"_histogram(data:MXNet::NDArray?,bins:MXNet::NDArray?,**kwargs)-class-method","html_id":"_histogram(data:MXNet::NDArray?,bins:MXNet::NDArray?,**kwargs)-class-method","name":"_histogram","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"bins","doc":null,"default_value":"","external_name":"bins","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, bins : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, bins : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_histogram","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"bins","doc":null,"default_value":"","external_name":"bins","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_histogram\", data, bins, **kwargs)"}},{"id":"_hypot(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","html_id":"_hypot(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","name":"_hypot","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(lhs : MXNet::NDArray?, rhs : MXNet::NDArray?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, rhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_hypot","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_hypot\", lhs, rhs, **kwargs)"}},{"id":"_Hypot(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","html_id":"_Hypot(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","name":"_Hypot","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(lhs : MXNet::NDArray?, rhs : MXNet::NDArray?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, rhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_Hypot","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_Hypot\", lhs, rhs, **kwargs)"}},{"id":"_hypot_scalar(data:MXNet::NDArray?,scalar,**kwargs)-class-method","html_id":"_hypot_scalar(data:MXNet::NDArray?,scalar,**kwargs)-class-method","name":"_hypot_scalar","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"args_string":"(data : MXNet::NDArray?, scalar, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, scalar, **kwargs)","location":null,"def":{"name":"_hypot_scalar","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_hypot_scalar\", data, **kwargs.merge(scalar: scalar))"}},{"id":"_HypotScalar(data:MXNet::NDArray?,scalar,**kwargs)-class-method","html_id":"_HypotScalar(data:MXNet::NDArray?,scalar,**kwargs)-class-method","name":"_HypotScalar","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"args_string":"(data : MXNet::NDArray?, scalar, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, scalar, **kwargs)","location":null,"def":{"name":"_HypotScalar","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_HypotScalar\", data, **kwargs.merge(scalar: scalar))"}},{"id":"_identity_with_attr_like_rhs(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","html_id":"_identity_with_attr_like_rhs(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","name":"_identity_with_attr_like_rhs","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(lhs : MXNet::NDArray?, rhs : MXNet::NDArray?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, rhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_identity_with_attr_like_rhs","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_identity_with_attr_like_rhs\", lhs, rhs, **kwargs)"}},{"id":"_image_adjust_lighting(data:MXNet::NDArray?,alpha,**kwargs)-class-method","html_id":"_image_adjust_lighting(data:MXNet::NDArray?,alpha,**kwargs)-class-method","name":"_image_adjust_lighting","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"alpha","doc":null,"default_value":"","external_name":"alpha","restriction":""}],"args_string":"(data : MXNet::NDArray?, alpha, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, alpha, **kwargs)","location":null,"def":{"name":"_image_adjust_lighting","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"alpha","doc":null,"default_value":"","external_name":"alpha","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_image_adjust_lighting\", data, **kwargs.merge(alpha: alpha))"}},{"id":"_image_flip_left_right(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_image_flip_left_right(data:MXNet::NDArray?,**kwargs)-class-method","name":"_image_flip_left_right","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_image_flip_left_right","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_image_flip_left_right\", data, **kwargs)"}},{"id":"_image_flip_top_bottom(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_image_flip_top_bottom(data:MXNet::NDArray?,**kwargs)-class-method","name":"_image_flip_top_bottom","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_image_flip_top_bottom","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_image_flip_top_bottom\", data, **kwargs)"}},{"id":"_image_normalize(data:MXNet::NDArray?,mean,std,**kwargs)-class-method","html_id":"_image_normalize(data:MXNet::NDArray?,mean,std,**kwargs)-class-method","name":"_image_normalize","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"mean","doc":null,"default_value":"","external_name":"mean","restriction":""},{"name":"std","doc":null,"default_value":"","external_name":"std","restriction":""}],"args_string":"(data : MXNet::NDArray?, mean, std, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, mean, std, **kwargs)","location":null,"def":{"name":"_image_normalize","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"mean","doc":null,"default_value":"","external_name":"mean","restriction":""},{"name":"std","doc":null,"default_value":"","external_name":"std","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_image_normalize\", data, **kwargs.merge(mean: mean, std: std))"}},{"id":"_image_random_brightness(data:MXNet::NDArray?,min_factor,max_factor,**kwargs)-class-method","html_id":"_image_random_brightness(data:MXNet::NDArray?,min_factor,max_factor,**kwargs)-class-method","name":"_image_random_brightness","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"min_factor","doc":null,"default_value":"","external_name":"min_factor","restriction":""},{"name":"max_factor","doc":null,"default_value":"","external_name":"max_factor","restriction":""}],"args_string":"(data : MXNet::NDArray?, min_factor, max_factor, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, min_factor, max_factor, **kwargs)","location":null,"def":{"name":"_image_random_brightness","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"min_factor","doc":null,"default_value":"","external_name":"min_factor","restriction":""},{"name":"max_factor","doc":null,"default_value":"","external_name":"max_factor","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_image_random_brightness\", data, **kwargs.merge(min_factor: min_factor, max_factor: max_factor))"}},{"id":"_image_random_color_jitter(data:MXNet::NDArray?,brightness,contrast,saturation,hue,**kwargs)-class-method","html_id":"_image_random_color_jitter(data:MXNet::NDArray?,brightness,contrast,saturation,hue,**kwargs)-class-method","name":"_image_random_color_jitter","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"brightness","doc":null,"default_value":"","external_name":"brightness","restriction":""},{"name":"contrast","doc":null,"default_value":"","external_name":"contrast","restriction":""},{"name":"saturation","doc":null,"default_value":"","external_name":"saturation","restriction":""},{"name":"hue","doc":null,"default_value":"","external_name":"hue","restriction":""}],"args_string":"(data : MXNet::NDArray?, brightness, contrast, saturation, hue, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, brightness, contrast, saturation, hue, **kwargs)","location":null,"def":{"name":"_image_random_color_jitter","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"brightness","doc":null,"default_value":"","external_name":"brightness","restriction":""},{"name":"contrast","doc":null,"default_value":"","external_name":"contrast","restriction":""},{"name":"saturation","doc":null,"default_value":"","external_name":"saturation","restriction":""},{"name":"hue","doc":null,"default_value":"","external_name":"hue","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_image_random_color_jitter\", data, **kwargs.merge(brightness: brightness, contrast: contrast, saturation: saturation, hue: hue))"}},{"id":"_image_random_contrast(data:MXNet::NDArray?,min_factor,max_factor,**kwargs)-class-method","html_id":"_image_random_contrast(data:MXNet::NDArray?,min_factor,max_factor,**kwargs)-class-method","name":"_image_random_contrast","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"min_factor","doc":null,"default_value":"","external_name":"min_factor","restriction":""},{"name":"max_factor","doc":null,"default_value":"","external_name":"max_factor","restriction":""}],"args_string":"(data : MXNet::NDArray?, min_factor, max_factor, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, min_factor, max_factor, **kwargs)","location":null,"def":{"name":"_image_random_contrast","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"min_factor","doc":null,"default_value":"","external_name":"min_factor","restriction":""},{"name":"max_factor","doc":null,"default_value":"","external_name":"max_factor","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_image_random_contrast\", data, **kwargs.merge(min_factor: min_factor, max_factor: max_factor))"}},{"id":"_image_random_flip_left_right(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_image_random_flip_left_right(data:MXNet::NDArray?,**kwargs)-class-method","name":"_image_random_flip_left_right","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_image_random_flip_left_right","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_image_random_flip_left_right\", data, **kwargs)"}},{"id":"_image_random_flip_top_bottom(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_image_random_flip_top_bottom(data:MXNet::NDArray?,**kwargs)-class-method","name":"_image_random_flip_top_bottom","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_image_random_flip_top_bottom","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_image_random_flip_top_bottom\", data, **kwargs)"}},{"id":"_image_random_hue(data:MXNet::NDArray?,min_factor,max_factor,**kwargs)-class-method","html_id":"_image_random_hue(data:MXNet::NDArray?,min_factor,max_factor,**kwargs)-class-method","name":"_image_random_hue","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"min_factor","doc":null,"default_value":"","external_name":"min_factor","restriction":""},{"name":"max_factor","doc":null,"default_value":"","external_name":"max_factor","restriction":""}],"args_string":"(data : MXNet::NDArray?, min_factor, max_factor, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, min_factor, max_factor, **kwargs)","location":null,"def":{"name":"_image_random_hue","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"min_factor","doc":null,"default_value":"","external_name":"min_factor","restriction":""},{"name":"max_factor","doc":null,"default_value":"","external_name":"max_factor","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_image_random_hue\", data, **kwargs.merge(min_factor: min_factor, max_factor: max_factor))"}},{"id":"_image_random_lighting(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_image_random_lighting(data:MXNet::NDArray?,**kwargs)-class-method","name":"_image_random_lighting","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_image_random_lighting","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_image_random_lighting\", data, **kwargs)"}},{"id":"_image_random_saturation(data:MXNet::NDArray?,min_factor,max_factor,**kwargs)-class-method","html_id":"_image_random_saturation(data:MXNet::NDArray?,min_factor,max_factor,**kwargs)-class-method","name":"_image_random_saturation","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"min_factor","doc":null,"default_value":"","external_name":"min_factor","restriction":""},{"name":"max_factor","doc":null,"default_value":"","external_name":"max_factor","restriction":""}],"args_string":"(data : MXNet::NDArray?, min_factor, max_factor, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, min_factor, max_factor, **kwargs)","location":null,"def":{"name":"_image_random_saturation","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"min_factor","doc":null,"default_value":"","external_name":"min_factor","restriction":""},{"name":"max_factor","doc":null,"default_value":"","external_name":"max_factor","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_image_random_saturation\", data, **kwargs.merge(min_factor: min_factor, max_factor: max_factor))"}},{"id":"_image_to_tensor(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_image_to_tensor(data:MXNet::NDArray?,**kwargs)-class-method","name":"_image_to_tensor","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_image_to_tensor","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_image_to_tensor\", data, **kwargs)"}},{"id":"_imdecode(mean:MXNet::NDArray?,index,x0,y0,x1,y1,c,size,**kwargs)-class-method","html_id":"_imdecode(mean:MXNet::NDArray?,index,x0,y0,x1,y1,c,size,**kwargs)-class-method","name":"_imdecode","doc":null,"summary":null,"abstract":false,"args":[{"name":"mean","doc":null,"default_value":"","external_name":"mean","restriction":"MXNet::NDArray | ::Nil"},{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":""},{"name":"x0","doc":null,"default_value":"","external_name":"x0","restriction":""},{"name":"y0","doc":null,"default_value":"","external_name":"y0","restriction":""},{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":""},{"name":"y1","doc":null,"default_value":"","external_name":"y1","restriction":""},{"name":"c","doc":null,"default_value":"","external_name":"c","restriction":""},{"name":"size","doc":null,"default_value":"","external_name":"size","restriction":""}],"args_string":"(mean : MXNet::NDArray?, index, x0, y0, x1, y1, c, size, **kwargs)","args_html":"(mean : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, index, x0, y0, x1, y1, c, size, **kwargs)","location":null,"def":{"name":"_imdecode","args":[{"name":"mean","doc":null,"default_value":"","external_name":"mean","restriction":"MXNet::NDArray | ::Nil"},{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":""},{"name":"x0","doc":null,"default_value":"","external_name":"x0","restriction":""},{"name":"y0","doc":null,"default_value":"","external_name":"y0","restriction":""},{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":""},{"name":"y1","doc":null,"default_value":"","external_name":"y1","restriction":""},{"name":"c","doc":null,"default_value":"","external_name":"c","restriction":""},{"name":"size","doc":null,"default_value":"","external_name":"size","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_imdecode\", mean, **kwargs.merge(index: index, x0: x0, y0: y0, x1: x1, y1: y1, c: c, size: size))"}},{"id":"_Lesser(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","html_id":"_Lesser(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","name":"_Lesser","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(lhs : MXNet::NDArray?, rhs : MXNet::NDArray?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, rhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_Lesser","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_Lesser\", lhs, rhs, **kwargs)"}},{"id":"_lesser(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","html_id":"_lesser(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","name":"_lesser","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(lhs : MXNet::NDArray?, rhs : MXNet::NDArray?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, rhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_lesser","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_lesser\", lhs, rhs, **kwargs)"}},{"id":"_Lesser_Equal(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","html_id":"_Lesser_Equal(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","name":"_Lesser_Equal","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(lhs : MXNet::NDArray?, rhs : MXNet::NDArray?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, rhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_Lesser_Equal","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_Lesser_Equal\", lhs, rhs, **kwargs)"}},{"id":"_lesser_equal(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","html_id":"_lesser_equal(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","name":"_lesser_equal","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(lhs : MXNet::NDArray?, rhs : MXNet::NDArray?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, rhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_lesser_equal","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_lesser_equal\", lhs, rhs, **kwargs)"}},{"id":"_lesser_equal_scalar(data:MXNet::NDArray?,scalar,**kwargs)-class-method","html_id":"_lesser_equal_scalar(data:MXNet::NDArray?,scalar,**kwargs)-class-method","name":"_lesser_equal_scalar","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"args_string":"(data : MXNet::NDArray?, scalar, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, scalar, **kwargs)","location":null,"def":{"name":"_lesser_equal_scalar","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_lesser_equal_scalar\", data, **kwargs.merge(scalar: scalar))"}},{"id":"_lesser_scalar(data:MXNet::NDArray?,scalar,**kwargs)-class-method","html_id":"_lesser_scalar(data:MXNet::NDArray?,scalar,**kwargs)-class-method","name":"_lesser_scalar","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"args_string":"(data : MXNet::NDArray?, scalar, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, scalar, **kwargs)","location":null,"def":{"name":"_lesser_scalar","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_lesser_scalar\", data, **kwargs.merge(scalar: scalar))"}},{"id":"_LesserEqualScalar(data:MXNet::NDArray?,scalar,**kwargs)-class-method","html_id":"_LesserEqualScalar(data:MXNet::NDArray?,scalar,**kwargs)-class-method","name":"_LesserEqualScalar","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"args_string":"(data : MXNet::NDArray?, scalar, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, scalar, **kwargs)","location":null,"def":{"name":"_LesserEqualScalar","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_LesserEqualScalar\", data, **kwargs.merge(scalar: scalar))"}},{"id":"_LesserScalar(data:MXNet::NDArray?,scalar,**kwargs)-class-method","html_id":"_LesserScalar(data:MXNet::NDArray?,scalar,**kwargs)-class-method","name":"_LesserScalar","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"args_string":"(data : MXNet::NDArray?, scalar, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, scalar, **kwargs)","location":null,"def":{"name":"_LesserScalar","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_LesserScalar\", data, **kwargs.merge(scalar: scalar))"}},{"id":"_logical_and(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","html_id":"_logical_and(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","name":"_logical_and","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(lhs : MXNet::NDArray?, rhs : MXNet::NDArray?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, rhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_logical_and","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_logical_and\", lhs, rhs, **kwargs)"}},{"id":"_Logical_And(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","html_id":"_Logical_And(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","name":"_Logical_And","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(lhs : MXNet::NDArray?, rhs : MXNet::NDArray?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, rhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_Logical_And","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_Logical_And\", lhs, rhs, **kwargs)"}},{"id":"_logical_and_scalar(data:MXNet::NDArray?,scalar,**kwargs)-class-method","html_id":"_logical_and_scalar(data:MXNet::NDArray?,scalar,**kwargs)-class-method","name":"_logical_and_scalar","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"args_string":"(data : MXNet::NDArray?, scalar, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, scalar, **kwargs)","location":null,"def":{"name":"_logical_and_scalar","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_logical_and_scalar\", data, **kwargs.merge(scalar: scalar))"}},{"id":"_logical_or(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","html_id":"_logical_or(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","name":"_logical_or","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(lhs : MXNet::NDArray?, rhs : MXNet::NDArray?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, rhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_logical_or","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_logical_or\", lhs, rhs, **kwargs)"}},{"id":"_Logical_Or(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","html_id":"_Logical_Or(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","name":"_Logical_Or","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(lhs : MXNet::NDArray?, rhs : MXNet::NDArray?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, rhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_Logical_Or","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_Logical_Or\", lhs, rhs, **kwargs)"}},{"id":"_logical_or_scalar(data:MXNet::NDArray?,scalar,**kwargs)-class-method","html_id":"_logical_or_scalar(data:MXNet::NDArray?,scalar,**kwargs)-class-method","name":"_logical_or_scalar","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"args_string":"(data : MXNet::NDArray?, scalar, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, scalar, **kwargs)","location":null,"def":{"name":"_logical_or_scalar","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_logical_or_scalar\", data, **kwargs.merge(scalar: scalar))"}},{"id":"_logical_xor(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","html_id":"_logical_xor(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","name":"_logical_xor","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(lhs : MXNet::NDArray?, rhs : MXNet::NDArray?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, rhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_logical_xor","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_logical_xor\", lhs, rhs, **kwargs)"}},{"id":"_Logical_Xor(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","html_id":"_Logical_Xor(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","name":"_Logical_Xor","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(lhs : MXNet::NDArray?, rhs : MXNet::NDArray?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, rhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_Logical_Xor","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_Logical_Xor\", lhs, rhs, **kwargs)"}},{"id":"_logical_xor_scalar(data:MXNet::NDArray?,scalar,**kwargs)-class-method","html_id":"_logical_xor_scalar(data:MXNet::NDArray?,scalar,**kwargs)-class-method","name":"_logical_xor_scalar","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"args_string":"(data : MXNet::NDArray?, scalar, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, scalar, **kwargs)","location":null,"def":{"name":"_logical_xor_scalar","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_logical_xor_scalar\", data, **kwargs.merge(scalar: scalar))"}},{"id":"_LogicalAndScalar(data:MXNet::NDArray?,scalar,**kwargs)-class-method","html_id":"_LogicalAndScalar(data:MXNet::NDArray?,scalar,**kwargs)-class-method","name":"_LogicalAndScalar","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"args_string":"(data : MXNet::NDArray?, scalar, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, scalar, **kwargs)","location":null,"def":{"name":"_LogicalAndScalar","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_LogicalAndScalar\", data, **kwargs.merge(scalar: scalar))"}},{"id":"_LogicalOrScalar(data:MXNet::NDArray?,scalar,**kwargs)-class-method","html_id":"_LogicalOrScalar(data:MXNet::NDArray?,scalar,**kwargs)-class-method","name":"_LogicalOrScalar","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"args_string":"(data : MXNet::NDArray?, scalar, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, scalar, **kwargs)","location":null,"def":{"name":"_LogicalOrScalar","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_LogicalOrScalar\", data, **kwargs.merge(scalar: scalar))"}},{"id":"_LogicalXorScalar(data:MXNet::NDArray?,scalar,**kwargs)-class-method","html_id":"_LogicalXorScalar(data:MXNet::NDArray?,scalar,**kwargs)-class-method","name":"_LogicalXorScalar","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"args_string":"(data : MXNet::NDArray?, scalar, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, scalar, **kwargs)","location":null,"def":{"name":"_LogicalXorScalar","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_LogicalXorScalar\", data, **kwargs.merge(scalar: scalar))"}},{"id":"_Maximum(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","html_id":"_Maximum(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","name":"_Maximum","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(lhs : MXNet::NDArray?, rhs : MXNet::NDArray?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, rhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_Maximum","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_Maximum\", lhs, rhs, **kwargs)"}},{"id":"_maximum(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","html_id":"_maximum(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","name":"_maximum","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(lhs : MXNet::NDArray?, rhs : MXNet::NDArray?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, rhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_maximum","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_maximum\", lhs, rhs, **kwargs)"}},{"id":"_maximum_scalar(data:MXNet::NDArray?,scalar,**kwargs)-class-method","html_id":"_maximum_scalar(data:MXNet::NDArray?,scalar,**kwargs)-class-method","name":"_maximum_scalar","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"args_string":"(data : MXNet::NDArray?, scalar, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, scalar, **kwargs)","location":null,"def":{"name":"_maximum_scalar","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_maximum_scalar\", data, **kwargs.merge(scalar: scalar))"}},{"id":"_MaximumScalar(data:MXNet::NDArray?,scalar,**kwargs)-class-method","html_id":"_MaximumScalar(data:MXNet::NDArray?,scalar,**kwargs)-class-method","name":"_MaximumScalar","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"args_string":"(data : MXNet::NDArray?, scalar, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, scalar, **kwargs)","location":null,"def":{"name":"_MaximumScalar","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_MaximumScalar\", data, **kwargs.merge(scalar: scalar))"}},{"id":"_minimum(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","html_id":"_minimum(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","name":"_minimum","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(lhs : MXNet::NDArray?, rhs : MXNet::NDArray?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, rhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_minimum","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_minimum\", lhs, rhs, **kwargs)"}},{"id":"_Minimum(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","html_id":"_Minimum(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","name":"_Minimum","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(lhs : MXNet::NDArray?, rhs : MXNet::NDArray?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, rhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_Minimum","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_Minimum\", lhs, rhs, **kwargs)"}},{"id":"_minimum_scalar(data:MXNet::NDArray?,scalar,**kwargs)-class-method","html_id":"_minimum_scalar(data:MXNet::NDArray?,scalar,**kwargs)-class-method","name":"_minimum_scalar","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"args_string":"(data : MXNet::NDArray?, scalar, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, scalar, **kwargs)","location":null,"def":{"name":"_minimum_scalar","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_minimum_scalar\", data, **kwargs.merge(scalar: scalar))"}},{"id":"_MinimumScalar(data:MXNet::NDArray?,scalar,**kwargs)-class-method","html_id":"_MinimumScalar(data:MXNet::NDArray?,scalar,**kwargs)-class-method","name":"_MinimumScalar","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"args_string":"(data : MXNet::NDArray?, scalar, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, scalar, **kwargs)","location":null,"def":{"name":"_MinimumScalar","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_MinimumScalar\", data, **kwargs.merge(scalar: scalar))"}},{"id":"_minus(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","html_id":"_minus(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","name":"_minus","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(lhs : MXNet::NDArray?, rhs : MXNet::NDArray?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, rhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_minus","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_minus\", lhs, rhs, **kwargs)"}},{"id":"_Minus(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","html_id":"_Minus(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","name":"_Minus","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(lhs : MXNet::NDArray?, rhs : MXNet::NDArray?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, rhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_Minus","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_Minus\", lhs, rhs, **kwargs)"}},{"id":"_minus_scalar(data:MXNet::NDArray?,scalar,**kwargs)-class-method","html_id":"_minus_scalar(data:MXNet::NDArray?,scalar,**kwargs)-class-method","name":"_minus_scalar","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"args_string":"(data : MXNet::NDArray?, scalar, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, scalar, **kwargs)","location":null,"def":{"name":"_minus_scalar","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_minus_scalar\", data, **kwargs.merge(scalar: scalar))"}},{"id":"_MinusScalar(data:MXNet::NDArray?,scalar,**kwargs)-class-method","html_id":"_MinusScalar(data:MXNet::NDArray?,scalar,**kwargs)-class-method","name":"_MinusScalar","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"args_string":"(data : MXNet::NDArray?, scalar, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, scalar, **kwargs)","location":null,"def":{"name":"_MinusScalar","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_MinusScalar\", data, **kwargs.merge(scalar: scalar))"}},{"id":"_mod(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","html_id":"_mod(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","name":"_mod","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(lhs : MXNet::NDArray?, rhs : MXNet::NDArray?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, rhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_mod","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_mod\", lhs, rhs, **kwargs)"}},{"id":"_Mod(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","html_id":"_Mod(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","name":"_Mod","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(lhs : MXNet::NDArray?, rhs : MXNet::NDArray?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, rhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_Mod","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_Mod\", lhs, rhs, **kwargs)"}},{"id":"_mod_scalar(data:MXNet::NDArray?,scalar,**kwargs)-class-method","html_id":"_mod_scalar(data:MXNet::NDArray?,scalar,**kwargs)-class-method","name":"_mod_scalar","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"args_string":"(data : MXNet::NDArray?, scalar, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, scalar, **kwargs)","location":null,"def":{"name":"_mod_scalar","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_mod_scalar\", data, **kwargs.merge(scalar: scalar))"}},{"id":"_ModScalar(data:MXNet::NDArray?,scalar,**kwargs)-class-method","html_id":"_ModScalar(data:MXNet::NDArray?,scalar,**kwargs)-class-method","name":"_ModScalar","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"args_string":"(data : MXNet::NDArray?, scalar, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, scalar, **kwargs)","location":null,"def":{"name":"_ModScalar","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_ModScalar\", data, **kwargs.merge(scalar: scalar))"}},{"id":"_mul(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","html_id":"_mul(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","name":"_mul","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(lhs : MXNet::NDArray?, rhs : MXNet::NDArray?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, rhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_mul","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_mul\", lhs, rhs, **kwargs)"}},{"id":"_Mul(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","html_id":"_Mul(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","name":"_Mul","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(lhs : MXNet::NDArray?, rhs : MXNet::NDArray?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, rhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_Mul","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_Mul\", lhs, rhs, **kwargs)"}},{"id":"_mul_scalar(data:MXNet::NDArray?,scalar,**kwargs)-class-method","html_id":"_mul_scalar(data:MXNet::NDArray?,scalar,**kwargs)-class-method","name":"_mul_scalar","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"args_string":"(data : MXNet::NDArray?, scalar, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, scalar, **kwargs)","location":null,"def":{"name":"_mul_scalar","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_mul_scalar\", data, **kwargs.merge(scalar: scalar))"}},{"id":"_MulScalar(data:MXNet::NDArray?,scalar,**kwargs)-class-method","html_id":"_MulScalar(data:MXNet::NDArray?,scalar,**kwargs)-class-method","name":"_MulScalar","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"args_string":"(data : MXNet::NDArray?, scalar, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, scalar, **kwargs)","location":null,"def":{"name":"_MulScalar","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_MulScalar\", data, **kwargs.merge(scalar: scalar))"}},{"id":"_Native(data:Array(MXNet::NDArray),info,**kwargs)-class-method","html_id":"_Native(data:Array(MXNet::NDArray),info,**kwargs)-class-method","name":"_Native","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"Array(MXNet::NDArray)"},{"name":"info","doc":null,"default_value":"","external_name":"info","restriction":""}],"args_string":"(data : Array(MXNet::NDArray), info, **kwargs)","args_html":"(data : Array(<a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>), info, **kwargs)","location":null,"def":{"name":"_Native","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"Array(MXNet::NDArray)"},{"name":"info","doc":null,"default_value":"","external_name":"info","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_Native\", data, **kwargs.merge(info: info))"}},{"id":"_NDArray(data:Array(MXNet::NDArray),info,**kwargs)-class-method","html_id":"_NDArray(data:Array(MXNet::NDArray),info,**kwargs)-class-method","name":"_NDArray","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"Array(MXNet::NDArray)"},{"name":"info","doc":null,"default_value":"","external_name":"info","restriction":""}],"args_string":"(data : Array(MXNet::NDArray), info, **kwargs)","args_html":"(data : Array(<a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>), info, **kwargs)","location":null,"def":{"name":"_NDArray","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"Array(MXNet::NDArray)"},{"name":"info","doc":null,"default_value":"","external_name":"info","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_NDArray\", data, **kwargs.merge(info: info))"}},{"id":"_NoGradient(**kwargs)-class-method","html_id":"_NoGradient(**kwargs)-class-method","name":"_NoGradient","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"_NoGradient","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_NoGradient\", **kwargs)"}},{"id":"_not_equal(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","html_id":"_not_equal(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","name":"_not_equal","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(lhs : MXNet::NDArray?, rhs : MXNet::NDArray?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, rhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_not_equal","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_not_equal\", lhs, rhs, **kwargs)"}},{"id":"_Not_Equal(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","html_id":"_Not_Equal(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","name":"_Not_Equal","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(lhs : MXNet::NDArray?, rhs : MXNet::NDArray?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, rhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_Not_Equal","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_Not_Equal\", lhs, rhs, **kwargs)"}},{"id":"_not_equal_scalar(data:MXNet::NDArray?,scalar,**kwargs)-class-method","html_id":"_not_equal_scalar(data:MXNet::NDArray?,scalar,**kwargs)-class-method","name":"_not_equal_scalar","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"args_string":"(data : MXNet::NDArray?, scalar, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, scalar, **kwargs)","location":null,"def":{"name":"_not_equal_scalar","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_not_equal_scalar\", data, **kwargs.merge(scalar: scalar))"}},{"id":"_NotEqualScalar(data:MXNet::NDArray?,scalar,**kwargs)-class-method","html_id":"_NotEqualScalar(data:MXNet::NDArray?,scalar,**kwargs)-class-method","name":"_NotEqualScalar","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"args_string":"(data : MXNet::NDArray?, scalar, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, scalar, **kwargs)","location":null,"def":{"name":"_NotEqualScalar","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_NotEqualScalar\", data, **kwargs.merge(scalar: scalar))"}},{"id":"_onehot_encode(**kwargs)-class-method","html_id":"_onehot_encode(**kwargs)-class-method","name":"_onehot_encode","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"_onehot_encode","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_onehot_encode\", **kwargs)"}},{"id":"_ones(**kwargs)-class-method","html_id":"_ones(**kwargs)-class-method","name":"_ones","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"_ones","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_ones\", **kwargs)"}},{"id":"_Plus(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","html_id":"_Plus(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","name":"_Plus","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(lhs : MXNet::NDArray?, rhs : MXNet::NDArray?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, rhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_Plus","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_Plus\", lhs, rhs, **kwargs)"}},{"id":"_plus(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","html_id":"_plus(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","name":"_plus","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(lhs : MXNet::NDArray?, rhs : MXNet::NDArray?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, rhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_plus","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_plus\", lhs, rhs, **kwargs)"}},{"id":"_plus_scalar(data:MXNet::NDArray?,scalar,**kwargs)-class-method","html_id":"_plus_scalar(data:MXNet::NDArray?,scalar,**kwargs)-class-method","name":"_plus_scalar","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"args_string":"(data : MXNet::NDArray?, scalar, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, scalar, **kwargs)","location":null,"def":{"name":"_plus_scalar","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_plus_scalar\", data, **kwargs.merge(scalar: scalar))"}},{"id":"_PlusScalar(data:MXNet::NDArray?,scalar,**kwargs)-class-method","html_id":"_PlusScalar(data:MXNet::NDArray?,scalar,**kwargs)-class-method","name":"_PlusScalar","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"args_string":"(data : MXNet::NDArray?, scalar, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, scalar, **kwargs)","location":null,"def":{"name":"_PlusScalar","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_PlusScalar\", data, **kwargs.merge(scalar: scalar))"}},{"id":"_Power(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","html_id":"_Power(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","name":"_Power","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(lhs : MXNet::NDArray?, rhs : MXNet::NDArray?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, rhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_Power","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_Power\", lhs, rhs, **kwargs)"}},{"id":"_power(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","html_id":"_power(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","name":"_power","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(lhs : MXNet::NDArray?, rhs : MXNet::NDArray?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, rhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_power","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_power\", lhs, rhs, **kwargs)"}},{"id":"_power_scalar(data:MXNet::NDArray?,scalar,**kwargs)-class-method","html_id":"_power_scalar(data:MXNet::NDArray?,scalar,**kwargs)-class-method","name":"_power_scalar","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"args_string":"(data : MXNet::NDArray?, scalar, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, scalar, **kwargs)","location":null,"def":{"name":"_power_scalar","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_power_scalar\", data, **kwargs.merge(scalar: scalar))"}},{"id":"_PowerScalar(data:MXNet::NDArray?,scalar,**kwargs)-class-method","html_id":"_PowerScalar(data:MXNet::NDArray?,scalar,**kwargs)-class-method","name":"_PowerScalar","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"args_string":"(data : MXNet::NDArray?, scalar, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, scalar, **kwargs)","location":null,"def":{"name":"_PowerScalar","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_PowerScalar\", data, **kwargs.merge(scalar: scalar))"}},{"id":"_random_exponential(**kwargs)-class-method","html_id":"_random_exponential(**kwargs)-class-method","name":"_random_exponential","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"_random_exponential","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_random_exponential\", **kwargs)"}},{"id":"_random_gamma(**kwargs)-class-method","html_id":"_random_gamma(**kwargs)-class-method","name":"_random_gamma","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"_random_gamma","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_random_gamma\", **kwargs)"}},{"id":"_random_generalized_negative_binomial(**kwargs)-class-method","html_id":"_random_generalized_negative_binomial(**kwargs)-class-method","name":"_random_generalized_negative_binomial","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"_random_generalized_negative_binomial","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_random_generalized_negative_binomial\", **kwargs)"}},{"id":"_random_negative_binomial(**kwargs)-class-method","html_id":"_random_negative_binomial(**kwargs)-class-method","name":"_random_negative_binomial","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"_random_negative_binomial","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_random_negative_binomial\", **kwargs)"}},{"id":"_random_normal(**kwargs)-class-method","html_id":"_random_normal(**kwargs)-class-method","name":"_random_normal","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"_random_normal","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_random_normal\", **kwargs)"}},{"id":"_random_poisson(**kwargs)-class-method","html_id":"_random_poisson(**kwargs)-class-method","name":"_random_poisson","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"_random_poisson","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_random_poisson\", **kwargs)"}},{"id":"_random_randint(low,high,**kwargs)-class-method","html_id":"_random_randint(low,high,**kwargs)-class-method","name":"_random_randint","doc":null,"summary":null,"abstract":false,"args":[{"name":"low","doc":null,"default_value":"","external_name":"low","restriction":""},{"name":"high","doc":null,"default_value":"","external_name":"high","restriction":""}],"args_string":"(low, high, **kwargs)","args_html":"(low, high, **kwargs)","location":null,"def":{"name":"_random_randint","args":[{"name":"low","doc":null,"default_value":"","external_name":"low","restriction":""},{"name":"high","doc":null,"default_value":"","external_name":"high","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_random_randint\", **kwargs.merge(low: low, high: high))"}},{"id":"_random_uniform(**kwargs)-class-method","html_id":"_random_uniform(**kwargs)-class-method","name":"_random_uniform","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"_random_uniform","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_random_uniform\", **kwargs)"}},{"id":"_ravel_multi_index(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_ravel_multi_index(data:MXNet::NDArray?,**kwargs)-class-method","name":"_ravel_multi_index","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_ravel_multi_index","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_ravel_multi_index\", data, **kwargs)"}},{"id":"_rdiv_scalar(data:MXNet::NDArray?,scalar,**kwargs)-class-method","html_id":"_rdiv_scalar(data:MXNet::NDArray?,scalar,**kwargs)-class-method","name":"_rdiv_scalar","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"args_string":"(data : MXNet::NDArray?, scalar, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, scalar, **kwargs)","location":null,"def":{"name":"_rdiv_scalar","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_rdiv_scalar\", data, **kwargs.merge(scalar: scalar))"}},{"id":"_RDivScalar(data:MXNet::NDArray?,scalar,**kwargs)-class-method","html_id":"_RDivScalar(data:MXNet::NDArray?,scalar,**kwargs)-class-method","name":"_RDivScalar","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"args_string":"(data : MXNet::NDArray?, scalar, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, scalar, **kwargs)","location":null,"def":{"name":"_RDivScalar","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_RDivScalar\", data, **kwargs.merge(scalar: scalar))"}},{"id":"_rminus_scalar(data:MXNet::NDArray?,scalar,**kwargs)-class-method","html_id":"_rminus_scalar(data:MXNet::NDArray?,scalar,**kwargs)-class-method","name":"_rminus_scalar","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"args_string":"(data : MXNet::NDArray?, scalar, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, scalar, **kwargs)","location":null,"def":{"name":"_rminus_scalar","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_rminus_scalar\", data, **kwargs.merge(scalar: scalar))"}},{"id":"_RMinusScalar(data:MXNet::NDArray?,scalar,**kwargs)-class-method","html_id":"_RMinusScalar(data:MXNet::NDArray?,scalar,**kwargs)-class-method","name":"_RMinusScalar","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"args_string":"(data : MXNet::NDArray?, scalar, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, scalar, **kwargs)","location":null,"def":{"name":"_RMinusScalar","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_RMinusScalar\", data, **kwargs.merge(scalar: scalar))"}},{"id":"_rmod_scalar(data:MXNet::NDArray?,scalar,**kwargs)-class-method","html_id":"_rmod_scalar(data:MXNet::NDArray?,scalar,**kwargs)-class-method","name":"_rmod_scalar","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"args_string":"(data : MXNet::NDArray?, scalar, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, scalar, **kwargs)","location":null,"def":{"name":"_rmod_scalar","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_rmod_scalar\", data, **kwargs.merge(scalar: scalar))"}},{"id":"_RModScalar(data:MXNet::NDArray?,scalar,**kwargs)-class-method","html_id":"_RModScalar(data:MXNet::NDArray?,scalar,**kwargs)-class-method","name":"_RModScalar","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"args_string":"(data : MXNet::NDArray?, scalar, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, scalar, **kwargs)","location":null,"def":{"name":"_RModScalar","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_RModScalar\", data, **kwargs.merge(scalar: scalar))"}},{"id":"_rpower_scalar(data:MXNet::NDArray?,scalar,**kwargs)-class-method","html_id":"_rpower_scalar(data:MXNet::NDArray?,scalar,**kwargs)-class-method","name":"_rpower_scalar","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"args_string":"(data : MXNet::NDArray?, scalar, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, scalar, **kwargs)","location":null,"def":{"name":"_rpower_scalar","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_rpower_scalar\", data, **kwargs.merge(scalar: scalar))"}},{"id":"_RPowerScalar(data:MXNet::NDArray?,scalar,**kwargs)-class-method","html_id":"_RPowerScalar(data:MXNet::NDArray?,scalar,**kwargs)-class-method","name":"_RPowerScalar","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"args_string":"(data : MXNet::NDArray?, scalar, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, scalar, **kwargs)","location":null,"def":{"name":"_RPowerScalar","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_RPowerScalar\", data, **kwargs.merge(scalar: scalar))"}},{"id":"_sample_exponential(lam:MXNet::NDArray?,**kwargs)-class-method","html_id":"_sample_exponential(lam:MXNet::NDArray?,**kwargs)-class-method","name":"_sample_exponential","doc":null,"summary":null,"abstract":false,"args":[{"name":"lam","doc":null,"default_value":"","external_name":"lam","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(lam : MXNet::NDArray?, **kwargs)","args_html":"(lam : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_sample_exponential","args":[{"name":"lam","doc":null,"default_value":"","external_name":"lam","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_sample_exponential\", lam, **kwargs)"}},{"id":"_sample_gamma(alpha:MXNet::NDArray?,beta:MXNet::NDArray?,**kwargs)-class-method","html_id":"_sample_gamma(alpha:MXNet::NDArray?,beta:MXNet::NDArray?,**kwargs)-class-method","name":"_sample_gamma","doc":null,"summary":null,"abstract":false,"args":[{"name":"alpha","doc":null,"default_value":"","external_name":"alpha","restriction":"MXNet::NDArray | ::Nil"},{"name":"beta","doc":null,"default_value":"","external_name":"beta","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(alpha : MXNet::NDArray?, beta : MXNet::NDArray?, **kwargs)","args_html":"(alpha : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, beta : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_sample_gamma","args":[{"name":"alpha","doc":null,"default_value":"","external_name":"alpha","restriction":"MXNet::NDArray | ::Nil"},{"name":"beta","doc":null,"default_value":"","external_name":"beta","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_sample_gamma\", alpha, beta, **kwargs)"}},{"id":"_sample_generalized_negative_binomial(mu:MXNet::NDArray?,alpha:MXNet::NDArray?,**kwargs)-class-method","html_id":"_sample_generalized_negative_binomial(mu:MXNet::NDArray?,alpha:MXNet::NDArray?,**kwargs)-class-method","name":"_sample_generalized_negative_binomial","doc":null,"summary":null,"abstract":false,"args":[{"name":"mu","doc":null,"default_value":"","external_name":"mu","restriction":"MXNet::NDArray | ::Nil"},{"name":"alpha","doc":null,"default_value":"","external_name":"alpha","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(mu : MXNet::NDArray?, alpha : MXNet::NDArray?, **kwargs)","args_html":"(mu : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, alpha : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_sample_generalized_negative_binomial","args":[{"name":"mu","doc":null,"default_value":"","external_name":"mu","restriction":"MXNet::NDArray | ::Nil"},{"name":"alpha","doc":null,"default_value":"","external_name":"alpha","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_sample_generalized_negative_binomial\", mu, alpha, **kwargs)"}},{"id":"_sample_multinomial(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_sample_multinomial(data:MXNet::NDArray?,**kwargs)-class-method","name":"_sample_multinomial","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_sample_multinomial","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_sample_multinomial\", data, **kwargs)"}},{"id":"_sample_negative_binomial(k:MXNet::NDArray?,p:MXNet::NDArray?,**kwargs)-class-method","html_id":"_sample_negative_binomial(k:MXNet::NDArray?,p:MXNet::NDArray?,**kwargs)-class-method","name":"_sample_negative_binomial","doc":null,"summary":null,"abstract":false,"args":[{"name":"k","doc":null,"default_value":"","external_name":"k","restriction":"MXNet::NDArray | ::Nil"},{"name":"p","doc":null,"default_value":"","external_name":"p","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(k : MXNet::NDArray?, p : MXNet::NDArray?, **kwargs)","args_html":"(k : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, p : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_sample_negative_binomial","args":[{"name":"k","doc":null,"default_value":"","external_name":"k","restriction":"MXNet::NDArray | ::Nil"},{"name":"p","doc":null,"default_value":"","external_name":"p","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_sample_negative_binomial\", k, p, **kwargs)"}},{"id":"_sample_normal(mu:MXNet::NDArray?,sigma:MXNet::NDArray?,**kwargs)-class-method","html_id":"_sample_normal(mu:MXNet::NDArray?,sigma:MXNet::NDArray?,**kwargs)-class-method","name":"_sample_normal","doc":null,"summary":null,"abstract":false,"args":[{"name":"mu","doc":null,"default_value":"","external_name":"mu","restriction":"MXNet::NDArray | ::Nil"},{"name":"sigma","doc":null,"default_value":"","external_name":"sigma","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(mu : MXNet::NDArray?, sigma : MXNet::NDArray?, **kwargs)","args_html":"(mu : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, sigma : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_sample_normal","args":[{"name":"mu","doc":null,"default_value":"","external_name":"mu","restriction":"MXNet::NDArray | ::Nil"},{"name":"sigma","doc":null,"default_value":"","external_name":"sigma","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_sample_normal\", mu, sigma, **kwargs)"}},{"id":"_sample_poisson(lam:MXNet::NDArray?,**kwargs)-class-method","html_id":"_sample_poisson(lam:MXNet::NDArray?,**kwargs)-class-method","name":"_sample_poisson","doc":null,"summary":null,"abstract":false,"args":[{"name":"lam","doc":null,"default_value":"","external_name":"lam","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(lam : MXNet::NDArray?, **kwargs)","args_html":"(lam : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_sample_poisson","args":[{"name":"lam","doc":null,"default_value":"","external_name":"lam","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_sample_poisson\", lam, **kwargs)"}},{"id":"_sample_uniform(low:MXNet::NDArray?,high:MXNet::NDArray?,**kwargs)-class-method","html_id":"_sample_uniform(low:MXNet::NDArray?,high:MXNet::NDArray?,**kwargs)-class-method","name":"_sample_uniform","doc":null,"summary":null,"abstract":false,"args":[{"name":"low","doc":null,"default_value":"","external_name":"low","restriction":"MXNet::NDArray | ::Nil"},{"name":"high","doc":null,"default_value":"","external_name":"high","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(low : MXNet::NDArray?, high : MXNet::NDArray?, **kwargs)","args_html":"(low : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, high : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_sample_uniform","args":[{"name":"low","doc":null,"default_value":"","external_name":"low","restriction":"MXNet::NDArray | ::Nil"},{"name":"high","doc":null,"default_value":"","external_name":"high","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_sample_uniform\", low, high, **kwargs)"}},{"id":"_scatter_elemwise_div(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","html_id":"_scatter_elemwise_div(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","name":"_scatter_elemwise_div","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(lhs : MXNet::NDArray?, rhs : MXNet::NDArray?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, rhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_scatter_elemwise_div","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_scatter_elemwise_div\", lhs, rhs, **kwargs)"}},{"id":"_scatter_minus_scalar(data:MXNet::NDArray?,scalar,**kwargs)-class-method","html_id":"_scatter_minus_scalar(data:MXNet::NDArray?,scalar,**kwargs)-class-method","name":"_scatter_minus_scalar","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"args_string":"(data : MXNet::NDArray?, scalar, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, scalar, **kwargs)","location":null,"def":{"name":"_scatter_minus_scalar","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_scatter_minus_scalar\", data, **kwargs.merge(scalar: scalar))"}},{"id":"_scatter_plus_scalar(data:MXNet::NDArray?,scalar,**kwargs)-class-method","html_id":"_scatter_plus_scalar(data:MXNet::NDArray?,scalar,**kwargs)-class-method","name":"_scatter_plus_scalar","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"args_string":"(data : MXNet::NDArray?, scalar, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, scalar, **kwargs)","location":null,"def":{"name":"_scatter_plus_scalar","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_scatter_plus_scalar\", data, **kwargs.merge(scalar: scalar))"}},{"id":"_scatter_set_nd(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,indices:MXNet::NDArray?,shape,**kwargs)-class-method","html_id":"_scatter_set_nd(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,indices:MXNet::NDArray?,shape,**kwargs)-class-method","name":"_scatter_set_nd","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"indices","doc":null,"default_value":"","external_name":"indices","restriction":"MXNet::NDArray | ::Nil"},{"name":"shape","doc":null,"default_value":"","external_name":"shape","restriction":""}],"args_string":"(lhs : MXNet::NDArray?, rhs : MXNet::NDArray?, indices : MXNet::NDArray?, shape, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, rhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, indices : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, shape, **kwargs)","location":null,"def":{"name":"_scatter_set_nd","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"indices","doc":null,"default_value":"","external_name":"indices","restriction":"MXNet::NDArray | ::Nil"},{"name":"shape","doc":null,"default_value":"","external_name":"shape","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_scatter_set_nd\", lhs, rhs, indices, **kwargs.merge(shape: shape))"}},{"id":"_set_value(**kwargs)-class-method","html_id":"_set_value(**kwargs)-class-method","name":"_set_value","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"_set_value","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_set_value\", **kwargs)"}},{"id":"_shuffle(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_shuffle(data:MXNet::NDArray?,**kwargs)-class-method","name":"_shuffle","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_shuffle","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_shuffle\", data, **kwargs)"}},{"id":"_slice_assign(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,begin_begin,end_end,**kwargs)-class-method","html_id":"_slice_assign(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,begin_begin,end_end,**kwargs)-class-method","name":"_slice_assign","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"_begin","doc":null,"default_value":"","external_name":"begin","restriction":""},{"name":"_end","doc":null,"default_value":"","external_name":"end","restriction":""}],"args_string":"(lhs : MXNet::NDArray?, rhs : MXNet::NDArray?, begin _begin, end _end, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, rhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, begin _begin, end _end, **kwargs)","location":null,"def":{"name":"_slice_assign","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"_begin","doc":null,"default_value":"","external_name":"begin","restriction":""},{"name":"_end","doc":null,"default_value":"","external_name":"end","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_slice_assign\", lhs, rhs, **kwargs.merge(begin: _begin, end: _end))"}},{"id":"_slice_assign_scalar(data:MXNet::NDArray?,begin_begin,end_end,**kwargs)-class-method","html_id":"_slice_assign_scalar(data:MXNet::NDArray?,begin_begin,end_end,**kwargs)-class-method","name":"_slice_assign_scalar","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"_begin","doc":null,"default_value":"","external_name":"begin","restriction":""},{"name":"_end","doc":null,"default_value":"","external_name":"end","restriction":""}],"args_string":"(data : MXNet::NDArray?, begin _begin, end _end, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, begin _begin, end _end, **kwargs)","location":null,"def":{"name":"_slice_assign_scalar","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"_begin","doc":null,"default_value":"","external_name":"begin","restriction":""},{"name":"_end","doc":null,"default_value":"","external_name":"end","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_slice_assign_scalar\", data, **kwargs.merge(begin: _begin, end: _end))"}},{"id":"_square_sum(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_square_sum(data:MXNet::NDArray?,**kwargs)-class-method","name":"_square_sum","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_square_sum","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_square_sum\", data, **kwargs)"}},{"id":"_sub(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","html_id":"_sub(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","name":"_sub","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(lhs : MXNet::NDArray?, rhs : MXNet::NDArray?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, rhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_sub","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_sub\", lhs, rhs, **kwargs)"}},{"id":"_unravel_index(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_unravel_index(data:MXNet::NDArray?,**kwargs)-class-method","name":"_unravel_index","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_unravel_index","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_unravel_index\", data, **kwargs)"}},{"id":"_while_loop(data:Array(MXNet::NDArray),num_args,num_outputs,num_out_data,max_iterations,cond_input_locs,func_input_locs,func_var_locs,**kwargs)-class-method","html_id":"_while_loop(data:Array(MXNet::NDArray),num_args,num_outputs,num_out_data,max_iterations,cond_input_locs,func_input_locs,func_var_locs,**kwargs)-class-method","name":"_while_loop","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"Array(MXNet::NDArray)"},{"name":"num_args","doc":null,"default_value":"","external_name":"num_args","restriction":""},{"name":"num_outputs","doc":null,"default_value":"","external_name":"num_outputs","restriction":""},{"name":"num_out_data","doc":null,"default_value":"","external_name":"num_out_data","restriction":""},{"name":"max_iterations","doc":null,"default_value":"","external_name":"max_iterations","restriction":""},{"name":"cond_input_locs","doc":null,"default_value":"","external_name":"cond_input_locs","restriction":""},{"name":"func_input_locs","doc":null,"default_value":"","external_name":"func_input_locs","restriction":""},{"name":"func_var_locs","doc":null,"default_value":"","external_name":"func_var_locs","restriction":""}],"args_string":"(data : Array(MXNet::NDArray), num_args, num_outputs, num_out_data, max_iterations, cond_input_locs, func_input_locs, func_var_locs, **kwargs)","args_html":"(data : Array(<a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>), num_args, num_outputs, num_out_data, max_iterations, cond_input_locs, func_input_locs, func_var_locs, **kwargs)","location":null,"def":{"name":"_while_loop","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"Array(MXNet::NDArray)"},{"name":"num_args","doc":null,"default_value":"","external_name":"num_args","restriction":""},{"name":"num_outputs","doc":null,"default_value":"","external_name":"num_outputs","restriction":""},{"name":"num_out_data","doc":null,"default_value":"","external_name":"num_out_data","restriction":""},{"name":"max_iterations","doc":null,"default_value":"","external_name":"max_iterations","restriction":""},{"name":"cond_input_locs","doc":null,"default_value":"","external_name":"cond_input_locs","restriction":""},{"name":"func_input_locs","doc":null,"default_value":"","external_name":"func_input_locs","restriction":""},{"name":"func_var_locs","doc":null,"default_value":"","external_name":"func_var_locs","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_while_loop\", data, **kwargs.merge(num_args: num_args, num_outputs: num_outputs, num_out_data: num_out_data, max_iterations: max_iterations, cond_input_locs: cond_input_locs, func_input_locs: func_input_locs, func_var_locs: func_var_locs))"}},{"id":"_zeros(**kwargs)-class-method","html_id":"_zeros(**kwargs)-class-method","name":"_zeros","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"_zeros","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_zeros\", **kwargs)"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"mxnet/MXNet/NDArray/Linalg","path":"MXNet/NDArray/Linalg.html","kind":"class","full_name":"MXNet::NDArray::Linalg","name":"Linalg","abstract":false,"superclass":{"html_id":"mxnet/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"mxnet/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"mxnet/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"mxnet","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"mxnet/MXNet/NDArray","kind":"class","full_name":"MXNet::NDArray","name":"NDArray"},"doc":null,"summary":null,"class_methods":[{"id":"_gelqf(a:MXNet::NDArray?,**kwargs)-class-method","html_id":"_gelqf(a:MXNet::NDArray?,**kwargs)-class-method","name":"_gelqf","doc":null,"summary":null,"abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(a : MXNet::NDArray?, **kwargs)","args_html":"(a : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_gelqf","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_linalg_gelqf\", a, **kwargs)"}},{"id":"_gemm(a:MXNet::NDArray?,b:MXNet::NDArray?,c:MXNet::NDArray?,**kwargs)-class-method","html_id":"_gemm(a:MXNet::NDArray?,b:MXNet::NDArray?,c:MXNet::NDArray?,**kwargs)-class-method","name":"_gemm","doc":null,"summary":null,"abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"MXNet::NDArray | ::Nil"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"MXNet::NDArray | ::Nil"},{"name":"c","doc":null,"default_value":"","external_name":"c","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(a : MXNet::NDArray?, b : MXNet::NDArray?, c : MXNet::NDArray?, **kwargs)","args_html":"(a : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, b : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, c : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_gemm","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"MXNet::NDArray | ::Nil"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"MXNet::NDArray | ::Nil"},{"name":"c","doc":null,"default_value":"","external_name":"c","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_linalg_gemm\", a, b, c, **kwargs)"}},{"id":"_gemm2(a:MXNet::NDArray?,b:MXNet::NDArray?,**kwargs)-class-method","html_id":"_gemm2(a:MXNet::NDArray?,b:MXNet::NDArray?,**kwargs)-class-method","name":"_gemm2","doc":null,"summary":null,"abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"MXNet::NDArray | ::Nil"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(a : MXNet::NDArray?, b : MXNet::NDArray?, **kwargs)","args_html":"(a : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, b : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_gemm2","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"MXNet::NDArray | ::Nil"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_linalg_gemm2\", a, b, **kwargs)"}},{"id":"_potrf(a:MXNet::NDArray?,**kwargs)-class-method","html_id":"_potrf(a:MXNet::NDArray?,**kwargs)-class-method","name":"_potrf","doc":null,"summary":null,"abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(a : MXNet::NDArray?, **kwargs)","args_html":"(a : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_potrf","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_linalg_potrf\", a, **kwargs)"}},{"id":"_potri(a:MXNet::NDArray?,**kwargs)-class-method","html_id":"_potri(a:MXNet::NDArray?,**kwargs)-class-method","name":"_potri","doc":null,"summary":null,"abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(a : MXNet::NDArray?, **kwargs)","args_html":"(a : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_potri","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_linalg_potri\", a, **kwargs)"}},{"id":"_sumlogdiag(a:MXNet::NDArray?,**kwargs)-class-method","html_id":"_sumlogdiag(a:MXNet::NDArray?,**kwargs)-class-method","name":"_sumlogdiag","doc":null,"summary":null,"abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(a : MXNet::NDArray?, **kwargs)","args_html":"(a : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_sumlogdiag","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_linalg_sumlogdiag\", a, **kwargs)"}},{"id":"_syevd(a:MXNet::NDArray?,**kwargs)-class-method","html_id":"_syevd(a:MXNet::NDArray?,**kwargs)-class-method","name":"_syevd","doc":null,"summary":null,"abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(a : MXNet::NDArray?, **kwargs)","args_html":"(a : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_syevd","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_linalg_syevd\", a, **kwargs)"}},{"id":"_syrk(a:MXNet::NDArray?,**kwargs)-class-method","html_id":"_syrk(a:MXNet::NDArray?,**kwargs)-class-method","name":"_syrk","doc":null,"summary":null,"abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(a : MXNet::NDArray?, **kwargs)","args_html":"(a : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_syrk","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_linalg_syrk\", a, **kwargs)"}},{"id":"_trmm(a:MXNet::NDArray?,b:MXNet::NDArray?,**kwargs)-class-method","html_id":"_trmm(a:MXNet::NDArray?,b:MXNet::NDArray?,**kwargs)-class-method","name":"_trmm","doc":null,"summary":null,"abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"MXNet::NDArray | ::Nil"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(a : MXNet::NDArray?, b : MXNet::NDArray?, **kwargs)","args_html":"(a : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, b : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_trmm","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"MXNet::NDArray | ::Nil"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_linalg_trmm\", a, b, **kwargs)"}},{"id":"_trsm(a:MXNet::NDArray?,b:MXNet::NDArray?,**kwargs)-class-method","html_id":"_trsm(a:MXNet::NDArray?,b:MXNet::NDArray?,**kwargs)-class-method","name":"_trsm","doc":null,"summary":null,"abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"MXNet::NDArray | ::Nil"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(a : MXNet::NDArray?, b : MXNet::NDArray?, **kwargs)","args_html":"(a : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, b : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_trsm","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"MXNet::NDArray | ::Nil"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_linalg_trsm\", a, b, **kwargs)"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"mxnet/MXNet/NDArray/Ops","path":"MXNet/NDArray/Ops.html","kind":"class","full_name":"MXNet::NDArray::Ops","name":"Ops","abstract":false,"superclass":{"html_id":"mxnet/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"mxnet/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"mxnet/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"mxnet","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"mxnet/MXNet/NDArray","kind":"class","full_name":"MXNet::NDArray","name":"NDArray"},"doc":null,"summary":null,"class_methods":[{"id":"_abs(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_abs(data:MXNet::NDArray?,**kwargs)-class-method","name":"_abs","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_abs","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"abs\", data, **kwargs)"}},{"id":"_Activation(data:MXNet::NDArray?,act_type,**kwargs)-class-method","html_id":"_Activation(data:MXNet::NDArray?,act_type,**kwargs)-class-method","name":"_Activation","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"act_type","doc":null,"default_value":"","external_name":"act_type","restriction":""}],"args_string":"(data : MXNet::NDArray?, act_type, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, act_type, **kwargs)","location":null,"def":{"name":"_Activation","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"act_type","doc":null,"default_value":"","external_name":"act_type","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"Activation\", data, **kwargs.merge(act_type: act_type))"}},{"id":"_adam_update(weight:MXNet::NDArray?,grad:MXNet::NDArray?,mean:MXNet::NDArray?,var:MXNet::NDArray?,lr,**kwargs)-class-method","html_id":"_adam_update(weight:MXNet::NDArray?,grad:MXNet::NDArray?,mean:MXNet::NDArray?,var:MXNet::NDArray?,lr,**kwargs)-class-method","name":"_adam_update","doc":null,"summary":null,"abstract":false,"args":[{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::NDArray | ::Nil"},{"name":"grad","doc":null,"default_value":"","external_name":"grad","restriction":"MXNet::NDArray | ::Nil"},{"name":"mean","doc":null,"default_value":"","external_name":"mean","restriction":"MXNet::NDArray | ::Nil"},{"name":"var","doc":null,"default_value":"","external_name":"var","restriction":"MXNet::NDArray | ::Nil"},{"name":"lr","doc":null,"default_value":"","external_name":"lr","restriction":""}],"args_string":"(weight : MXNet::NDArray?, grad : MXNet::NDArray?, mean : MXNet::NDArray?, var : MXNet::NDArray?, lr, **kwargs)","args_html":"(weight : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, grad : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, mean : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, var : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, lr, **kwargs)","location":null,"def":{"name":"_adam_update","args":[{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::NDArray | ::Nil"},{"name":"grad","doc":null,"default_value":"","external_name":"grad","restriction":"MXNet::NDArray | ::Nil"},{"name":"mean","doc":null,"default_value":"","external_name":"mean","restriction":"MXNet::NDArray | ::Nil"},{"name":"var","doc":null,"default_value":"","external_name":"var","restriction":"MXNet::NDArray | ::Nil"},{"name":"lr","doc":null,"default_value":"","external_name":"lr","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"adam_update\", weight, grad, mean, var, **kwargs.merge(lr: lr))"}},{"id":"_add_n(args:Array(MXNet::NDArray),**kwargs)-class-method","html_id":"_add_n(args:Array(MXNet::NDArray),**kwargs)-class-method","name":"_add_n","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":"Array(MXNet::NDArray)"}],"args_string":"(args : Array(MXNet::NDArray), **kwargs)","args_html":"(args : Array(<a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>), **kwargs)","location":null,"def":{"name":"_add_n","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":"Array(MXNet::NDArray)"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"add_n\", args, **kwargs)"}},{"id":"_arccos(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_arccos(data:MXNet::NDArray?,**kwargs)-class-method","name":"_arccos","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_arccos","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"arccos\", data, **kwargs)"}},{"id":"_arccosh(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_arccosh(data:MXNet::NDArray?,**kwargs)-class-method","name":"_arccosh","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_arccosh","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"arccosh\", data, **kwargs)"}},{"id":"_arcsin(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_arcsin(data:MXNet::NDArray?,**kwargs)-class-method","name":"_arcsin","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_arcsin","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"arcsin\", data, **kwargs)"}},{"id":"_arcsinh(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_arcsinh(data:MXNet::NDArray?,**kwargs)-class-method","name":"_arcsinh","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_arcsinh","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"arcsinh\", data, **kwargs)"}},{"id":"_arctan(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_arctan(data:MXNet::NDArray?,**kwargs)-class-method","name":"_arctan","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_arctan","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"arctan\", data, **kwargs)"}},{"id":"_arctanh(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_arctanh(data:MXNet::NDArray?,**kwargs)-class-method","name":"_arctanh","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_arctanh","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"arctanh\", data, **kwargs)"}},{"id":"_argmax(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_argmax(data:MXNet::NDArray?,**kwargs)-class-method","name":"_argmax","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_argmax","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"argmax\", data, **kwargs)"}},{"id":"_argmax_channel(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_argmax_channel(data:MXNet::NDArray?,**kwargs)-class-method","name":"_argmax_channel","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_argmax_channel","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"argmax_channel\", data, **kwargs)"}},{"id":"_argmin(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_argmin(data:MXNet::NDArray?,**kwargs)-class-method","name":"_argmin","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_argmin","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"argmin\", data, **kwargs)"}},{"id":"_argsort(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_argsort(data:MXNet::NDArray?,**kwargs)-class-method","name":"_argsort","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_argsort","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"argsort\", data, **kwargs)"}},{"id":"_batch_dot(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","html_id":"_batch_dot(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","name":"_batch_dot","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(lhs : MXNet::NDArray?, rhs : MXNet::NDArray?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, rhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_batch_dot","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"batch_dot\", lhs, rhs, **kwargs)"}},{"id":"_batch_take(a:MXNet::NDArray?,indices:MXNet::NDArray?,**kwargs)-class-method","html_id":"_batch_take(a:MXNet::NDArray?,indices:MXNet::NDArray?,**kwargs)-class-method","name":"_batch_take","doc":null,"summary":null,"abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"MXNet::NDArray | ::Nil"},{"name":"indices","doc":null,"default_value":"","external_name":"indices","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(a : MXNet::NDArray?, indices : MXNet::NDArray?, **kwargs)","args_html":"(a : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, indices : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_batch_take","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"MXNet::NDArray | ::Nil"},{"name":"indices","doc":null,"default_value":"","external_name":"indices","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"batch_take\", a, indices, **kwargs)"}},{"id":"_BatchNorm(data:MXNet::NDArray?,gamma:MXNet::NDArray?,beta:MXNet::NDArray?,moving_mean:MXNet::NDArray?,moving_var:MXNet::NDArray?,**kwargs)-class-method","html_id":"_BatchNorm(data:MXNet::NDArray?,gamma:MXNet::NDArray?,beta:MXNet::NDArray?,moving_mean:MXNet::NDArray?,moving_var:MXNet::NDArray?,**kwargs)-class-method","name":"_BatchNorm","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"gamma","doc":null,"default_value":"","external_name":"gamma","restriction":"MXNet::NDArray | ::Nil"},{"name":"beta","doc":null,"default_value":"","external_name":"beta","restriction":"MXNet::NDArray | ::Nil"},{"name":"moving_mean","doc":null,"default_value":"","external_name":"moving_mean","restriction":"MXNet::NDArray | ::Nil"},{"name":"moving_var","doc":null,"default_value":"","external_name":"moving_var","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, gamma : MXNet::NDArray?, beta : MXNet::NDArray?, moving_mean : MXNet::NDArray?, moving_var : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, gamma : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, beta : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, moving_mean : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, moving_var : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_BatchNorm","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"gamma","doc":null,"default_value":"","external_name":"gamma","restriction":"MXNet::NDArray | ::Nil"},{"name":"beta","doc":null,"default_value":"","external_name":"beta","restriction":"MXNet::NDArray | ::Nil"},{"name":"moving_mean","doc":null,"default_value":"","external_name":"moving_mean","restriction":"MXNet::NDArray | ::Nil"},{"name":"moving_var","doc":null,"default_value":"","external_name":"moving_var","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"BatchNorm\", data, gamma, beta, moving_mean, moving_var, **kwargs)"}},{"id":"_BatchNorm_v1(data:MXNet::NDArray?,gamma:MXNet::NDArray?,beta:MXNet::NDArray?,**kwargs)-class-method","html_id":"_BatchNorm_v1(data:MXNet::NDArray?,gamma:MXNet::NDArray?,beta:MXNet::NDArray?,**kwargs)-class-method","name":"_BatchNorm_v1","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"gamma","doc":null,"default_value":"","external_name":"gamma","restriction":"MXNet::NDArray | ::Nil"},{"name":"beta","doc":null,"default_value":"","external_name":"beta","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, gamma : MXNet::NDArray?, beta : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, gamma : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, beta : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_BatchNorm_v1","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"gamma","doc":null,"default_value":"","external_name":"gamma","restriction":"MXNet::NDArray | ::Nil"},{"name":"beta","doc":null,"default_value":"","external_name":"beta","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"BatchNorm_v1\", data, gamma, beta, **kwargs)"}},{"id":"_BilinearSampler(data:MXNet::NDArray?,grid:MXNet::NDArray?,**kwargs)-class-method","html_id":"_BilinearSampler(data:MXNet::NDArray?,grid:MXNet::NDArray?,**kwargs)-class-method","name":"_BilinearSampler","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"grid","doc":null,"default_value":"","external_name":"grid","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, grid : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, grid : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_BilinearSampler","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"grid","doc":null,"default_value":"","external_name":"grid","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"BilinearSampler\", data, grid, **kwargs)"}},{"id":"_BlockGrad(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_BlockGrad(data:MXNet::NDArray?,**kwargs)-class-method","name":"_BlockGrad","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_BlockGrad","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"BlockGrad\", data, **kwargs)"}},{"id":"_broadcast_add(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","html_id":"_broadcast_add(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","name":"_broadcast_add","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(lhs : MXNet::NDArray?, rhs : MXNet::NDArray?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, rhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_broadcast_add","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"broadcast_add\", lhs, rhs, **kwargs)"}},{"id":"_broadcast_axes(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_broadcast_axes(data:MXNet::NDArray?,**kwargs)-class-method","name":"_broadcast_axes","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_broadcast_axes","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"broadcast_axes\", data, **kwargs)"}},{"id":"_broadcast_axis(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_broadcast_axis(data:MXNet::NDArray?,**kwargs)-class-method","name":"_broadcast_axis","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_broadcast_axis","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"broadcast_axis\", data, **kwargs)"}},{"id":"_broadcast_div(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","html_id":"_broadcast_div(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","name":"_broadcast_div","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(lhs : MXNet::NDArray?, rhs : MXNet::NDArray?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, rhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_broadcast_div","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"broadcast_div\", lhs, rhs, **kwargs)"}},{"id":"_broadcast_equal(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","html_id":"_broadcast_equal(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","name":"_broadcast_equal","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(lhs : MXNet::NDArray?, rhs : MXNet::NDArray?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, rhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_broadcast_equal","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"broadcast_equal\", lhs, rhs, **kwargs)"}},{"id":"_broadcast_greater(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","html_id":"_broadcast_greater(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","name":"_broadcast_greater","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(lhs : MXNet::NDArray?, rhs : MXNet::NDArray?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, rhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_broadcast_greater","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"broadcast_greater\", lhs, rhs, **kwargs)"}},{"id":"_broadcast_greater_equal(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","html_id":"_broadcast_greater_equal(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","name":"_broadcast_greater_equal","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(lhs : MXNet::NDArray?, rhs : MXNet::NDArray?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, rhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_broadcast_greater_equal","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"broadcast_greater_equal\", lhs, rhs, **kwargs)"}},{"id":"_broadcast_hypot(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","html_id":"_broadcast_hypot(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","name":"_broadcast_hypot","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(lhs : MXNet::NDArray?, rhs : MXNet::NDArray?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, rhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_broadcast_hypot","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"broadcast_hypot\", lhs, rhs, **kwargs)"}},{"id":"_broadcast_lesser(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","html_id":"_broadcast_lesser(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","name":"_broadcast_lesser","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(lhs : MXNet::NDArray?, rhs : MXNet::NDArray?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, rhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_broadcast_lesser","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"broadcast_lesser\", lhs, rhs, **kwargs)"}},{"id":"_broadcast_lesser_equal(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","html_id":"_broadcast_lesser_equal(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","name":"_broadcast_lesser_equal","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(lhs : MXNet::NDArray?, rhs : MXNet::NDArray?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, rhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_broadcast_lesser_equal","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"broadcast_lesser_equal\", lhs, rhs, **kwargs)"}},{"id":"_broadcast_like(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","html_id":"_broadcast_like(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","name":"_broadcast_like","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(lhs : MXNet::NDArray?, rhs : MXNet::NDArray?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, rhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_broadcast_like","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"broadcast_like\", lhs, rhs, **kwargs)"}},{"id":"_broadcast_logical_and(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","html_id":"_broadcast_logical_and(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","name":"_broadcast_logical_and","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(lhs : MXNet::NDArray?, rhs : MXNet::NDArray?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, rhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_broadcast_logical_and","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"broadcast_logical_and\", lhs, rhs, **kwargs)"}},{"id":"_broadcast_logical_or(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","html_id":"_broadcast_logical_or(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","name":"_broadcast_logical_or","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(lhs : MXNet::NDArray?, rhs : MXNet::NDArray?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, rhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_broadcast_logical_or","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"broadcast_logical_or\", lhs, rhs, **kwargs)"}},{"id":"_broadcast_logical_xor(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","html_id":"_broadcast_logical_xor(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","name":"_broadcast_logical_xor","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(lhs : MXNet::NDArray?, rhs : MXNet::NDArray?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, rhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_broadcast_logical_xor","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"broadcast_logical_xor\", lhs, rhs, **kwargs)"}},{"id":"_broadcast_maximum(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","html_id":"_broadcast_maximum(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","name":"_broadcast_maximum","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(lhs : MXNet::NDArray?, rhs : MXNet::NDArray?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, rhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_broadcast_maximum","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"broadcast_maximum\", lhs, rhs, **kwargs)"}},{"id":"_broadcast_minimum(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","html_id":"_broadcast_minimum(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","name":"_broadcast_minimum","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(lhs : MXNet::NDArray?, rhs : MXNet::NDArray?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, rhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_broadcast_minimum","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"broadcast_minimum\", lhs, rhs, **kwargs)"}},{"id":"_broadcast_minus(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","html_id":"_broadcast_minus(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","name":"_broadcast_minus","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(lhs : MXNet::NDArray?, rhs : MXNet::NDArray?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, rhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_broadcast_minus","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"broadcast_minus\", lhs, rhs, **kwargs)"}},{"id":"_broadcast_mod(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","html_id":"_broadcast_mod(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","name":"_broadcast_mod","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(lhs : MXNet::NDArray?, rhs : MXNet::NDArray?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, rhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_broadcast_mod","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"broadcast_mod\", lhs, rhs, **kwargs)"}},{"id":"_broadcast_mul(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","html_id":"_broadcast_mul(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","name":"_broadcast_mul","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(lhs : MXNet::NDArray?, rhs : MXNet::NDArray?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, rhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_broadcast_mul","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"broadcast_mul\", lhs, rhs, **kwargs)"}},{"id":"_broadcast_not_equal(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","html_id":"_broadcast_not_equal(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","name":"_broadcast_not_equal","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(lhs : MXNet::NDArray?, rhs : MXNet::NDArray?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, rhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_broadcast_not_equal","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"broadcast_not_equal\", lhs, rhs, **kwargs)"}},{"id":"_broadcast_plus(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","html_id":"_broadcast_plus(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","name":"_broadcast_plus","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(lhs : MXNet::NDArray?, rhs : MXNet::NDArray?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, rhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_broadcast_plus","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"broadcast_plus\", lhs, rhs, **kwargs)"}},{"id":"_broadcast_power(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","html_id":"_broadcast_power(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","name":"_broadcast_power","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(lhs : MXNet::NDArray?, rhs : MXNet::NDArray?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, rhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_broadcast_power","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"broadcast_power\", lhs, rhs, **kwargs)"}},{"id":"_broadcast_sub(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","html_id":"_broadcast_sub(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","name":"_broadcast_sub","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(lhs : MXNet::NDArray?, rhs : MXNet::NDArray?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, rhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_broadcast_sub","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"broadcast_sub\", lhs, rhs, **kwargs)"}},{"id":"_broadcast_to(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_broadcast_to(data:MXNet::NDArray?,**kwargs)-class-method","name":"_broadcast_to","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_broadcast_to","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"broadcast_to\", data, **kwargs)"}},{"id":"_cast(data:MXNet::NDArray?,dtype,**kwargs)-class-method","html_id":"_cast(data:MXNet::NDArray?,dtype,**kwargs)-class-method","name":"_cast","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"dtype","doc":null,"default_value":"","external_name":"dtype","restriction":""}],"args_string":"(data : MXNet::NDArray?, dtype, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, dtype, **kwargs)","location":null,"def":{"name":"_cast","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"dtype","doc":null,"default_value":"","external_name":"dtype","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"cast\", data, **kwargs.merge(dtype: dtype))"}},{"id":"_Cast(data:MXNet::NDArray?,dtype,**kwargs)-class-method","html_id":"_Cast(data:MXNet::NDArray?,dtype,**kwargs)-class-method","name":"_Cast","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"dtype","doc":null,"default_value":"","external_name":"dtype","restriction":""}],"args_string":"(data : MXNet::NDArray?, dtype, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, dtype, **kwargs)","location":null,"def":{"name":"_Cast","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"dtype","doc":null,"default_value":"","external_name":"dtype","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"Cast\", data, **kwargs.merge(dtype: dtype))"}},{"id":"_cast_storage(data:MXNet::NDArray?,stype,**kwargs)-class-method","html_id":"_cast_storage(data:MXNet::NDArray?,stype,**kwargs)-class-method","name":"_cast_storage","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"stype","doc":null,"default_value":"","external_name":"stype","restriction":""}],"args_string":"(data : MXNet::NDArray?, stype, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, stype, **kwargs)","location":null,"def":{"name":"_cast_storage","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"stype","doc":null,"default_value":"","external_name":"stype","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"cast_storage\", data, **kwargs.merge(stype: stype))"}},{"id":"_cbrt(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_cbrt(data:MXNet::NDArray?,**kwargs)-class-method","name":"_cbrt","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_cbrt","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"cbrt\", data, **kwargs)"}},{"id":"_ceil(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_ceil(data:MXNet::NDArray?,**kwargs)-class-method","name":"_ceil","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_ceil","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"ceil\", data, **kwargs)"}},{"id":"_choose_element_0index(**kwargs)-class-method","html_id":"_choose_element_0index(**kwargs)-class-method","name":"_choose_element_0index","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"_choose_element_0index","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"choose_element_0index\", **kwargs)"}},{"id":"_clip(data:MXNet::NDArray?,a_min,a_max,**kwargs)-class-method","html_id":"_clip(data:MXNet::NDArray?,a_min,a_max,**kwargs)-class-method","name":"_clip","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"a_min","doc":null,"default_value":"","external_name":"a_min","restriction":""},{"name":"a_max","doc":null,"default_value":"","external_name":"a_max","restriction":""}],"args_string":"(data : MXNet::NDArray?, a_min, a_max, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, a_min, a_max, **kwargs)","location":null,"def":{"name":"_clip","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"a_min","doc":null,"default_value":"","external_name":"a_min","restriction":""},{"name":"a_max","doc":null,"default_value":"","external_name":"a_max","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"clip\", data, **kwargs.merge(a_min: a_min, a_max: a_max))"}},{"id":"_concat(data:Array(MXNet::NDArray),num_args,**kwargs)-class-method","html_id":"_concat(data:Array(MXNet::NDArray),num_args,**kwargs)-class-method","name":"_concat","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"Array(MXNet::NDArray)"},{"name":"num_args","doc":null,"default_value":"","external_name":"num_args","restriction":""}],"args_string":"(data : Array(MXNet::NDArray), num_args, **kwargs)","args_html":"(data : Array(<a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>), num_args, **kwargs)","location":null,"def":{"name":"_concat","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"Array(MXNet::NDArray)"},{"name":"num_args","doc":null,"default_value":"","external_name":"num_args","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"concat\", data, **kwargs.merge(num_args: num_args))"}},{"id":"_Concat(data:Array(MXNet::NDArray),num_args,**kwargs)-class-method","html_id":"_Concat(data:Array(MXNet::NDArray),num_args,**kwargs)-class-method","name":"_Concat","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"Array(MXNet::NDArray)"},{"name":"num_args","doc":null,"default_value":"","external_name":"num_args","restriction":""}],"args_string":"(data : Array(MXNet::NDArray), num_args, **kwargs)","args_html":"(data : Array(<a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>), num_args, **kwargs)","location":null,"def":{"name":"_Concat","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"Array(MXNet::NDArray)"},{"name":"num_args","doc":null,"default_value":"","external_name":"num_args","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"Concat\", data, **kwargs.merge(num_args: num_args))"}},{"id":"_Convolution(data:MXNet::NDArray?,weight:MXNet::NDArray?,bias:MXNet::NDArray?,kernel,num_filter,**kwargs)-class-method","html_id":"_Convolution(data:MXNet::NDArray?,weight:MXNet::NDArray?,bias:MXNet::NDArray?,kernel,num_filter,**kwargs)-class-method","name":"_Convolution","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::NDArray | ::Nil"},{"name":"bias","doc":null,"default_value":"","external_name":"bias","restriction":"MXNet::NDArray | ::Nil"},{"name":"kernel","doc":null,"default_value":"","external_name":"kernel","restriction":""},{"name":"num_filter","doc":null,"default_value":"","external_name":"num_filter","restriction":""}],"args_string":"(data : MXNet::NDArray?, weight : MXNet::NDArray?, bias : MXNet::NDArray?, kernel, num_filter, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, weight : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, bias : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, kernel, num_filter, **kwargs)","location":null,"def":{"name":"_Convolution","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::NDArray | ::Nil"},{"name":"bias","doc":null,"default_value":"","external_name":"bias","restriction":"MXNet::NDArray | ::Nil"},{"name":"kernel","doc":null,"default_value":"","external_name":"kernel","restriction":""},{"name":"num_filter","doc":null,"default_value":"","external_name":"num_filter","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"Convolution\", data, weight, bias, **kwargs.merge(kernel: kernel, num_filter: num_filter))"}},{"id":"_Convolution_v1(data:MXNet::NDArray?,weight:MXNet::NDArray?,bias:MXNet::NDArray?,kernel,num_filter,**kwargs)-class-method","html_id":"_Convolution_v1(data:MXNet::NDArray?,weight:MXNet::NDArray?,bias:MXNet::NDArray?,kernel,num_filter,**kwargs)-class-method","name":"_Convolution_v1","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::NDArray | ::Nil"},{"name":"bias","doc":null,"default_value":"","external_name":"bias","restriction":"MXNet::NDArray | ::Nil"},{"name":"kernel","doc":null,"default_value":"","external_name":"kernel","restriction":""},{"name":"num_filter","doc":null,"default_value":"","external_name":"num_filter","restriction":""}],"args_string":"(data : MXNet::NDArray?, weight : MXNet::NDArray?, bias : MXNet::NDArray?, kernel, num_filter, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, weight : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, bias : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, kernel, num_filter, **kwargs)","location":null,"def":{"name":"_Convolution_v1","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::NDArray | ::Nil"},{"name":"bias","doc":null,"default_value":"","external_name":"bias","restriction":"MXNet::NDArray | ::Nil"},{"name":"kernel","doc":null,"default_value":"","external_name":"kernel","restriction":""},{"name":"num_filter","doc":null,"default_value":"","external_name":"num_filter","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"Convolution_v1\", data, weight, bias, **kwargs.merge(kernel: kernel, num_filter: num_filter))"}},{"id":"_Correlation(data1:MXNet::NDArray?,data2:MXNet::NDArray?,**kwargs)-class-method","html_id":"_Correlation(data1:MXNet::NDArray?,data2:MXNet::NDArray?,**kwargs)-class-method","name":"_Correlation","doc":null,"summary":null,"abstract":false,"args":[{"name":"data1","doc":null,"default_value":"","external_name":"data1","restriction":"MXNet::NDArray | ::Nil"},{"name":"data2","doc":null,"default_value":"","external_name":"data2","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data1 : MXNet::NDArray?, data2 : MXNet::NDArray?, **kwargs)","args_html":"(data1 : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, data2 : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_Correlation","args":[{"name":"data1","doc":null,"default_value":"","external_name":"data1","restriction":"MXNet::NDArray | ::Nil"},{"name":"data2","doc":null,"default_value":"","external_name":"data2","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"Correlation\", data1, data2, **kwargs)"}},{"id":"_cos(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_cos(data:MXNet::NDArray?,**kwargs)-class-method","name":"_cos","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_cos","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"cos\", data, **kwargs)"}},{"id":"_cosh(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_cosh(data:MXNet::NDArray?,**kwargs)-class-method","name":"_cosh","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_cosh","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"cosh\", data, **kwargs)"}},{"id":"_crop(data:MXNet::NDArray?,begin_begin,end_end,**kwargs)-class-method","html_id":"_crop(data:MXNet::NDArray?,begin_begin,end_end,**kwargs)-class-method","name":"_crop","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"_begin","doc":null,"default_value":"","external_name":"begin","restriction":""},{"name":"_end","doc":null,"default_value":"","external_name":"end","restriction":""}],"args_string":"(data : MXNet::NDArray?, begin _begin, end _end, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, begin _begin, end _end, **kwargs)","location":null,"def":{"name":"_crop","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"_begin","doc":null,"default_value":"","external_name":"begin","restriction":""},{"name":"_end","doc":null,"default_value":"","external_name":"end","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"crop\", data, **kwargs.merge(begin: _begin, end: _end))"}},{"id":"_Crop(num_args,**kwargs)-class-method","html_id":"_Crop(num_args,**kwargs)-class-method","name":"_Crop","doc":null,"summary":null,"abstract":false,"args":[{"name":"num_args","doc":null,"default_value":"","external_name":"num_args","restriction":""}],"args_string":"(num_args, **kwargs)","args_html":"(num_args, **kwargs)","location":null,"def":{"name":"_Crop","args":[{"name":"num_args","doc":null,"default_value":"","external_name":"num_args","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"Crop\", **kwargs.merge(num_args: num_args))"}},{"id":"_CuDNNBatchNorm(data:MXNet::NDArray?,gamma:MXNet::NDArray?,beta:MXNet::NDArray?,moving_mean:MXNet::NDArray?,moving_var:MXNet::NDArray?,**kwargs)-class-method","html_id":"_CuDNNBatchNorm(data:MXNet::NDArray?,gamma:MXNet::NDArray?,beta:MXNet::NDArray?,moving_mean:MXNet::NDArray?,moving_var:MXNet::NDArray?,**kwargs)-class-method","name":"_CuDNNBatchNorm","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"gamma","doc":null,"default_value":"","external_name":"gamma","restriction":"MXNet::NDArray | ::Nil"},{"name":"beta","doc":null,"default_value":"","external_name":"beta","restriction":"MXNet::NDArray | ::Nil"},{"name":"moving_mean","doc":null,"default_value":"","external_name":"moving_mean","restriction":"MXNet::NDArray | ::Nil"},{"name":"moving_var","doc":null,"default_value":"","external_name":"moving_var","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, gamma : MXNet::NDArray?, beta : MXNet::NDArray?, moving_mean : MXNet::NDArray?, moving_var : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, gamma : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, beta : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, moving_mean : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, moving_var : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_CuDNNBatchNorm","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"gamma","doc":null,"default_value":"","external_name":"gamma","restriction":"MXNet::NDArray | ::Nil"},{"name":"beta","doc":null,"default_value":"","external_name":"beta","restriction":"MXNet::NDArray | ::Nil"},{"name":"moving_mean","doc":null,"default_value":"","external_name":"moving_mean","restriction":"MXNet::NDArray | ::Nil"},{"name":"moving_var","doc":null,"default_value":"","external_name":"moving_var","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"CuDNNBatchNorm\", data, gamma, beta, moving_mean, moving_var, **kwargs)"}},{"id":"_Custom(data:Array(MXNet::NDArray),op_type,**kwargs)-class-method","html_id":"_Custom(data:Array(MXNet::NDArray),op_type,**kwargs)-class-method","name":"_Custom","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"Array(MXNet::NDArray)"},{"name":"op_type","doc":null,"default_value":"","external_name":"op_type","restriction":""}],"args_string":"(data : Array(MXNet::NDArray), op_type, **kwargs)","args_html":"(data : Array(<a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>), op_type, **kwargs)","location":null,"def":{"name":"_Custom","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"Array(MXNet::NDArray)"},{"name":"op_type","doc":null,"default_value":"","external_name":"op_type","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"Custom\", data, **kwargs.merge(op_type: op_type))"}},{"id":"_Deconvolution(data:MXNet::NDArray?,weight:MXNet::NDArray?,bias:MXNet::NDArray?,kernel,num_filter,**kwargs)-class-method","html_id":"_Deconvolution(data:MXNet::NDArray?,weight:MXNet::NDArray?,bias:MXNet::NDArray?,kernel,num_filter,**kwargs)-class-method","name":"_Deconvolution","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::NDArray | ::Nil"},{"name":"bias","doc":null,"default_value":"","external_name":"bias","restriction":"MXNet::NDArray | ::Nil"},{"name":"kernel","doc":null,"default_value":"","external_name":"kernel","restriction":""},{"name":"num_filter","doc":null,"default_value":"","external_name":"num_filter","restriction":""}],"args_string":"(data : MXNet::NDArray?, weight : MXNet::NDArray?, bias : MXNet::NDArray?, kernel, num_filter, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, weight : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, bias : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, kernel, num_filter, **kwargs)","location":null,"def":{"name":"_Deconvolution","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::NDArray | ::Nil"},{"name":"bias","doc":null,"default_value":"","external_name":"bias","restriction":"MXNet::NDArray | ::Nil"},{"name":"kernel","doc":null,"default_value":"","external_name":"kernel","restriction":""},{"name":"num_filter","doc":null,"default_value":"","external_name":"num_filter","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"Deconvolution\", data, weight, bias, **kwargs.merge(kernel: kernel, num_filter: num_filter))"}},{"id":"_degrees(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_degrees(data:MXNet::NDArray?,**kwargs)-class-method","name":"_degrees","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_degrees","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"degrees\", data, **kwargs)"}},{"id":"_depth_to_space(data:MXNet::NDArray?,block_size,**kwargs)-class-method","html_id":"_depth_to_space(data:MXNet::NDArray?,block_size,**kwargs)-class-method","name":"_depth_to_space","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"block_size","doc":null,"default_value":"","external_name":"block_size","restriction":""}],"args_string":"(data : MXNet::NDArray?, block_size, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, block_size, **kwargs)","location":null,"def":{"name":"_depth_to_space","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"block_size","doc":null,"default_value":"","external_name":"block_size","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"depth_to_space\", data, **kwargs.merge(block_size: block_size))"}},{"id":"_diag(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_diag(data:MXNet::NDArray?,**kwargs)-class-method","name":"_diag","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_diag","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"diag\", data, **kwargs)"}},{"id":"_dot(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","html_id":"_dot(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","name":"_dot","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(lhs : MXNet::NDArray?, rhs : MXNet::NDArray?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, rhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_dot","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"dot\", lhs, rhs, **kwargs)"}},{"id":"_Dropout(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_Dropout(data:MXNet::NDArray?,**kwargs)-class-method","name":"_Dropout","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_Dropout","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"Dropout\", data, **kwargs)"}},{"id":"_ElementWiseSum(args:Array(MXNet::NDArray),**kwargs)-class-method","html_id":"_ElementWiseSum(args:Array(MXNet::NDArray),**kwargs)-class-method","name":"_ElementWiseSum","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":"Array(MXNet::NDArray)"}],"args_string":"(args : Array(MXNet::NDArray), **kwargs)","args_html":"(args : Array(<a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>), **kwargs)","location":null,"def":{"name":"_ElementWiseSum","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":"Array(MXNet::NDArray)"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"ElementWiseSum\", args, **kwargs)"}},{"id":"_elemwise_add(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","html_id":"_elemwise_add(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","name":"_elemwise_add","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(lhs : MXNet::NDArray?, rhs : MXNet::NDArray?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, rhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_elemwise_add","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"elemwise_add\", lhs, rhs, **kwargs)"}},{"id":"_elemwise_div(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","html_id":"_elemwise_div(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","name":"_elemwise_div","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(lhs : MXNet::NDArray?, rhs : MXNet::NDArray?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, rhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_elemwise_div","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"elemwise_div\", lhs, rhs, **kwargs)"}},{"id":"_elemwise_mul(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","html_id":"_elemwise_mul(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","name":"_elemwise_mul","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(lhs : MXNet::NDArray?, rhs : MXNet::NDArray?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, rhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_elemwise_mul","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"elemwise_mul\", lhs, rhs, **kwargs)"}},{"id":"_elemwise_sub(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","html_id":"_elemwise_sub(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","name":"_elemwise_sub","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(lhs : MXNet::NDArray?, rhs : MXNet::NDArray?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, rhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_elemwise_sub","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"elemwise_sub\", lhs, rhs, **kwargs)"}},{"id":"_Embedding(data:MXNet::NDArray?,weight:MXNet::NDArray?,input_dim,output_dim,**kwargs)-class-method","html_id":"_Embedding(data:MXNet::NDArray?,weight:MXNet::NDArray?,input_dim,output_dim,**kwargs)-class-method","name":"_Embedding","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::NDArray | ::Nil"},{"name":"input_dim","doc":null,"default_value":"","external_name":"input_dim","restriction":""},{"name":"output_dim","doc":null,"default_value":"","external_name":"output_dim","restriction":""}],"args_string":"(data : MXNet::NDArray?, weight : MXNet::NDArray?, input_dim, output_dim, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, weight : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, input_dim, output_dim, **kwargs)","location":null,"def":{"name":"_Embedding","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::NDArray | ::Nil"},{"name":"input_dim","doc":null,"default_value":"","external_name":"input_dim","restriction":""},{"name":"output_dim","doc":null,"default_value":"","external_name":"output_dim","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"Embedding\", data, weight, **kwargs.merge(input_dim: input_dim, output_dim: output_dim))"}},{"id":"_exp(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_exp(data:MXNet::NDArray?,**kwargs)-class-method","name":"_exp","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_exp","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"exp\", data, **kwargs)"}},{"id":"_expand_dims(data:MXNet::NDArray?,axis,**kwargs)-class-method","html_id":"_expand_dims(data:MXNet::NDArray?,axis,**kwargs)-class-method","name":"_expand_dims","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"axis","doc":null,"default_value":"","external_name":"axis","restriction":""}],"args_string":"(data : MXNet::NDArray?, axis, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, axis, **kwargs)","location":null,"def":{"name":"_expand_dims","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"axis","doc":null,"default_value":"","external_name":"axis","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"expand_dims\", data, **kwargs.merge(axis: axis))"}},{"id":"_expm1(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_expm1(data:MXNet::NDArray?,**kwargs)-class-method","name":"_expm1","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_expm1","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"expm1\", data, **kwargs)"}},{"id":"_fill_element_0index(**kwargs)-class-method","html_id":"_fill_element_0index(**kwargs)-class-method","name":"_fill_element_0index","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"_fill_element_0index","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"fill_element_0index\", **kwargs)"}},{"id":"_fix(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_fix(data:MXNet::NDArray?,**kwargs)-class-method","name":"_fix","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_fix","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"fix\", data, **kwargs)"}},{"id":"_Flatten(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_Flatten(data:MXNet::NDArray?,**kwargs)-class-method","name":"_Flatten","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_Flatten","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"Flatten\", data, **kwargs)"}},{"id":"_flatten(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_flatten(data:MXNet::NDArray?,**kwargs)-class-method","name":"_flatten","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_flatten","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"flatten\", data, **kwargs)"}},{"id":"_flip(data:MXNet::NDArray?,axis,**kwargs)-class-method","html_id":"_flip(data:MXNet::NDArray?,axis,**kwargs)-class-method","name":"_flip","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"axis","doc":null,"default_value":"","external_name":"axis","restriction":""}],"args_string":"(data : MXNet::NDArray?, axis, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, axis, **kwargs)","location":null,"def":{"name":"_flip","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"axis","doc":null,"default_value":"","external_name":"axis","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"flip\", data, **kwargs.merge(axis: axis))"}},{"id":"_floor(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_floor(data:MXNet::NDArray?,**kwargs)-class-method","name":"_floor","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_floor","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"floor\", data, **kwargs)"}},{"id":"_ftml_update(weight:MXNet::NDArray?,grad:MXNet::NDArray?,d:MXNet::NDArray?,v:MXNet::NDArray?,z:MXNet::NDArray?,lr,t,**kwargs)-class-method","html_id":"_ftml_update(weight:MXNet::NDArray?,grad:MXNet::NDArray?,d:MXNet::NDArray?,v:MXNet::NDArray?,z:MXNet::NDArray?,lr,t,**kwargs)-class-method","name":"_ftml_update","doc":null,"summary":null,"abstract":false,"args":[{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::NDArray | ::Nil"},{"name":"grad","doc":null,"default_value":"","external_name":"grad","restriction":"MXNet::NDArray | ::Nil"},{"name":"d","doc":null,"default_value":"","external_name":"d","restriction":"MXNet::NDArray | ::Nil"},{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"MXNet::NDArray | ::Nil"},{"name":"z","doc":null,"default_value":"","external_name":"z","restriction":"MXNet::NDArray | ::Nil"},{"name":"lr","doc":null,"default_value":"","external_name":"lr","restriction":""},{"name":"t","doc":null,"default_value":"","external_name":"t","restriction":""}],"args_string":"(weight : MXNet::NDArray?, grad : MXNet::NDArray?, d : MXNet::NDArray?, v : MXNet::NDArray?, z : MXNet::NDArray?, lr, t, **kwargs)","args_html":"(weight : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, grad : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, d : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, v : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, z : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, lr, t, **kwargs)","location":null,"def":{"name":"_ftml_update","args":[{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::NDArray | ::Nil"},{"name":"grad","doc":null,"default_value":"","external_name":"grad","restriction":"MXNet::NDArray | ::Nil"},{"name":"d","doc":null,"default_value":"","external_name":"d","restriction":"MXNet::NDArray | ::Nil"},{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"MXNet::NDArray | ::Nil"},{"name":"z","doc":null,"default_value":"","external_name":"z","restriction":"MXNet::NDArray | ::Nil"},{"name":"lr","doc":null,"default_value":"","external_name":"lr","restriction":""},{"name":"t","doc":null,"default_value":"","external_name":"t","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"ftml_update\", weight, grad, d, v, z, **kwargs.merge(lr: lr, t: t))"}},{"id":"_ftrl_update(weight:MXNet::NDArray?,grad:MXNet::NDArray?,z:MXNet::NDArray?,n:MXNet::NDArray?,lr,**kwargs)-class-method","html_id":"_ftrl_update(weight:MXNet::NDArray?,grad:MXNet::NDArray?,z:MXNet::NDArray?,n:MXNet::NDArray?,lr,**kwargs)-class-method","name":"_ftrl_update","doc":null,"summary":null,"abstract":false,"args":[{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::NDArray | ::Nil"},{"name":"grad","doc":null,"default_value":"","external_name":"grad","restriction":"MXNet::NDArray | ::Nil"},{"name":"z","doc":null,"default_value":"","external_name":"z","restriction":"MXNet::NDArray | ::Nil"},{"name":"n","doc":null,"default_value":"","external_name":"n","restriction":"MXNet::NDArray | ::Nil"},{"name":"lr","doc":null,"default_value":"","external_name":"lr","restriction":""}],"args_string":"(weight : MXNet::NDArray?, grad : MXNet::NDArray?, z : MXNet::NDArray?, n : MXNet::NDArray?, lr, **kwargs)","args_html":"(weight : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, grad : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, z : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, n : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, lr, **kwargs)","location":null,"def":{"name":"_ftrl_update","args":[{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::NDArray | ::Nil"},{"name":"grad","doc":null,"default_value":"","external_name":"grad","restriction":"MXNet::NDArray | ::Nil"},{"name":"z","doc":null,"default_value":"","external_name":"z","restriction":"MXNet::NDArray | ::Nil"},{"name":"n","doc":null,"default_value":"","external_name":"n","restriction":"MXNet::NDArray | ::Nil"},{"name":"lr","doc":null,"default_value":"","external_name":"lr","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"ftrl_update\", weight, grad, z, n, **kwargs.merge(lr: lr))"}},{"id":"_FullyConnected(data:MXNet::NDArray?,weight:MXNet::NDArray?,bias:MXNet::NDArray?,num_hidden,**kwargs)-class-method","html_id":"_FullyConnected(data:MXNet::NDArray?,weight:MXNet::NDArray?,bias:MXNet::NDArray?,num_hidden,**kwargs)-class-method","name":"_FullyConnected","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::NDArray | ::Nil"},{"name":"bias","doc":null,"default_value":"","external_name":"bias","restriction":"MXNet::NDArray | ::Nil"},{"name":"num_hidden","doc":null,"default_value":"","external_name":"num_hidden","restriction":""}],"args_string":"(data : MXNet::NDArray?, weight : MXNet::NDArray?, bias : MXNet::NDArray?, num_hidden, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, weight : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, bias : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, num_hidden, **kwargs)","location":null,"def":{"name":"_FullyConnected","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::NDArray | ::Nil"},{"name":"bias","doc":null,"default_value":"","external_name":"bias","restriction":"MXNet::NDArray | ::Nil"},{"name":"num_hidden","doc":null,"default_value":"","external_name":"num_hidden","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"FullyConnected\", data, weight, bias, **kwargs.merge(num_hidden: num_hidden))"}},{"id":"_gamma(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_gamma(data:MXNet::NDArray?,**kwargs)-class-method","name":"_gamma","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_gamma","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"gamma\", data, **kwargs)"}},{"id":"_gammaln(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_gammaln(data:MXNet::NDArray?,**kwargs)-class-method","name":"_gammaln","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_gammaln","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"gammaln\", data, **kwargs)"}},{"id":"_gather_nd(data:MXNet::NDArray?,indices:MXNet::NDArray?,**kwargs)-class-method","html_id":"_gather_nd(data:MXNet::NDArray?,indices:MXNet::NDArray?,**kwargs)-class-method","name":"_gather_nd","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"indices","doc":null,"default_value":"","external_name":"indices","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, indices : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, indices : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_gather_nd","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"indices","doc":null,"default_value":"","external_name":"indices","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"gather_nd\", data, indices, **kwargs)"}},{"id":"_GridGenerator(data:MXNet::NDArray?,transform_type,**kwargs)-class-method","html_id":"_GridGenerator(data:MXNet::NDArray?,transform_type,**kwargs)-class-method","name":"_GridGenerator","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"transform_type","doc":null,"default_value":"","external_name":"transform_type","restriction":""}],"args_string":"(data : MXNet::NDArray?, transform_type, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, transform_type, **kwargs)","location":null,"def":{"name":"_GridGenerator","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"transform_type","doc":null,"default_value":"","external_name":"transform_type","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"GridGenerator\", data, **kwargs.merge(transform_type: transform_type))"}},{"id":"_hard_sigmoid(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_hard_sigmoid(data:MXNet::NDArray?,**kwargs)-class-method","name":"_hard_sigmoid","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_hard_sigmoid","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"hard_sigmoid\", data, **kwargs)"}},{"id":"_identity(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_identity(data:MXNet::NDArray?,**kwargs)-class-method","name":"_identity","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_identity","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"identity\", data, **kwargs)"}},{"id":"_IdentityAttachKLSparseReg(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_IdentityAttachKLSparseReg(data:MXNet::NDArray?,**kwargs)-class-method","name":"_IdentityAttachKLSparseReg","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_IdentityAttachKLSparseReg","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"IdentityAttachKLSparseReg\", data, **kwargs)"}},{"id":"_InstanceNorm(data:MXNet::NDArray?,gamma:MXNet::NDArray?,beta:MXNet::NDArray?,**kwargs)-class-method","html_id":"_InstanceNorm(data:MXNet::NDArray?,gamma:MXNet::NDArray?,beta:MXNet::NDArray?,**kwargs)-class-method","name":"_InstanceNorm","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"gamma","doc":null,"default_value":"","external_name":"gamma","restriction":"MXNet::NDArray | ::Nil"},{"name":"beta","doc":null,"default_value":"","external_name":"beta","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, gamma : MXNet::NDArray?, beta : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, gamma : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, beta : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_InstanceNorm","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"gamma","doc":null,"default_value":"","external_name":"gamma","restriction":"MXNet::NDArray | ::Nil"},{"name":"beta","doc":null,"default_value":"","external_name":"beta","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"InstanceNorm\", data, gamma, beta, **kwargs)"}},{"id":"_khatri_rao(args:Array(MXNet::NDArray),**kwargs)-class-method","html_id":"_khatri_rao(args:Array(MXNet::NDArray),**kwargs)-class-method","name":"_khatri_rao","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":"Array(MXNet::NDArray)"}],"args_string":"(args : Array(MXNet::NDArray), **kwargs)","args_html":"(args : Array(<a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>), **kwargs)","location":null,"def":{"name":"_khatri_rao","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":"Array(MXNet::NDArray)"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"khatri_rao\", args, **kwargs)"}},{"id":"_L2Normalization(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_L2Normalization(data:MXNet::NDArray?,**kwargs)-class-method","name":"_L2Normalization","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_L2Normalization","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"L2Normalization\", data, **kwargs)"}},{"id":"_LayerNorm(data:MXNet::NDArray?,gamma:MXNet::NDArray?,beta:MXNet::NDArray?,**kwargs)-class-method","html_id":"_LayerNorm(data:MXNet::NDArray?,gamma:MXNet::NDArray?,beta:MXNet::NDArray?,**kwargs)-class-method","name":"_LayerNorm","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"gamma","doc":null,"default_value":"","external_name":"gamma","restriction":"MXNet::NDArray | ::Nil"},{"name":"beta","doc":null,"default_value":"","external_name":"beta","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, gamma : MXNet::NDArray?, beta : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, gamma : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, beta : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_LayerNorm","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"gamma","doc":null,"default_value":"","external_name":"gamma","restriction":"MXNet::NDArray | ::Nil"},{"name":"beta","doc":null,"default_value":"","external_name":"beta","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"LayerNorm\", data, gamma, beta, **kwargs)"}},{"id":"_LeakyReLU(data:MXNet::NDArray?,gamma:MXNet::NDArray?,**kwargs)-class-method","html_id":"_LeakyReLU(data:MXNet::NDArray?,gamma:MXNet::NDArray?,**kwargs)-class-method","name":"_LeakyReLU","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"gamma","doc":null,"default_value":"","external_name":"gamma","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, gamma : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, gamma : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_LeakyReLU","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"gamma","doc":null,"default_value":"","external_name":"gamma","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"LeakyReLU\", data, gamma, **kwargs)"}},{"id":"_linalg_gelqf(a:MXNet::NDArray?,**kwargs)-class-method","html_id":"_linalg_gelqf(a:MXNet::NDArray?,**kwargs)-class-method","name":"_linalg_gelqf","doc":null,"summary":null,"abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(a : MXNet::NDArray?, **kwargs)","args_html":"(a : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_linalg_gelqf","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"linalg_gelqf\", a, **kwargs)"}},{"id":"_linalg_gemm(a:MXNet::NDArray?,b:MXNet::NDArray?,c:MXNet::NDArray?,**kwargs)-class-method","html_id":"_linalg_gemm(a:MXNet::NDArray?,b:MXNet::NDArray?,c:MXNet::NDArray?,**kwargs)-class-method","name":"_linalg_gemm","doc":null,"summary":null,"abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"MXNet::NDArray | ::Nil"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"MXNet::NDArray | ::Nil"},{"name":"c","doc":null,"default_value":"","external_name":"c","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(a : MXNet::NDArray?, b : MXNet::NDArray?, c : MXNet::NDArray?, **kwargs)","args_html":"(a : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, b : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, c : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_linalg_gemm","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"MXNet::NDArray | ::Nil"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"MXNet::NDArray | ::Nil"},{"name":"c","doc":null,"default_value":"","external_name":"c","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"linalg_gemm\", a, b, c, **kwargs)"}},{"id":"_linalg_gemm2(a:MXNet::NDArray?,b:MXNet::NDArray?,**kwargs)-class-method","html_id":"_linalg_gemm2(a:MXNet::NDArray?,b:MXNet::NDArray?,**kwargs)-class-method","name":"_linalg_gemm2","doc":null,"summary":null,"abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"MXNet::NDArray | ::Nil"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(a : MXNet::NDArray?, b : MXNet::NDArray?, **kwargs)","args_html":"(a : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, b : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_linalg_gemm2","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"MXNet::NDArray | ::Nil"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"linalg_gemm2\", a, b, **kwargs)"}},{"id":"_linalg_potrf(a:MXNet::NDArray?,**kwargs)-class-method","html_id":"_linalg_potrf(a:MXNet::NDArray?,**kwargs)-class-method","name":"_linalg_potrf","doc":null,"summary":null,"abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(a : MXNet::NDArray?, **kwargs)","args_html":"(a : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_linalg_potrf","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"linalg_potrf\", a, **kwargs)"}},{"id":"_linalg_potri(a:MXNet::NDArray?,**kwargs)-class-method","html_id":"_linalg_potri(a:MXNet::NDArray?,**kwargs)-class-method","name":"_linalg_potri","doc":null,"summary":null,"abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(a : MXNet::NDArray?, **kwargs)","args_html":"(a : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_linalg_potri","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"linalg_potri\", a, **kwargs)"}},{"id":"_linalg_sumlogdiag(a:MXNet::NDArray?,**kwargs)-class-method","html_id":"_linalg_sumlogdiag(a:MXNet::NDArray?,**kwargs)-class-method","name":"_linalg_sumlogdiag","doc":null,"summary":null,"abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(a : MXNet::NDArray?, **kwargs)","args_html":"(a : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_linalg_sumlogdiag","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"linalg_sumlogdiag\", a, **kwargs)"}},{"id":"_linalg_syrk(a:MXNet::NDArray?,**kwargs)-class-method","html_id":"_linalg_syrk(a:MXNet::NDArray?,**kwargs)-class-method","name":"_linalg_syrk","doc":null,"summary":null,"abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(a : MXNet::NDArray?, **kwargs)","args_html":"(a : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_linalg_syrk","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"linalg_syrk\", a, **kwargs)"}},{"id":"_linalg_trmm(a:MXNet::NDArray?,b:MXNet::NDArray?,**kwargs)-class-method","html_id":"_linalg_trmm(a:MXNet::NDArray?,b:MXNet::NDArray?,**kwargs)-class-method","name":"_linalg_trmm","doc":null,"summary":null,"abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"MXNet::NDArray | ::Nil"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(a : MXNet::NDArray?, b : MXNet::NDArray?, **kwargs)","args_html":"(a : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, b : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_linalg_trmm","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"MXNet::NDArray | ::Nil"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"linalg_trmm\", a, b, **kwargs)"}},{"id":"_linalg_trsm(a:MXNet::NDArray?,b:MXNet::NDArray?,**kwargs)-class-method","html_id":"_linalg_trsm(a:MXNet::NDArray?,b:MXNet::NDArray?,**kwargs)-class-method","name":"_linalg_trsm","doc":null,"summary":null,"abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"MXNet::NDArray | ::Nil"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(a : MXNet::NDArray?, b : MXNet::NDArray?, **kwargs)","args_html":"(a : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, b : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_linalg_trsm","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"MXNet::NDArray | ::Nil"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"linalg_trsm\", a, b, **kwargs)"}},{"id":"_LinearRegressionOutput(data:MXNet::NDArray?,label:MXNet::NDArray?,**kwargs)-class-method","html_id":"_LinearRegressionOutput(data:MXNet::NDArray?,label:MXNet::NDArray?,**kwargs)-class-method","name":"_LinearRegressionOutput","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"label","doc":null,"default_value":"","external_name":"label","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, label : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, label : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_LinearRegressionOutput","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"label","doc":null,"default_value":"","external_name":"label","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"LinearRegressionOutput\", data, label, **kwargs)"}},{"id":"_log(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_log(data:MXNet::NDArray?,**kwargs)-class-method","name":"_log","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_log","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"log\", data, **kwargs)"}},{"id":"_log10(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_log10(data:MXNet::NDArray?,**kwargs)-class-method","name":"_log10","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_log10","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"log10\", data, **kwargs)"}},{"id":"_log1p(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_log1p(data:MXNet::NDArray?,**kwargs)-class-method","name":"_log1p","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_log1p","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"log1p\", data, **kwargs)"}},{"id":"_log2(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_log2(data:MXNet::NDArray?,**kwargs)-class-method","name":"_log2","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_log2","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"log2\", data, **kwargs)"}},{"id":"_log_softmax(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_log_softmax(data:MXNet::NDArray?,**kwargs)-class-method","name":"_log_softmax","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_log_softmax","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"log_softmax\", data, **kwargs)"}},{"id":"_logical_not(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_logical_not(data:MXNet::NDArray?,**kwargs)-class-method","name":"_logical_not","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_logical_not","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"logical_not\", data, **kwargs)"}},{"id":"_LogisticRegressionOutput(data:MXNet::NDArray?,label:MXNet::NDArray?,**kwargs)-class-method","html_id":"_LogisticRegressionOutput(data:MXNet::NDArray?,label:MXNet::NDArray?,**kwargs)-class-method","name":"_LogisticRegressionOutput","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"label","doc":null,"default_value":"","external_name":"label","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, label : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, label : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_LogisticRegressionOutput","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"label","doc":null,"default_value":"","external_name":"label","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"LogisticRegressionOutput\", data, label, **kwargs)"}},{"id":"_LRN(data:MXNet::NDArray?,nsize,**kwargs)-class-method","html_id":"_LRN(data:MXNet::NDArray?,nsize,**kwargs)-class-method","name":"_LRN","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"nsize","doc":null,"default_value":"","external_name":"nsize","restriction":""}],"args_string":"(data : MXNet::NDArray?, nsize, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, nsize, **kwargs)","location":null,"def":{"name":"_LRN","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"nsize","doc":null,"default_value":"","external_name":"nsize","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"LRN\", data, **kwargs.merge(nsize: nsize))"}},{"id":"_MAERegressionOutput(data:MXNet::NDArray?,label:MXNet::NDArray?,**kwargs)-class-method","html_id":"_MAERegressionOutput(data:MXNet::NDArray?,label:MXNet::NDArray?,**kwargs)-class-method","name":"_MAERegressionOutput","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"label","doc":null,"default_value":"","external_name":"label","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, label : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, label : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_MAERegressionOutput","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"label","doc":null,"default_value":"","external_name":"label","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"MAERegressionOutput\", data, label, **kwargs)"}},{"id":"_make_loss(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_make_loss(data:MXNet::NDArray?,**kwargs)-class-method","name":"_make_loss","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_make_loss","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"make_loss\", data, **kwargs)"}},{"id":"_MakeLoss(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_MakeLoss(data:MXNet::NDArray?,**kwargs)-class-method","name":"_MakeLoss","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_MakeLoss","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"MakeLoss\", data, **kwargs)"}},{"id":"_max(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_max(data:MXNet::NDArray?,**kwargs)-class-method","name":"_max","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_max","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"max\", data, **kwargs)"}},{"id":"_max_axis(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_max_axis(data:MXNet::NDArray?,**kwargs)-class-method","name":"_max_axis","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_max_axis","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"max_axis\", data, **kwargs)"}},{"id":"_mean(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_mean(data:MXNet::NDArray?,**kwargs)-class-method","name":"_mean","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_mean","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"mean\", data, **kwargs)"}},{"id":"_min(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_min(data:MXNet::NDArray?,**kwargs)-class-method","name":"_min","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_min","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"min\", data, **kwargs)"}},{"id":"_min_axis(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_min_axis(data:MXNet::NDArray?,**kwargs)-class-method","name":"_min_axis","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_min_axis","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"min_axis\", data, **kwargs)"}},{"id":"_mp_sgd_mom_update(weight:MXNet::NDArray?,grad:MXNet::NDArray?,mom:MXNet::NDArray?,weight32:MXNet::NDArray?,lr,**kwargs)-class-method","html_id":"_mp_sgd_mom_update(weight:MXNet::NDArray?,grad:MXNet::NDArray?,mom:MXNet::NDArray?,weight32:MXNet::NDArray?,lr,**kwargs)-class-method","name":"_mp_sgd_mom_update","doc":null,"summary":null,"abstract":false,"args":[{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::NDArray | ::Nil"},{"name":"grad","doc":null,"default_value":"","external_name":"grad","restriction":"MXNet::NDArray | ::Nil"},{"name":"mom","doc":null,"default_value":"","external_name":"mom","restriction":"MXNet::NDArray | ::Nil"},{"name":"weight32","doc":null,"default_value":"","external_name":"weight32","restriction":"MXNet::NDArray | ::Nil"},{"name":"lr","doc":null,"default_value":"","external_name":"lr","restriction":""}],"args_string":"(weight : MXNet::NDArray?, grad : MXNet::NDArray?, mom : MXNet::NDArray?, weight32 : MXNet::NDArray?, lr, **kwargs)","args_html":"(weight : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, grad : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, mom : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, weight32 : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, lr, **kwargs)","location":null,"def":{"name":"_mp_sgd_mom_update","args":[{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::NDArray | ::Nil"},{"name":"grad","doc":null,"default_value":"","external_name":"grad","restriction":"MXNet::NDArray | ::Nil"},{"name":"mom","doc":null,"default_value":"","external_name":"mom","restriction":"MXNet::NDArray | ::Nil"},{"name":"weight32","doc":null,"default_value":"","external_name":"weight32","restriction":"MXNet::NDArray | ::Nil"},{"name":"lr","doc":null,"default_value":"","external_name":"lr","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"mp_sgd_mom_update\", weight, grad, mom, weight32, **kwargs.merge(lr: lr))"}},{"id":"_mp_sgd_update(weight:MXNet::NDArray?,grad:MXNet::NDArray?,weight32:MXNet::NDArray?,lr,**kwargs)-class-method","html_id":"_mp_sgd_update(weight:MXNet::NDArray?,grad:MXNet::NDArray?,weight32:MXNet::NDArray?,lr,**kwargs)-class-method","name":"_mp_sgd_update","doc":null,"summary":null,"abstract":false,"args":[{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::NDArray | ::Nil"},{"name":"grad","doc":null,"default_value":"","external_name":"grad","restriction":"MXNet::NDArray | ::Nil"},{"name":"weight32","doc":null,"default_value":"","external_name":"weight32","restriction":"MXNet::NDArray | ::Nil"},{"name":"lr","doc":null,"default_value":"","external_name":"lr","restriction":""}],"args_string":"(weight : MXNet::NDArray?, grad : MXNet::NDArray?, weight32 : MXNet::NDArray?, lr, **kwargs)","args_html":"(weight : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, grad : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, weight32 : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, lr, **kwargs)","location":null,"def":{"name":"_mp_sgd_update","args":[{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::NDArray | ::Nil"},{"name":"grad","doc":null,"default_value":"","external_name":"grad","restriction":"MXNet::NDArray | ::Nil"},{"name":"weight32","doc":null,"default_value":"","external_name":"weight32","restriction":"MXNet::NDArray | ::Nil"},{"name":"lr","doc":null,"default_value":"","external_name":"lr","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"mp_sgd_update\", weight, grad, weight32, **kwargs.merge(lr: lr))"}},{"id":"_nanprod(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_nanprod(data:MXNet::NDArray?,**kwargs)-class-method","name":"_nanprod","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_nanprod","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"nanprod\", data, **kwargs)"}},{"id":"_nansum(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_nansum(data:MXNet::NDArray?,**kwargs)-class-method","name":"_nansum","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_nansum","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"nansum\", data, **kwargs)"}},{"id":"_negative(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_negative(data:MXNet::NDArray?,**kwargs)-class-method","name":"_negative","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_negative","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"negative\", data, **kwargs)"}},{"id":"_norm(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_norm(data:MXNet::NDArray?,**kwargs)-class-method","name":"_norm","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_norm","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"norm\", data, **kwargs)"}},{"id":"_normal(**kwargs)-class-method","html_id":"_normal(**kwargs)-class-method","name":"_normal","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"_normal","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"normal\", **kwargs)"}},{"id":"_one_hot(indices:MXNet::NDArray?,depth,**kwargs)-class-method","html_id":"_one_hot(indices:MXNet::NDArray?,depth,**kwargs)-class-method","name":"_one_hot","doc":null,"summary":null,"abstract":false,"args":[{"name":"indices","doc":null,"default_value":"","external_name":"indices","restriction":"MXNet::NDArray | ::Nil"},{"name":"depth","doc":null,"default_value":"","external_name":"depth","restriction":""}],"args_string":"(indices : MXNet::NDArray?, depth, **kwargs)","args_html":"(indices : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, depth, **kwargs)","location":null,"def":{"name":"_one_hot","args":[{"name":"indices","doc":null,"default_value":"","external_name":"indices","restriction":"MXNet::NDArray | ::Nil"},{"name":"depth","doc":null,"default_value":"","external_name":"depth","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"one_hot\", indices, **kwargs.merge(depth: depth))"}},{"id":"_ones_like(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_ones_like(data:MXNet::NDArray?,**kwargs)-class-method","name":"_ones_like","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_ones_like","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"ones_like\", data, **kwargs)"}},{"id":"_Pad(data:MXNet::NDArray?,mode,pad_width,**kwargs)-class-method","html_id":"_Pad(data:MXNet::NDArray?,mode,pad_width,**kwargs)-class-method","name":"_Pad","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"mode","doc":null,"default_value":"","external_name":"mode","restriction":""},{"name":"pad_width","doc":null,"default_value":"","external_name":"pad_width","restriction":""}],"args_string":"(data : MXNet::NDArray?, mode, pad_width, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, mode, pad_width, **kwargs)","location":null,"def":{"name":"_Pad","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"mode","doc":null,"default_value":"","external_name":"mode","restriction":""},{"name":"pad_width","doc":null,"default_value":"","external_name":"pad_width","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"Pad\", data, **kwargs.merge(mode: mode, pad_width: pad_width))"}},{"id":"_pad(data:MXNet::NDArray?,mode,pad_width,**kwargs)-class-method","html_id":"_pad(data:MXNet::NDArray?,mode,pad_width,**kwargs)-class-method","name":"_pad","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"mode","doc":null,"default_value":"","external_name":"mode","restriction":""},{"name":"pad_width","doc":null,"default_value":"","external_name":"pad_width","restriction":""}],"args_string":"(data : MXNet::NDArray?, mode, pad_width, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, mode, pad_width, **kwargs)","location":null,"def":{"name":"_pad","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"mode","doc":null,"default_value":"","external_name":"mode","restriction":""},{"name":"pad_width","doc":null,"default_value":"","external_name":"pad_width","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"pad\", data, **kwargs.merge(mode: mode, pad_width: pad_width))"}},{"id":"_pick(data:MXNet::NDArray?,index:MXNet::NDArray?,**kwargs)-class-method","html_id":"_pick(data:MXNet::NDArray?,index:MXNet::NDArray?,**kwargs)-class-method","name":"_pick","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, index : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, index : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_pick","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"pick\", data, index, **kwargs)"}},{"id":"_Pooling(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_Pooling(data:MXNet::NDArray?,**kwargs)-class-method","name":"_Pooling","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_Pooling","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"Pooling\", data, **kwargs)"}},{"id":"_Pooling_v1(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_Pooling_v1(data:MXNet::NDArray?,**kwargs)-class-method","name":"_Pooling_v1","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_Pooling_v1","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"Pooling_v1\", data, **kwargs)"}},{"id":"_prod(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_prod(data:MXNet::NDArray?,**kwargs)-class-method","name":"_prod","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_prod","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"prod\", data, **kwargs)"}},{"id":"_radians(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_radians(data:MXNet::NDArray?,**kwargs)-class-method","name":"_radians","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_radians","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"radians\", data, **kwargs)"}},{"id":"_random_exponential(**kwargs)-class-method","html_id":"_random_exponential(**kwargs)-class-method","name":"_random_exponential","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"_random_exponential","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"random_exponential\", **kwargs)"}},{"id":"_random_gamma(**kwargs)-class-method","html_id":"_random_gamma(**kwargs)-class-method","name":"_random_gamma","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"_random_gamma","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"random_gamma\", **kwargs)"}},{"id":"_random_generalized_negative_binomial(**kwargs)-class-method","html_id":"_random_generalized_negative_binomial(**kwargs)-class-method","name":"_random_generalized_negative_binomial","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"_random_generalized_negative_binomial","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"random_generalized_negative_binomial\", **kwargs)"}},{"id":"_random_negative_binomial(**kwargs)-class-method","html_id":"_random_negative_binomial(**kwargs)-class-method","name":"_random_negative_binomial","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"_random_negative_binomial","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"random_negative_binomial\", **kwargs)"}},{"id":"_random_normal(**kwargs)-class-method","html_id":"_random_normal(**kwargs)-class-method","name":"_random_normal","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"_random_normal","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"random_normal\", **kwargs)"}},{"id":"_random_poisson(**kwargs)-class-method","html_id":"_random_poisson(**kwargs)-class-method","name":"_random_poisson","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"_random_poisson","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"random_poisson\", **kwargs)"}},{"id":"_random_randint(low,high,**kwargs)-class-method","html_id":"_random_randint(low,high,**kwargs)-class-method","name":"_random_randint","doc":null,"summary":null,"abstract":false,"args":[{"name":"low","doc":null,"default_value":"","external_name":"low","restriction":""},{"name":"high","doc":null,"default_value":"","external_name":"high","restriction":""}],"args_string":"(low, high, **kwargs)","args_html":"(low, high, **kwargs)","location":null,"def":{"name":"_random_randint","args":[{"name":"low","doc":null,"default_value":"","external_name":"low","restriction":""},{"name":"high","doc":null,"default_value":"","external_name":"high","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"random_randint\", **kwargs.merge(low: low, high: high))"}},{"id":"_random_uniform(**kwargs)-class-method","html_id":"_random_uniform(**kwargs)-class-method","name":"_random_uniform","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"_random_uniform","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"random_uniform\", **kwargs)"}},{"id":"_ravel_multi_index(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_ravel_multi_index(data:MXNet::NDArray?,**kwargs)-class-method","name":"_ravel_multi_index","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_ravel_multi_index","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"ravel_multi_index\", data, **kwargs)"}},{"id":"_rcbrt(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_rcbrt(data:MXNet::NDArray?,**kwargs)-class-method","name":"_rcbrt","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_rcbrt","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"rcbrt\", data, **kwargs)"}},{"id":"_reciprocal(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_reciprocal(data:MXNet::NDArray?,**kwargs)-class-method","name":"_reciprocal","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_reciprocal","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"reciprocal\", data, **kwargs)"}},{"id":"_relu(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_relu(data:MXNet::NDArray?,**kwargs)-class-method","name":"_relu","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_relu","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"relu\", data, **kwargs)"}},{"id":"_repeat(data:MXNet::NDArray?,repeats,**kwargs)-class-method","html_id":"_repeat(data:MXNet::NDArray?,repeats,**kwargs)-class-method","name":"_repeat","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"repeats","doc":null,"default_value":"","external_name":"repeats","restriction":""}],"args_string":"(data : MXNet::NDArray?, repeats, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, repeats, **kwargs)","location":null,"def":{"name":"_repeat","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"repeats","doc":null,"default_value":"","external_name":"repeats","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"repeat\", data, **kwargs.merge(repeats: repeats))"}},{"id":"_Reshape(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_Reshape(data:MXNet::NDArray?,**kwargs)-class-method","name":"_Reshape","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_Reshape","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"Reshape\", data, **kwargs)"}},{"id":"_reshape(data:MXNet::NDArray?,shape,**kwargs)-class-method","html_id":"_reshape(data:MXNet::NDArray?,shape,**kwargs)-class-method","name":"_reshape","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"shape","doc":null,"default_value":"","external_name":"shape","restriction":""}],"args_string":"(data : MXNet::NDArray?, shape, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, shape, **kwargs)","location":null,"def":{"name":"_reshape","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"shape","doc":null,"default_value":"","external_name":"shape","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"reshape\", data, **kwargs.merge(shape: shape))"}},{"id":"_reshape_like(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","html_id":"_reshape_like(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","name":"_reshape_like","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(lhs : MXNet::NDArray?, rhs : MXNet::NDArray?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, rhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_reshape_like","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"reshape_like\", lhs, rhs, **kwargs)"}},{"id":"_reverse(data:MXNet::NDArray?,axis,**kwargs)-class-method","html_id":"_reverse(data:MXNet::NDArray?,axis,**kwargs)-class-method","name":"_reverse","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"axis","doc":null,"default_value":"","external_name":"axis","restriction":""}],"args_string":"(data : MXNet::NDArray?, axis, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, axis, **kwargs)","location":null,"def":{"name":"_reverse","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"axis","doc":null,"default_value":"","external_name":"axis","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"reverse\", data, **kwargs.merge(axis: axis))"}},{"id":"_rint(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_rint(data:MXNet::NDArray?,**kwargs)-class-method","name":"_rint","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_rint","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"rint\", data, **kwargs)"}},{"id":"_rmsprop_update(weight:MXNet::NDArray?,grad:MXNet::NDArray?,n:MXNet::NDArray?,lr,**kwargs)-class-method","html_id":"_rmsprop_update(weight:MXNet::NDArray?,grad:MXNet::NDArray?,n:MXNet::NDArray?,lr,**kwargs)-class-method","name":"_rmsprop_update","doc":null,"summary":null,"abstract":false,"args":[{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::NDArray | ::Nil"},{"name":"grad","doc":null,"default_value":"","external_name":"grad","restriction":"MXNet::NDArray | ::Nil"},{"name":"n","doc":null,"default_value":"","external_name":"n","restriction":"MXNet::NDArray | ::Nil"},{"name":"lr","doc":null,"default_value":"","external_name":"lr","restriction":""}],"args_string":"(weight : MXNet::NDArray?, grad : MXNet::NDArray?, n : MXNet::NDArray?, lr, **kwargs)","args_html":"(weight : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, grad : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, n : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, lr, **kwargs)","location":null,"def":{"name":"_rmsprop_update","args":[{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::NDArray | ::Nil"},{"name":"grad","doc":null,"default_value":"","external_name":"grad","restriction":"MXNet::NDArray | ::Nil"},{"name":"n","doc":null,"default_value":"","external_name":"n","restriction":"MXNet::NDArray | ::Nil"},{"name":"lr","doc":null,"default_value":"","external_name":"lr","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"rmsprop_update\", weight, grad, n, **kwargs.merge(lr: lr))"}},{"id":"_rmspropalex_update(weight:MXNet::NDArray?,grad:MXNet::NDArray?,n:MXNet::NDArray?,g:MXNet::NDArray?,delta:MXNet::NDArray?,lr,**kwargs)-class-method","html_id":"_rmspropalex_update(weight:MXNet::NDArray?,grad:MXNet::NDArray?,n:MXNet::NDArray?,g:MXNet::NDArray?,delta:MXNet::NDArray?,lr,**kwargs)-class-method","name":"_rmspropalex_update","doc":null,"summary":null,"abstract":false,"args":[{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::NDArray | ::Nil"},{"name":"grad","doc":null,"default_value":"","external_name":"grad","restriction":"MXNet::NDArray | ::Nil"},{"name":"n","doc":null,"default_value":"","external_name":"n","restriction":"MXNet::NDArray | ::Nil"},{"name":"g","doc":null,"default_value":"","external_name":"g","restriction":"MXNet::NDArray | ::Nil"},{"name":"delta","doc":null,"default_value":"","external_name":"delta","restriction":"MXNet::NDArray | ::Nil"},{"name":"lr","doc":null,"default_value":"","external_name":"lr","restriction":""}],"args_string":"(weight : MXNet::NDArray?, grad : MXNet::NDArray?, n : MXNet::NDArray?, g : MXNet::NDArray?, delta : MXNet::NDArray?, lr, **kwargs)","args_html":"(weight : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, grad : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, n : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, g : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, delta : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, lr, **kwargs)","location":null,"def":{"name":"_rmspropalex_update","args":[{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::NDArray | ::Nil"},{"name":"grad","doc":null,"default_value":"","external_name":"grad","restriction":"MXNet::NDArray | ::Nil"},{"name":"n","doc":null,"default_value":"","external_name":"n","restriction":"MXNet::NDArray | ::Nil"},{"name":"g","doc":null,"default_value":"","external_name":"g","restriction":"MXNet::NDArray | ::Nil"},{"name":"delta","doc":null,"default_value":"","external_name":"delta","restriction":"MXNet::NDArray | ::Nil"},{"name":"lr","doc":null,"default_value":"","external_name":"lr","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"rmspropalex_update\", weight, grad, n, g, delta, **kwargs.merge(lr: lr))"}},{"id":"_RNN(data:MXNet::NDArray?,parameters:MXNet::NDArray?,state:MXNet::NDArray?,state_cell:MXNet::NDArray?,state_size,num_layers,mode,**kwargs)-class-method","html_id":"_RNN(data:MXNet::NDArray?,parameters:MXNet::NDArray?,state:MXNet::NDArray?,state_cell:MXNet::NDArray?,state_size,num_layers,mode,**kwargs)-class-method","name":"_RNN","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"parameters","doc":null,"default_value":"","external_name":"parameters","restriction":"MXNet::NDArray | ::Nil"},{"name":"state","doc":null,"default_value":"","external_name":"state","restriction":"MXNet::NDArray | ::Nil"},{"name":"state_cell","doc":null,"default_value":"","external_name":"state_cell","restriction":"MXNet::NDArray | ::Nil"},{"name":"state_size","doc":null,"default_value":"","external_name":"state_size","restriction":""},{"name":"num_layers","doc":null,"default_value":"","external_name":"num_layers","restriction":""},{"name":"mode","doc":null,"default_value":"","external_name":"mode","restriction":""}],"args_string":"(data : MXNet::NDArray?, parameters : MXNet::NDArray?, state : MXNet::NDArray?, state_cell : MXNet::NDArray?, state_size, num_layers, mode, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, parameters : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, state : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, state_cell : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, state_size, num_layers, mode, **kwargs)","location":null,"def":{"name":"_RNN","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"parameters","doc":null,"default_value":"","external_name":"parameters","restriction":"MXNet::NDArray | ::Nil"},{"name":"state","doc":null,"default_value":"","external_name":"state","restriction":"MXNet::NDArray | ::Nil"},{"name":"state_cell","doc":null,"default_value":"","external_name":"state_cell","restriction":"MXNet::NDArray | ::Nil"},{"name":"state_size","doc":null,"default_value":"","external_name":"state_size","restriction":""},{"name":"num_layers","doc":null,"default_value":"","external_name":"num_layers","restriction":""},{"name":"mode","doc":null,"default_value":"","external_name":"mode","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"RNN\", data, parameters, state, state_cell, **kwargs.merge(state_size: state_size, num_layers: num_layers, mode: mode))"}},{"id":"_ROIPooling(data:MXNet::NDArray?,rois:MXNet::NDArray?,pooled_size,spatial_scale,**kwargs)-class-method","html_id":"_ROIPooling(data:MXNet::NDArray?,rois:MXNet::NDArray?,pooled_size,spatial_scale,**kwargs)-class-method","name":"_ROIPooling","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"rois","doc":null,"default_value":"","external_name":"rois","restriction":"MXNet::NDArray | ::Nil"},{"name":"pooled_size","doc":null,"default_value":"","external_name":"pooled_size","restriction":""},{"name":"spatial_scale","doc":null,"default_value":"","external_name":"spatial_scale","restriction":""}],"args_string":"(data : MXNet::NDArray?, rois : MXNet::NDArray?, pooled_size, spatial_scale, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, rois : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, pooled_size, spatial_scale, **kwargs)","location":null,"def":{"name":"_ROIPooling","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"rois","doc":null,"default_value":"","external_name":"rois","restriction":"MXNet::NDArray | ::Nil"},{"name":"pooled_size","doc":null,"default_value":"","external_name":"pooled_size","restriction":""},{"name":"spatial_scale","doc":null,"default_value":"","external_name":"spatial_scale","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"ROIPooling\", data, rois, **kwargs.merge(pooled_size: pooled_size, spatial_scale: spatial_scale))"}},{"id":"_round(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_round(data:MXNet::NDArray?,**kwargs)-class-method","name":"_round","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_round","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"round\", data, **kwargs)"}},{"id":"_rsqrt(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_rsqrt(data:MXNet::NDArray?,**kwargs)-class-method","name":"_rsqrt","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_rsqrt","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"rsqrt\", data, **kwargs)"}},{"id":"_sample_exponential(lam:MXNet::NDArray?,**kwargs)-class-method","html_id":"_sample_exponential(lam:MXNet::NDArray?,**kwargs)-class-method","name":"_sample_exponential","doc":null,"summary":null,"abstract":false,"args":[{"name":"lam","doc":null,"default_value":"","external_name":"lam","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(lam : MXNet::NDArray?, **kwargs)","args_html":"(lam : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_sample_exponential","args":[{"name":"lam","doc":null,"default_value":"","external_name":"lam","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"sample_exponential\", lam, **kwargs)"}},{"id":"_sample_gamma(alpha:MXNet::NDArray?,beta:MXNet::NDArray?,**kwargs)-class-method","html_id":"_sample_gamma(alpha:MXNet::NDArray?,beta:MXNet::NDArray?,**kwargs)-class-method","name":"_sample_gamma","doc":null,"summary":null,"abstract":false,"args":[{"name":"alpha","doc":null,"default_value":"","external_name":"alpha","restriction":"MXNet::NDArray | ::Nil"},{"name":"beta","doc":null,"default_value":"","external_name":"beta","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(alpha : MXNet::NDArray?, beta : MXNet::NDArray?, **kwargs)","args_html":"(alpha : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, beta : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_sample_gamma","args":[{"name":"alpha","doc":null,"default_value":"","external_name":"alpha","restriction":"MXNet::NDArray | ::Nil"},{"name":"beta","doc":null,"default_value":"","external_name":"beta","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"sample_gamma\", alpha, beta, **kwargs)"}},{"id":"_sample_generalized_negative_binomial(mu:MXNet::NDArray?,alpha:MXNet::NDArray?,**kwargs)-class-method","html_id":"_sample_generalized_negative_binomial(mu:MXNet::NDArray?,alpha:MXNet::NDArray?,**kwargs)-class-method","name":"_sample_generalized_negative_binomial","doc":null,"summary":null,"abstract":false,"args":[{"name":"mu","doc":null,"default_value":"","external_name":"mu","restriction":"MXNet::NDArray | ::Nil"},{"name":"alpha","doc":null,"default_value":"","external_name":"alpha","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(mu : MXNet::NDArray?, alpha : MXNet::NDArray?, **kwargs)","args_html":"(mu : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, alpha : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_sample_generalized_negative_binomial","args":[{"name":"mu","doc":null,"default_value":"","external_name":"mu","restriction":"MXNet::NDArray | ::Nil"},{"name":"alpha","doc":null,"default_value":"","external_name":"alpha","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"sample_generalized_negative_binomial\", mu, alpha, **kwargs)"}},{"id":"_sample_multinomial(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_sample_multinomial(data:MXNet::NDArray?,**kwargs)-class-method","name":"_sample_multinomial","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_sample_multinomial","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"sample_multinomial\", data, **kwargs)"}},{"id":"_sample_negative_binomial(k:MXNet::NDArray?,p:MXNet::NDArray?,**kwargs)-class-method","html_id":"_sample_negative_binomial(k:MXNet::NDArray?,p:MXNet::NDArray?,**kwargs)-class-method","name":"_sample_negative_binomial","doc":null,"summary":null,"abstract":false,"args":[{"name":"k","doc":null,"default_value":"","external_name":"k","restriction":"MXNet::NDArray | ::Nil"},{"name":"p","doc":null,"default_value":"","external_name":"p","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(k : MXNet::NDArray?, p : MXNet::NDArray?, **kwargs)","args_html":"(k : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, p : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_sample_negative_binomial","args":[{"name":"k","doc":null,"default_value":"","external_name":"k","restriction":"MXNet::NDArray | ::Nil"},{"name":"p","doc":null,"default_value":"","external_name":"p","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"sample_negative_binomial\", k, p, **kwargs)"}},{"id":"_sample_normal(mu:MXNet::NDArray?,sigma:MXNet::NDArray?,**kwargs)-class-method","html_id":"_sample_normal(mu:MXNet::NDArray?,sigma:MXNet::NDArray?,**kwargs)-class-method","name":"_sample_normal","doc":null,"summary":null,"abstract":false,"args":[{"name":"mu","doc":null,"default_value":"","external_name":"mu","restriction":"MXNet::NDArray | ::Nil"},{"name":"sigma","doc":null,"default_value":"","external_name":"sigma","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(mu : MXNet::NDArray?, sigma : MXNet::NDArray?, **kwargs)","args_html":"(mu : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, sigma : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_sample_normal","args":[{"name":"mu","doc":null,"default_value":"","external_name":"mu","restriction":"MXNet::NDArray | ::Nil"},{"name":"sigma","doc":null,"default_value":"","external_name":"sigma","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"sample_normal\", mu, sigma, **kwargs)"}},{"id":"_sample_poisson(lam:MXNet::NDArray?,**kwargs)-class-method","html_id":"_sample_poisson(lam:MXNet::NDArray?,**kwargs)-class-method","name":"_sample_poisson","doc":null,"summary":null,"abstract":false,"args":[{"name":"lam","doc":null,"default_value":"","external_name":"lam","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(lam : MXNet::NDArray?, **kwargs)","args_html":"(lam : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_sample_poisson","args":[{"name":"lam","doc":null,"default_value":"","external_name":"lam","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"sample_poisson\", lam, **kwargs)"}},{"id":"_sample_uniform(low:MXNet::NDArray?,high:MXNet::NDArray?,**kwargs)-class-method","html_id":"_sample_uniform(low:MXNet::NDArray?,high:MXNet::NDArray?,**kwargs)-class-method","name":"_sample_uniform","doc":null,"summary":null,"abstract":false,"args":[{"name":"low","doc":null,"default_value":"","external_name":"low","restriction":"MXNet::NDArray | ::Nil"},{"name":"high","doc":null,"default_value":"","external_name":"high","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(low : MXNet::NDArray?, high : MXNet::NDArray?, **kwargs)","args_html":"(low : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, high : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_sample_uniform","args":[{"name":"low","doc":null,"default_value":"","external_name":"low","restriction":"MXNet::NDArray | ::Nil"},{"name":"high","doc":null,"default_value":"","external_name":"high","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"sample_uniform\", low, high, **kwargs)"}},{"id":"_scatter_nd(data:MXNet::NDArray?,indices:MXNet::NDArray?,shape,**kwargs)-class-method","html_id":"_scatter_nd(data:MXNet::NDArray?,indices:MXNet::NDArray?,shape,**kwargs)-class-method","name":"_scatter_nd","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"indices","doc":null,"default_value":"","external_name":"indices","restriction":"MXNet::NDArray | ::Nil"},{"name":"shape","doc":null,"default_value":"","external_name":"shape","restriction":""}],"args_string":"(data : MXNet::NDArray?, indices : MXNet::NDArray?, shape, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, indices : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, shape, **kwargs)","location":null,"def":{"name":"_scatter_nd","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"indices","doc":null,"default_value":"","external_name":"indices","restriction":"MXNet::NDArray | ::Nil"},{"name":"shape","doc":null,"default_value":"","external_name":"shape","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"scatter_nd\", data, indices, **kwargs.merge(shape: shape))"}},{"id":"_SequenceLast(data:MXNet::NDArray?,sequence_length:MXNet::NDArray?,**kwargs)-class-method","html_id":"_SequenceLast(data:MXNet::NDArray?,sequence_length:MXNet::NDArray?,**kwargs)-class-method","name":"_SequenceLast","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"sequence_length","doc":null,"default_value":"","external_name":"sequence_length","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, sequence_length : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, sequence_length : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_SequenceLast","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"sequence_length","doc":null,"default_value":"","external_name":"sequence_length","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"SequenceLast\", data, sequence_length, **kwargs)"}},{"id":"_SequenceMask(data:MXNet::NDArray?,sequence_length:MXNet::NDArray?,**kwargs)-class-method","html_id":"_SequenceMask(data:MXNet::NDArray?,sequence_length:MXNet::NDArray?,**kwargs)-class-method","name":"_SequenceMask","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"sequence_length","doc":null,"default_value":"","external_name":"sequence_length","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, sequence_length : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, sequence_length : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_SequenceMask","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"sequence_length","doc":null,"default_value":"","external_name":"sequence_length","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"SequenceMask\", data, sequence_length, **kwargs)"}},{"id":"_SequenceReverse(data:MXNet::NDArray?,sequence_length:MXNet::NDArray?,**kwargs)-class-method","html_id":"_SequenceReverse(data:MXNet::NDArray?,sequence_length:MXNet::NDArray?,**kwargs)-class-method","name":"_SequenceReverse","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"sequence_length","doc":null,"default_value":"","external_name":"sequence_length","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, sequence_length : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, sequence_length : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_SequenceReverse","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"sequence_length","doc":null,"default_value":"","external_name":"sequence_length","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"SequenceReverse\", data, sequence_length, **kwargs)"}},{"id":"_sgd_mom_update(weight:MXNet::NDArray?,grad:MXNet::NDArray?,mom:MXNet::NDArray?,lr,**kwargs)-class-method","html_id":"_sgd_mom_update(weight:MXNet::NDArray?,grad:MXNet::NDArray?,mom:MXNet::NDArray?,lr,**kwargs)-class-method","name":"_sgd_mom_update","doc":null,"summary":null,"abstract":false,"args":[{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::NDArray | ::Nil"},{"name":"grad","doc":null,"default_value":"","external_name":"grad","restriction":"MXNet::NDArray | ::Nil"},{"name":"mom","doc":null,"default_value":"","external_name":"mom","restriction":"MXNet::NDArray | ::Nil"},{"name":"lr","doc":null,"default_value":"","external_name":"lr","restriction":""}],"args_string":"(weight : MXNet::NDArray?, grad : MXNet::NDArray?, mom : MXNet::NDArray?, lr, **kwargs)","args_html":"(weight : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, grad : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, mom : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, lr, **kwargs)","location":null,"def":{"name":"_sgd_mom_update","args":[{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::NDArray | ::Nil"},{"name":"grad","doc":null,"default_value":"","external_name":"grad","restriction":"MXNet::NDArray | ::Nil"},{"name":"mom","doc":null,"default_value":"","external_name":"mom","restriction":"MXNet::NDArray | ::Nil"},{"name":"lr","doc":null,"default_value":"","external_name":"lr","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"sgd_mom_update\", weight, grad, mom, **kwargs.merge(lr: lr))"}},{"id":"_sgd_update(weight:MXNet::NDArray?,grad:MXNet::NDArray?,lr,**kwargs)-class-method","html_id":"_sgd_update(weight:MXNet::NDArray?,grad:MXNet::NDArray?,lr,**kwargs)-class-method","name":"_sgd_update","doc":null,"summary":null,"abstract":false,"args":[{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::NDArray | ::Nil"},{"name":"grad","doc":null,"default_value":"","external_name":"grad","restriction":"MXNet::NDArray | ::Nil"},{"name":"lr","doc":null,"default_value":"","external_name":"lr","restriction":""}],"args_string":"(weight : MXNet::NDArray?, grad : MXNet::NDArray?, lr, **kwargs)","args_html":"(weight : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, grad : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, lr, **kwargs)","location":null,"def":{"name":"_sgd_update","args":[{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::NDArray | ::Nil"},{"name":"grad","doc":null,"default_value":"","external_name":"grad","restriction":"MXNet::NDArray | ::Nil"},{"name":"lr","doc":null,"default_value":"","external_name":"lr","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"sgd_update\", weight, grad, **kwargs.merge(lr: lr))"}},{"id":"_shape_array(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_shape_array(data:MXNet::NDArray?,**kwargs)-class-method","name":"_shape_array","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_shape_array","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"shape_array\", data, **kwargs)"}},{"id":"_shuffle(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_shuffle(data:MXNet::NDArray?,**kwargs)-class-method","name":"_shuffle","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_shuffle","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"shuffle\", data, **kwargs)"}},{"id":"_sigmoid(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_sigmoid(data:MXNet::NDArray?,**kwargs)-class-method","name":"_sigmoid","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_sigmoid","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"sigmoid\", data, **kwargs)"}},{"id":"_sign(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_sign(data:MXNet::NDArray?,**kwargs)-class-method","name":"_sign","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_sign","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"sign\", data, **kwargs)"}},{"id":"_signsgd_update(weight:MXNet::NDArray?,grad:MXNet::NDArray?,lr,**kwargs)-class-method","html_id":"_signsgd_update(weight:MXNet::NDArray?,grad:MXNet::NDArray?,lr,**kwargs)-class-method","name":"_signsgd_update","doc":null,"summary":null,"abstract":false,"args":[{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::NDArray | ::Nil"},{"name":"grad","doc":null,"default_value":"","external_name":"grad","restriction":"MXNet::NDArray | ::Nil"},{"name":"lr","doc":null,"default_value":"","external_name":"lr","restriction":""}],"args_string":"(weight : MXNet::NDArray?, grad : MXNet::NDArray?, lr, **kwargs)","args_html":"(weight : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, grad : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, lr, **kwargs)","location":null,"def":{"name":"_signsgd_update","args":[{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::NDArray | ::Nil"},{"name":"grad","doc":null,"default_value":"","external_name":"grad","restriction":"MXNet::NDArray | ::Nil"},{"name":"lr","doc":null,"default_value":"","external_name":"lr","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"signsgd_update\", weight, grad, **kwargs.merge(lr: lr))"}},{"id":"_signum_update(weight:MXNet::NDArray?,grad:MXNet::NDArray?,mom:MXNet::NDArray?,lr,**kwargs)-class-method","html_id":"_signum_update(weight:MXNet::NDArray?,grad:MXNet::NDArray?,mom:MXNet::NDArray?,lr,**kwargs)-class-method","name":"_signum_update","doc":null,"summary":null,"abstract":false,"args":[{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::NDArray | ::Nil"},{"name":"grad","doc":null,"default_value":"","external_name":"grad","restriction":"MXNet::NDArray | ::Nil"},{"name":"mom","doc":null,"default_value":"","external_name":"mom","restriction":"MXNet::NDArray | ::Nil"},{"name":"lr","doc":null,"default_value":"","external_name":"lr","restriction":""}],"args_string":"(weight : MXNet::NDArray?, grad : MXNet::NDArray?, mom : MXNet::NDArray?, lr, **kwargs)","args_html":"(weight : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, grad : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, mom : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, lr, **kwargs)","location":null,"def":{"name":"_signum_update","args":[{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::NDArray | ::Nil"},{"name":"grad","doc":null,"default_value":"","external_name":"grad","restriction":"MXNet::NDArray | ::Nil"},{"name":"mom","doc":null,"default_value":"","external_name":"mom","restriction":"MXNet::NDArray | ::Nil"},{"name":"lr","doc":null,"default_value":"","external_name":"lr","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"signum_update\", weight, grad, mom, **kwargs.merge(lr: lr))"}},{"id":"_sin(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_sin(data:MXNet::NDArray?,**kwargs)-class-method","name":"_sin","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_sin","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"sin\", data, **kwargs)"}},{"id":"_sinh(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_sinh(data:MXNet::NDArray?,**kwargs)-class-method","name":"_sinh","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_sinh","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"sinh\", data, **kwargs)"}},{"id":"_size_array(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_size_array(data:MXNet::NDArray?,**kwargs)-class-method","name":"_size_array","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_size_array","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"size_array\", data, **kwargs)"}},{"id":"_slice(data:MXNet::NDArray?,begin_begin,end_end,**kwargs)-class-method","html_id":"_slice(data:MXNet::NDArray?,begin_begin,end_end,**kwargs)-class-method","name":"_slice","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"_begin","doc":null,"default_value":"","external_name":"begin","restriction":""},{"name":"_end","doc":null,"default_value":"","external_name":"end","restriction":""}],"args_string":"(data : MXNet::NDArray?, begin _begin, end _end, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, begin _begin, end _end, **kwargs)","location":null,"def":{"name":"_slice","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"_begin","doc":null,"default_value":"","external_name":"begin","restriction":""},{"name":"_end","doc":null,"default_value":"","external_name":"end","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"slice\", data, **kwargs.merge(begin: _begin, end: _end))"}},{"id":"_slice_axis(data:MXNet::NDArray?,axis,begin_begin,end_end,**kwargs)-class-method","html_id":"_slice_axis(data:MXNet::NDArray?,axis,begin_begin,end_end,**kwargs)-class-method","name":"_slice_axis","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"axis","doc":null,"default_value":"","external_name":"axis","restriction":""},{"name":"_begin","doc":null,"default_value":"","external_name":"begin","restriction":""},{"name":"_end","doc":null,"default_value":"","external_name":"end","restriction":""}],"args_string":"(data : MXNet::NDArray?, axis, begin _begin, end _end, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, axis, begin _begin, end _end, **kwargs)","location":null,"def":{"name":"_slice_axis","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"axis","doc":null,"default_value":"","external_name":"axis","restriction":""},{"name":"_begin","doc":null,"default_value":"","external_name":"begin","restriction":""},{"name":"_end","doc":null,"default_value":"","external_name":"end","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"slice_axis\", data, **kwargs.merge(axis: axis, begin: _begin, end: _end))"}},{"id":"_slice_like(data:MXNet::NDArray?,shape_like:MXNet::NDArray?,**kwargs)-class-method","html_id":"_slice_like(data:MXNet::NDArray?,shape_like:MXNet::NDArray?,**kwargs)-class-method","name":"_slice_like","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"shape_like","doc":null,"default_value":"","external_name":"shape_like","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, shape_like : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, shape_like : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_slice_like","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"shape_like","doc":null,"default_value":"","external_name":"shape_like","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"slice_like\", data, shape_like, **kwargs)"}},{"id":"_SliceChannel(data:MXNet::NDArray?,num_outputs,**kwargs)-class-method","html_id":"_SliceChannel(data:MXNet::NDArray?,num_outputs,**kwargs)-class-method","name":"_SliceChannel","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"num_outputs","doc":null,"default_value":"","external_name":"num_outputs","restriction":""}],"args_string":"(data : MXNet::NDArray?, num_outputs, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, num_outputs, **kwargs)","location":null,"def":{"name":"_SliceChannel","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"num_outputs","doc":null,"default_value":"","external_name":"num_outputs","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"SliceChannel\", data, **kwargs.merge(num_outputs: num_outputs))"}},{"id":"_smooth_l1(data:MXNet::NDArray?,scalar,**kwargs)-class-method","html_id":"_smooth_l1(data:MXNet::NDArray?,scalar,**kwargs)-class-method","name":"_smooth_l1","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"args_string":"(data : MXNet::NDArray?, scalar, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, scalar, **kwargs)","location":null,"def":{"name":"_smooth_l1","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"smooth_l1\", data, **kwargs.merge(scalar: scalar))"}},{"id":"_softmax(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_softmax(data:MXNet::NDArray?,**kwargs)-class-method","name":"_softmax","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_softmax","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"softmax\", data, **kwargs)"}},{"id":"_Softmax(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_Softmax(data:MXNet::NDArray?,**kwargs)-class-method","name":"_Softmax","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_Softmax","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"Softmax\", data, **kwargs)"}},{"id":"_softmax_cross_entropy(data:MXNet::NDArray?,label:MXNet::NDArray?,**kwargs)-class-method","html_id":"_softmax_cross_entropy(data:MXNet::NDArray?,label:MXNet::NDArray?,**kwargs)-class-method","name":"_softmax_cross_entropy","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"label","doc":null,"default_value":"","external_name":"label","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, label : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, label : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_softmax_cross_entropy","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"label","doc":null,"default_value":"","external_name":"label","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"softmax_cross_entropy\", data, label, **kwargs)"}},{"id":"_SoftmaxActivation(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_SoftmaxActivation(data:MXNet::NDArray?,**kwargs)-class-method","name":"_SoftmaxActivation","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_SoftmaxActivation","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"SoftmaxActivation\", data, **kwargs)"}},{"id":"_SoftmaxOutput(data:MXNet::NDArray?,label:MXNet::NDArray?,**kwargs)-class-method","html_id":"_SoftmaxOutput(data:MXNet::NDArray?,label:MXNet::NDArray?,**kwargs)-class-method","name":"_SoftmaxOutput","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"label","doc":null,"default_value":"","external_name":"label","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, label : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, label : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_SoftmaxOutput","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"label","doc":null,"default_value":"","external_name":"label","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"SoftmaxOutput\", data, label, **kwargs)"}},{"id":"_softsign(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_softsign(data:MXNet::NDArray?,**kwargs)-class-method","name":"_softsign","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_softsign","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"softsign\", data, **kwargs)"}},{"id":"_sort(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_sort(data:MXNet::NDArray?,**kwargs)-class-method","name":"_sort","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_sort","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"sort\", data, **kwargs)"}},{"id":"_space_to_depth(data:MXNet::NDArray?,block_size,**kwargs)-class-method","html_id":"_space_to_depth(data:MXNet::NDArray?,block_size,**kwargs)-class-method","name":"_space_to_depth","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"block_size","doc":null,"default_value":"","external_name":"block_size","restriction":""}],"args_string":"(data : MXNet::NDArray?, block_size, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, block_size, **kwargs)","location":null,"def":{"name":"_space_to_depth","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"block_size","doc":null,"default_value":"","external_name":"block_size","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"space_to_depth\", data, **kwargs.merge(block_size: block_size))"}},{"id":"_SpatialTransformer(data:MXNet::NDArray?,loc:MXNet::NDArray?,transform_type,sampler_type,**kwargs)-class-method","html_id":"_SpatialTransformer(data:MXNet::NDArray?,loc:MXNet::NDArray?,transform_type,sampler_type,**kwargs)-class-method","name":"_SpatialTransformer","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"loc","doc":null,"default_value":"","external_name":"loc","restriction":"MXNet::NDArray | ::Nil"},{"name":"transform_type","doc":null,"default_value":"","external_name":"transform_type","restriction":""},{"name":"sampler_type","doc":null,"default_value":"","external_name":"sampler_type","restriction":""}],"args_string":"(data : MXNet::NDArray?, loc : MXNet::NDArray?, transform_type, sampler_type, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, loc : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, transform_type, sampler_type, **kwargs)","location":null,"def":{"name":"_SpatialTransformer","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"loc","doc":null,"default_value":"","external_name":"loc","restriction":"MXNet::NDArray | ::Nil"},{"name":"transform_type","doc":null,"default_value":"","external_name":"transform_type","restriction":""},{"name":"sampler_type","doc":null,"default_value":"","external_name":"sampler_type","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"SpatialTransformer\", data, loc, **kwargs.merge(transform_type: transform_type, sampler_type: sampler_type))"}},{"id":"_split(data:MXNet::NDArray?,num_outputs,**kwargs)-class-method","html_id":"_split(data:MXNet::NDArray?,num_outputs,**kwargs)-class-method","name":"_split","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"num_outputs","doc":null,"default_value":"","external_name":"num_outputs","restriction":""}],"args_string":"(data : MXNet::NDArray?, num_outputs, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, num_outputs, **kwargs)","location":null,"def":{"name":"_split","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"num_outputs","doc":null,"default_value":"","external_name":"num_outputs","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"split\", data, **kwargs.merge(num_outputs: num_outputs))"}},{"id":"_sqrt(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_sqrt(data:MXNet::NDArray?,**kwargs)-class-method","name":"_sqrt","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_sqrt","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"sqrt\", data, **kwargs)"}},{"id":"_square(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_square(data:MXNet::NDArray?,**kwargs)-class-method","name":"_square","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_square","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"square\", data, **kwargs)"}},{"id":"_squeeze(data:Array(MXNet::NDArray),**kwargs)-class-method","html_id":"_squeeze(data:Array(MXNet::NDArray),**kwargs)-class-method","name":"_squeeze","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"Array(MXNet::NDArray)"}],"args_string":"(data : Array(MXNet::NDArray), **kwargs)","args_html":"(data : Array(<a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>), **kwargs)","location":null,"def":{"name":"_squeeze","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"Array(MXNet::NDArray)"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"squeeze\", data, **kwargs)"}},{"id":"_stack(data:Array(MXNet::NDArray),num_args,**kwargs)-class-method","html_id":"_stack(data:Array(MXNet::NDArray),num_args,**kwargs)-class-method","name":"_stack","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"Array(MXNet::NDArray)"},{"name":"num_args","doc":null,"default_value":"","external_name":"num_args","restriction":""}],"args_string":"(data : Array(MXNet::NDArray), num_args, **kwargs)","args_html":"(data : Array(<a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>), num_args, **kwargs)","location":null,"def":{"name":"_stack","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"Array(MXNet::NDArray)"},{"name":"num_args","doc":null,"default_value":"","external_name":"num_args","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"stack\", data, **kwargs.merge(num_args: num_args))"}},{"id":"_stop_gradient(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_stop_gradient(data:MXNet::NDArray?,**kwargs)-class-method","name":"_stop_gradient","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_stop_gradient","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"stop_gradient\", data, **kwargs)"}},{"id":"_sum(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_sum(data:MXNet::NDArray?,**kwargs)-class-method","name":"_sum","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_sum","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"sum\", data, **kwargs)"}},{"id":"_sum_axis(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_sum_axis(data:MXNet::NDArray?,**kwargs)-class-method","name":"_sum_axis","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_sum_axis","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"sum_axis\", data, **kwargs)"}},{"id":"_SVMOutput(data:MXNet::NDArray?,label:MXNet::NDArray?,**kwargs)-class-method","html_id":"_SVMOutput(data:MXNet::NDArray?,label:MXNet::NDArray?,**kwargs)-class-method","name":"_SVMOutput","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"label","doc":null,"default_value":"","external_name":"label","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, label : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, label : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_SVMOutput","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"label","doc":null,"default_value":"","external_name":"label","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"SVMOutput\", data, label, **kwargs)"}},{"id":"_swapaxes(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_swapaxes(data:MXNet::NDArray?,**kwargs)-class-method","name":"_swapaxes","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_swapaxes","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"swapaxes\", data, **kwargs)"}},{"id":"_SwapAxis(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_SwapAxis(data:MXNet::NDArray?,**kwargs)-class-method","name":"_SwapAxis","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_SwapAxis","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"SwapAxis\", data, **kwargs)"}},{"id":"_take(a:MXNet::NDArray?,indices:MXNet::NDArray?,**kwargs)-class-method","html_id":"_take(a:MXNet::NDArray?,indices:MXNet::NDArray?,**kwargs)-class-method","name":"_take","doc":null,"summary":null,"abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"MXNet::NDArray | ::Nil"},{"name":"indices","doc":null,"default_value":"","external_name":"indices","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(a : MXNet::NDArray?, indices : MXNet::NDArray?, **kwargs)","args_html":"(a : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, indices : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_take","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"MXNet::NDArray | ::Nil"},{"name":"indices","doc":null,"default_value":"","external_name":"indices","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"take\", a, indices, **kwargs)"}},{"id":"_tan(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_tan(data:MXNet::NDArray?,**kwargs)-class-method","name":"_tan","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_tan","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"tan\", data, **kwargs)"}},{"id":"_tanh(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_tanh(data:MXNet::NDArray?,**kwargs)-class-method","name":"_tanh","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_tanh","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"tanh\", data, **kwargs)"}},{"id":"_tile(data:MXNet::NDArray?,reps,**kwargs)-class-method","html_id":"_tile(data:MXNet::NDArray?,reps,**kwargs)-class-method","name":"_tile","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"reps","doc":null,"default_value":"","external_name":"reps","restriction":""}],"args_string":"(data : MXNet::NDArray?, reps, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, reps, **kwargs)","location":null,"def":{"name":"_tile","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"reps","doc":null,"default_value":"","external_name":"reps","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"tile\", data, **kwargs.merge(reps: reps))"}},{"id":"_topk(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_topk(data:MXNet::NDArray?,**kwargs)-class-method","name":"_topk","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_topk","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"topk\", data, **kwargs)"}},{"id":"_transpose(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_transpose(data:MXNet::NDArray?,**kwargs)-class-method","name":"_transpose","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_transpose","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"transpose\", data, **kwargs)"}},{"id":"_trunc(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_trunc(data:MXNet::NDArray?,**kwargs)-class-method","name":"_trunc","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_trunc","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"trunc\", data, **kwargs)"}},{"id":"_uniform(**kwargs)-class-method","html_id":"_uniform(**kwargs)-class-method","name":"_uniform","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"_uniform","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"uniform\", **kwargs)"}},{"id":"_unravel_index(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_unravel_index(data:MXNet::NDArray?,**kwargs)-class-method","name":"_unravel_index","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_unravel_index","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"unravel_index\", data, **kwargs)"}},{"id":"_UpSampling(data:Array(MXNet::NDArray),scale,sample_type,num_args,**kwargs)-class-method","html_id":"_UpSampling(data:Array(MXNet::NDArray),scale,sample_type,num_args,**kwargs)-class-method","name":"_UpSampling","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"Array(MXNet::NDArray)"},{"name":"scale","doc":null,"default_value":"","external_name":"scale","restriction":""},{"name":"sample_type","doc":null,"default_value":"","external_name":"sample_type","restriction":""},{"name":"num_args","doc":null,"default_value":"","external_name":"num_args","restriction":""}],"args_string":"(data : Array(MXNet::NDArray), scale, sample_type, num_args, **kwargs)","args_html":"(data : Array(<a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>), scale, sample_type, num_args, **kwargs)","location":null,"def":{"name":"_UpSampling","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"Array(MXNet::NDArray)"},{"name":"scale","doc":null,"default_value":"","external_name":"scale","restriction":""},{"name":"sample_type","doc":null,"default_value":"","external_name":"sample_type","restriction":""},{"name":"num_args","doc":null,"default_value":"","external_name":"num_args","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"UpSampling\", data, **kwargs.merge(scale: scale, sample_type: sample_type, num_args: num_args))"}},{"id":"_where(condition:MXNet::NDArray?,x:MXNet::NDArray?,y:MXNet::NDArray?,**kwargs)-class-method","html_id":"_where(condition:MXNet::NDArray?,x:MXNet::NDArray?,y:MXNet::NDArray?,**kwargs)-class-method","name":"_where","doc":null,"summary":null,"abstract":false,"args":[{"name":"condition","doc":null,"default_value":"","external_name":"condition","restriction":"MXNet::NDArray | ::Nil"},{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":"MXNet::NDArray | ::Nil"},{"name":"y","doc":null,"default_value":"","external_name":"y","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(condition : MXNet::NDArray?, x : MXNet::NDArray?, y : MXNet::NDArray?, **kwargs)","args_html":"(condition : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, x : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, y : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_where","args":[{"name":"condition","doc":null,"default_value":"","external_name":"condition","restriction":"MXNet::NDArray | ::Nil"},{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":"MXNet::NDArray | ::Nil"},{"name":"y","doc":null,"default_value":"","external_name":"y","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"where\", condition, x, y, **kwargs)"}},{"id":"_zeros_like(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_zeros_like(data:MXNet::NDArray?,**kwargs)-class-method","name":"_zeros_like","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_zeros_like","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"zeros_like\", data, **kwargs)"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"mxnet/MXNet/NDArray/Sparse","path":"MXNet/NDArray/Sparse.html","kind":"class","full_name":"MXNet::NDArray::Sparse","name":"Sparse","abstract":false,"superclass":{"html_id":"mxnet/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"mxnet/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"mxnet/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"mxnet","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"mxnet/MXNet/NDArray","kind":"class","full_name":"MXNet::NDArray","name":"NDArray"},"doc":null,"summary":null,"class_methods":[{"id":"_abs(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_abs(data:MXNet::NDArray?,**kwargs)-class-method","name":"_abs","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_abs","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_sparse_abs\", data, **kwargs)"}},{"id":"_adagrad_update(weight:MXNet::NDArray?,grad:MXNet::NDArray?,history:MXNet::NDArray?,lr,**kwargs)-class-method","html_id":"_adagrad_update(weight:MXNet::NDArray?,grad:MXNet::NDArray?,history:MXNet::NDArray?,lr,**kwargs)-class-method","name":"_adagrad_update","doc":null,"summary":null,"abstract":false,"args":[{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::NDArray | ::Nil"},{"name":"grad","doc":null,"default_value":"","external_name":"grad","restriction":"MXNet::NDArray | ::Nil"},{"name":"history","doc":null,"default_value":"","external_name":"history","restriction":"MXNet::NDArray | ::Nil"},{"name":"lr","doc":null,"default_value":"","external_name":"lr","restriction":""}],"args_string":"(weight : MXNet::NDArray?, grad : MXNet::NDArray?, history : MXNet::NDArray?, lr, **kwargs)","args_html":"(weight : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, grad : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, history : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, lr, **kwargs)","location":null,"def":{"name":"_adagrad_update","args":[{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::NDArray | ::Nil"},{"name":"grad","doc":null,"default_value":"","external_name":"grad","restriction":"MXNet::NDArray | ::Nil"},{"name":"history","doc":null,"default_value":"","external_name":"history","restriction":"MXNet::NDArray | ::Nil"},{"name":"lr","doc":null,"default_value":"","external_name":"lr","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_sparse_adagrad_update\", weight, grad, history, **kwargs.merge(lr: lr))"}},{"id":"_adam_update(weight:MXNet::NDArray?,grad:MXNet::NDArray?,mean:MXNet::NDArray?,var:MXNet::NDArray?,lr,**kwargs)-class-method","html_id":"_adam_update(weight:MXNet::NDArray?,grad:MXNet::NDArray?,mean:MXNet::NDArray?,var:MXNet::NDArray?,lr,**kwargs)-class-method","name":"_adam_update","doc":null,"summary":null,"abstract":false,"args":[{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::NDArray | ::Nil"},{"name":"grad","doc":null,"default_value":"","external_name":"grad","restriction":"MXNet::NDArray | ::Nil"},{"name":"mean","doc":null,"default_value":"","external_name":"mean","restriction":"MXNet::NDArray | ::Nil"},{"name":"var","doc":null,"default_value":"","external_name":"var","restriction":"MXNet::NDArray | ::Nil"},{"name":"lr","doc":null,"default_value":"","external_name":"lr","restriction":""}],"args_string":"(weight : MXNet::NDArray?, grad : MXNet::NDArray?, mean : MXNet::NDArray?, var : MXNet::NDArray?, lr, **kwargs)","args_html":"(weight : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, grad : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, mean : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, var : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, lr, **kwargs)","location":null,"def":{"name":"_adam_update","args":[{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::NDArray | ::Nil"},{"name":"grad","doc":null,"default_value":"","external_name":"grad","restriction":"MXNet::NDArray | ::Nil"},{"name":"mean","doc":null,"default_value":"","external_name":"mean","restriction":"MXNet::NDArray | ::Nil"},{"name":"var","doc":null,"default_value":"","external_name":"var","restriction":"MXNet::NDArray | ::Nil"},{"name":"lr","doc":null,"default_value":"","external_name":"lr","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_sparse_adam_update\", weight, grad, mean, var, **kwargs.merge(lr: lr))"}},{"id":"_add_n(args:Array(MXNet::NDArray),**kwargs)-class-method","html_id":"_add_n(args:Array(MXNet::NDArray),**kwargs)-class-method","name":"_add_n","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":"Array(MXNet::NDArray)"}],"args_string":"(args : Array(MXNet::NDArray), **kwargs)","args_html":"(args : Array(<a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>), **kwargs)","location":null,"def":{"name":"_add_n","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":"Array(MXNet::NDArray)"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_sparse_add_n\", args, **kwargs)"}},{"id":"_arccos(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_arccos(data:MXNet::NDArray?,**kwargs)-class-method","name":"_arccos","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_arccos","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_sparse_arccos\", data, **kwargs)"}},{"id":"_arccosh(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_arccosh(data:MXNet::NDArray?,**kwargs)-class-method","name":"_arccosh","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_arccosh","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_sparse_arccosh\", data, **kwargs)"}},{"id":"_arcsin(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_arcsin(data:MXNet::NDArray?,**kwargs)-class-method","name":"_arcsin","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_arcsin","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_sparse_arcsin\", data, **kwargs)"}},{"id":"_arcsinh(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_arcsinh(data:MXNet::NDArray?,**kwargs)-class-method","name":"_arcsinh","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_arcsinh","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_sparse_arcsinh\", data, **kwargs)"}},{"id":"_arctan(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_arctan(data:MXNet::NDArray?,**kwargs)-class-method","name":"_arctan","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_arctan","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_sparse_arctan\", data, **kwargs)"}},{"id":"_arctanh(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_arctanh(data:MXNet::NDArray?,**kwargs)-class-method","name":"_arctanh","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_arctanh","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_sparse_arctanh\", data, **kwargs)"}},{"id":"_broadcast_add(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","html_id":"_broadcast_add(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","name":"_broadcast_add","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(lhs : MXNet::NDArray?, rhs : MXNet::NDArray?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, rhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_broadcast_add","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_sparse_broadcast_add\", lhs, rhs, **kwargs)"}},{"id":"_broadcast_div(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","html_id":"_broadcast_div(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","name":"_broadcast_div","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(lhs : MXNet::NDArray?, rhs : MXNet::NDArray?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, rhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_broadcast_div","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_sparse_broadcast_div\", lhs, rhs, **kwargs)"}},{"id":"_broadcast_minus(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","html_id":"_broadcast_minus(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","name":"_broadcast_minus","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(lhs : MXNet::NDArray?, rhs : MXNet::NDArray?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, rhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_broadcast_minus","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_sparse_broadcast_minus\", lhs, rhs, **kwargs)"}},{"id":"_broadcast_mul(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","html_id":"_broadcast_mul(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","name":"_broadcast_mul","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(lhs : MXNet::NDArray?, rhs : MXNet::NDArray?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, rhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_broadcast_mul","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_sparse_broadcast_mul\", lhs, rhs, **kwargs)"}},{"id":"_broadcast_plus(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","html_id":"_broadcast_plus(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","name":"_broadcast_plus","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(lhs : MXNet::NDArray?, rhs : MXNet::NDArray?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, rhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_broadcast_plus","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_sparse_broadcast_plus\", lhs, rhs, **kwargs)"}},{"id":"_broadcast_sub(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","html_id":"_broadcast_sub(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","name":"_broadcast_sub","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(lhs : MXNet::NDArray?, rhs : MXNet::NDArray?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, rhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_broadcast_sub","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_sparse_broadcast_sub\", lhs, rhs, **kwargs)"}},{"id":"_cast_storage(data:MXNet::NDArray?,stype,**kwargs)-class-method","html_id":"_cast_storage(data:MXNet::NDArray?,stype,**kwargs)-class-method","name":"_cast_storage","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"stype","doc":null,"default_value":"","external_name":"stype","restriction":""}],"args_string":"(data : MXNet::NDArray?, stype, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, stype, **kwargs)","location":null,"def":{"name":"_cast_storage","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"stype","doc":null,"default_value":"","external_name":"stype","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_sparse_cast_storage\", data, **kwargs.merge(stype: stype))"}},{"id":"_cbrt(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_cbrt(data:MXNet::NDArray?,**kwargs)-class-method","name":"_cbrt","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_cbrt","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_sparse_cbrt\", data, **kwargs)"}},{"id":"_ceil(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_ceil(data:MXNet::NDArray?,**kwargs)-class-method","name":"_ceil","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_ceil","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_sparse_ceil\", data, **kwargs)"}},{"id":"_clip(data:MXNet::NDArray?,a_min,a_max,**kwargs)-class-method","html_id":"_clip(data:MXNet::NDArray?,a_min,a_max,**kwargs)-class-method","name":"_clip","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"a_min","doc":null,"default_value":"","external_name":"a_min","restriction":""},{"name":"a_max","doc":null,"default_value":"","external_name":"a_max","restriction":""}],"args_string":"(data : MXNet::NDArray?, a_min, a_max, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, a_min, a_max, **kwargs)","location":null,"def":{"name":"_clip","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"a_min","doc":null,"default_value":"","external_name":"a_min","restriction":""},{"name":"a_max","doc":null,"default_value":"","external_name":"a_max","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_sparse_clip\", data, **kwargs.merge(a_min: a_min, a_max: a_max))"}},{"id":"_concat(data:Array(MXNet::NDArray),num_args,**kwargs)-class-method","html_id":"_concat(data:Array(MXNet::NDArray),num_args,**kwargs)-class-method","name":"_concat","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"Array(MXNet::NDArray)"},{"name":"num_args","doc":null,"default_value":"","external_name":"num_args","restriction":""}],"args_string":"(data : Array(MXNet::NDArray), num_args, **kwargs)","args_html":"(data : Array(<a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>), num_args, **kwargs)","location":null,"def":{"name":"_concat","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"Array(MXNet::NDArray)"},{"name":"num_args","doc":null,"default_value":"","external_name":"num_args","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_sparse_concat\", data, **kwargs.merge(num_args: num_args))"}},{"id":"_cos(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_cos(data:MXNet::NDArray?,**kwargs)-class-method","name":"_cos","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_cos","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_sparse_cos\", data, **kwargs)"}},{"id":"_cosh(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_cosh(data:MXNet::NDArray?,**kwargs)-class-method","name":"_cosh","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_cosh","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_sparse_cosh\", data, **kwargs)"}},{"id":"_degrees(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_degrees(data:MXNet::NDArray?,**kwargs)-class-method","name":"_degrees","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_degrees","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_sparse_degrees\", data, **kwargs)"}},{"id":"_dot(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","html_id":"_dot(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","name":"_dot","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(lhs : MXNet::NDArray?, rhs : MXNet::NDArray?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, rhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_dot","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_sparse_dot\", lhs, rhs, **kwargs)"}},{"id":"_ElementWiseSum(args:Array(MXNet::NDArray),**kwargs)-class-method","html_id":"_ElementWiseSum(args:Array(MXNet::NDArray),**kwargs)-class-method","name":"_ElementWiseSum","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":"Array(MXNet::NDArray)"}],"args_string":"(args : Array(MXNet::NDArray), **kwargs)","args_html":"(args : Array(<a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>), **kwargs)","location":null,"def":{"name":"_ElementWiseSum","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":"Array(MXNet::NDArray)"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_sparse_ElementWiseSum\", args, **kwargs)"}},{"id":"_elemwise_add(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","html_id":"_elemwise_add(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","name":"_elemwise_add","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(lhs : MXNet::NDArray?, rhs : MXNet::NDArray?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, rhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_elemwise_add","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_sparse_elemwise_add\", lhs, rhs, **kwargs)"}},{"id":"_elemwise_div(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","html_id":"_elemwise_div(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","name":"_elemwise_div","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(lhs : MXNet::NDArray?, rhs : MXNet::NDArray?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, rhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_elemwise_div","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_sparse_elemwise_div\", lhs, rhs, **kwargs)"}},{"id":"_elemwise_mul(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","html_id":"_elemwise_mul(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","name":"_elemwise_mul","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(lhs : MXNet::NDArray?, rhs : MXNet::NDArray?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, rhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_elemwise_mul","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_sparse_elemwise_mul\", lhs, rhs, **kwargs)"}},{"id":"_elemwise_sub(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","html_id":"_elemwise_sub(lhs:MXNet::NDArray?,rhs:MXNet::NDArray?,**kwargs)-class-method","name":"_elemwise_sub","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(lhs : MXNet::NDArray?, rhs : MXNet::NDArray?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, rhs : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_elemwise_sub","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::NDArray | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_sparse_elemwise_sub\", lhs, rhs, **kwargs)"}},{"id":"_Embedding(data:MXNet::NDArray?,weight:MXNet::NDArray?,input_dim,output_dim,**kwargs)-class-method","html_id":"_Embedding(data:MXNet::NDArray?,weight:MXNet::NDArray?,input_dim,output_dim,**kwargs)-class-method","name":"_Embedding","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::NDArray | ::Nil"},{"name":"input_dim","doc":null,"default_value":"","external_name":"input_dim","restriction":""},{"name":"output_dim","doc":null,"default_value":"","external_name":"output_dim","restriction":""}],"args_string":"(data : MXNet::NDArray?, weight : MXNet::NDArray?, input_dim, output_dim, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, weight : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, input_dim, output_dim, **kwargs)","location":null,"def":{"name":"_Embedding","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::NDArray | ::Nil"},{"name":"input_dim","doc":null,"default_value":"","external_name":"input_dim","restriction":""},{"name":"output_dim","doc":null,"default_value":"","external_name":"output_dim","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_sparse_Embedding\", data, weight, **kwargs.merge(input_dim: input_dim, output_dim: output_dim))"}},{"id":"_exp(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_exp(data:MXNet::NDArray?,**kwargs)-class-method","name":"_exp","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_exp","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_sparse_exp\", data, **kwargs)"}},{"id":"_expm1(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_expm1(data:MXNet::NDArray?,**kwargs)-class-method","name":"_expm1","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_expm1","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_sparse_expm1\", data, **kwargs)"}},{"id":"_fix(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_fix(data:MXNet::NDArray?,**kwargs)-class-method","name":"_fix","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_fix","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_sparse_fix\", data, **kwargs)"}},{"id":"_floor(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_floor(data:MXNet::NDArray?,**kwargs)-class-method","name":"_floor","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_floor","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_sparse_floor\", data, **kwargs)"}},{"id":"_ftrl_update(weight:MXNet::NDArray?,grad:MXNet::NDArray?,z:MXNet::NDArray?,n:MXNet::NDArray?,lr,**kwargs)-class-method","html_id":"_ftrl_update(weight:MXNet::NDArray?,grad:MXNet::NDArray?,z:MXNet::NDArray?,n:MXNet::NDArray?,lr,**kwargs)-class-method","name":"_ftrl_update","doc":null,"summary":null,"abstract":false,"args":[{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::NDArray | ::Nil"},{"name":"grad","doc":null,"default_value":"","external_name":"grad","restriction":"MXNet::NDArray | ::Nil"},{"name":"z","doc":null,"default_value":"","external_name":"z","restriction":"MXNet::NDArray | ::Nil"},{"name":"n","doc":null,"default_value":"","external_name":"n","restriction":"MXNet::NDArray | ::Nil"},{"name":"lr","doc":null,"default_value":"","external_name":"lr","restriction":""}],"args_string":"(weight : MXNet::NDArray?, grad : MXNet::NDArray?, z : MXNet::NDArray?, n : MXNet::NDArray?, lr, **kwargs)","args_html":"(weight : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, grad : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, z : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, n : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, lr, **kwargs)","location":null,"def":{"name":"_ftrl_update","args":[{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::NDArray | ::Nil"},{"name":"grad","doc":null,"default_value":"","external_name":"grad","restriction":"MXNet::NDArray | ::Nil"},{"name":"z","doc":null,"default_value":"","external_name":"z","restriction":"MXNet::NDArray | ::Nil"},{"name":"n","doc":null,"default_value":"","external_name":"n","restriction":"MXNet::NDArray | ::Nil"},{"name":"lr","doc":null,"default_value":"","external_name":"lr","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_sparse_ftrl_update\", weight, grad, z, n, **kwargs.merge(lr: lr))"}},{"id":"_FullyConnected(data:MXNet::NDArray?,weight:MXNet::NDArray?,bias:MXNet::NDArray?,num_hidden,**kwargs)-class-method","html_id":"_FullyConnected(data:MXNet::NDArray?,weight:MXNet::NDArray?,bias:MXNet::NDArray?,num_hidden,**kwargs)-class-method","name":"_FullyConnected","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::NDArray | ::Nil"},{"name":"bias","doc":null,"default_value":"","external_name":"bias","restriction":"MXNet::NDArray | ::Nil"},{"name":"num_hidden","doc":null,"default_value":"","external_name":"num_hidden","restriction":""}],"args_string":"(data : MXNet::NDArray?, weight : MXNet::NDArray?, bias : MXNet::NDArray?, num_hidden, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, weight : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, bias : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, num_hidden, **kwargs)","location":null,"def":{"name":"_FullyConnected","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::NDArray | ::Nil"},{"name":"bias","doc":null,"default_value":"","external_name":"bias","restriction":"MXNet::NDArray | ::Nil"},{"name":"num_hidden","doc":null,"default_value":"","external_name":"num_hidden","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_sparse_FullyConnected\", data, weight, bias, **kwargs.merge(num_hidden: num_hidden))"}},{"id":"_gamma(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_gamma(data:MXNet::NDArray?,**kwargs)-class-method","name":"_gamma","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_gamma","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_sparse_gamma\", data, **kwargs)"}},{"id":"_gammaln(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_gammaln(data:MXNet::NDArray?,**kwargs)-class-method","name":"_gammaln","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_gammaln","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_sparse_gammaln\", data, **kwargs)"}},{"id":"_LinearRegressionOutput(data:MXNet::NDArray?,label:MXNet::NDArray?,**kwargs)-class-method","html_id":"_LinearRegressionOutput(data:MXNet::NDArray?,label:MXNet::NDArray?,**kwargs)-class-method","name":"_LinearRegressionOutput","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"label","doc":null,"default_value":"","external_name":"label","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, label : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, label : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_LinearRegressionOutput","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"label","doc":null,"default_value":"","external_name":"label","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_sparse_LinearRegressionOutput\", data, label, **kwargs)"}},{"id":"_log(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_log(data:MXNet::NDArray?,**kwargs)-class-method","name":"_log","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_log","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_sparse_log\", data, **kwargs)"}},{"id":"_log10(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_log10(data:MXNet::NDArray?,**kwargs)-class-method","name":"_log10","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_log10","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_sparse_log10\", data, **kwargs)"}},{"id":"_log1p(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_log1p(data:MXNet::NDArray?,**kwargs)-class-method","name":"_log1p","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_log1p","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_sparse_log1p\", data, **kwargs)"}},{"id":"_log2(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_log2(data:MXNet::NDArray?,**kwargs)-class-method","name":"_log2","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_log2","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_sparse_log2\", data, **kwargs)"}},{"id":"_LogisticRegressionOutput(data:MXNet::NDArray?,label:MXNet::NDArray?,**kwargs)-class-method","html_id":"_LogisticRegressionOutput(data:MXNet::NDArray?,label:MXNet::NDArray?,**kwargs)-class-method","name":"_LogisticRegressionOutput","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"label","doc":null,"default_value":"","external_name":"label","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, label : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, label : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_LogisticRegressionOutput","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"label","doc":null,"default_value":"","external_name":"label","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_sparse_LogisticRegressionOutput\", data, label, **kwargs)"}},{"id":"_MAERegressionOutput(data:MXNet::NDArray?,label:MXNet::NDArray?,**kwargs)-class-method","html_id":"_MAERegressionOutput(data:MXNet::NDArray?,label:MXNet::NDArray?,**kwargs)-class-method","name":"_MAERegressionOutput","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"label","doc":null,"default_value":"","external_name":"label","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, label : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, label : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_MAERegressionOutput","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"label","doc":null,"default_value":"","external_name":"label","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_sparse_MAERegressionOutput\", data, label, **kwargs)"}},{"id":"_make_loss(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_make_loss(data:MXNet::NDArray?,**kwargs)-class-method","name":"_make_loss","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_make_loss","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_sparse_make_loss\", data, **kwargs)"}},{"id":"_mean(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_mean(data:MXNet::NDArray?,**kwargs)-class-method","name":"_mean","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_mean","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_sparse_mean\", data, **kwargs)"}},{"id":"_negative(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_negative(data:MXNet::NDArray?,**kwargs)-class-method","name":"_negative","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_negative","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_sparse_negative\", data, **kwargs)"}},{"id":"_norm(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_norm(data:MXNet::NDArray?,**kwargs)-class-method","name":"_norm","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_norm","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_sparse_norm\", data, **kwargs)"}},{"id":"_radians(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_radians(data:MXNet::NDArray?,**kwargs)-class-method","name":"_radians","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_radians","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_sparse_radians\", data, **kwargs)"}},{"id":"_relu(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_relu(data:MXNet::NDArray?,**kwargs)-class-method","name":"_relu","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_relu","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_sparse_relu\", data, **kwargs)"}},{"id":"_retain(data:MXNet::NDArray?,indices:MXNet::NDArray?,**kwargs)-class-method","html_id":"_retain(data:MXNet::NDArray?,indices:MXNet::NDArray?,**kwargs)-class-method","name":"_retain","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"indices","doc":null,"default_value":"","external_name":"indices","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, indices : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, indices : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_retain","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"indices","doc":null,"default_value":"","external_name":"indices","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_sparse_retain\", data, indices, **kwargs)"}},{"id":"_rint(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_rint(data:MXNet::NDArray?,**kwargs)-class-method","name":"_rint","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_rint","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_sparse_rint\", data, **kwargs)"}},{"id":"_round(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_round(data:MXNet::NDArray?,**kwargs)-class-method","name":"_round","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_round","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_sparse_round\", data, **kwargs)"}},{"id":"_rsqrt(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_rsqrt(data:MXNet::NDArray?,**kwargs)-class-method","name":"_rsqrt","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_rsqrt","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_sparse_rsqrt\", data, **kwargs)"}},{"id":"_sgd_mom_update(weight:MXNet::NDArray?,grad:MXNet::NDArray?,mom:MXNet::NDArray?,lr,**kwargs)-class-method","html_id":"_sgd_mom_update(weight:MXNet::NDArray?,grad:MXNet::NDArray?,mom:MXNet::NDArray?,lr,**kwargs)-class-method","name":"_sgd_mom_update","doc":null,"summary":null,"abstract":false,"args":[{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::NDArray | ::Nil"},{"name":"grad","doc":null,"default_value":"","external_name":"grad","restriction":"MXNet::NDArray | ::Nil"},{"name":"mom","doc":null,"default_value":"","external_name":"mom","restriction":"MXNet::NDArray | ::Nil"},{"name":"lr","doc":null,"default_value":"","external_name":"lr","restriction":""}],"args_string":"(weight : MXNet::NDArray?, grad : MXNet::NDArray?, mom : MXNet::NDArray?, lr, **kwargs)","args_html":"(weight : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, grad : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, mom : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, lr, **kwargs)","location":null,"def":{"name":"_sgd_mom_update","args":[{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::NDArray | ::Nil"},{"name":"grad","doc":null,"default_value":"","external_name":"grad","restriction":"MXNet::NDArray | ::Nil"},{"name":"mom","doc":null,"default_value":"","external_name":"mom","restriction":"MXNet::NDArray | ::Nil"},{"name":"lr","doc":null,"default_value":"","external_name":"lr","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_sparse_sgd_mom_update\", weight, grad, mom, **kwargs.merge(lr: lr))"}},{"id":"_sgd_update(weight:MXNet::NDArray?,grad:MXNet::NDArray?,lr,**kwargs)-class-method","html_id":"_sgd_update(weight:MXNet::NDArray?,grad:MXNet::NDArray?,lr,**kwargs)-class-method","name":"_sgd_update","doc":null,"summary":null,"abstract":false,"args":[{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::NDArray | ::Nil"},{"name":"grad","doc":null,"default_value":"","external_name":"grad","restriction":"MXNet::NDArray | ::Nil"},{"name":"lr","doc":null,"default_value":"","external_name":"lr","restriction":""}],"args_string":"(weight : MXNet::NDArray?, grad : MXNet::NDArray?, lr, **kwargs)","args_html":"(weight : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, grad : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, lr, **kwargs)","location":null,"def":{"name":"_sgd_update","args":[{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::NDArray | ::Nil"},{"name":"grad","doc":null,"default_value":"","external_name":"grad","restriction":"MXNet::NDArray | ::Nil"},{"name":"lr","doc":null,"default_value":"","external_name":"lr","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_sparse_sgd_update\", weight, grad, **kwargs.merge(lr: lr))"}},{"id":"_sigmoid(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_sigmoid(data:MXNet::NDArray?,**kwargs)-class-method","name":"_sigmoid","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_sigmoid","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_sparse_sigmoid\", data, **kwargs)"}},{"id":"_sign(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_sign(data:MXNet::NDArray?,**kwargs)-class-method","name":"_sign","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_sign","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_sparse_sign\", data, **kwargs)"}},{"id":"_sin(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_sin(data:MXNet::NDArray?,**kwargs)-class-method","name":"_sin","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_sin","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_sparse_sin\", data, **kwargs)"}},{"id":"_sinh(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_sinh(data:MXNet::NDArray?,**kwargs)-class-method","name":"_sinh","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_sinh","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_sparse_sinh\", data, **kwargs)"}},{"id":"_slice(data:MXNet::NDArray?,begin_begin,end_end,**kwargs)-class-method","html_id":"_slice(data:MXNet::NDArray?,begin_begin,end_end,**kwargs)-class-method","name":"_slice","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"_begin","doc":null,"default_value":"","external_name":"begin","restriction":""},{"name":"_end","doc":null,"default_value":"","external_name":"end","restriction":""}],"args_string":"(data : MXNet::NDArray?, begin _begin, end _end, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, begin _begin, end _end, **kwargs)","location":null,"def":{"name":"_slice","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"},{"name":"_begin","doc":null,"default_value":"","external_name":"begin","restriction":""},{"name":"_end","doc":null,"default_value":"","external_name":"end","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_sparse_slice\", data, **kwargs.merge(begin: _begin, end: _end))"}},{"id":"_sqrt(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_sqrt(data:MXNet::NDArray?,**kwargs)-class-method","name":"_sqrt","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_sqrt","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_sparse_sqrt\", data, **kwargs)"}},{"id":"_square(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_square(data:MXNet::NDArray?,**kwargs)-class-method","name":"_square","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_square","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_sparse_square\", data, **kwargs)"}},{"id":"_stop_gradient(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_stop_gradient(data:MXNet::NDArray?,**kwargs)-class-method","name":"_stop_gradient","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_stop_gradient","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_sparse_stop_gradient\", data, **kwargs)"}},{"id":"_sum(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_sum(data:MXNet::NDArray?,**kwargs)-class-method","name":"_sum","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_sum","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_sparse_sum\", data, **kwargs)"}},{"id":"_tan(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_tan(data:MXNet::NDArray?,**kwargs)-class-method","name":"_tan","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_tan","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_sparse_tan\", data, **kwargs)"}},{"id":"_tanh(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_tanh(data:MXNet::NDArray?,**kwargs)-class-method","name":"_tanh","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_tanh","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_sparse_tanh\", data, **kwargs)"}},{"id":"_trunc(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_trunc(data:MXNet::NDArray?,**kwargs)-class-method","name":"_trunc","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_trunc","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_sparse_trunc\", data, **kwargs)"}},{"id":"_where(condition:MXNet::NDArray?,x:MXNet::NDArray?,y:MXNet::NDArray?,**kwargs)-class-method","html_id":"_where(condition:MXNet::NDArray?,x:MXNet::NDArray?,y:MXNet::NDArray?,**kwargs)-class-method","name":"_where","doc":null,"summary":null,"abstract":false,"args":[{"name":"condition","doc":null,"default_value":"","external_name":"condition","restriction":"MXNet::NDArray | ::Nil"},{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":"MXNet::NDArray | ::Nil"},{"name":"y","doc":null,"default_value":"","external_name":"y","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(condition : MXNet::NDArray?, x : MXNet::NDArray?, y : MXNet::NDArray?, **kwargs)","args_html":"(condition : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, x : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, y : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_where","args":[{"name":"condition","doc":null,"default_value":"","external_name":"condition","restriction":"MXNet::NDArray | ::Nil"},{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":"MXNet::NDArray | ::Nil"},{"name":"y","doc":null,"default_value":"","external_name":"y","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_sparse_where\", condition, x, y, **kwargs)"}},{"id":"_zeros_like(data:MXNet::NDArray?,**kwargs)-class-method","html_id":"_zeros_like(data:MXNet::NDArray?,**kwargs)-class-method","name":"_zeros_like","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"args_string":"(data : MXNet::NDArray?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/NDArray.html\">MXNet::NDArray</a>?, **kwargs)","location":null,"def":{"name":"_zeros_like","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::NDArray | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.imperative_invoke(\"_sparse_zeros_like\", data, **kwargs)"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]},{"html_id":"mxnet/MXNet/NDArrayException","path":"MXNet/NDArrayException.html","kind":"class","full_name":"MXNet::NDArrayException","name":"NDArrayException","abstract":false,"superclass":{"html_id":"mxnet/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"mxnet/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"mxnet/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"mxnet/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/mxnet/ndarray.cr","line_number":2,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/ndarray.cr#L2"}],"repository_name":"mxnet","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"mxnet/MXNet","kind":"module","full_name":"MXNet","name":"MXNet"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"mxnet/MXNet/Operations","path":"MXNet/Operations.html","kind":"module","full_name":"MXNet::Operations","name":"Operations","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/mxnet/operations.cr","line_number":5,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/operations.cr#L5"}],"repository_name":"mxnet","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"mxnet/MXNet/NDArray","kind":"class","full_name":"MXNet::NDArray","name":"NDArray"},{"html_id":"mxnet/MXNet/Symbol","kind":"class","full_name":"MXNet::Symbol","name":"Symbol"}],"namespace":{"html_id":"mxnet/MXNet","kind":"module","full_name":"MXNet","name":"MXNet"},"doc":"Extends `MXNet::NDArray` and `MXNet::Symbol` classes with\nwrappers for native MXNet operations.\n","summary":"<p>Extends <code><a href=\"../MXNet/NDArray.html\">MXNet::NDArray</a></code> and <code><a href=\"../MXNet/Symbol.html\">MXNet::Symbol</a></code> classes with wrappers for native MXNet operations.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"mxnet/MXNet/Optimizer","path":"MXNet/Optimizer.html","kind":"class","full_name":"MXNet::Optimizer","name":"Optimizer","abstract":true,"superclass":{"html_id":"mxnet/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"mxnet/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"mxnet/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/mxnet/optimizer.cr","line_number":17,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/optimizer.cr#L17"}],"repository_name":"mxnet","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[{"html_id":"mxnet/MXNet/Optimizer/SGD","kind":"class","full_name":"MXNet::Optimizer::SGD","name":"SGD"}],"including_types":[],"namespace":{"html_id":"mxnet/MXNet","kind":"module","full_name":"MXNet","name":"MXNet"},"doc":"The base class inherited by all optimizers.\n\nCustom optimizers can be created by subclassing `Optimizer` and\nimplementing the required function `#update`. By default, the\ncreated optimizer will be registered under its simplified class\nname (`class.name.split(\"::\").last.downcase`) but it may also be\nregistered under another name by calling `#register`.\n\n    class MyOptimizer < MXNet::Optimizer\n      register :myopt\n      def update(index, weight, gradient, state)\n        weight\n      end\n    end\n","summary":"<p>The base class inherited by all optimizers.</p>","class_methods":[{"id":"create(optimizer,**kwargs)-class-method","html_id":"create(optimizer,**kwargs)-class-method","name":"create","doc":null,"summary":null,"abstract":false,"args":[{"name":"optimizer","doc":null,"default_value":"","external_name":"optimizer","restriction":""}],"args_string":"(optimizer, **kwargs)","args_html":"(optimizer, **kwargs)","location":{"filename":"src/mxnet/optimizer.cr","line_number":32,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/optimizer.cr#L32"},"def":{"name":"create","args":[{"name":"optimizer","doc":null,"default_value":"","external_name":"optimizer","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"case optimizer\nwhen ::String, ::Symbol\n  @@registry[optimizer.to_s].new(**kwargs)\nwhen .responds_to?(:new)\n  optimizer.new(**kwargs)\nelse\n  optimizer\nend"}}],"constructors":[{"id":"new(rescale_grad=1.0,clip_gradient=-1.0,lr=0.01,wd=0.0)-class-method","html_id":"new(rescale_grad=1.0,clip_gradient=-1.0,lr=0.01,wd=0.0)-class-method","name":"new","doc":"Creates a new instance.\n\n### Parameters\n* *rescale_grad* (`Float`, optional)\n  Before updating, multiply the gradient by\n  *rescale_grad*. Often chosen to be *1.0 / batch_size*.\n* *clip_gradient* (`Float`, optional)\n  Clip the gradient by projecting onto the box\n  `[-clip_gradient, clip_gradient]`.\n* *lr* (`Float`, optional)\n  The initial learning rate.\n* *wd* (`Float`, optional)\n  The weight decay (or L2 regularization) coefficient. Modifies\n  the objective by adding a penalty for having large weights.\n","summary":"<p>Creates a new instance.</p>","abstract":false,"args":[{"name":"rescale_grad","doc":null,"default_value":"1.0","external_name":"rescale_grad","restriction":""},{"name":"clip_gradient","doc":null,"default_value":"-1.0","external_name":"clip_gradient","restriction":""},{"name":"lr","doc":null,"default_value":"0.01","external_name":"lr","restriction":""},{"name":"wd","doc":null,"default_value":"0.0","external_name":"wd","restriction":""}],"args_string":"(rescale_grad = <span class=\"n\">1.0</span>, clip_gradient = <span class=\"n\">-1.0</span>, lr = <span class=\"n\">0.01</span>, wd = <span class=\"n\">0.0</span>)","args_html":"(rescale_grad = <span class=\"n\">1.0</span>, clip_gradient = <span class=\"n\">-1.0</span>, lr = <span class=\"n\">0.01</span>, wd = <span class=\"n\">0.0</span>)","location":{"filename":"src/mxnet/optimizer.cr","line_number":58,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/optimizer.cr#L58"},"def":{"name":"new","args":[{"name":"rescale_grad","doc":null,"default_value":"1.0","external_name":"rescale_grad","restriction":""},{"name":"clip_gradient","doc":null,"default_value":"-1.0","external_name":"clip_gradient","restriction":""},{"name":"lr","doc":null,"default_value":"0.01","external_name":"lr","restriction":""},{"name":"wd","doc":null,"default_value":"0.0","external_name":"wd","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(rescale_grad, clip_gradient, lr, wd)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"create_state(index,weight)-instance-method","html_id":"create_state(index,weight)-instance-method","name":"create_state","doc":"Creates auxiliary state for a given weight.\n\nSome optimizers require additional states (e.g. momentum) in\naddition to gradients in order to update weights. This function\ncreates state for a given weight which will be used in\nupdate. This function is called only once for each weight.\n\n### Parameters\n* *index* (`Int`)\n  A unique index to identify the weight.\n* *weight* (`NDArray`)\n  The weight.\n","summary":"<p>Creates auxiliary state for a given weight.</p>","abstract":false,"args":[{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":""},{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":""}],"args_string":"(index, weight)","args_html":"(index, weight)","location":{"filename":"src/mxnet/optimizer.cr","line_number":127,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/optimizer.cr#L127"},"def":{"name":"create_state","args":[{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":""},{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}},{"id":"lr:Float64-instance-method","html_id":"lr:Float64-instance-method","name":"lr","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Float64","args_html":" : Float64","location":{"filename":"src/mxnet/optimizer.cr","line_number":65,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/optimizer.cr#L65"},"def":{"name":"lr","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@lr"}},{"id":"rescale_grad:Float64-instance-method","html_id":"rescale_grad:Float64-instance-method","name":"rescale_grad","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Float64","args_html":" : Float64","location":{"filename":"src/mxnet/optimizer.cr","line_number":63,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/optimizer.cr#L63"},"def":{"name":"rescale_grad","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@rescale_grad"}},{"id":"rescale_grad=(rescale_grad)-instance-method","html_id":"rescale_grad=(rescale_grad)-instance-method","name":"rescale_grad=","doc":null,"summary":null,"abstract":false,"args":[{"name":"rescale_grad","doc":null,"default_value":"","external_name":"rescale_grad","restriction":""}],"args_string":"(rescale_grad)","args_html":"(rescale_grad)","location":{"filename":"src/mxnet/optimizer.cr","line_number":63,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/optimizer.cr#L63"},"def":{"name":"rescale_grad=","args":[{"name":"rescale_grad","doc":null,"default_value":"","external_name":"rescale_grad","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@rescale_grad = rescale_grad"}},{"id":"set_lr_mult(lr_mult)-instance-method","html_id":"set_lr_mult(lr_mult)-instance-method","name":"set_lr_mult","doc":"Sets an individual learning rate multiplier for each parameter.\n\nIf you specify a learning rate multiplier for a parameter, then\nthe learning rate for that parameter will be set as the product\nof the global learning rate and its multiplier.\n\n### Parameters\n* *lr_mult* (`Hash(Int, Float)`)\n  For each of the entries, the learning rate multipler for the\n  parameter specified will be set as the given value.\n","summary":"<p>Sets an individual learning rate multiplier for each parameter.</p>","abstract":false,"args":[{"name":"lr_mult","doc":null,"default_value":"","external_name":"lr_mult","restriction":""}],"args_string":"(lr_mult)","args_html":"(lr_mult)","location":{"filename":"src/mxnet/optimizer.cr","line_number":78,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/optimizer.cr#L78"},"def":{"name":"set_lr_mult","args":[{"name":"lr_mult","doc":null,"default_value":"","external_name":"lr_mult","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@lr_mult = lr_mult"}},{"id":"set_wd_mult(wd_mult)-instance-method","html_id":"set_wd_mult(wd_mult)-instance-method","name":"set_wd_mult","doc":"Sets an individual weight decay multiplier for each parameter.\n\nIf you specify a weight decay multiplier for a parameter, then\nthe weight decay for that parameter will be set as the product\nof the global weight decay and its multiplier.\n\n### Parameters\n* *wd_mult* (`Hash(Int, Float)`)\n  For each of the entries, the weight decay multipler for the\n  parameter specified will be set as the given value.\n","summary":"<p>Sets an individual weight decay multiplier for each parameter.</p>","abstract":false,"args":[{"name":"wd_mult","doc":null,"default_value":"","external_name":"wd_mult","restriction":""}],"args_string":"(wd_mult)","args_html":"(wd_mult)","location":{"filename":"src/mxnet/optimizer.cr","line_number":93,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/optimizer.cr#L93"},"def":{"name":"set_wd_mult","args":[{"name":"wd_mult","doc":null,"default_value":"","external_name":"wd_mult","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@wd_mult = wd_mult"}},{"id":"update(index,weight,gradient,state)-instance-method","html_id":"update(index,weight,gradient,state)-instance-method","name":"update","doc":"Updates the given parameter using the corresponding gradient and\nstate.\n\n### Parameters\n* *index* (`Int`)\n  The unique index of the parameter into the individual learning\n  rates and weight decays. Learning rates and weight decay may\n  be set via `#set_lr_mult` and `#set_wd_mult`, respectively.\n* *weight* (`NDArray`)\n  The parameter to be updated.\n* *gradient* (`NDArray`)\n  The gradient of the objective with respect to this parameter.\n* *state* (any)\n  The state returned by `#create_state`.\n","summary":"<p>Updates the given parameter using the corresponding gradient and state.</p>","abstract":true,"args":[{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":""},{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":""},{"name":"gradient","doc":null,"default_value":"","external_name":"gradient","restriction":""},{"name":"state","doc":null,"default_value":"","external_name":"state","restriction":""}],"args_string":"(index, weight, gradient, state)","args_html":"(index, weight, gradient, state)","location":{"filename":"src/mxnet/optimizer.cr","line_number":112,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/optimizer.cr#L112"},"def":{"name":"update","args":[{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":""},{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":""},{"name":"gradient","doc":null,"default_value":"","external_name":"gradient","restriction":""},{"name":"state","doc":null,"default_value":"","external_name":"state","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}},{"id":"wd:Float64-instance-method","html_id":"wd:Float64-instance-method","name":"wd","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Float64","args_html":" : Float64","location":{"filename":"src/mxnet/optimizer.cr","line_number":65,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/optimizer.cr#L65"},"def":{"name":"wd","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@wd"}}],"macros":[],"types":[{"html_id":"mxnet/MXNet/Optimizer/SGD","path":"MXNet/Optimizer/SGD.html","kind":"class","full_name":"MXNet::Optimizer::SGD","name":"SGD","abstract":false,"superclass":{"html_id":"mxnet/MXNet/Optimizer","kind":"class","full_name":"MXNet::Optimizer","name":"Optimizer"},"ancestors":[{"html_id":"mxnet/MXNet/Optimizer","kind":"class","full_name":"MXNet::Optimizer","name":"Optimizer"},{"html_id":"mxnet/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"mxnet/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/mxnet/optimizer.cr","line_number":137,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/optimizer.cr#L137"}],"repository_name":"mxnet","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"mxnet/MXNet/Optimizer","kind":"class","full_name":"MXNet::Optimizer","name":"Optimizer"},"doc":"The SGD optimizer with momentum and weight decay.\n\nUpdates are calculated by:\n    rescaled_grad = lr * (rescale_grad * clip(grad, clip_gradient) + wd * weight)\n    state = momentum * state + rescaled_grad\n    weight = weight - state\n","summary":"<p>The SGD optimizer with momentum and weight decay.</p>","class_methods":[],"constructors":[{"id":"new(momentum=0.0,**kwargs)-class-method","html_id":"new(momentum=0.0,**kwargs)-class-method","name":"new","doc":"Creates a new instance.\n\nThis optimizer accepts the following parameters in addition to\nthose accepted by `Optimizer`.\n\n### Parameters\n* *momentum* (`Float`, optional)\n  The momentum value.\n","summary":"<p>Creates a new instance.</p>","abstract":false,"args":[{"name":"momentum","doc":null,"default_value":"0.0","external_name":"momentum","restriction":""}],"args_string":"(momentum = <span class=\"n\">0.0</span>, **kwargs)","args_html":"(momentum = <span class=\"n\">0.0</span>, **kwargs)","location":{"filename":"src/mxnet/optimizer.cr","line_number":147,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/optimizer.cr#L147"},"def":{"name":"new","args":[{"name":"momentum","doc":null,"default_value":"0.0","external_name":"momentum","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(momentum, **kwargs)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"create_state(index,weight)-instance-method","html_id":"create_state(index,weight)-instance-method","name":"create_state","doc":"See: `MXNet::Optimizer#create_state`","summary":"<p>See: <code><a href=\"../../MXNet/Optimizer.html#create_state(index,weight)-instance-method\">MXNet::Optimizer#create_state</a></code></p>","abstract":false,"args":[{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":""},{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":""}],"args_string":"(index, weight)","args_html":"(index, weight)","location":{"filename":"src/mxnet/optimizer.cr","line_number":164,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/optimizer.cr#L164"},"def":{"name":"create_state","args":[{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":""},{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if @momentum != 0\n  MXNet::NDArray.zeros(weight.shape, weight.context, dtype: weight.dtype)\nelse\n  nil\nend"}},{"id":"update(index,weight,gradient,state)-instance-method","html_id":"update(index,weight,gradient,state)-instance-method","name":"update","doc":"See: `MXNet::Optimizer#update`","summary":"<p>See: <code><a href=\"../../MXNet/Optimizer.html#update(index,weight,gradient,state)-instance-method\">MXNet::Optimizer#update</a></code></p>","abstract":false,"args":[{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":""},{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":""},{"name":"gradient","doc":null,"default_value":"","external_name":"gradient","restriction":""},{"name":"state","doc":null,"default_value":"","external_name":"state","restriction":""}],"args_string":"(index, weight, gradient, state)","args_html":"(index, weight, gradient, state)","location":{"filename":"src/mxnet/optimizer.cr","line_number":152,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/optimizer.cr#L152"},"def":{"name":"update","args":[{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":""},{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":""},{"name":"gradient","doc":null,"default_value":"","external_name":"gradient","restriction":""},{"name":"state","doc":null,"default_value":"","external_name":"state","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"lr = get_lr(index)\nwd = get_wd(index)\nkwargs = {lr: lr, wd: wd, rescale_grad: @rescale_grad, clip_gradient: @clip_gradient, out: weight}\nif state\n  MXNet::NDArray.sgd_mom_update(weight, gradient, state, **kwargs.merge({momentum: @momentum}))\nelse\n  MXNet::NDArray.sgd_update(weight, gradient, **kwargs)\nend\n"}}],"macros":[],"types":[]}]},{"html_id":"mxnet/MXNet/Random","path":"MXNet/Random.html","kind":"class","full_name":"MXNet::Random","name":"Random","abstract":false,"superclass":{"html_id":"mxnet/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"mxnet/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"mxnet/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/mxnet/random.cr","line_number":4,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/random.cr#L4"}],"repository_name":"mxnet","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"mxnet/MXNet","kind":"module","full_name":"MXNet","name":"MXNet"},"doc":"Random number interface of MXNet.\n","summary":"<p>Random number interface of MXNet.</p>","class_methods":[{"id":"seed(seed_state:Int32,ctx:Context|::Symbol=:all)-class-method","html_id":"seed(seed_state:Int32,ctx:Context|::Symbol=:all)-class-method","name":"seed","doc":"Seeds the random number generators in MXNet.\n\nThis affects the behavior of modules in MXNet that use random\nnumber generators, like the dropout operator and the `NDArray`\nrandom sampling operators.\n\n### Parameters\n* *seed_state* (`Int32`)\n  The random number seed.\n* *ctx* (`Context` or `:all` for all devices, default `:all`)\n  The device context of the generator. The default is `:all`\n  which means seeding random number generators of all devices.\n\n### Notes\nRandom number generators in MXNet are device specific.\n`.seed(seed_state)` sets the state of each generator using\n`seed_state` and the device id. Therefore, random numbers\ngenerated from different devices can be different even if they\nare seeded using the same seed.\n","summary":"<p>Seeds the random number generators in MXNet.</p>","abstract":false,"args":[{"name":"seed_state","doc":null,"default_value":"","external_name":"seed_state","restriction":"Int32"},{"name":"ctx","doc":null,"default_value":":all","external_name":"ctx","restriction":"Context | ::Symbol"}],"args_string":"(seed_state : Int32, ctx : Context | ::Symbol = <span class=\"n\">:all</span>)","args_html":"(seed_state : Int32, ctx : <a href=\"../MXNet/Context.html\">Context</a> | ::Symbol = <span class=\"n\">:all</span>)","location":{"filename":"src/mxnet/random.cr","line_number":25,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/random.cr#L25"},"def":{"name":"seed","args":[{"name":"seed_state","doc":null,"default_value":"","external_name":"seed_state","restriction":"Int32"},{"name":"ctx","doc":null,"default_value":":all","external_name":"ctx","restriction":"Context | ::Symbol"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if ctx == (:all)\n  MXNet::Internal.libcall(MXRandomSeed, seed_state)\nelse\n  if ctx.is_a?(Context)\n    MXNet::Internal.libcall(MXRandomSeedContext, seed_state, ctx.device.first, ctx.device.last)\n  else\n    raise(ArgumentError.new(\"invalid context: #{ctx}\"))\n  end\nend"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"mxnet/MXNet/Symbol","path":"MXNet/Symbol.html","kind":"class","full_name":"MXNet::Symbol","name":"Symbol","abstract":false,"superclass":{"html_id":"mxnet/MXNet/Base","kind":"class","full_name":"MXNet::Base","name":"Base"},"ancestors":[{"html_id":"mxnet/MXNet/Operations","kind":"module","full_name":"MXNet::Operations","name":"Operations"},{"html_id":"mxnet/MXNet/Base","kind":"class","full_name":"MXNet::Base","name":"Base"},{"html_id":"mxnet/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"mxnet/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/mxnet/symbol.cr","line_number":38,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/symbol.cr#L38"}],"repository_name":"mxnet","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[{"html_id":"mxnet/MXNet/Operations","kind":"module","full_name":"MXNet::Operations","name":"Operations"}],"extended_modules":[{"html_id":"mxnet/MXNet/Operations","kind":"module","full_name":"MXNet::Operations","name":"Operations"},{"html_id":"mxnet/MXNet/Util","kind":"module","full_name":"MXNet::Util","name":"Util"}],"subclasses":[],"including_types":[],"namespace":{"html_id":"mxnet/MXNet","kind":"module","full_name":"MXNet","name":"MXNet"},"doc":"The `Symbol` API provides neural network graphs and\nauto-differentiation. A symbol represents a multi-output symbolic\nexpression. Symbols are composited by operators, such as simple\nmatrix operations (e.g. “+”), or a neural network layer (e.g.\nconvolution layer). An operator can take several input variables,\nproduce more than one output variable, and have internal state\nvariables. A variable can be either free, which we can bind with\nvalues later, or can be an output of another symbol.\n\n```\na = MXNet::Symbol.var(\"a\")\nb = MXNet::Symbol.var(\"b\")\nc = 2 * a + b\ne = c.bind({\"a\" => MXNet::NDArray.array([1, 2]), \"b\" => MXNet::NDArray.array([2, 3])}, MXNet.cpu)\ne.forward.first # => [4, 7]\n                #    <NDArray 2 int32 cpu(0)>\n```\n\nA detailed (albeit in Python) tutorial is available at\n[Symbol - Neural network graphs](https://mxnet.incubator.apache.org/versions/master/tutorials/basic/symbol.html).\n\nNote: most operators provided in `Symbol` are similar to those in\n`NDArray` although there are few differences:\n\n* `Symbol` adopts a declarative programming style. In other words,\n  we need to first compose the computations, and then feed the\n  computation with data for execution, whereas `NDArray` adopts an\n  imperative programming style.\n\n* Most binary operators in `Symbol` such as `+` and `>` don’t\n  broadcast. You need to call the broadcast version of the\n  operator, such as `broadcast_plus`, explicitly.\n","summary":"<p>The <code><a href=\"../MXNet/Symbol.html\">Symbol</a></code> API provides neural network graphs and auto-differentiation.</p>","class_methods":[{"id":"abs(data,**kwargs)-class-method","html_id":"abs(data,**kwargs)-class-method","name":"abs","doc":"Returns the element-wise absolute value of the input.\n\nAssume *x* is an array with the following elements:\n    [-2, 0, 3]\n\nThen:\n    abs(x) # => [2, 0, 3]\n\n### Parameters\n* *data* (`Symbol`, required)\n  Input data.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Returns the element-wise absolute value of the input.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"abs","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._abs(data, **kwargs)"}},{"id":"activation(data:self,act_type,**kwargs)-class-method","html_id":"activation(data:self,act_type,**kwargs)-class-method","name":"activation","doc":"Applies an activation function element-wise to the input.\n\nThe following activation functions are supported:\n  * **relu**: Rectified Linear Unit, _y = max(x, 0)_\n  * **softrelu**: Soft ReLU or SoftPlus, _y = log(1 + exp(x))_\n  * **tanh**: Hyperbolic tangent, _y = exp(x) − exp(−x) / exp(x) + exp(−x)_\n  * **sigmoid**: _y = 1 / 1 + exp(−x)_\n  * **softsign**: _y = x / 1 + abs(x)_\n\n### Parameters\n* *data* (`Symbol`, required)\n  The input array.\n* *act_type* (`::Symbol`, `:relu`, `:softrelu`, `:tanh`, `:sigmoid`, or `:softsign`, required)\n  Activation function to be applied.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Applies an activation function element-wise to the input.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"self"},{"name":"act_type","doc":null,"default_value":"","external_name":"act_type","restriction":""}],"args_string":"(data : <span class=\"k\">self</span>, act_type, **kwargs)","args_html":"(data : <span class=\"k\">self</span>, act_type, **kwargs)","location":null,"def":{"name":"activation","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"self"},{"name":"act_type","doc":null,"default_value":"","external_name":"act_type","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._Activation(data, **kwargs.merge({act_type: act_type}))"}},{"id":"add(lhs:self|Number,rhs:self|Number)-class-method","html_id":"add(lhs:self|Number,rhs:self|Number)-class-method","name":"add","doc":"Returns element-wise sum of the input arrays.\n\nBoth inputs can be a `Symbol` or a scalar number. Broadcasting\nis not supported.\n\nEquivalent to `lhs + rhs`.\n\n### Parameters\n* *lhs* (`Symbol` or `Number`)\n  The first value to be added.\n* *rhs* (`Symbol` or `Number`)\n  The second value to be added.\n","summary":"<p>Returns element-wise sum of the input arrays.</p>","abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"self | Number"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self | Number"}],"args_string":"(lhs : <span class=\"k\">self</span> | Number, rhs : <span class=\"k\">self</span> | Number)","args_html":"(lhs : <span class=\"k\">self</span> | <a href=\"../Number.html\">Number</a>, rhs : <span class=\"k\">self</span> | <a href=\"../Number.html\">Number</a>)","location":{"filename":"src/mxnet/symbol.cr","line_number":583,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/symbol.cr#L583"},"def":{"name":"add","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"self | Number"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self | Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if lhs.is_a?(self)\n  if rhs.is_a?(self)\n    Internal._plus(lhs, rhs)\n  else\n    Internal._plus_scalar(lhs, scalar: rhs)\n  end\nelse\n  if rhs.is_a?(self)\n    Internal._plus_scalar(rhs, scalar: lhs)\n  else\n    raise(\"should never happen\")\n  end\nend"}},{"id":"add_n(data:Array(self),**kwargs)-class-method","html_id":"add_n(data:Array(self),**kwargs)-class-method","name":"add_n","doc":"Adds all input arguments element-wise.\n\n*add_n(a1,a2,...,an)=a1+a2+...+an*\n\n`.add_n` is potentially more efficient than calling `.add` *n* times.\n\n### Parameters\n* *data* (`Array(Symbol)`, required)\n  List of arrays to add.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Adds all input arguments element-wise.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"Array(self)"}],"args_string":"(data : Array(<span class=\"k\">self</span>), **kwargs)","args_html":"(data : Array(<span class=\"k\">self</span>), **kwargs)","location":null,"def":{"name":"add_n","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"Array(self)"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._add_n(data, **kwargs.merge({num_args: data.size}))"}},{"id":"arange(start:Number,stop:Number?=nil,ctx=Context.current,**kwargs)-class-method","html_id":"arange(start:Number,stop:Number?=nil,ctx=Context.current,**kwargs)-class-method","name":"arange","doc":"Returns evenly spaced values within a given interval.\n\nValues are generated within the half-open interval `[start,\nstop)`. In other words, the interval includes start but\nexcludes stop.\n\nExamples:\n    arange(3)                                       # => [0.0, 1.0, 2.0]\n    arange(2, 6)                                    # => [2.0, 3.0, 4.0, 5.0]\n    arange(2, 6, step: 2)                           # => [2.0, 4.0]\n    arange(2, 6, step: 1.5, repeat: 2)              # => [2.0, 2.0, 3.5, 3.5, 5.0 , 5.0]\n    arange(2, 6, step: 2, repeat: 3, dtype: :int32) # => [2, 2, 2, 4, 4, 4]\n\n### Parameters\n* *data* (`Symbol`, required)\n  Input data.\n* *start* (`Number`, optional, default = `0.0`)\n  Start of interval.\n* *stop* (`Number`, required)\n  End of interval.\n* *step* (`Number`, optional, default = `1.0`)\n  Spacing between values.\n* *repeat* (`Int`, optional, default = `1`)\n  Number of times to repeat each value.\n* *dtype* (`::Symbol`, default = `:float32`)\n  The data type of the output array.\n* *ctx* (`Context`, optional)\n  Device context (default is the current context). Only used\n  for imperative calls.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Returns evenly spaced values within a given interval.</p>","abstract":false,"args":[{"name":"start","doc":null,"default_value":"","external_name":"start","restriction":"Number"},{"name":"stop","doc":null,"default_value":"nil","external_name":"stop","restriction":"Number | ::Nil"},{"name":"ctx","doc":null,"default_value":"Context.current","external_name":"ctx","restriction":""}],"args_string":"(start : Number, stop : Number? = <span class=\"n\">nil</span>, ctx = <span class=\"t\">Context</span>.current, **kwargs)","args_html":"(start : <a href=\"../Number.html\">Number</a>, stop : <a href=\"../Number.html\">Number</a>? = <span class=\"n\">nil</span>, ctx = <span class=\"t\">Context</span>.current, **kwargs)","location":null,"def":{"name":"arange","args":[{"name":"start","doc":null,"default_value":"","external_name":"start","restriction":"Number"},{"name":"stop","doc":null,"default_value":"nil","external_name":"stop","restriction":"Number | ::Nil"},{"name":"ctx","doc":null,"default_value":"Context.current","external_name":"ctx","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Internal._arange(**kwargs.merge({start: start, stop: stop, ctx: ctx}))"}},{"id":"arccos(data,**kwargs)-class-method","html_id":"arccos(data,**kwargs)-class-method","name":"arccos","doc":"Returns element-wise inverse cosine of the input array.\n\nThe input should be in range `[-1, 1]`.\nThe output is in the closed interval `[0, 𝜋]`\n\n    arccos([-1, -.707, 0, .707, 1]) = [𝜋, 3𝜋/4, 𝜋/2, 𝜋/4, 0]\n\n### Parameters\n* *data* (`Symbol`, required)\n  Input data.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Returns element-wise inverse cosine of the input array.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"arccos","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._arccos(data, **kwargs)"}},{"id":"arccosh(data,**kwargs)-class-method","html_id":"arccosh(data,**kwargs)-class-method","name":"arccosh","doc":"Returns the inverse hyperbolic cosine of the input array,\ncomputed element-wise.\n\n### Parameters\n* *data* (`Symbol`, required)\n  Input data.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Returns the inverse hyperbolic cosine of the input array, computed element-wise.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"arccosh","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._arccosh(data, **kwargs)"}},{"id":"arcsin(data,**kwargs)-class-method","html_id":"arcsin(data,**kwargs)-class-method","name":"arcsin","doc":"Returns element-wise inverse sine of the input array.\n\nThe input should be in the range `[-1, 1]`.\nThe output is in the closed interval `[-𝜋/2, 𝜋/2]`.\n\n    arcsin([-1, -.707, 0, .707, 1]) = [-𝜋/2, -𝜋/4, 0, 𝜋/4, 𝜋/2]\n\n### Parameters\n* *data* (`Symbol`, required)\n  Input data.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Returns element-wise inverse sine of the input array.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"arcsin","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._arcsin(data, **kwargs)"}},{"id":"arcsinh(data,**kwargs)-class-method","html_id":"arcsinh(data,**kwargs)-class-method","name":"arcsinh","doc":"Returns the inverse hyperbolic sine of the input array,\ncomputed element-wise.\n\n### Parameters\n* *data* (`Symbol`, required)\n  Input data.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Returns the inverse hyperbolic sine of the input array, computed element-wise.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"arcsinh","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._arcsinh(data, **kwargs)"}},{"id":"arctan(data,**kwargs)-class-method","html_id":"arctan(data,**kwargs)-class-method","name":"arctan","doc":"Returns element-wise inverse tangent of the input array.\n\nThe output is in the closed interval `[-𝜋/2, 𝜋/2]`\n\n    arctan([-1, 0, 1]) = [-𝜋/4, 0, 𝜋/4]\n\n### Parameters\n* *data* (`Symbol`, required)\n  Input data.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Returns element-wise inverse tangent of the input array.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"arctan","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._arctan(data, **kwargs)"}},{"id":"arctanh(data,**kwargs)-class-method","html_id":"arctanh(data,**kwargs)-class-method","name":"arctanh","doc":"Returns the inverse hyperbolic tangent of the input array,\ncomputed element-wise.\n\n### Parameters\n* *data* (`Symbol`, required)\n  Input data.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Returns the inverse hyperbolic tangent of the input array, computed element-wise.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"arctanh","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._arctanh(data, **kwargs)"}},{"id":"argmax(data,**kwargs)-class-method","html_id":"argmax(data,**kwargs)-class-method","name":"argmax","doc":"Returns indices of the maximum values along an axis.\n\nIn the case of multiple occurrences of maximum values, the\nindices corresponding to the first occurrence are returned.\n\nAssume *x* is an array with the following elements:\n    [[0.0, 1.0, 2.0], [3.0, 4.0, 5.0]]\n\nThen:\n    argmax(x, axis: 0) = [1.0, 1.0, 1.0]\n    argmax(x, axis: 1) = [2.0, 2.0]\n    argmax(x, axis: 1, keepdims: true) = [[2.0], [2.0]]\n\n### Parameters\n* *data* (`Symbol`, required)\n  Input data.\n* *axis* (`Int`, optional, default = `-1`)\n  The axis along which to perform the reduction. If omitted,\n  the last axis is used.\n* *keepdims* (`Bool`, optional, default = false)\n  If true, the reduced axis is left in the result as a\n  dimension with size one.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Returns indices of the maximum values along an axis.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"argmax","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._argmax(data, **kwargs)"}},{"id":"argmin(data,**kwargs)-class-method","html_id":"argmin(data,**kwargs)-class-method","name":"argmin","doc":"Returns indices of the minimum values along an axis.\n\nIn the case of multiple occurrences of minimum values, the\nindices corresponding to the first occurrence are returned.\n\nAssume *x* is an array with the following elements:\n    [[0.0, 1.0, 2.0], [3.0, 4.0, 5.0]]\n\nThen:\n    argmin(x, axis: 0) = [0.0, 0.0, 0.0]\n    argmin(x, axis: 1) = [0.0, 0.0]\n    argmin(x, axis: 1, keepdims: true) = [[0.0], [0.0]]\n\n### Parameters\n* *data* (`Symbol`, required)\n  Input data.\n* *axis* (`Int`, optional, default = `-1`)\n  The axis along which to perform the reduction. If omitted,\n  the last axis is used.\n* *keepdims* (`Bool`, optional, default = false)\n  If true, the reduced axis is left in the result as a\n  dimension with size one.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Returns indices of the minimum values along an axis.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"argmin","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._argmin(data, **kwargs)"}},{"id":"argsort(data,**kwargs)-class-method","html_id":"argsort(data,**kwargs)-class-method","name":"argsort","doc":"Returns the indices that would sort an input array along the\ngiven axis.\n\nThis function performs sorting along the given axis and\nreturns an array of indices having the same shape as an input\narray that index data in the sorted order.\n\nAssume *x* is an array with the following elements:\n    [[0.3, 0.2, 0.4], [0.1, 0.3, 0.2]]\n\nThen:\n    argsort(x) = [[1.0, 0.0, 2.0], [0.0, 2.0, 1.0]]\n    argsort(x, axis: 0) = [[1.0, 0.0, 1.0], [0.0, 1.0, 0.0]]\n    argsort(x, axis: None) = [3.0, 1.0, 5.0, 0.0, 4.0, 2.0]\n    argsort(x, is_ascend: false) = [[2.0, 0.0, 1.0], [1.0, 2.0, 0.0]]\n\n### Parameters\n* *data* (`Symbol`, required)\n  Input data.\n* *axis* (`Int` or `None`, optional, default = `-1`)\n  The axis along which to choose sort the input tensor. If\n  omitted, the last axis is used. If `None`, the flattened\n  array is used.\n* *is_ascend* (`Bool`, optional, default = false)\n  Whether to sort in ascending or descending order.\n* *dtype* (`::Symbol`, optional, default = `:float32`)\n  The data type of the output indices.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Returns the indices that would sort an input array along the given axis.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"argsort","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._argsort(data, **kwargs)"}},{"id":"broadcast_add(lhs,rhs,**kwargs)-class-method","html_id":"broadcast_add(lhs,rhs,**kwargs)-class-method","name":"broadcast_add","doc":"Returns element-wise sum of the input arrays with broadcasting.\n\n`.broadcast_add` is an alias for `.broadcast_plus`.\n\nAssume *x* and *y* are arrays with the following elements:\n    [[1, 1, 1], [1, 1, 1]] # x\n    [[0], [1]]             # y\n\nThen:\n    broadcast_add(x, y) # => [[1, 1, 1], [2, 2, 2]]\n\n### Parameters\n* *lhs* (`Symbol`, required)\n  The first input.\n* *rhs* (`Symbol`, required)\n  The second input.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Returns element-wise sum of the input arrays with broadcasting.</p>","abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":""},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"args_string":"(lhs, rhs, **kwargs)","args_html":"(lhs, rhs, **kwargs)","location":null,"def":{"name":"broadcast_add","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":""},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._broadcast_add(lhs, rhs, **kwargs)"}},{"id":"broadcast_axis(data,**kwargs)-class-method","html_id":"broadcast_axis(data,**kwargs)-class-method","name":"broadcast_axis","doc":"Broadcasts the input array over particular axis.\n\nBroadcasting is allowed on axes with size 1, such as from `[2, 1, 3, 1]`\nto `[2, 8, 3, 9]`. Elements will be duplicated on the broadcasted\naxis.\n\nAssume *x* is an array with the following elements:\n    [[[1], [2]]]\n\nThen:\n    broadcast_axis(x, axis: 2, size: 3) = [[[1, 1, 1], [2, 2, 2]]]\n    broadcast_axis(x, axis: [0, 2], size: [2, 3]) = [[[1, 1, 1], [2, 2, 2]], [[1, 1, 1], [2, 2, 2]]]\n\n### Parameters\n* *name* (`String`, optional)\n  Name of the symbol.\n* *axis* (`Int` or `Array(Int)`, optional)\n  The axis on which to perform the broadcasting.\n* *size* (`Int` or `Array(Int)`, optional)\n  Target sizes of the broadcasting axis.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Broadcasts the input array over particular axis.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"broadcast_axis","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._broadcast_axis(data, **kwargs)"}},{"id":"broadcast_div(lhs,rhs,**kwargs)-class-method","html_id":"broadcast_div(lhs,rhs,**kwargs)-class-method","name":"broadcast_div","doc":"Returns element-wise division of the input arrays with broadcasting.\n\nAssume *x* and *y* are arrays with the following elements:\n    [[6, 6, 6], [6, 6, 6]] # x\n    [[2], [3]]             # y\n\nThen:\n    broadcast_div(x, y) # => [[3, 3, 3], [2, 2, 2]]\n\n### Parameters\n* *lhs* (`Symbol`, required)\n  The first input.\n* *rhs* (`Symbol`, required)\n  The second input.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Returns element-wise division of the input arrays with broadcasting.</p>","abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":""},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"args_string":"(lhs, rhs, **kwargs)","args_html":"(lhs, rhs, **kwargs)","location":null,"def":{"name":"broadcast_div","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":""},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._broadcast_div(lhs, rhs, **kwargs)"}},{"id":"broadcast_equal(lhs,rhs,**kwargs)-class-method","html_id":"broadcast_equal(lhs,rhs,**kwargs)-class-method","name":"broadcast_equal","doc":"Returns the result of element-wise equal to (`==`) comparison\noperation with broadcasting.\n\nAssume *x* and *y* are arrays with the following elements:\n    [[1, 1, 1], [1, 1, 1]] # x\n    [[0], [1]]             # y\n\nThen:\n    broadcast_equal(x, y) # => [[0, 0, 0], [1, 1, 1]]\n\n### Parameters\n* *lhs* (`Symbol`, required)\n  The first input to be compared.\n* *rhs* (`Symbol`, required)\n  The second input to be compared.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Returns the result of element-wise equal to (<code><a href=\"../MXNet/Symbol.html#==(other)-instance-method\">#==</a></code>) comparison operation with broadcasting.</p>","abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":""},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"args_string":"(lhs, rhs, **kwargs)","args_html":"(lhs, rhs, **kwargs)","location":null,"def":{"name":"broadcast_equal","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":""},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._broadcast_equal(lhs, rhs, **kwargs)"}},{"id":"broadcast_greater(lhs,rhs,**kwargs)-class-method","html_id":"broadcast_greater(lhs,rhs,**kwargs)-class-method","name":"broadcast_greater","doc":"Returns the result of element-wise greater than (`>`) comparison\noperation with broadcasting.\n\nAssume *x* and *y* are arrays with the following elements:\n    [[1, 1, 1], [1, 1, 1]] # x\n    [[0], [1]]             # y\n\nThen:\n    broadcast_greater(x, y) # => [[1, 1, 1], [0, 0, 0]]\n\n### Parameters\n* *lhs* (`Symbol`, required)\n  The first input to be compared.\n* *rhs* (`Symbol`, required)\n  The second input to be compared.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Returns the result of element-wise greater than (<code><a href=\"../MXNet/Symbol.html#%3E(other)-instance-method\">#></a></code>) comparison operation with broadcasting.</p>","abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":""},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"args_string":"(lhs, rhs, **kwargs)","args_html":"(lhs, rhs, **kwargs)","location":null,"def":{"name":"broadcast_greater","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":""},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._broadcast_greater(lhs, rhs, **kwargs)"}},{"id":"broadcast_greater_equal(lhs,rhs,**kwargs)-class-method","html_id":"broadcast_greater_equal(lhs,rhs,**kwargs)-class-method","name":"broadcast_greater_equal","doc":"Returns the result of element-wise greater than or equal to\n(`>=`) comparison operation with broadcasting.\n\nAssume *x* and *y* are arrays with the following elements:\n    [[1, 1, 1], [1, 1, 1]] # x\n    [[0], [1]]             # y\n\nThen:\n    broadcast_greater_equal(x, y) # => [[1, 1, 1], [1, 1, 1]]\n\n### Parameters\n* *lhs* (`Symbol`, required)\n  The first input to be compared.\n* *rhs* (`Symbol`, required)\n  The second input to be compared.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Returns the result of element-wise greater than or equal to (<code><a href=\"../MXNet/Symbol.html#%3E=(other)-instance-method\">#>=</a></code>) comparison operation with broadcasting.</p>","abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":""},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"args_string":"(lhs, rhs, **kwargs)","args_html":"(lhs, rhs, **kwargs)","location":null,"def":{"name":"broadcast_greater_equal","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":""},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._broadcast_greater_equal(lhs, rhs, **kwargs)"}},{"id":"broadcast_lesser(lhs,rhs,**kwargs)-class-method","html_id":"broadcast_lesser(lhs,rhs,**kwargs)-class-method","name":"broadcast_lesser","doc":"Returns the result of element-wise less than (`<`) comparison\noperation with broadcasting.\n\nAssume *x* and *y* are arrays with the following elements:\n    [[1, 1, 1], [1, 1, 1]] # x\n    [[0], [1]]             # y\n\nThen:\n    broadcast_lesser(x, y) # => [[0, 0, 0], [0, 0, 0]]\n\n### Parameters\n* *lhs* (`Symbol`, required)\n  The first input to be compared.\n* *rhs* (`Symbol`, required)\n  The second input to be compared.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Returns the result of element-wise less than (<code><a href=\"../MXNet/Symbol.html#%3C(other)-instance-method\">#<</a></code>) comparison operation with broadcasting.</p>","abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":""},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"args_string":"(lhs, rhs, **kwargs)","args_html":"(lhs, rhs, **kwargs)","location":null,"def":{"name":"broadcast_lesser","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":""},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._broadcast_lesser(lhs, rhs, **kwargs)"}},{"id":"broadcast_lesser_equal(lhs,rhs,**kwargs)-class-method","html_id":"broadcast_lesser_equal(lhs,rhs,**kwargs)-class-method","name":"broadcast_lesser_equal","doc":"Returns the result of element-wise less than or equal to (`<=`)\ncomparison operation with broadcasting.\n\nAssume *x* and *y* are arrays with the following elements:\n    [[1, 1, 1], [1, 1, 1]] # x\n    [[0], [1]]             # y\n\nThen:\n    broadcast_lesser_equal(x, y) # => [[0, 0, 0], [1, 1, 1]]\n\n### Parameters\n* *lhs* (`Symbol`, required)\n  The first input to be compared.\n* *rhs* (`Symbol`, required)\n  The second input to be compared.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Returns the result of element-wise less than or equal to (<code><a href=\"../MXNet/Symbol.html#%3C=(other)-instance-method\">#<=</a></code>) comparison operation with broadcasting.</p>","abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":""},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"args_string":"(lhs, rhs, **kwargs)","args_html":"(lhs, rhs, **kwargs)","location":null,"def":{"name":"broadcast_lesser_equal","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":""},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._broadcast_lesser_equal(lhs, rhs, **kwargs)"}},{"id":"broadcast_like(lhs,rhs,**kwargs)-class-method","html_id":"broadcast_like(lhs,rhs,**kwargs)-class-method","name":"broadcast_like","doc":"Broadcasts the left hand side to have the same shape as right\nhand side.\n\nBroadcasting is a mechanism that allows `NDArray` to perform\narithmetic operations with other arrays of different shapes\nefficiently without creating multiple copies of arrays. See:\n[Broadcasting](https://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)\nfor explanation.\n\nBroadcasting is allowed on axes with size 1, such as from `[2, 1, 3, 1]`\nto `[2, 8, 3, 9]`. Elements will be duplicated on the broadcasted\naxes.\n\nAssume *x* and *y* are arrays with the following elements:\n    [[1, 2, 3]]            # x\n    [[5, 6, 7], [7, 8, 9]] # y\n\nThen:\n    broadcast_like(x, y) = [[1, 2, 3], [1, 2, 3]])\n\n### Parameters\n* *lhs* (`Symbol`, required)\n  The first input.\n* *rhs* (`Symbol`, required)\n  The second input.\n* *lhs_axes* (`Array(Int)`, optional)\n  Axes to perform broadcast on in the first input array.\n* *rhs_axes* (`Array(Int)`, optional)\n  Axes to copy from the second input array.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Broadcasts the left hand side to have the same shape as right hand side.</p>","abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":""},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"args_string":"(lhs, rhs, **kwargs)","args_html":"(lhs, rhs, **kwargs)","location":null,"def":{"name":"broadcast_like","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":""},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._broadcast_like(lhs, rhs, **kwargs)"}},{"id":"broadcast_logical_and(lhs,rhs,**kwargs)-class-method","html_id":"broadcast_logical_and(lhs,rhs,**kwargs)-class-method","name":"broadcast_logical_and","doc":"Returns element-wise logical and of the input arrays with broadcasting.\n\nAssume *x* and *y* are arrays with the following elements:\n    [[1, 1, 1], [1, 1, 1]] # x\n    [[0], [1]]             # y\n\nThen:\n    broadcast_logical_and(x, y) # => [[0, 0, 0], [1, 1, 1]]\n\n### Parameters\n* *lhs* (`Symbol`, required)\n  The first input.\n* *rhs* (`Symbol`, required)\n  The second input.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Returns element-wise logical and of the input arrays with broadcasting.</p>","abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":""},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"args_string":"(lhs, rhs, **kwargs)","args_html":"(lhs, rhs, **kwargs)","location":null,"def":{"name":"broadcast_logical_and","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":""},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._broadcast_logical_and(lhs, rhs, **kwargs)"}},{"id":"broadcast_logical_or(lhs,rhs,**kwargs)-class-method","html_id":"broadcast_logical_or(lhs,rhs,**kwargs)-class-method","name":"broadcast_logical_or","doc":"Returns element-wise logical or of the input arrays with broadcasting.\n\nAssume *x* and *y* are arrays with the following elements:\n    [[1, 1, 0], [1, 1, 0]] # x\n    [[1], [0]]             # y\n\nThen:\n    broadcast_logical_or(x, y) # => [[1, 1, 1], [1, 1, 0]]\n\n### Parameters\n* *lhs* (`Symbol`, required)\n  The first input.\n* *rhs* (`Symbol`, required)\n  The second input.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Returns element-wise logical or of the input arrays with broadcasting.</p>","abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":""},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"args_string":"(lhs, rhs, **kwargs)","args_html":"(lhs, rhs, **kwargs)","location":null,"def":{"name":"broadcast_logical_or","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":""},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._broadcast_logical_or(lhs, rhs, **kwargs)"}},{"id":"broadcast_logical_xor(lhs,rhs,**kwargs)-class-method","html_id":"broadcast_logical_xor(lhs,rhs,**kwargs)-class-method","name":"broadcast_logical_xor","doc":"Returns element-wise logical xor of the input arrays with broadcasting.\n\nAssume *x* and *y* are arrays with the following elements:\n    [[1, 1, 0], [1, 1, 0]] # x\n    [[1], [0]]             # y\n\nThen:\n    broadcast_logical_or(x, y) # => [[0, 0, 1], [1, 1, 0]]\n\n### Parameters\n* *lhs* (`Symbol`, required)\n  The first input.\n* *rhs* (`Symbol`, required)\n  The second input.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Returns element-wise logical xor of the input arrays with broadcasting.</p>","abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":""},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"args_string":"(lhs, rhs, **kwargs)","args_html":"(lhs, rhs, **kwargs)","location":null,"def":{"name":"broadcast_logical_xor","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":""},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._broadcast_logical_xor(lhs, rhs, **kwargs)"}},{"id":"broadcast_maximum(lhs,rhs,**kwargs)-class-method","html_id":"broadcast_maximum(lhs,rhs,**kwargs)-class-method","name":"broadcast_maximum","doc":"Returns element-wise maximum of the input arrays with broadcasting.\n\nThis function compares two input arrays and returns a new array\nhaving the element-wise maxima.\n\nAssume *x* and *y* are arrays with the following elements:\n    [[1, 1, 1], [1, 1, 1]] # x\n    [[0], [1]]             # y\n\nThen:\n    broadcast_maximum(x, y) # => [[1, 1, 1], [1, 1, 1]]\n\n### Parameters\n* *lhs* (`Symbol`, required)\n  The first input to be compared.\n* *rhs* (`Symbol`, required)\n  The second input to be compared.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Returns element-wise maximum of the input arrays with broadcasting.</p>","abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":""},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"args_string":"(lhs, rhs, **kwargs)","args_html":"(lhs, rhs, **kwargs)","location":null,"def":{"name":"broadcast_maximum","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":""},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._broadcast_maximum(lhs, rhs, **kwargs)"}},{"id":"broadcast_minimum(lhs,rhs,**kwargs)-class-method","html_id":"broadcast_minimum(lhs,rhs,**kwargs)-class-method","name":"broadcast_minimum","doc":"Returns element-wise minimum of the input arrays with broadcasting.\n\nThis function compares two input arrays and returns a new array\nhaving the element-wise minima.\n\nAssume *x* and *y* are arrays with the following elements:\n    [[1, 1, 1], [1, 1, 1]] # x\n    [[0], [1]]             # y\n\nThen:\n    broadcast_minimum(x, y) # => [[0, 0, 0], [1, 1, 1]]\n\n### Parameters\n* *lhs* (`Symbol`, required)\n  The first input to be compared.\n* *rhs* (`Symbol`, required)\n  The second input to be compared.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Returns element-wise minimum of the input arrays with broadcasting.</p>","abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":""},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"args_string":"(lhs, rhs, **kwargs)","args_html":"(lhs, rhs, **kwargs)","location":null,"def":{"name":"broadcast_minimum","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":""},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._broadcast_minimum(lhs, rhs, **kwargs)"}},{"id":"broadcast_minus(lhs,rhs,**kwargs)-class-method","html_id":"broadcast_minus(lhs,rhs,**kwargs)-class-method","name":"broadcast_minus","doc":"Returns element-wise difference of the input arrays with broadcasting.\n\n`.broadcast_minus` is an alias to the function `.broadcast_sub`.\n\nAssume *x* and *y* are arrays with the following elements:\n    [[1, 1, 1], [1, 1, 1]] # x\n    [[0], [1]]             # y\n\nThen:\n    broadcast_minus(x, y) # => [[1, 1, 1], [0, 0, 0]]\n\n### Parameters\n* *lhs* (`Symbol`, required)\n  The first input.\n* *rhs* (`Symbol`, required)\n  The second input.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Returns element-wise difference of the input arrays with broadcasting.</p>","abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":""},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"args_string":"(lhs, rhs, **kwargs)","args_html":"(lhs, rhs, **kwargs)","location":null,"def":{"name":"broadcast_minus","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":""},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._broadcast_minus(lhs, rhs, **kwargs)"}},{"id":"broadcast_mul(lhs,rhs,**kwargs)-class-method","html_id":"broadcast_mul(lhs,rhs,**kwargs)-class-method","name":"broadcast_mul","doc":"Returns element-wise product of the input arrays with broadcasting.\n\nAssume *x* and *y* are arrays with the following elements:\n    [[1, 1, 1], [1, 1, 1]] # x\n    [[0], [1]]             # y\n\nThen:\n    broadcast_mul(x, y) # => [[0, 0, 0], [1, 1, 1]]\n\n### Parameters\n* *lhs* (`Symbol`, required)\n  The first input.\n* *rhs* (`Symbol`, required)\n  The second input.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Returns element-wise product of the input arrays with broadcasting.</p>","abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":""},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"args_string":"(lhs, rhs, **kwargs)","args_html":"(lhs, rhs, **kwargs)","location":null,"def":{"name":"broadcast_mul","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":""},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._broadcast_mul(lhs, rhs, **kwargs)"}},{"id":"broadcast_not_equal(lhs,rhs,**kwargs)-class-method","html_id":"broadcast_not_equal(lhs,rhs,**kwargs)-class-method","name":"broadcast_not_equal","doc":"Returns the result of element-wise not equal to (`!=`)\ncomparison operation with broadcasting.\n\nAssume *x* and *y* are arrays with the following elements:\n    [[1, 1, 1], [1, 1, 1]] # x\n    [[0], [1]]             # y\n\nThen:\n    broadcast_not_equal(x, y) # => [[1, 1, 1], [0, 0, 0]]\n\n### Parameters\n* *lhs* (`Symbol`, required)\n  The first input to be compared.\n* *rhs* (`Symbol`, required)\n  The second input to be compared.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Returns the result of element-wise not equal to (<code><a href=\"../MXNet/Symbol.html#!=(other)-instance-method\">#!=</a></code>) comparison operation with broadcasting.</p>","abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":""},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"args_string":"(lhs, rhs, **kwargs)","args_html":"(lhs, rhs, **kwargs)","location":null,"def":{"name":"broadcast_not_equal","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":""},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._broadcast_not_equal(lhs, rhs, **kwargs)"}},{"id":"broadcast_plus(lhs,rhs,**kwargs)-class-method","html_id":"broadcast_plus(lhs,rhs,**kwargs)-class-method","name":"broadcast_plus","doc":"Returns element-wise sum of the input arrays with broadcasting.\n\n`.broadcast_plus` is an alias for `.broadcast_add`.\n\nAssume *x* and *y* are arrays with the following elements:\n    [[1, 1, 1], [1, 1, 1]] # x\n    [[0], [1]]             # y\n\nThen:\n    broadcast_plus(x, y) # => [[1, 1, 1], [2, 2, 2]]\n\n### Parameters\n* *lhs* (`Symbol`, required)\n  The first input.\n* *rhs* (`Symbol`, required)\n  The second input.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Returns element-wise sum of the input arrays with broadcasting.</p>","abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":""},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"args_string":"(lhs, rhs, **kwargs)","args_html":"(lhs, rhs, **kwargs)","location":null,"def":{"name":"broadcast_plus","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":""},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._broadcast_plus(lhs, rhs, **kwargs)"}},{"id":"broadcast_power(lhs,rhs,**kwargs)-class-method","html_id":"broadcast_power(lhs,rhs,**kwargs)-class-method","name":"broadcast_power","doc":"Returns result of first array elements raised to powers from\nsecond array, element-wise with broadcasting.\n\nAssume *x* and *y* are arrays with the following elements:\n    [[2, 2, 2], [2, 2, 2]] # x\n    [[1], [2]]             # y\n\nThen:\n    broadcast_power(x, y) # => [[2, 2, 2], [4, 4, 4]]\n\n### Parameters\n* *lhs* (`Symbol`, required)\n  The base input.\n* *rhs* (`Symbol`, required)\n  The exponent input.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Returns result of first array elements raised to powers from second array, element-wise with broadcasting.</p>","abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":""},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"args_string":"(lhs, rhs, **kwargs)","args_html":"(lhs, rhs, **kwargs)","location":null,"def":{"name":"broadcast_power","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":""},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._broadcast_power(lhs, rhs, **kwargs)"}},{"id":"broadcast_sub(lhs,rhs,**kwargs)-class-method","html_id":"broadcast_sub(lhs,rhs,**kwargs)-class-method","name":"broadcast_sub","doc":"Returns element-wise difference of the input arrays with broadcasting.\n\n`.broadcast_sub` is an alias to the function `.broadcast_minus`.\n\nAssume *x* and *y* are arrays with the following elements:\n    [[1, 1, 1], [1, 1, 1]] # x\n    [[0], [1]]             # y\n\nThen:\n    broadcast_sub(x, y) # => [[1, 1, 1], [0, 0, 0]]\n\n### Parameters\n* *lhs* (`Symbol`, required)\n  The first input.\n* *rhs* (`Symbol`, required)\n  The second input.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Returns element-wise difference of the input arrays with broadcasting.</p>","abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":""},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"args_string":"(lhs, rhs, **kwargs)","args_html":"(lhs, rhs, **kwargs)","location":null,"def":{"name":"broadcast_sub","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":""},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._broadcast_sub(lhs, rhs, **kwargs)"}},{"id":"broadcast_to(data,**kwargs)-class-method","html_id":"broadcast_to(data,**kwargs)-class-method","name":"broadcast_to","doc":"Broadcasts the input array to a new shape.\n\nBroadcasting is a mechanism that allows `NDArray` to perform\narithmetic operations with other arrays of different shapes\nefficiently without creating multiple copies of arrays. See:\n[Broadcasting](https://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)\nfor explanation.\n\nBroadcasting is allowed on axes with size 1, such as from `[2, 1, 3, 1]`\nto `[2, 8, 3, 9]`. Elements will be duplicated on the broadcasted\naxes.\n\nAssume *x* is an array with the following elements:\n    [[1, 2, 3]]\n\nThen:\n    broadcast_to(x, shape: [2, 3]) = [[1, 2, 3], [1, 2, 3]])\n\nThe dimension which you do not want to change can also be\nspecified as `0`. So with `shape: [2, 0]`, we will obtain the\nsame result as in the above example.\n\n### Parameters\n* *data* (`Symbol`, required)\n  Input data.\n* *shape* (`Int` or `Array(Int)`, required)\n  The shape of the desired array.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Broadcasts the input array to a new shape.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"broadcast_to","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._broadcast_to(data, **kwargs)"}},{"id":"cbrt(data,**kwargs)-class-method","html_id":"cbrt(data,**kwargs)-class-method","name":"cbrt","doc":"Returns element-wise cube-root value of the input.\n\nAssume *x* is an array with the following elements:\n    [1, 8, -125]\n\nThen:\n    cbrt(x) = [1, 2, -5]\n\n### Parameters\n* *data* (`Symbol`, required)\n  Input data.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Returns element-wise cube-root value of the input.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"cbrt","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._cbrt(data, **kwargs)"}},{"id":"ceil(data,**kwargs)-class-method","html_id":"ceil(data,**kwargs)-class-method","name":"ceil","doc":"Returns element-wise ceiling of the input.\n\nThe ceiling  `x` is the smallest integer `i`, such that `i >= x`.\n\nAssume *x* is an array with the following elements:\n    [-2.1, -1.9, 1.5, 1.9, 2.1]\n\nThen:\n    ceil(x) = [-2.0, -1.9, 2.0, 2.0, 3.0]\n\n### Parameters\n* *data* (`Symbol`, required)\n  Input data.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Returns element-wise ceiling of the input.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"ceil","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._ceil(data, **kwargs)"}},{"id":"clip(data,a_min,a_max,**kwargs)-class-method","html_id":"clip(data,a_min,a_max,**kwargs)-class-method","name":"clip","doc":"Clips (limits) the values in an array.\n\nGiven an interval, values outside the interval are clipped to\nthe interval edges. Clipping *x* between *a_min* and *a_x*\nwould be:\n\n    clip(x, a_min, a_max) = max(min(x, a_max), a_min))\n\nAssume *x* is an array with the following elements:\n    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nThen:\n    clip(x, 1, 8) # => [1, 1, 2, 3, 4, 5, 6, 7, 8, 8]\n\n### Parameters\n* *data* (`Symbol`, required)\n  Input data.\n* *a_min* (`Float`, required)\n  Minimum value.\n* *a_max* (`Float`, required)\n  Maximum value.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Clips (limits) the values in an array.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""},{"name":"a_min","doc":null,"default_value":"","external_name":"a_min","restriction":""},{"name":"a_max","doc":null,"default_value":"","external_name":"a_max","restriction":""}],"args_string":"(data, a_min, a_max, **kwargs)","args_html":"(data, a_min, a_max, **kwargs)","location":null,"def":{"name":"clip","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""},{"name":"a_min","doc":null,"default_value":"","external_name":"a_min","restriction":""},{"name":"a_max","doc":null,"default_value":"","external_name":"a_max","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._clip(data, a_min, a_max, **kwargs)"}},{"id":"concat(data:Array(self),**kwargs)-class-method","html_id":"concat(data:Array(self),**kwargs)-class-method","name":"concat","doc":"Joins input arrays along a given axis.\n\nThe dimensions of the input arrays should be the same except\nfor the axis along which they will be concatenated. The\ndimension of the output array along the concatenated axis will\nbe equal to the sum of the corresponding dimensions of the\ninput arrays.\n\nAssume *x* and *y* are arrays with the following elements:\n    [[1, 2], [3, 4]] # x\n    [[1, 4], [1, 1]] # y\n\nThen:\n    concat(x, y) # => [[1, 2, 1, 4], [3, 4, 1, 1]]\n\n### Parameters\n* *data* (`Array(Symbol)`, required)\n  List of arrays to concatenate.\n* *dim* (`Int`, default = 1)\n  The dimension to be concated.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Joins input arrays along a given axis.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"Array(self)"}],"args_string":"(data : Array(<span class=\"k\">self</span>), **kwargs)","args_html":"(data : Array(<span class=\"k\">self</span>), **kwargs)","location":null,"def":{"name":"concat","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"Array(self)"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._concat(data, **kwargs.merge({num_args: data.size}))"}},{"id":"convolution(data:self,weight:self?,bias:self?,kernel,num_filter,**kwargs)-class-method","html_id":"convolution(data:self,weight:self?,bias:self?,kernel,num_filter,**kwargs)-class-method","name":"convolution","doc":"Compute *N*-D convolution on *(N+2)*-D input.\n\nFor general 2-D convolution, the shapes are:\n  * **data**: *[batch_size, channel, height, width]*\n  * **weight**: *[num_filter, channel, kernel[0], kernel[1]]*\n  * **bias**: *[num_filter]*\n  * **out**: *[batch_size, num_filter, out_height, out_width]*\n\nIf *no_bias* is set to be true, then the *bias* term is\nignored.\n\nThe default data *layout* is *NCHW*, namely *(batch_size,\nchannel, height, width)*. We can choose other layouts such as\n*NWC*.\n\nIf *num_group* is larger than 1, denoted by *g*, then split\nthe input data evenly into *g* parts along the channel axis,\nand also evenly split *weight* along the first dimension. Next\ncompute the convolution on the *i*-th part of the data with\nthe *i*-th weight part. The output is obtained by\nconcatenating all the *g* results.\n\n1-D convolution does not have *height* dimension but only\n*width* in space.  The shapes are:\n  * **data**: *[batch_size, channel, width]*\n  * **weight**: *[num_filter, channel, kernel[0]]*\n  * **bias**: *[num_filter]*\n  * **out**: *[batch_size, num_filter, out_width]*\n\n3-D convolution adds an additional *depth* dimension besides\n*height* and *width*. The shapes are:\n  * **data**: *[batch_size, channel, depth, height, width]*\n  * **weight**: *[num_filter, channel, kernel[0], kernel[1], kernel[2]]*\n  * **bias**: *[num_filter]*\n  * **out**: *[batch_size, num_filter, out_depth, out_height, out_width]*\n\nBoth *weight* and *bias* are learnable parameters.\n\nThere are other options to tune the performance:\n  * **cudnn_tune**: enabling this option leads to higher\n  startup time but may give faster speed. Options are: \"off\" -\n  no tuning, \"limited_workspace\" - run test and pick the\n  fastest algorithm that doesn't exceed workspace limit,\n  \"fastest\" - pick the fastest algorithm and ignore workspace\n  limit, `nil` (default) - the behavior is determined by the\n  environment variable \"MXNET_CUDNN_AUTOTUNE_DEFAULT\" -- 0 for\n  off, 1 for limited workspace (default), 2 for fastest.\n  * **workspace**: a larger number leads to more (GPU) memory\n  usage but may improve the performance.\n\n### Parameters\n* *data* (`Symbol`, required)\n  Input data.\n* *weight* (`Symbol`, required)\n  Weight matrix.\n* *bias* (`Symbol`, required)\n  Bias parameter.\n* *kernel* (`Array(Int)`, shape, required)\n  Convolution kernel size: `[w]`, `[h, w]` or `[d, h, w]`.\n* *stride* (`Array(Int)`, shape, optional, default = [])\n  Convolution stride: `[w]`, `[h, w]` or `[d, h, w]`. Defaults\n  to 1 for each dimension.\n* *dilate* (`Array(Int)`, shape, optional, default = [])\n  Convolution dilation: `[w]`, `[h, w]` or `[d, h, w]`.\n  Defaults to 1 for each dimension.\n* *pad* (`Array(Int)`, shape, optional, default = [])\n  Zero pad for convolution: `[w]`, `[h, w]` or `[d, h, w]`.\n  Defaults to no padding.\n* *num_filter* (`Int::Unsigned`, required)\n  Convolution filter (channel) number.\n* *num_group* (`Int::Unsigned`, optional, default = 1)\n  Number of group partitions.\n* *workspace* (`Int::Unsigned`, optional, default = 1024)\n  Maximum temporary workspace allowed (MB) for convolution.\n  This parameter has two usages. When CUDNN is not used, it\n  determines the effective batch size of the convolution\n  kernel. When CUDNN is used, it controls the maximum\n  temporary storage used for tuning the best CUDNN kernel\n  when \"limited_workspace\" strategy is used.\n* *no_bias* (`Bool`, optional, default = false)\n  Whether to disable bias parameter.\n* *cudnn_tune* (`::Symbol`, `:fastest`, `:limited_workspace`, `:off` or `nil`, optional)\n  Whether to pick the convolution algorithm by running a\n  performance test.\n* *cudnn_off* (`Bool`, optional, default = false)\n  Turn off cudnn for this layer.\n* *layout* (`String`, `\"NCDHW\"`, `\"NCHW\"`, `\"NCW\"`, `\"NDHWC\"`, `\"NHWC\"`, `\"NWC\"` or `nil`, optional)\n  Set layout for input, output and weight. Empty for default\n  layout: \"NCW\" for 1D, \"NCHW\" for 2D and \"NCDHW\" for\n  3D. \"NHWC\" and \"NDHWC\" are only supported on GPU.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Compute <em>N</em>-D convolution on <em>(N+2)</em>-D input.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"self"},{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"self | ::Nil"},{"name":"bias","doc":null,"default_value":"","external_name":"bias","restriction":"self | ::Nil"},{"name":"kernel","doc":null,"default_value":"","external_name":"kernel","restriction":""},{"name":"num_filter","doc":null,"default_value":"","external_name":"num_filter","restriction":""}],"args_string":"(data : <span class=\"k\">self</span>, weight : <span class=\"k\">self</span>?, bias : <span class=\"k\">self</span>?, kernel, num_filter, **kwargs)","args_html":"(data : <span class=\"k\">self</span>, weight : <span class=\"k\">self</span>?, bias : <span class=\"k\">self</span>?, kernel, num_filter, **kwargs)","location":null,"def":{"name":"convolution","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"self"},{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"self | ::Nil"},{"name":"bias","doc":null,"default_value":"","external_name":"bias","restriction":"self | ::Nil"},{"name":"kernel","doc":null,"default_value":"","external_name":"kernel","restriction":""},{"name":"num_filter","doc":null,"default_value":"","external_name":"num_filter","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._Convolution(data, weight, bias, **kwargs.merge({kernel: kernel, num_filter: num_filter}))"}},{"id":"cos(data,**kwargs)-class-method","html_id":"cos(data,**kwargs)-class-method","name":"cos","doc":"Computes the element-wise cosine of the input array.\n\nThe input should be in radians (`2\\𝜋` radians equals 360 degrees).\n\n    cos([0, 𝜋/4, 𝜋/2]) = [1, 0.707, 0]\n\n### Parameters\n* *data* (`Symbol`, required)\n  Input data.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Computes the element-wise cosine of the input array.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"cos","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._cos(data, **kwargs)"}},{"id":"cosh(data,**kwargs)-class-method","html_id":"cosh(data,**kwargs)-class-method","name":"cosh","doc":"Returns the hyperbolic cosine of the input array, computed element-wise.\n\n    cosh(x) = (exp(x) + exp(-x)) / 2\n\n### Parameters\n* *data* (`Symbol`, required)\n  Input data.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Returns the hyperbolic cosine of the input array, computed element-wise.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"cosh","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._cosh(data, **kwargs)"}},{"id":"create_symbol(op,*args,name:String?=nil,**kwargs)-class-method","html_id":"create_symbol(op,*args,name:String?=nil,**kwargs)-class-method","name":"create_symbol","doc":"TODO: cache op handles","summary":"<p><span class=\"flag orange\">TODO</span>  cache op handles</p>","abstract":false,"args":[{"name":"op","doc":null,"default_value":"","external_name":"op","restriction":""},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},{"name":"name","doc":null,"default_value":"nil","external_name":"name","restriction":"String | ::Nil"}],"args_string":"(op, *args, name : String? = <span class=\"n\">nil</span>, **kwargs)","args_html":"(op, *args, name : String? = <span class=\"n\">nil</span>, **kwargs)","location":{"filename":"src/mxnet/symbol.cr","line_number":1160,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/symbol.cr#L1160"},"def":{"name":"create_symbol","args":[{"name":"op","doc":null,"default_value":"","external_name":"op","restriction":""},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},{"name":"name","doc":null,"default_value":"nil","external_name":"name","restriction":"String | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":1,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"args = args.size > 0 ? args.to_a.flatten.compact.map do |v|\n  v.handle\nend : [] of SymbolHandle\nkwargs = kwargs.size > 0 ? kwargs.map do |k, v|\n  [output(k), output(v)]\nend.reject do |__arg2|\n  k = __arg2[0]\n  v = __arg2[1]\n  v.empty? || (k == \"out\")\nend.to_h : {} of String => String\nname = MXNet::Name::Manager.current.get(name, op.downcase)\nkwargs.delete(:out)\nMXNet::Internal.libcall(NNGetOpHandle, op.to_s, out op_handle)\nMXNet::Internal.libcall(MXSymbolCreateAtomicSymbol, op_handle, kwargs.size, kwargs.keys.map(&.to_unsafe), kwargs.values.map(&.to_unsafe), out sym_handle)\nsym = new(sym_handle)\nMXNet::Internal.libcall(NNSymbolCompose, sym_handle, name, args.size, nil, args)\nsym\n"}},{"id":"degrees(data,**kwargs)-class-method","html_id":"degrees(data,**kwargs)-class-method","name":"degrees","doc":"Converts each element of the input array from radians to\ndegrees.\n\n    degrees([0, 𝜋/2, 𝜋, 3𝜋/2, 2𝜋]) = [0, 90, 180, 270, 360]\n\n### Parameters\n* *data* (`Symbol`, required)\n  Input data.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Converts each element of the input array from radians to degrees.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"degrees","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._degrees(data, **kwargs)"}},{"id":"diag(data,**kwargs)-class-method","html_id":"diag(data,**kwargs)-class-method","name":"diag","doc":"Extracts a diagonal or constructs a diagonal array.\n\n`.diag`‘s behavior depends on the input array dimensions:\n  * *1-D* arrays: constructs a 2-D array with the input as its\n  diagonal, all other elements are zero.\n  * *N-D* arrays: extracts the diagonals of the sub-arrays\n  with axes specified by *axis1* and *axis2*. The output shape\n  is decided by removing the axes numbered *axis1* and *axis2*\n  from the input shape and appending to the result a new axis\n  with the size of the diagonals in question.\n\nFor example, when the input shape is `[2, 3, 4, 5]`, *axis1*\nand *axis2* are 0 and 2 respectively and *k* is 0, the\nresulting shape is `[3, 5, 2]`.\n\nAssume *x* and *y* are arrays with the following elements:\n    [[1, 2, 3], [4, 5, 6]]               # x\n    [[[1, 2], [3, 4]], [[5, 6], [7, 8]]] # y\n\nThen:\n    diag(x) = [1, 5]\n    diag(x, k: 1) = [2, 6]\n    diag(x, k: -1) = [4]\n\n    diag(y) = [[1, 7], [2, 8]]\n    diag(y, k: 1) = [[3], [4]]\n    diag(y, axis1: -2, axis2: -1) = [[1, 4], [5, 8]]\n\n### Parameters\n* *data* (`Symbol`, required)\n  Input data.\n* *k* (`Int`, optional, default = 0)\n  The diagonal in question. The default is 0. Use `k > 0` for\n  diagonals above the main diagonal, and `k < 0` for diagonals\n  below the main diagonal.\n* *axis1* (`Int`, optional, default = 0)\n  The first axis of the sub-arrays of interest. Ignored when\n  the input is a 1-D array.\n* *axis2* (`Int`, optional, default = 1)\n  The second axis of the sub-arrays of interest. Ignored when\n  the input is a 1-D array.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Extracts a diagonal or constructs a diagonal array.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"diag","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._diag(data, **kwargs)"}},{"id":"divide(lhs:self|Number,rhs:self|Number)-class-method","html_id":"divide(lhs:self|Number,rhs:self|Number)-class-method","name":"divide","doc":"Returns element-wise division of the input arrays.\n\nBoth inputs can be a `Symbol` or a scalar number. Broadcasting\nis not supported.\n\nEquivalent to `lhs / rhs`.\n\n### Parameters\n* *lhs* (`Symbol` or `Number`)\n  The first value to be divided.\n* *rhs* (`Symbol` or `Number`)\n  The second value to be divided.\n","summary":"<p>Returns element-wise division of the input arrays.</p>","abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"self | Number"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self | Number"}],"args_string":"(lhs : <span class=\"k\">self</span> | Number, rhs : <span class=\"k\">self</span> | Number)","args_html":"(lhs : <span class=\"k\">self</span> | <a href=\"../Number.html\">Number</a>, rhs : <span class=\"k\">self</span> | <a href=\"../Number.html\">Number</a>)","location":{"filename":"src/mxnet/symbol.cr","line_number":649,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/symbol.cr#L649"},"def":{"name":"divide","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"self | Number"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self | Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if lhs.is_a?(self)\n  if rhs.is_a?(self)\n    Internal._div(lhs, rhs)\n  else\n    Internal._div_scalar(lhs, scalar: rhs)\n  end\nelse\n  if rhs.is_a?(self)\n    Internal._rdiv_scalar(rhs, scalar: lhs)\n  else\n    raise(\"should never happen\")\n  end\nend"}},{"id":"dot(lhs,rhs,**kwargs)-class-method","html_id":"dot(lhs,rhs,**kwargs)-class-method","name":"dot","doc":"Computes the dot product of two arrays.\n\n`.dot`‘s behavior depends on the input array dimensions:\n  * *1-D* arrays: inner product of vectors\n  * *2-D* arrays: matrix multiplication\n  * *N-D* arrays: a sum product over the last axis of the first\n  input and the first axis of the second input\n\nAssume *x* and *y* are arrays with the following elements:\n    [[1, 2], [3, 4]] # x\n    [[4, 3], [1, 1]] # y\n\nThen:\n    dot(x, y) # => [[8, 5], [20, 13]]\n\n### Parameters\n* *lhs* (`Symbol`, required)\n  The first input.\n* *rhs* (`Symbol`, required)\n  The second input.\n* *transpose_a* (`Bool`, default = false)\n  If true then transpose the first input before dot.\n* *transpose_b* (`Bool`, default = false)\n  If true then transpose the second input before dot.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Computes the dot product of two arrays.</p>","abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":""},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"args_string":"(lhs, rhs, **kwargs)","args_html":"(lhs, rhs, **kwargs)","location":null,"def":{"name":"dot","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":""},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._dot(lhs, rhs, **kwargs)"}},{"id":"equal(lhs:self|Number,rhs:self|Number)-class-method","html_id":"equal(lhs:self|Number,rhs:self|Number)-class-method","name":"equal","doc":"Returns the result of element-wise equal to (`==`) comparison\noperation.\n\nFor each element in input arrays, return 1 (true) if\ncorresponding elements are same, otherwise return 0 (false).\n\nBoth inputs can be a `Symbol` or a scalar number. Broadcasting\nis not supported.\n\nEquivalent to `lhs == rhs`.\n\n### Parameters\n* *lhs* (`Symbol` or `Number`)\n  The first value to be compared.\n* *rhs* (`Symbol` or `Number`)\n  The second value to be compared.\n","summary":"<p>Returns the result of element-wise equal to (<code><a href=\"../MXNet/Symbol.html#==(other)-instance-method\">#==</a></code>) comparison operation.</p>","abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"self | Number"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self | Number"}],"args_string":"(lhs : <span class=\"k\">self</span> | Number, rhs : <span class=\"k\">self</span> | Number)","args_html":"(lhs : <span class=\"k\">self</span> | <a href=\"../Number.html\">Number</a>, rhs : <span class=\"k\">self</span> | <a href=\"../Number.html\">Number</a>)","location":{"filename":"src/mxnet/symbol.cr","line_number":760,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/symbol.cr#L760"},"def":{"name":"equal","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"self | Number"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self | Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if lhs.is_a?(self)\n  if rhs.is_a?(self)\n    Internal._equal(lhs, rhs)\n  else\n    Internal._equal_scalar(lhs, scalar: rhs)\n  end\nelse\n  if rhs.is_a?(self)\n    Internal._equal_scalar(rhs, scalar: lhs)\n  else\n    raise(\"should never happen\")\n  end\nend"}},{"id":"exp(data,**kwargs)-class-method","html_id":"exp(data,**kwargs)-class-method","name":"exp","doc":"Returns element-wise exponential value of the input.\n\nAssume *x* is an array with the following elements:\n    [0.0, 1.0, 2.0]\n\nThen:\n    exp(x) = [1.0, 2.71828175, 7.38905621]\n\nThe storage type of `.exp` output is always dense.\n\n### Parameters\n* *data* (`Symbol`, required)\n  Input data.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Returns element-wise exponential value of the input.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"exp","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._exp(data, **kwargs)"}},{"id":"expand_dims(data,axis,**kwargs)-class-method","html_id":"expand_dims(data,axis,**kwargs)-class-method","name":"expand_dims","doc":"Inserts a new axis of size 1 into the array shape.\n\nFor example, given *x* with shape *[2, 3, 4]*, then\n`expand_dims(x, axis: 1)` will return a new array with shape\n*[2, 1, 3, 4]*.\n\n### Parameters\n* *data* (`Symbol`, required)\n  Input data.\n* *axis* (`Int`, required)\n  Position where new axis is to be inserted. Suppose that the\n  input array‘s dimension is `ndim`, the range of the inserted\n  axis is `[-ndim, ndim]`.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Inserts a new axis of size 1 into the array shape.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""},{"name":"axis","doc":null,"default_value":"","external_name":"axis","restriction":""}],"args_string":"(data, axis, **kwargs)","args_html":"(data, axis, **kwargs)","location":null,"def":{"name":"expand_dims","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""},{"name":"axis","doc":null,"default_value":"","external_name":"axis","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._expand_dims(data, axis, **kwargs)"}},{"id":"expm1(data,**kwargs)-class-method","html_id":"expm1(data,**kwargs)-class-method","name":"expm1","doc":"Returns `exp(x) - 1` computed element-wise on the input.\n\nThis function provides greater precision than explicitly\ncalculating `exp(x) - 1` for small values of *x*.\n\nAssume *x* is an array with the following elements:\n    [0.0, 1.0, 2.0]\n\nThen:\n    expm1(x) = [0.0, 1.71828182, 6.38905609]\n\n### Parameters\n* *data* (`Symbol`, required)\n  Input data.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Returns <code>exp(x) - 1</code> computed element-wise on the input.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"expm1","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._expm1(data, **kwargs)"}},{"id":"fix(data,**kwargs)-class-method","html_id":"fix(data,**kwargs)-class-method","name":"fix","doc":"Returns element-wise rounded value to the nearest integer\ntowards zero.\n\nAssume *x* is an array with the following elements:\n    [-2.1, -1.9, 1.5, 1.9, 2.1]\n\nThen:\n    fix(x) = [-2.0, -1.0, 1.0, 1.0, 2.0]\n\n### Parameters\n* *data* (`Symbol`, required)\n  Input data.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Returns element-wise rounded value to the nearest integer towards zero.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"fix","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._fix(data, **kwargs)"}},{"id":"flatten(data,**kwargs)-class-method","html_id":"flatten(data,**kwargs)-class-method","name":"flatten","doc":"Flattens the input array into a 2-D array by collapsing the\nhigher dimensions.\n\nFor an input array with shape *(d1, d2, ..., dk)*, `.flatten`\nreshapes the input array into an output array of shape\n_(d1, d2 * ... * dk)_.\n\nNote that the bahavior of this function is different from\n`Array#flatten`, which behaves similar to `.reshape(shape: [-1])`.\n\nAssume *x* is an array with the following elements:\n    [[[1, 2, 3], [4, 5, 6]], [[1, 2, 3], [4, 5, 6]]]\n\nThen:\n    flatten(x).shape # => [2, 6]\n\n### Parameters\n* *data* (`Symbol`, required)\n  Input data.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Flattens the input array into a 2-D array by collapsing the higher dimensions.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"flatten","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._flatten(data, **kwargs)"}},{"id":"flip(data,axis,**kwargs)-class-method","html_id":"flip(data,axis,**kwargs)-class-method","name":"flip","doc":"Reverses the order of elements along given axis while preserving array shape.\n\nAssume *x* is an array with the following elements:\n    [[0, 1, 2, 3, 4], [5, 6, 7, 8, 9]]\n\nThen:\n    flip(x, axis: 0) # => [[5, 6, 7, 8, 9], [0, 1, 2, 3, 4]]\n    flip(x, axis: 1) # => [[4, 3, 2, 1, 0], [9, 8, 7, 6, 5]]\n\n### Parameters\n* *data* (`Symbol`, required)\n  Input data.\n* *axis* (`Int`, required)\n  The axis on which to reverse elements.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Reverses the order of elements along given axis while preserving array shape.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""},{"name":"axis","doc":null,"default_value":"","external_name":"axis","restriction":""}],"args_string":"(data, axis, **kwargs)","args_html":"(data, axis, **kwargs)","location":null,"def":{"name":"flip","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""},{"name":"axis","doc":null,"default_value":"","external_name":"axis","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._flip(data, axis, **kwargs)"}},{"id":"floor(data,**kwargs)-class-method","html_id":"floor(data,**kwargs)-class-method","name":"floor","doc":"Returns the element-wise floor of the input.\n\nThe floor of `x` is the largest integer `i`, such that `i <= x`.\n\nAssume *x* is an array with the following elements:\n    [-2.1, -1.9, 1.5, 1.9, 2.1]\n\nThen:\n    floor(x) = [-3.0, -2.0, 1.0, 1.0, 2.0]\n\n### Parameters\n* *data* (`Symbol`, required)\n  Input data.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Returns the element-wise floor of the input.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"floor","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._floor(data, **kwargs)"}},{"id":"fully_connected(data:self,weight:self?,bias:self?,num_hidden:Int,**kwargs)-class-method","html_id":"fully_connected(data:self,weight:self?,bias:self?,num_hidden:Int,**kwargs)-class-method","name":"fully_connected","doc":"Applies a linear transformation: _Y = XWᵀ + b_.\n\nIf *flatten* is true, then the shapes are:\n  * **data**: *[batch_size, x1, x2, ..., xn]*\n  * **weight**: *[num_hidden, x1 * x2 * ... * xn]*\n  * **bias**: *[num_hidden]*\n  * **out**: *[batch_size, num_hidden]*\n\nIf *flatten* is false, then the shapes are:\n  * **data**: *[x1, x2, ..., xn, input_dim]*\n  * **weight**: *[num_hidden, input_dim]*\n  * **bias**: *[num_hidden]*\n  * **out**: *[x1, x2, ..., xn, num_hidden]*\n\nThe learnable parameters include both *weight* and *bias*.\n\nIf *no_bias* is true, then the *bias* term is ignored.\n\n### Parameters\n* *data* (`Symbol`, required)\n  Input data.\n* *weight* (`Symbol`, required)\n  Weight matrix.\n* *bias* (`Symbol`, required)\n  Bias parameter.\n* *num_hidden* (`Int`, required)\n  Number of hidden nodes of the output.\n* *no_bias* (`Bool`, optional, default = false)\n  Whether to disable bias parameter.\n* *flatten* (`Bool`, optional, default = true)\n  Whether to collapse all but the first axis of the input data\n  tensor.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Applies a linear transformation: <em>Y = XWᵀ + b</em>.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"self"},{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"self | ::Nil"},{"name":"bias","doc":null,"default_value":"","external_name":"bias","restriction":"self | ::Nil"},{"name":"num_hidden","doc":null,"default_value":"","external_name":"num_hidden","restriction":"Int"}],"args_string":"(data : <span class=\"k\">self</span>, weight : <span class=\"k\">self</span>?, bias : <span class=\"k\">self</span>?, num_hidden : Int, **kwargs)","args_html":"(data : <span class=\"k\">self</span>, weight : <span class=\"k\">self</span>?, bias : <span class=\"k\">self</span>?, num_hidden : Int, **kwargs)","location":null,"def":{"name":"fully_connected","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"self"},{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"self | ::Nil"},{"name":"bias","doc":null,"default_value":"","external_name":"bias","restriction":"self | ::Nil"},{"name":"num_hidden","doc":null,"default_value":"","external_name":"num_hidden","restriction":"Int"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._FullyConnected(data, weight, bias, **kwargs.merge({num_hidden: num_hidden}))"}},{"id":"gamma(data,**kwargs)-class-method","html_id":"gamma(data,**kwargs)-class-method","name":"gamma","doc":"Returns the gamma function (extension of the factorial\nfunction to the reals), computed element-wise on the input\narray.\n\n### Parameters\n* *data* (`Symbol`, required)\n  Input data.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Returns the gamma function (extension of the factorial function to the reals), computed element-wise on the input array.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"gamma","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._gamma(data, **kwargs)"}},{"id":"gammaln(data,**kwargs)-class-method","html_id":"gammaln(data,**kwargs)-class-method","name":"gammaln","doc":"Returns the log of the absolute value of the gamma function,\ncomputed element-wise on the input array.\n\n### Parameters\n* *data* (`Symbol`, required)\n  Input data.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Returns the log of the absolute value of the gamma function, computed element-wise on the input array.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"gammaln","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._gammaln(data, **kwargs)"}},{"id":"greater(lhs:self|Number,rhs:self|Number)-class-method","html_id":"greater(lhs:self|Number,rhs:self|Number)-class-method","name":"greater","doc":"Returns the result of element-wise greater than (`>`) comparison\noperation.\n\nFor each element in input arrays, return 1 (true) if *lhs*\nelement is greater than corresponding *rhs* element, otherwise\nreturn 0 (false).\n\nBoth inputs can be a `Symbol` or a scalar number. Broadcasting\nis not supported.\n\nEquivalent to `lhs > rhs`.\n\n### Parameters\n* *lhs* (`Symbol` or `Number`)\n  The first value to be compared.\n* *rhs* (`Symbol` or `Number`)\n  The second value to be compared.\n","summary":"<p>Returns the result of element-wise greater than (<code><a href=\"../MXNet/Symbol.html#%3E(other)-instance-method\">#></a></code>) comparison operation.</p>","abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"self | Number"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self | Number"}],"args_string":"(lhs : <span class=\"k\">self</span> | Number, rhs : <span class=\"k\">self</span> | Number)","args_html":"(lhs : <span class=\"k\">self</span> | <a href=\"../Number.html\">Number</a>, rhs : <span class=\"k\">self</span> | <a href=\"../Number.html\">Number</a>)","location":{"filename":"src/mxnet/symbol.cr","line_number":814,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/symbol.cr#L814"},"def":{"name":"greater","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"self | Number"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self | Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if lhs.is_a?(self)\n  if rhs.is_a?(self)\n    Internal._greater(lhs, rhs)\n  else\n    Internal._greater_scalar(lhs, scalar: rhs)\n  end\nelse\n  if rhs.is_a?(self)\n    Internal._lesser_scalar(rhs, scalar: lhs)\n  else\n    raise(\"should never happen\")\n  end\nend"}},{"id":"greater_equal(lhs:self|Number,rhs:self|Number)-class-method","html_id":"greater_equal(lhs:self|Number,rhs:self|Number)-class-method","name":"greater_equal","doc":"Returns the result of element-wise greater than or equal to\n(`>=`) comparison operation.\n\nFor each element in input arrays, return 1 (true) if *lhs*\nelement is greater than or equal to *rhs* element, otherwise\nreturn 0 (false).\n\nBoth inputs can be a `Symbol` or a scalar number. Broadcasting\nis not supported.\n\nEquivalent to `lhs >= rhs`.\n\n### Parameters\n* *lhs* (`Symbol` or `Number`)\n  The first value to be compared.\n* *rhs* (`Symbol` or `Number`)\n  The second value to be compared.\n","summary":"<p>Returns the result of element-wise greater than or equal to (<code><a href=\"../MXNet/Symbol.html#%3E=(other)-instance-method\">#>=</a></code>) comparison operation.</p>","abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"self | Number"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self | Number"}],"args_string":"(lhs : <span class=\"k\">self</span> | Number, rhs : <span class=\"k\">self</span> | Number)","args_html":"(lhs : <span class=\"k\">self</span> | <a href=\"../Number.html\">Number</a>, rhs : <span class=\"k\">self</span> | <a href=\"../Number.html\">Number</a>)","location":{"filename":"src/mxnet/symbol.cr","line_number":841,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/symbol.cr#L841"},"def":{"name":"greater_equal","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"self | Number"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self | Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if lhs.is_a?(self)\n  if rhs.is_a?(self)\n    Internal._greater_equal(lhs, rhs)\n  else\n    Internal._greater_equal_scalar(lhs, scalar: rhs)\n  end\nelse\n  if rhs.is_a?(self)\n    Internal._lesser_equal_scalar(rhs, scalar: lhs)\n  else\n    raise(\"should never happen\")\n  end\nend"}},{"id":"group(symbols:Array(MXNet::Symbol)):MXNet::Symbol-class-method","html_id":"group(symbols:Array(MXNet::Symbol)):MXNet::Symbol-class-method","name":"group","doc":"Creates a symbol that contains a collection of other symbols,\ngrouped together.\n\n```\na = MXNet::Symbol.var(\"a\")\nb = MXNet::Symbol.var(\"b\")\nMXNet::Symbol.group([a, b]) # => grouped symbol\n```\n","summary":"<p>Creates a symbol that contains a collection of other symbols, grouped together.</p>","abstract":false,"args":[{"name":"symbols","doc":null,"default_value":"","external_name":"symbols","restriction":"Array(MXNet::Symbol)"}],"args_string":"(symbols : Array(MXNet::Symbol)) : MXNet::Symbol","args_html":"(symbols : Array(<a href=\"../MXNet/Symbol.html\">MXNet::Symbol</a>)) : <a href=\"../MXNet/Symbol.html\">MXNet::Symbol</a>","location":{"filename":"src/mxnet/symbol.cr","line_number":1149,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/symbol.cr#L1149"},"def":{"name":"group","args":[{"name":"symbols","doc":null,"default_value":"","external_name":"symbols","restriction":"Array(MXNet::Symbol)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"MXNet::Symbol","visibility":"Public","body":"MXNet::Internal.libcall(MXSymbolCreateGroup, symbols.size, symbols.map(&.handle), out sym_handle)\nnew(sym_handle)\n"}},{"id":"hypot(lhs:self,rhs:self,**kwargs)-class-method","html_id":"hypot(lhs:self,rhs:self,**kwargs)-class-method","name":"hypot","doc":"Given the legs of a right triangle, return its hypotenuse.\n\n### Parameters\n* *lhs* (`Symbol`, required)\n  Input data.\n* *rhs* (`Symbol`, required)\n  Input data.\n","summary":"<p>Given the legs of a right triangle, return its hypotenuse.</p>","abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"self"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self"}],"args_string":"(lhs : <span class=\"k\">self</span>, rhs : <span class=\"k\">self</span>, **kwargs)","args_html":"(lhs : <span class=\"k\">self</span>, rhs : <span class=\"k\">self</span>, **kwargs)","location":null,"def":{"name":"hypot","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"self"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Internal._hypot(lhs, rhs, **kwargs)"}},{"id":"lesser(lhs:self|Number,rhs:self|Number)-class-method","html_id":"lesser(lhs:self|Number,rhs:self|Number)-class-method","name":"lesser","doc":"Returns the result of element-wise less than (`<`) comparison\noperation.\n\nFor each element in input arrays, return 1 (true) if *lhs*\nelement is less than corresponding *rhs* element, otherwise\nreturn 0 (false).\n\nBoth inputs can be a `Symbol` or a scalar number. Broadcasting\nis not supported.\n\nEquivalent to `lhs < rhs`.\n\n### Parameters\n* *lhs* (`Symbol` or `Number`)\n  The first value to be compared.\n* *rhs* (`Symbol` or `Number`)\n  The second value to be compared.\n","summary":"<p>Returns the result of element-wise less than (<code><a href=\"../MXNet/Symbol.html#%3C(other)-instance-method\">#<</a></code>) comparison operation.</p>","abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"self | Number"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self | Number"}],"args_string":"(lhs : <span class=\"k\">self</span> | Number, rhs : <span class=\"k\">self</span> | Number)","args_html":"(lhs : <span class=\"k\">self</span> | <a href=\"../Number.html\">Number</a>, rhs : <span class=\"k\">self</span> | <a href=\"../Number.html\">Number</a>)","location":{"filename":"src/mxnet/symbol.cr","line_number":868,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/symbol.cr#L868"},"def":{"name":"lesser","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"self | Number"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self | Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if lhs.is_a?(self)\n  if rhs.is_a?(self)\n    Internal._lesser(lhs, rhs)\n  else\n    Internal._lesser_scalar(lhs, scalar: rhs)\n  end\nelse\n  if rhs.is_a?(self)\n    Internal._greater_scalar(rhs, scalar: lhs)\n  else\n    raise(\"should never happen\")\n  end\nend"}},{"id":"lesser_equal(lhs:self|Number,rhs:self|Number)-class-method","html_id":"lesser_equal(lhs:self|Number,rhs:self|Number)-class-method","name":"lesser_equal","doc":"Returns the result of element-wise less than or equal to (`<=`)\ncomparison operation.\n\nFor each element in input arrays, return 1 (true) if *lhs*\nelement is less than or equal to *rhs* element, otherwise return\n0 (false).\n\nBoth inputs can be a `Symbol` or a scalar number. Broadcasting\nis not supported.\n\nEquivalent to `lhs <= rhs`.\n\n### Parameters\n* *lhs* (`Symbol` or `Number`)\n  The first value to be compared.\n* *rhs* (`Symbol` or `Number`)\n  The second value to be compared.\n","summary":"<p>Returns the result of element-wise less than or equal to (<code><a href=\"../MXNet/Symbol.html#%3C=(other)-instance-method\">#<=</a></code>) comparison operation.</p>","abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"self | Number"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self | Number"}],"args_string":"(lhs : <span class=\"k\">self</span> | Number, rhs : <span class=\"k\">self</span> | Number)","args_html":"(lhs : <span class=\"k\">self</span> | <a href=\"../Number.html\">Number</a>, rhs : <span class=\"k\">self</span> | <a href=\"../Number.html\">Number</a>)","location":{"filename":"src/mxnet/symbol.cr","line_number":895,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/symbol.cr#L895"},"def":{"name":"lesser_equal","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"self | Number"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self | Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if lhs.is_a?(self)\n  if rhs.is_a?(self)\n    Internal._lesser_equal(lhs, rhs)\n  else\n    Internal._lesser_equal_scalar(lhs, scalar: rhs)\n  end\nelse\n  if rhs.is_a?(self)\n    Internal._greater_equal_scalar(rhs, scalar: lhs)\n  else\n    raise(\"should never happen\")\n  end\nend"}},{"id":"load(fname)-class-method","html_id":"load(fname)-class-method","name":"load","doc":null,"summary":null,"abstract":false,"args":[{"name":"fname","doc":null,"default_value":"","external_name":"fname","restriction":""}],"args_string":"(fname)","args_html":"(fname)","location":{"filename":"src/mxnet/symbol.cr","line_number":561,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/symbol.cr#L561"},"def":{"name":"load","args":[{"name":"fname","doc":null,"default_value":"","external_name":"fname","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Internal.libcall(MXSymbolCreateFromFile, fname, out sym_handle)\nnew(sym_handle)\n"}},{"id":"log(data,**kwargs)-class-method","html_id":"log(data,**kwargs)-class-method","name":"log","doc":"Returns element-wise natural logarithmic value of the input.\n\nThe natural logarithm is the logarithm in base *e*, so that\n`log(exp(x)) = x`.\n\nThe storage type of `.log` output is always dense.\n\n### Parameters\n* *data* (`Symbol`, required)\n  Input data.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Returns element-wise natural logarithmic value of the input.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"log","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._log(data, **kwargs)"}},{"id":"log10(data,**kwargs)-class-method","html_id":"log10(data,**kwargs)-class-method","name":"log10","doc":"Returns element-wise base-10 logarithmic value of the input.\n\n    10**log10(x) = x\n\n### Parameters\n* *data* (`Symbol`, required)\n  Input data.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Returns element-wise base-10 logarithmic value of the input.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"log10","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._log10(data, **kwargs)"}},{"id":"log1p(data,**kwargs)-class-method","html_id":"log1p(data,**kwargs)-class-method","name":"log1p","doc":"Returns `log(1 + x)` computed element-wise on the input.\n\nThis function is more accurate than explicitly calculating\n`log(1 + x)` for small *x*.\n\n### Parameters\n* *data* (`Symbol`, required)\n  Input data.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Returns <code><a href=\"../MXNet/Symbol.html#log(data,**kwargs)-class-method\">.log(1 + x)</a></code> computed element-wise on the input.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"log1p","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._log1p(data, **kwargs)"}},{"id":"log2(data,**kwargs)-class-method","html_id":"log2(data,**kwargs)-class-method","name":"log2","doc":"Returns element-wise base-2 logarithmic value of the input.\n\n    2**log2(x) = x\n\n### Parameters\n* *data* (`Symbol`, required)\n  Input data.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Returns element-wise base-2 logarithmic value of the input.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"log2","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._log2(data, **kwargs)"}},{"id":"log_softmax(data,**kwargs)-class-method","html_id":"log_softmax(data,**kwargs)-class-method","name":"log_softmax","doc":"Computes the log softmax of the input.\n\nThis is equivalent to computing `.softmax` followed by `.log`.\n\nAssume *x* is an array with the following elements:\n    [[1.0, 1.0, 1.0], [1.0, 1.0, 1.0]]\n\nThen:\n    softmax(x, axis: 0) # => [[-0.6931, -0.6931, -0.6931], [-0.6931, -0.6931, -0.6931]]\n    softmax(x, axis: 1) # => [[-1.0986, -1.0986, -1.0986], [-1.0986, -1.0986, -1.0986]]\n\n### Parameters\n* *data* (`Symbol`, required)\n  Input data.\n* *axis* (`Int`, optional, default = -1)\n  The axis along which to compute softmax.\n* *temperature* (`Float`, optional, default = 1.0)\n  Temperature parameter in softmax.\n* *dtype* (`::Symbol`, `:float16`, `:float32` or `:float64`, optional)\n  Type of the output in case this can't be inferred. Defaults\n  to the same type as the input if not defined.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Computes the log softmax of the input.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"log_softmax","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._log_softmax(data, **kwargs)"}},{"id":"logical_and(lhs:self|Number,rhs:self|Number)-class-method","html_id":"logical_and(lhs:self|Number,rhs:self|Number)-class-method","name":"logical_and","doc":"Returns the result of element-wise logical and (`&`) comparison\noperation.\n\nFor each element in input arrays, return 1 (true) if *lhs*\nelement and *rhs* element is true (not zero), otherwise return 0\n(false).\n\nBoth inputs can be a `Symbol` or a scalar number. Broadcasting\nis not supported.\n\nEquivalent to `lhs & rhs`.\n\n### Parameters\n* *lhs* (`Symbol` or `Number`)\n  The first value to be compared.\n* *rhs* (`Symbol` or `Number`)\n  The second value to be compared.\n","summary":"<p>Returns the result of element-wise logical and (<code><a href=\"../MXNet/Symbol.html#&(other)-instance-method\">#&</a></code>) comparison operation.</p>","abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"self | Number"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self | Number"}],"args_string":"(lhs : <span class=\"k\">self</span> | Number, rhs : <span class=\"k\">self</span> | Number)","args_html":"(lhs : <span class=\"k\">self</span> | <a href=\"../Number.html\">Number</a>, rhs : <span class=\"k\">self</span> | <a href=\"../Number.html\">Number</a>)","location":{"filename":"src/mxnet/symbol.cr","line_number":922,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/symbol.cr#L922"},"def":{"name":"logical_and","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"self | Number"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self | Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if lhs.is_a?(self)\n  if rhs.is_a?(self)\n    Internal._logical_and(lhs, rhs)\n  else\n    Internal._logical_and_scalar(lhs, scalar: rhs)\n  end\nelse\n  if rhs.is_a?(self)\n    Internal._logical_and_scalar(rhs, scalar: lhs)\n  else\n    raise(\"should never happen\")\n  end\nend"}},{"id":"logical_not(data,**kwargs)-class-method","html_id":"logical_not(data,**kwargs)-class-method","name":"logical_not","doc":"Performs element-wise logical not of the input array.\n\n    logical_not([-2, 0, 1]) = [0, 1, 0]\n\n* *data* (`Symbol`, required)\n  Input data.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Performs element-wise logical not of the input array.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"logical_not","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._logical_not(data, **kwargs)"}},{"id":"logical_or(lhs:self|Number,rhs:self|Number)-class-method","html_id":"logical_or(lhs:self|Number,rhs:self|Number)-class-method","name":"logical_or","doc":"Returns the result of element-wise logical or (`|`) comparison\noperation.\n\nFor each element in input arrays, return 1 (true) if *lhs*\nelement or *rhs* element is true (not zero), otherwise return 0\n(false).\n\nBoth inputs can be a `Symbol` or a scalar number. Broadcasting\nis not supported.\n\nEquivalent to `lhs | rhs`.\n\n### Parameters\n* *lhs* (`Symbol` or `Number`)\n  The first value to be compared.\n* *rhs* (`Symbol` or `Number`)\n  The second value to be compared.\n","summary":"<p>Returns the result of element-wise logical or (<code><a href=\"../MXNet/Symbol.html#%7C(other)-instance-method\">#|</a></code>) comparison operation.</p>","abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"self | Number"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self | Number"}],"args_string":"(lhs : <span class=\"k\">self</span> | Number, rhs : <span class=\"k\">self</span> | Number)","args_html":"(lhs : <span class=\"k\">self</span> | <a href=\"../Number.html\">Number</a>, rhs : <span class=\"k\">self</span> | <a href=\"../Number.html\">Number</a>)","location":{"filename":"src/mxnet/symbol.cr","line_number":949,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/symbol.cr#L949"},"def":{"name":"logical_or","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"self | Number"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self | Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if lhs.is_a?(self)\n  if rhs.is_a?(self)\n    Internal._logical_or(lhs, rhs)\n  else\n    Internal._logical_or_scalar(lhs, scalar: rhs)\n  end\nelse\n  if rhs.is_a?(self)\n    Internal._logical_or_scalar(rhs, scalar: lhs)\n  else\n    raise(\"should never happen\")\n  end\nend"}},{"id":"logical_xor(lhs:self|Number,rhs:self|Number)-class-method","html_id":"logical_xor(lhs:self|Number,rhs:self|Number)-class-method","name":"logical_xor","doc":"Returns the result of element-wise logical xor (`^`) comparison\noperation.\n\nFor each element in input arrays, return 1 (true) if either\n*lhs* element or *rhs* element is true (not zero) but not both,\notherwise return 0 (false).\n\nBoth inputs can be a `Symbol` or a scalar number. Broadcasting\nis not supported.\n\nEquivalent to `lhs ^ rhs`.\n\n### Parameters\n* *lhs* (`Symbol` or `Number`)\n  The first value to be compared.\n* *rhs* (`Symbol` or `Number`)\n  The second value to be compared.\n","summary":"<p>Returns the result of element-wise logical xor (<code><a href=\"../MXNet/Symbol.html#%5E(other)-instance-method\">#^</a></code>) comparison operation.</p>","abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"self | Number"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self | Number"}],"args_string":"(lhs : <span class=\"k\">self</span> | Number, rhs : <span class=\"k\">self</span> | Number)","args_html":"(lhs : <span class=\"k\">self</span> | <a href=\"../Number.html\">Number</a>, rhs : <span class=\"k\">self</span> | <a href=\"../Number.html\">Number</a>)","location":{"filename":"src/mxnet/symbol.cr","line_number":976,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/symbol.cr#L976"},"def":{"name":"logical_xor","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"self | Number"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self | Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if lhs.is_a?(self)\n  if rhs.is_a?(self)\n    Internal._logical_xor(lhs, rhs)\n  else\n    Internal._logical_xor_scalar(lhs, scalar: rhs)\n  end\nelse\n  if rhs.is_a?(self)\n    Internal._logical_xor_scalar(rhs, scalar: lhs)\n  else\n    raise(\"should never happen\")\n  end\nend"}},{"id":"max(data,**kwargs)-class-method","html_id":"max(data,**kwargs)-class-method","name":"max","doc":"Computes the max of array elements over given axes.\n\n### Parameters\n* *data* (`Symbol`, required)\n  Input data.\n* *axis* (`Int` or `Array(Int)`, optional)\n  The axis or axes along which to perform the reduction.\n  By default it computes over all elements into a scalar array\n  with shape `[1]`. If axis is `Int`, a reduction is performed\n  on a particular axis. If axis is `Array(Int)`, a reduction is\n  performed on all the axes specified in the list. If *exclude*\n  is `true`, reduction will be performed on the axes that are\n  **not** in axis instead. Negative values means indexing from\n  right to left.\n* *keepdims* (`Bool`, optional, default = false)\n  If `true`, the reduced axes are left in the result as\n  a dimension with size one.\n* *exclude* (`Bool`, optional, default = false)\n  Whether to perform reduction on axes that are not in *axis*\n  instead.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Computes the max of array elements over given axes.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"max","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._max(data, **kwargs)"}},{"id":"maximum(lhs:self|Number,rhs:self|Number)-class-method","html_id":"maximum(lhs:self|Number,rhs:self|Number)-class-method","name":"maximum","doc":"Returns element-wise maximum of the input arrays.\n\nBoth inputs can be a `Symbol` or a scalar number. Broadcasting\nis not supported.\n\n### Parameters\n* *lhs* (`Symbol` or `Number`)\n  The first value to be compared.\n* *rhs* (`Symbol` or `Number`)\n  The second value to be compared.\n","summary":"<p>Returns element-wise maximum of the input arrays.</p>","abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"self | Number"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self | Number"}],"args_string":"(lhs : <span class=\"k\">self</span> | Number, rhs : <span class=\"k\">self</span> | Number)","args_html":"(lhs : <span class=\"k\">self</span> | <a href=\"../Number.html\">Number</a>, rhs : <span class=\"k\">self</span> | <a href=\"../Number.html\">Number</a>)","location":{"filename":"src/mxnet/symbol.cr","line_number":714,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/symbol.cr#L714"},"def":{"name":"maximum","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"self | Number"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self | Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if lhs.is_a?(self)\n  if rhs.is_a?(self)\n    Internal._maximum(lhs, rhs)\n  else\n    Internal._maximum_scalar(lhs, scalar: rhs)\n  end\nelse\n  if rhs.is_a?(self)\n    Internal._maximum_scalar(rhs, scalar: lhs)\n  else\n    raise(\"should never happen\")\n  end\nend"}},{"id":"mean(data,**kwargs)-class-method","html_id":"mean(data,**kwargs)-class-method","name":"mean","doc":"Computes the mean of array elements over given axes.\n\n### Parameters\n* *data* (`Symbol`, required)\n  Input data.\n* *axis* (`Int` or `Array(Int)`, optional)\n  The axis or axes along which to perform the reduction.\n  By default it computes over all elements into a scalar array\n  with shape `[1]`. If axis is `Int`, a reduction is performed\n  on a particular axis. If axis is `Array(Int)`, a reduction is\n  performed on all the axes specified in the list. If *exclude*\n  is `true`, reduction will be performed on the axes that are\n  **not** in axis instead. Negative values means indexing from\n  right to left.\n* *keepdims* (`Bool`, optional, default = false)\n  If `true`, the reduced axes are left in the result as\n  a dimension with size one.\n* *exclude* (`Bool`, optional, default = false)\n  Whether to perform reduction on axes that are not in *axis*\n  instead.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Computes the mean of array elements over given axes.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"mean","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._mean(data, **kwargs)"}},{"id":"min(data,**kwargs)-class-method","html_id":"min(data,**kwargs)-class-method","name":"min","doc":"Computes the min of array elements over given axes.\n\n### Parameters\n* *data* (`Symbol`, required)\n  Input data.\n* *axis* (`Int` or `Array(Int)`, optional)\n  The axis or axes along which to perform the reduction.\n  By default it computes over all elements into a scalar array\n  with shape `[1]`. If axis is `Int`, a reduction is performed\n  on a particular axis. If axis is `Array(Int)`, a reduction is\n  performed on all the axes specified in the list. If *exclude*\n  is `true`, reduction will be performed on the axes that are\n  **not** in axis instead. Negative values means indexing from\n  right to left.\n* *keepdims* (`Bool`, optional, default = false)\n  If `true`, the reduced axes are left in the result as\n  a dimension with size one.\n* *exclude* (`Bool`, optional, default = false)\n  Whether to perform reduction on axes that are not in *axis*\n  instead.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Computes the min of array elements over given axes.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"min","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._min(data, **kwargs)"}},{"id":"minimum(lhs:self|Number,rhs:self|Number)-class-method","html_id":"minimum(lhs:self|Number,rhs:self|Number)-class-method","name":"minimum","doc":"Returns element-wise minimum of the input arrays.\n\nBoth inputs can be a `Symbol` or a scalar number. Broadcasting\nis not supported.\n\n### Parameters\n* *lhs* (`Symbol` or `Number`)\n  The first value to be compared.\n* *rhs* (`Symbol` or `Number`)\n  The second value to be compared.\n","summary":"<p>Returns element-wise minimum of the input arrays.</p>","abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"self | Number"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self | Number"}],"args_string":"(lhs : <span class=\"k\">self</span> | Number, rhs : <span class=\"k\">self</span> | Number)","args_html":"(lhs : <span class=\"k\">self</span> | <a href=\"../Number.html\">Number</a>, rhs : <span class=\"k\">self</span> | <a href=\"../Number.html\">Number</a>)","location":{"filename":"src/mxnet/symbol.cr","line_number":734,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/symbol.cr#L734"},"def":{"name":"minimum","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"self | Number"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self | Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if lhs.is_a?(self)\n  if rhs.is_a?(self)\n    Internal._minimum(lhs, rhs)\n  else\n    Internal._minimum_scalar(lhs, scalar: rhs)\n  end\nelse\n  if rhs.is_a?(self)\n    Internal._minimum_scalar(rhs, scalar: lhs)\n  else\n    raise(\"should never happen\")\n  end\nend"}},{"id":"modulo(lhs:self|Number,rhs:self|Number)-class-method","html_id":"modulo(lhs:self|Number,rhs:self|Number)-class-method","name":"modulo","doc":"Returns element-wise modulo of the input arrays.\n\nBoth inputs can be a `Symbol` or a scalar number. Broadcasting\nis not supported.\n\nEquivalent to `lhs % rhs`.\n\n### Parameters\n* *lhs* (`Symbol` or `Number`)\n  The first value to modulo.\n* *rhs* (`Symbol` or `Number`)\n  The second value to modulo.\n","summary":"<p>Returns element-wise modulo of the input arrays.</p>","abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"self | Number"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self | Number"}],"args_string":"(lhs : <span class=\"k\">self</span> | Number, rhs : <span class=\"k\">self</span> | Number)","args_html":"(lhs : <span class=\"k\">self</span> | <a href=\"../Number.html\">Number</a>, rhs : <span class=\"k\">self</span> | <a href=\"../Number.html\">Number</a>)","location":{"filename":"src/mxnet/symbol.cr","line_number":671,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/symbol.cr#L671"},"def":{"name":"modulo","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"self | Number"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self | Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if lhs.is_a?(self)\n  if rhs.is_a?(self)\n    Internal._mod(lhs, rhs)\n  else\n    Internal._mod_scalar(lhs, scalar: rhs)\n  end\nelse\n  if rhs.is_a?(self)\n    Internal._rmod_scalar(rhs, scalar: lhs)\n  else\n    raise(\"should never happen\")\n  end\nend"}},{"id":"multiply(lhs:self|Number,rhs:self|Number)-class-method","html_id":"multiply(lhs:self|Number,rhs:self|Number)-class-method","name":"multiply","doc":"Returns element-wise product of the input arrays.\n\nBoth inputs can be a `Symbol` or a scalar number. Broadcasting\nis not supported.\n\nEquivalent to `lhs * rhs`.\n\n### Parameters\n* *lhs* (`Symbol` or `Number`)\n  The first value to be multiplied.\n* *rhs* (`Symbol` or `Number`)\n  The second value to be multiplied.\n","summary":"<p>Returns element-wise product of the input arrays.</p>","abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"self | Number"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self | Number"}],"args_string":"(lhs : <span class=\"k\">self</span> | Number, rhs : <span class=\"k\">self</span> | Number)","args_html":"(lhs : <span class=\"k\">self</span> | <a href=\"../Number.html\">Number</a>, rhs : <span class=\"k\">self</span> | <a href=\"../Number.html\">Number</a>)","location":{"filename":"src/mxnet/symbol.cr","line_number":627,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/symbol.cr#L627"},"def":{"name":"multiply","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"self | Number"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self | Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if lhs.is_a?(self)\n  if rhs.is_a?(self)\n    Internal._mul(lhs, rhs)\n  else\n    Internal._mul_scalar(lhs, scalar: rhs)\n  end\nelse\n  if rhs.is_a?(self)\n    Internal._mul_scalar(rhs, scalar: lhs)\n  else\n    raise(\"should never happen\")\n  end\nend"}},{"id":"nanprod(data,**kwargs)-class-method","html_id":"nanprod(data,**kwargs)-class-method","name":"nanprod","doc":"Computes the product of array elements over given axes\ntreating not-a-number values (*NaN*) as one.\n\nSee `.prod`.\n\n### Parameters\n* *data* (`Symbol`, required)\n  Input data.\n* *axis* (`Int` or `Array(Int)`, optional)\n  The axis or axes along which to perform the\n  reduction. `axis: []` or `axis: nil` will compute over all\n  elements into a scalar array with shape `[1]`. If *axis* is\n  an `Int`, a reduction is performed on a particular axis. If\n  *axis* is an array of `Int`, a reduction is performed on all\n  the axes specified in the array. If *exclude* is true,\n  reduction will be performed on the axes that are **not** in\n  *axis* instead. Negative values means indexing from right to\n  left.\n* *keepdims* (`Bool`, optional, default = false)\n  If this is set to true, the reduced axes are left in the\n  result as dimension with size one.\n* *exclude* (`Bool`, optional, default = false)\n  Whether to perform reduction on axis that are **not** in\n  axis instead.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Computes the product of array elements over given axes treating not-a-number values (<em>NaN</em>) as one.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"nanprod","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._nanprod(data, **kwargs)"}},{"id":"nansum(data,**kwargs)-class-method","html_id":"nansum(data,**kwargs)-class-method","name":"nansum","doc":"Computes the sum of array elements over given axes treating\nnot-a-number values (*NaN*) as zero.\n\nSee `.sum`.\n\n### Parameters\n* *data* (`Symbol`, required)\n  Input data.\n* *axis* (`Int` or `Array(Int)`, optional)\n  The axis or axes along which to perform the\n  reduction. `axis: []` or `axis: nil` will compute over all\n  elements into a scalar array with shape `[1]`. If *axis* is\n  an `Int`, a reduction is performed on a particular axis. If\n  *axis* is an array of `Int`, a reduction is performed on all\n  the axes specified in the array. If *exclude* is true,\n  reduction will be performed on the axes that are **not** in\n  *axis* instead. Negative values means indexing from right to\n  left.\n* *keepdims* (`Bool`, optional, default = false)\n  If this is set to true, the reduced axes are left in the\n  result as dimension with size one.\n* *exclude* (`Bool`, optional, default = false)\n  Whether to perform reduction on axis that are **not** in\n  axis instead.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Computes the sum of array elements over given axes treating not-a-number values (<em>NaN</em>) as zero.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"nansum","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._nansum(data, **kwargs)"}},{"id":"norm(data,**kwargs)-class-method","html_id":"norm(data,**kwargs)-class-method","name":"norm","doc":"Computes the norm.\n\nThis operator computes the norm on an array with the specified\naxis, depending on the value of the `ord` parameter. By default,\nit computes the L2 norm on the entire array. Currently only\n`ord: 2` supports sparse arrays.\n\nAssume *x* is an array with the following elements:\n    [[[1.0, 2.0], [3.0, 4.0]], [[2.0, 2.0], [5.0, 6.0]]]\n\nThen:\n    norm(x, ord: 2, axis: 1) # => [[3.1622, 4.4721], [5.3851, 6.3245]]\n    norm(x, ord: 1, axis: 1) # => [[40., 6.0], [7.0, 8.0]]\n\n### Parameters\n* *data* (`Symbol`, required)\n  Input data.\n* *ord* (`Int`, optional, default = `2`)\n  Order of the norm. Currently `ord: 1` and `ord: 2` are\n  supported.\n* *axis* (`Int` or `Array(Int)`, optional)\n  The axis or axes along which to perform the reduction.\n  By default it computes over all elements into a scalar array\n  with shape `[1]`. If axis is `Int`, a reduction is performed\n  on a particular axis. If axis is `Array(Int)`, it specifies\n  the axes that hold 2-D matrices, and the matrix norms of\n  these matrices are computed.\n* *out_dtype* (`::Symbol`, `:float16`, `:float32`, `:float64`, `:int32`, `:int64` or `:int8`, optional)\n  The data type of the output.\n* *keepdims* (`Bool`, optional, default = false)\n  If `true`, the reduced axes are left in the result as\n  a dimension with size one.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Computes the norm.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"norm","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._norm(data, **kwargs)"}},{"id":"not_equal(lhs:self|Number,rhs:self|Number)-class-method","html_id":"not_equal(lhs:self|Number,rhs:self|Number)-class-method","name":"not_equal","doc":"Returns the result of element-wise not equal to (`!=`)\ncomparison operation.\n\nFor each element in input arrays, return 1 (true) if\ncorresponding elements are different, otherwise return 0\n(false).\n\nBoth inputs can be a `Symbol` or a scalar number. Broadcasting\nis not supported.\n\nEquivalent to `lhs != rhs`.\n\n### Parameters\n* *lhs* (`Symbol` or `Number`)\n  The first value to be compared.\n* *rhs* (`Symbol` or `Number`)\n  The second value to be compared.\n","summary":"<p>Returns the result of element-wise not equal to (<code><a href=\"../MXNet/Symbol.html#!=(other)-instance-method\">#!=</a></code>) comparison operation.</p>","abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"self | Number"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self | Number"}],"args_string":"(lhs : <span class=\"k\">self</span> | Number, rhs : <span class=\"k\">self</span> | Number)","args_html":"(lhs : <span class=\"k\">self</span> | <a href=\"../Number.html\">Number</a>, rhs : <span class=\"k\">self</span> | <a href=\"../Number.html\">Number</a>)","location":{"filename":"src/mxnet/symbol.cr","line_number":787,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/symbol.cr#L787"},"def":{"name":"not_equal","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"self | Number"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self | Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if lhs.is_a?(self)\n  if rhs.is_a?(self)\n    Internal._not_equal(lhs, rhs)\n  else\n    Internal._not_equal_scalar(lhs, scalar: rhs)\n  end\nelse\n  if rhs.is_a?(self)\n    Internal._not_equal_scalar(rhs, scalar: lhs)\n  else\n    raise(\"should never happen\")\n  end\nend"}},{"id":"one_hot(indices,depth,**kwargs)-class-method","html_id":"one_hot(indices,depth,**kwargs)-class-method","name":"one_hot","doc":"Returns a one-hot array.\n\nThe locations represented by *indices* take value *on_value*,\nwhile all other locations take value *off_value*.\n\n`.one_hot` with *indices* of shape `[i0, i1]` and depth of `d`\nwould result in an output array of shape `[i0, i1, d]` with:\n    output[i, j, 0..-1] = off_value\n    output[i, j, indices[i, j]] = on_value\n\nAssume *x* is an array with the following elements:\n    [1, 0, 2, 0]\n\nThen:\n    one_hot(x, 3) # => [[0, 1, 0], [1, 0, 0], [0, 0, 1], [1, 0, 0]]\n\n### Parameters\n* *indices* (`Symbol`, required)\n  Array of locations where to set *on_value*.\n* *depth* (`Int`, required)\n  Depth of the one hot dimension.\n* *on_value* (`Float`, optional, default = 1.0)\n  The value assigned to the locations represented by indices.\n* *off_value* (`Float`, optional, default = 0.0)\n  The value assigned to the locations not represented by indices.\n* *dtype* (`::Symbol`, optional, default = `:float32`)\n  Type of the output.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Returns a one-hot array.</p>","abstract":false,"args":[{"name":"indices","doc":null,"default_value":"","external_name":"indices","restriction":""},{"name":"depth","doc":null,"default_value":"","external_name":"depth","restriction":""}],"args_string":"(indices, depth, **kwargs)","args_html":"(indices, depth, **kwargs)","location":null,"def":{"name":"one_hot","args":[{"name":"indices","doc":null,"default_value":"","external_name":"indices","restriction":""},{"name":"depth","doc":null,"default_value":"","external_name":"depth","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._one_hot(indices, depth, **kwargs)"}},{"id":"ones(shape:Int|Array(Int),ctx=Context.current,**kwargs)-class-method","html_id":"ones(shape:Int|Array(Int),ctx=Context.current,**kwargs)-class-method","name":"ones","doc":"Returns an array filled with all ones, with the given shape.\n\n### Parameters\n* *data* (`Symbol`, required)\n  Input data.\n* *shape* (`Int` or `Array(Int)`)\n  The shape of the array.\n* *dtype* (`::Symbol`, default = `:float32`)\n  The data type of the output array.\n* *ctx* (`Context`, optional)\n  Device context (default is the current context). Only used\n  for imperative calls.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Returns an array filled with all ones, with the given shape.</p>","abstract":false,"args":[{"name":"shape","doc":null,"default_value":"","external_name":"shape","restriction":"Int | Array(Int)"},{"name":"ctx","doc":null,"default_value":"Context.current","external_name":"ctx","restriction":""}],"args_string":"(shape : Int | Array(Int), ctx = <span class=\"t\">Context</span>.current, **kwargs)","args_html":"(shape : Int | Array(Int), ctx = <span class=\"t\">Context</span>.current, **kwargs)","location":null,"def":{"name":"ones","args":[{"name":"shape","doc":null,"default_value":"","external_name":"shape","restriction":"Int | Array(Int)"},{"name":"ctx","doc":null,"default_value":"Context.current","external_name":"ctx","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Internal._ones(**kwargs.merge({shape: shape, ctx: ctx}))"}},{"id":"ones_like(data,**kwargs)-class-method","html_id":"ones_like(data,**kwargs)-class-method","name":"ones_like","doc":"Returns an array of ones with the same shape, data type and\nstorage type as the input array.\n\nAssume *x* is an array with the following elements:\n    [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]\n\nThen:\n    ones_like(x) # => [[1.0, 1.0, 1.0], [1.0, 1.0, 1.0]]\n\n### Parameters\n* *data* (`Symbol`, required)\n  Input data.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Returns an array of ones with the same shape, data type and storage type as the input array.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"ones_like","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._ones_like(data, **kwargs)"}},{"id":"pick(data,index,**kwargs)-class-method","html_id":"pick(data,index,**kwargs)-class-method","name":"pick","doc":"Picks elements from an input array according to the indices\nalong the given axis.\n\nGiven an input array of shape `[d0, d1]` and indices of shape\n`[i0]`, the result will be an output array of shape `[i0]`\nwith:\n    output[i] = input[i, indices[i]]\n\nBy default, if any index mentioned is too large, it is\nreplaced by the index that addresses the last element along an\naxis (clip mode).\n\nThis function supports n-dimensional input and\n(n-1)-dimensional indices arrays.\n\nAssume *x*, *i*, *j*, and *k* are arrays with the following\nelements:\n    [[1, 2], [3, 4], [5, 6]] # x\n    [0, 1]                   # i\n    [0, 1, 0]                # j\n    [1, 0, 2]                # k\n\nThen:\n    # pick elements with specified indices along axis 0\n    pick(x, index: i, 0) # => [1, 4]\n    # pick elements with specified indices along axis 1\n    pick(x, index: j, 1) # => [1, 4, 5]\n    # pick elements with specified indices along axis 1 --\n    # dims are maintained\n    pick(x, index: k, 1, keepdims: true) # => [[2], [3], [6]]\n\n### Parameters\n* *data* (`Symbol`, required)\n  The input array.\n* *index* (`Symbol`, required)\n  The index array.\n* *axis* (`Int` or `nil`, optional, default = -1)\n  The axis to pick the elements. Negative values mean\n  indexing from right to left. If `nil`, elements in the index\n  with respect to the flattened input will be picked.\n* *keepdims* (`Bool`, optional, default = false)\n  If true, the axis where we pick the elements is left in the\n  result as a dimension with size one.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Picks elements from an input array according to the indices along the given axis.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""},{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":""}],"args_string":"(data, index, **kwargs)","args_html":"(data, index, **kwargs)","location":null,"def":{"name":"pick","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""},{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._pick(data, index, **kwargs)"}},{"id":"pooling(data:self,**kwargs)-class-method","html_id":"pooling(data:self,**kwargs)-class-method","name":"pooling","doc":"Performs pooling on the input.\n\nThe shapes for 1-D pooling are:\n  * **data** and **out**:\n  *[batch_size, channel, width]* (\"NCW\" layout) or\n  *[batch_size, width, channel]* (\"NWC\" layout)\n\nThe shapes for 2-D pooling are:\n  * **data** and **out**:\n  *[batch_size, channel, height, width]* (\"NCHW\" layout) or\n  *[batch_size, height, width, channel]* (\"NHWC\" layout)\n\nThree pooling options are supported by *pool_type*:\n  * **avg**: average pooling\n  * **max**: max pooling\n  * **sum**: sum pooling\n  * **lp**: Lp pooling\n\nFor 3-D pooling, an additional *depth* dimension is added\nbefore *height*. Namely the input data and output will have\nshape:\n  *[batch_size, channel, depth, height, width]* (\"NCDHW\" layout) or\n  *[batch_size, depth, height, width, channel]* (\"NDHWC\" layout).\n\nNotes on Lp pooling:\n\nLp pooling was first introduced by this paper:\nhttps://arxiv.org/pdf/1204.3968.pdf. L-1 pooling is simply\nsum pooling, while L-inf pooling is simply max pooling. We can\nsee that Lp pooling stands between those two, in practice the\nmost common value for *p* is 2.\n\n### Parameters\n* *data* (`Symbol`, required)\n  Input data.\n* *kernel* (`Array(Int)`, shape, optional, default = [])\n  Pooling kernel size: *[y, x]* or *[d, y, x]*.\n* *pool_type* (`::Symbol`, `:avg`, `:lp`, `:max` or `:sum`, optional, default = `:max`)\n  Pooling type to be applied.\n* *global_pool* (`Bool`, optional, default = false)\n  Ignore kernel size; do global pooling based on current input\n  feature map.\n* *cudnn_off* (`Bool`, optional, default = false)\n  Turn off cudnn pooling and use MXNet pooling operator.\n* *pooling_convention* (`::Symbol`, `:full`, `:same`, or `:valid`, optional, default = `:valid`)\n  Pooling convention to be applied.\n* *stride* (`Array(Int)`, shape, optional, default = [])\n  Stride for pooling: *[y, x]* or *[d, y, x]*. Defaults to 1\n  for each dimension.\n* *pad* (`Array(Int)`, shape, optional, default = [])\n  Pad for pooling: *[y, x]* or *[d, y, x]*. Defaults to no\n  padding.\n* *p_value* (`Int`, optional)\n  Value of *p* for Lp pooling, can be 1 or 2, required for Lp\n  pooling.\n* *count_include_pad* (`Bool`, optional)\n  Only used for average pooling. Specify whether to count\n  padding elements for average calculation. For example, with\n  a 5*5 kernel on a 3*3 corner of a image, the sum of the 9\n  valid elements will be divided by 25 if this is set to\n  true, or it will be divided by 9 if this is set to\n  false. Defaults to true.\n* *layout* (`String`, `\"NCDHW\"`, `\"NCHW\"`, `\"NCW\"`, `\"NDHWC\"`, `\"NHWC\"`, `\"NWC\"` or `nil`, optional)\n  Set layout for input, output and weight. Empty for default\n  layout: \"NCW\" for 1D, \"NCHW\" for 2D and \"NCDHW\" for\n  3D. \"NHWC\" and \"NDHWC\" are only supported on GPU.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Performs pooling on the input.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"self"}],"args_string":"(data : <span class=\"k\">self</span>, **kwargs)","args_html":"(data : <span class=\"k\">self</span>, **kwargs)","location":null,"def":{"name":"pooling","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"self"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._Pooling(data, **kwargs)"}},{"id":"power(base:self|Number,exp:self|Number)-class-method","html_id":"power(base:self|Number,exp:self|Number)-class-method","name":"power","doc":"Returns result of first array elements raised to powers from\nsecond array, element-wise.\n\nBoth inputs can be a `Symbol` or a scalar number. Broadcasting\nis not supported.\n\nEquivalent to `base ** exp`.\n\n### Parameters\n* *base* (`Symbol` or `Number`)\n  The base value.\n* *exp* (`Symbol` or `Number`)\n  The exponent value.\n","summary":"<p>Returns result of first array elements raised to powers from second array, element-wise.</p>","abstract":false,"args":[{"name":"base","doc":null,"default_value":"","external_name":"base","restriction":"self | Number"},{"name":"exp","doc":null,"default_value":"","external_name":"exp","restriction":"self | Number"}],"args_string":"(base : <span class=\"k\">self</span> | Number, exp : <span class=\"k\">self</span> | Number)","args_html":"(base : <span class=\"k\">self</span> | <a href=\"../Number.html\">Number</a>, exp : <span class=\"k\">self</span> | <a href=\"../Number.html\">Number</a>)","location":{"filename":"src/mxnet/symbol.cr","line_number":694,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/symbol.cr#L694"},"def":{"name":"power","args":[{"name":"base","doc":null,"default_value":"","external_name":"base","restriction":"self | Number"},{"name":"exp","doc":null,"default_value":"","external_name":"exp","restriction":"self | Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if base.is_a?(self)\n  if exp.is_a?(self)\n    Internal._power(base, exp)\n  else\n    Internal._power_scalar(base, scalar: exp)\n  end\nelse\n  if exp.is_a?(self)\n    Internal._rpower_scalar(exp, scalar: base)\n  else\n    raise(\"should never happen\")\n  end\nend"}},{"id":"prod(data,**kwargs)-class-method","html_id":"prod(data,**kwargs)-class-method","name":"prod","doc":"Computes the product of array elements over given axes.\n\nAssume *x* is an array with the following elements:\n    [[[1, 2], [2, 3], [1, 3]],\n     [[1, 4], [4, 3], [5, 2]],\n     [[7, 1], [7, 2], [7, 3]]]\n\nThen:\n    prod(x, axis: 1) # => [[2, 18], [20, 24], [343, 6]]\n    prod(x, axis: [1, 2]) # => [36, 480, 2058]\n\n### Parameters\n* *data* (`Symbol`, required)\n  Input data.\n* *axis* (`Int` or `Array(Int)`, optional)\n  The axis or axes along which to perform the\n  reduction. `axis: []` or `axis: nil` will compute over all\n  elements into a scalar array with shape `[1]`. If *axis* is\n  an `Int`, a reduction is performed on a particular axis. If\n  *axis* is an array of `Int`, a reduction is performed on all\n  the axes specified in the array. If *exclude* is true,\n  reduction will be performed on the axes that are **not** in\n  *axis* instead. Negative values means indexing from right to\n  left.\n* *keepdims* (`Bool`, optional, default = false)\n  If this is set to true, the reduced axes are left in the\n  result as dimension with size one.\n* *exclude* (`Bool`, optional, default = false)\n  Whether to perform reduction on axis that are **not** in\n  axis instead.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Computes the product of array elements over given axes.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"prod","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._prod(data, **kwargs)"}},{"id":"radians(data,**kwargs)-class-method","html_id":"radians(data,**kwargs)-class-method","name":"radians","doc":"Converts each element of the input array from degrees to\nradians.\n\n    radians([0, 90, 180, 270, 360]) = [0, 𝜋/2, 𝜋, 3𝜋/2, 2𝜋]\n\n### Parameters\n* *data* (`Symbol`, required)\n  Input data.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Converts each element of the input array from degrees to radians.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"radians","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._radians(data, **kwargs)"}},{"id":"random_exponential(lam:Number=1.0,ctx:Context=Context.current,**kwargs)-class-method","html_id":"random_exponential(lam:Number=1.0,ctx:Context=Context.current,**kwargs)-class-method","name":"random_exponential","doc":"Draws random samples from an exponential distribution.\n\nSamples are distributed according to an exponential distribution\nparametrized by `lam` (rate).\n\n    random_exponential(4.0, shape: [2, 2]) # => [[0.0097189 , 0.08999364], [0.04146638, 0.31715935]]\n\n### Parameters\n* *lam* (`Float`, default = 1.0)\n  Lambda parameter (rate) of the exponential distribution.\n* *shape* (`Int` or `Array(Int)`)\n  The shape of the output.\n* *dtype* (`::Symbol`, default = `:float32`)\n  The data type of the output in case this can’t be inferred.\n* *ctx* (`Context`, optional)\n  Device context (default is the current context). Only used\n  for imperative calls.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Draws random samples from an exponential distribution.</p>","abstract":false,"args":[{"name":"lam","doc":null,"default_value":"1.0","external_name":"lam","restriction":"Number"},{"name":"ctx","doc":null,"default_value":"Context.current","external_name":"ctx","restriction":"Context"}],"args_string":"(lam : Number = <span class=\"n\">1.0</span>, ctx : Context = <span class=\"t\">Context</span>.current, **kwargs)","args_html":"(lam : <a href=\"../Number.html\">Number</a> = <span class=\"n\">1.0</span>, ctx : <a href=\"../MXNet/Context.html\">Context</a> = <span class=\"t\">Context</span>.current, **kwargs)","location":null,"def":{"name":"random_exponential","args":[{"name":"lam","doc":null,"default_value":"1.0","external_name":"lam","restriction":"Number"},{"name":"ctx","doc":null,"default_value":"Context.current","external_name":"ctx","restriction":"Context"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Internal._random_exponential(**kwargs.merge({lam: lam, ctx: ctx}))"}},{"id":"random_gamma(alpha:Number=1.0,beta:Number=1.0,ctx:Context=Context.current,**kwargs)-class-method","html_id":"random_gamma(alpha:Number=1.0,beta:Number=1.0,ctx:Context=Context.current,**kwargs)-class-method","name":"random_gamma","doc":"Draws random samples from a gamma distribution.\n\nSamples are distributed according to a gamma distribution\nparametrized by `alpha` (shape) and `beta` (scale).\n\n    random_gamma(9.0, 0.5, shape: [2, 2]) # => [[6.2806954, 6.1658335], [4.5625057, 6.479337]]\n\n### Parameters\n* *alpha* (`Float`, default = 1.0)\n  Alpha parameter (shape) of the gamma distribution.\n* *beta* (`Float`, default = 1.0)\n  Beta parameter (scale) of the gamma distribution.\n* *shape* (`Int` or `Array(Int)`)\n  The shape of the output.\n* *dtype* (`::Symbol`, default = `:float32`)\n  The data type of the output in case this can’t be inferred.\n* *ctx* (`Context`, optional)\n  Device context (default is the current context). Only used\n  for imperative calls.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Draws random samples from a gamma distribution.</p>","abstract":false,"args":[{"name":"alpha","doc":null,"default_value":"1.0","external_name":"alpha","restriction":"Number"},{"name":"beta","doc":null,"default_value":"1.0","external_name":"beta","restriction":"Number"},{"name":"ctx","doc":null,"default_value":"Context.current","external_name":"ctx","restriction":"Context"}],"args_string":"(alpha : Number = <span class=\"n\">1.0</span>, beta : Number = <span class=\"n\">1.0</span>, ctx : Context = <span class=\"t\">Context</span>.current, **kwargs)","args_html":"(alpha : <a href=\"../Number.html\">Number</a> = <span class=\"n\">1.0</span>, beta : <a href=\"../Number.html\">Number</a> = <span class=\"n\">1.0</span>, ctx : <a href=\"../MXNet/Context.html\">Context</a> = <span class=\"t\">Context</span>.current, **kwargs)","location":null,"def":{"name":"random_gamma","args":[{"name":"alpha","doc":null,"default_value":"1.0","external_name":"alpha","restriction":"Number"},{"name":"beta","doc":null,"default_value":"1.0","external_name":"beta","restriction":"Number"},{"name":"ctx","doc":null,"default_value":"Context.current","external_name":"ctx","restriction":"Context"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Internal._random_gamma(**kwargs.merge({alpha: alpha, beta: beta, ctx: ctx}))"}},{"id":"random_normal(loc:Number=0.0,scale:Number=1.0,ctx:Context=Context.current,**kwargs)-class-method","html_id":"random_normal(loc:Number=0.0,scale:Number=1.0,ctx:Context=Context.current,**kwargs)-class-method","name":"random_normal","doc":"Draws random samples from a normal (Gaussian) distribution.\n\nSamples are distributed according to a normal distribution\nparametrized by `loc` (mean) and `scale` (standard deviation).\n\n    random_normal(0.0, 1.0, shape: [2, 2]) # => [[1.89171135, -1.16881478], [-1.23474145, 1.55807114]]\n\n### Parameters\n* *loc* (`Float`, default = 0.0)\n  Mean of the distribution.\n* *scale* (`Float`, default = 1.0)\n  Standard deviation of the distribution.\n* *shape* (`Int` or `Array(Int)`)\n  The shape of the output.\n* *dtype* (`::Symbol`, default = `:float32`)\n  The data type of the output in case this can’t be inferred.\n* *ctx* (`Context`, optional)\n  Device context (default is the current context). Only used\n  for imperative calls.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Draws random samples from a normal (Gaussian) distribution.</p>","abstract":false,"args":[{"name":"loc","doc":null,"default_value":"0.0","external_name":"loc","restriction":"Number"},{"name":"scale","doc":null,"default_value":"1.0","external_name":"scale","restriction":"Number"},{"name":"ctx","doc":null,"default_value":"Context.current","external_name":"ctx","restriction":"Context"}],"args_string":"(loc : Number = <span class=\"n\">0.0</span>, scale : Number = <span class=\"n\">1.0</span>, ctx : Context = <span class=\"t\">Context</span>.current, **kwargs)","args_html":"(loc : <a href=\"../Number.html\">Number</a> = <span class=\"n\">0.0</span>, scale : <a href=\"../Number.html\">Number</a> = <span class=\"n\">1.0</span>, ctx : <a href=\"../MXNet/Context.html\">Context</a> = <span class=\"t\">Context</span>.current, **kwargs)","location":null,"def":{"name":"random_normal","args":[{"name":"loc","doc":null,"default_value":"0.0","external_name":"loc","restriction":"Number"},{"name":"scale","doc":null,"default_value":"1.0","external_name":"scale","restriction":"Number"},{"name":"ctx","doc":null,"default_value":"Context.current","external_name":"ctx","restriction":"Context"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Internal._random_normal(**kwargs.merge({loc: loc, scale: scale, ctx: ctx}))"}},{"id":"random_poisson(lam:Number=1.0,ctx:Context=Context.current,**kwargs)-class-method","html_id":"random_poisson(lam:Number=1.0,ctx:Context=Context.current,**kwargs)-class-method","name":"random_poisson","doc":"Draws random samples from a Poisson distribution.\n\nSamples are distributed according to a Poisson distribution\nparametrized by `lam` (rate). Samples will always be returned\nas a floating point data type.\n\n    random_poisson(4.0, shape: [2, 2]) # => [[5.0, 2.0], [4.0, 6.0]]\n\n### Parameters\n* *lam* (`Float`, default = 1.0)\n  Lambda parameter (rate) of the Poisson distribution.\n* *shape* (`Int` or `Array(Int)`)\n  The shape of the output.\n* *dtype* (`::Symbol`, default = `:float32`)\n  The data type of the output in case this can’t be inferred.\n* *ctx* (`Context`, optional)\n  Device context (default is the current context). Only used\n  for imperative calls.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Draws random samples from a Poisson distribution.</p>","abstract":false,"args":[{"name":"lam","doc":null,"default_value":"1.0","external_name":"lam","restriction":"Number"},{"name":"ctx","doc":null,"default_value":"Context.current","external_name":"ctx","restriction":"Context"}],"args_string":"(lam : Number = <span class=\"n\">1.0</span>, ctx : Context = <span class=\"t\">Context</span>.current, **kwargs)","args_html":"(lam : <a href=\"../Number.html\">Number</a> = <span class=\"n\">1.0</span>, ctx : <a href=\"../MXNet/Context.html\">Context</a> = <span class=\"t\">Context</span>.current, **kwargs)","location":null,"def":{"name":"random_poisson","args":[{"name":"lam","doc":null,"default_value":"1.0","external_name":"lam","restriction":"Number"},{"name":"ctx","doc":null,"default_value":"Context.current","external_name":"ctx","restriction":"Context"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Internal._random_poisson(**kwargs.merge({lam: lam, ctx: ctx}))"}},{"id":"random_randint(low:Int,high:Int,ctx:Context=Context.current,**kwargs)-class-method","html_id":"random_randint(low:Int,high:Int,ctx:Context=Context.current,**kwargs)-class-method","name":"random_randint","doc":"Draws random samples from a discrete uniform distribution.\n\nSamples are uniformly distributed over the half-open interval\n`[low, high)` (includes low, but excludes high).\n\n    random_randint(0, 5, shape: [2, 2]) # => [[0, 2], [3, 1]]\n\n### Parameters\n* *low* (`Int`, required)\n  Lower boundary of the output interval.\n* *high* (`Int`, required)\n  Upper boundary of the output interval.\n* *shape* (`Int` or `Array(Int)`)\n  The shape of the output.\n* *dtype* (`::Symbol`, default = `:int32`)\n  The data type of the output.\n* *ctx* (`Context`, optional)\n  Device context (default is the current context). Only used\n  for imperative calls.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Draws random samples from a discrete uniform distribution.</p>","abstract":false,"args":[{"name":"low","doc":null,"default_value":"","external_name":"low","restriction":"Int"},{"name":"high","doc":null,"default_value":"","external_name":"high","restriction":"Int"},{"name":"ctx","doc":null,"default_value":"Context.current","external_name":"ctx","restriction":"Context"}],"args_string":"(low : Int, high : Int, ctx : Context = <span class=\"t\">Context</span>.current, **kwargs)","args_html":"(low : Int, high : Int, ctx : <a href=\"../MXNet/Context.html\">Context</a> = <span class=\"t\">Context</span>.current, **kwargs)","location":null,"def":{"name":"random_randint","args":[{"name":"low","doc":null,"default_value":"","external_name":"low","restriction":"Int"},{"name":"high","doc":null,"default_value":"","external_name":"high","restriction":"Int"},{"name":"ctx","doc":null,"default_value":"Context.current","external_name":"ctx","restriction":"Context"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Internal._random_randint(**kwargs.merge({low: low, high: high, ctx: ctx}))"}},{"id":"random_uniform(low:Number=0.0,high:Number=1.0,ctx:Context=Context.current,**kwargs)-class-method","html_id":"random_uniform(low:Number=0.0,high:Number=1.0,ctx:Context=Context.current,**kwargs)-class-method","name":"random_uniform","doc":"Draws random samples from a uniform distribution.\n\nSamples are uniformly distributed over the half-open interval\n`[low, high)` (includes low, but excludes high).\n\n    random_uniform(0.0, 1.0, shape: [2, 2]) # => [[0.60276335, 0.85794562], [0.54488319, 0.84725171]]\n\n### Parameters\n* *low* (`Float`, default = 0.0)\n  Lower bound of the distribution.\n* *high* (`Float`, default = 1.0)\n  Upper bound of the distribution.\n* *shape* (`Int` or `Array(Int)`)\n  The shape of the output.\n* *dtype* (`::Symbol`, default = `:float32`)\n  The data type of the output in case this can’t be inferred.\n* *ctx* (`Context`, optional)\n  Device context (default is the current context). Only used\n  for imperative calls.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Draws random samples from a uniform distribution.</p>","abstract":false,"args":[{"name":"low","doc":null,"default_value":"0.0","external_name":"low","restriction":"Number"},{"name":"high","doc":null,"default_value":"1.0","external_name":"high","restriction":"Number"},{"name":"ctx","doc":null,"default_value":"Context.current","external_name":"ctx","restriction":"Context"}],"args_string":"(low : Number = <span class=\"n\">0.0</span>, high : Number = <span class=\"n\">1.0</span>, ctx : Context = <span class=\"t\">Context</span>.current, **kwargs)","args_html":"(low : <a href=\"../Number.html\">Number</a> = <span class=\"n\">0.0</span>, high : <a href=\"../Number.html\">Number</a> = <span class=\"n\">1.0</span>, ctx : <a href=\"../MXNet/Context.html\">Context</a> = <span class=\"t\">Context</span>.current, **kwargs)","location":null,"def":{"name":"random_uniform","args":[{"name":"low","doc":null,"default_value":"0.0","external_name":"low","restriction":"Number"},{"name":"high","doc":null,"default_value":"1.0","external_name":"high","restriction":"Number"},{"name":"ctx","doc":null,"default_value":"Context.current","external_name":"ctx","restriction":"Context"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Internal._random_uniform(**kwargs.merge({low: low, high: high, ctx: ctx}))"}},{"id":"rcbrt(data,**kwargs)-class-method","html_id":"rcbrt(data,**kwargs)-class-method","name":"rcbrt","doc":"Returns element-wise inverse cube-root value of the input.\n\n    rcbrt(x) = 1/cbrt(x)\n\nAssume *x* is an array with the following elements:\n    [1, 8, -125]\n\nThen:\n    rcbrt(x) = [1.0, 0.5, -0.2]\n\n### Parameters\n* *data* (`Symbol`, required)\n  Input data.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Returns element-wise inverse cube-root value of the input.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"rcbrt","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._rcbrt(data, **kwargs)"}},{"id":"reciprocal(data,**kwargs)-class-method","html_id":"reciprocal(data,**kwargs)-class-method","name":"reciprocal","doc":"Returns the reciprocal of the argument, element-wise.\n\n    reciprocal(x) = 1/x\n\nAssume *x* is an array with the following elements:\n    [-2, 1, 3, 1.6, 0.2]\n\nThen:\n    reciprocal(x) = [-0.5, 1.0, 0.33333334, 0.625, 5.0]\n\n### Parameters\n* *data* (`Symbol`, required)\n  Input data.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Returns the reciprocal of the argument, element-wise.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"reciprocal","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._reciprocal(data, **kwargs)"}},{"id":"relu(data,**kwargs)-class-method","html_id":"relu(data,**kwargs)-class-method","name":"relu","doc":"Computes the rectified linear activation.\n\n_y=max(input,0)_\n\n### Parameters\n* *data* (`Symbol`, required)\n  Input data.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Computes the rectified linear activation.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"relu","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._relu(data, **kwargs)"}},{"id":"reshape(data,shape,**kwargs)-class-method","html_id":"reshape(data,shape,**kwargs)-class-method","name":"reshape","doc":"Reshapes the input array.\n\nReturns a copy of the array with a new shape without altering\nany data.\n\nAssume *x* is an array with the following elements:\n    [1, 2, 3, 4]\n\nThen:\n    reshape(shape: [2, 2]) # => [[1, 2], [3, 4]]\n\nSome dimensions of the shape can take special values from the\nset *{0, -1, -2, -3, -4}*. The significance of each is explained\nbelow:\n\n* *0* copies this dimension from the input to the output shape:\n    zeros([2, 3, 4]).reshape([4, 0, 2]).shape # => [4, 3, 2]\n    zeros([2, 3, 4]).reshape([2, 0, 0]).shape # => [2, 3, 4]\n* *-1* infers the dimension of the output shape by using the\n  remainder of the input dimensions, keeping the size of the\n  new array the same as that of the input array. At most one\n  dimension can be *-1*:\n    zeros([2, 3, 4]).reshape([6, 1, -1]).shape # => [6, 1, 4]\n    zeros([2, 3, 4]).reshape([3, -1, 8]).shape # => [3, 1, 8]\n    zeros([2, 3, 4]).reshape([-1]).shape # => [24]\n* *-2* copies all/the remainder of the input dimensions to the\n  output shape:\n    zeros([2, 3, 4]).reshape([-2]).shape # => [2, 3, 4]\n    zeros([2, 3, 4]).reshape([2, -2]).shape # => [2, 3, 4]\n    zeros([2, 3, 4]).reshape([-2, 1, 1]).shape # => [2, 3, 4, 1, 1]\n* *-3* uses the product of two consecutive dimensions of the\n  input shape as the output dimension:\n    zeros([2, 3, 4]).reshape([-3, 4]).shape # => [6, 4]\n    zeros([2, 3, 4, 5]).reshape([-3, -3]).shape # => [6, 20]\n    zeros([2, 3, 4]).reshape([0, -3]).shape # => [2, 12]\n    zeros([2, 3, 4]).reshape([-3, -2]).shape # => [6, 4]\n* *-4* splits one dimension of the input into the two dimensions\n  passed subsequent to *-4* (which can contain *-1*):\n    zeros([2, 3, 4]).reshape([-4, 1, 2, -2]).shape # => [1, 2, 3, 4]\n    zeros([2, 3, 4]).reshape([2, -4, -1, 3, -2]).shape # => [2, 1, 3, 4]\n\n### Parameters\n* *data* (`Symbol`, required)\n  Input data.\n* *shape* (`Int` or `Array(Int)`)\n  The target shape.\n* *reverse* (`Bool`, optional, default `false`)\n  If `true` then the special values are inferred from right to left.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Reshapes the input array.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""},{"name":"shape","doc":null,"default_value":"","external_name":"shape","restriction":""}],"args_string":"(data, shape, **kwargs)","args_html":"(data, shape, **kwargs)","location":null,"def":{"name":"reshape","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""},{"name":"shape","doc":null,"default_value":"","external_name":"shape","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._reshape(data, shape, **kwargs)"}},{"id":"reshape_like(lhs,rhs,**kwargs)-class-method","html_id":"reshape_like(lhs,rhs,**kwargs)-class-method","name":"reshape_like","doc":"Reshape some or all dimensions of *lhs* to have the same shape\nas some or all dimensions of *rhs*.\n\nReturns a view of the *lhs* array with a new shape without\naltering any data.\n\nAssume *x* and *y* are arrays with the following elements:\n    [1, 2, 3, 4, 5, 6]        # x\n    [[0, -4], [3, 2], [2, 2]] # y\n\nThen:\n    reshape_like(x, y) # => [[1, 2], [3, 4], [5, 6]]\n\n\n### Parameters\n* *lhs* (`Symbol`, required)\n  The first input.\n* *rhs* (`Symbol`, required)\n  The second input.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Reshape some or all dimensions of <em>lhs</em> to have the same shape as some or all dimensions of <em>rhs</em>.</p>","abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":""},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"args_string":"(lhs, rhs, **kwargs)","args_html":"(lhs, rhs, **kwargs)","location":null,"def":{"name":"reshape_like","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":""},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._reshape_like(lhs, rhs, **kwargs)"}},{"id":"rint(data,**kwargs)-class-method","html_id":"rint(data,**kwargs)-class-method","name":"rint","doc":"Returns element-wise rounded value to the nearest integer.\n\nNote:\n   - For input *N.5* *rint* returns *N* while *round* returns *N+1*.\n   - For input *-N.5* both *rint* and *round* return *-N-1*.\n\nAssume *x* is an array with the following elements:\n    [-2.1, -1.9, 1.5, 1.9, 2.1]\n\nThen:\n    rint(x) = [-2.0, -2.0, 1.0, 2.0, 2.0]\n\n### Parameters\n* *data* (`Symbol`, required)\n  Input data.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Returns element-wise rounded value to the nearest integer.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"rint","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._rint(data, **kwargs)"}},{"id":"round(data,**kwargs)-class-method","html_id":"round(data,**kwargs)-class-method","name":"round","doc":"Returns element-wise rounded value to the nearest integer.\n\nAssume *x* is an array with the following elements:\n    [-2.1, -1.9, 1.5, 1.9, 2.1]\n\nThen:\n    round(x) = [-2.0, -2.0, 2.0, 2.0, 2.0]\n\n### Parameters\n* *data* (`Symbol`, required)\n  Input data.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Returns element-wise rounded value to the nearest integer.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"round","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._round(data, **kwargs)"}},{"id":"rsqrt(data,**kwargs)-class-method","html_id":"rsqrt(data,**kwargs)-class-method","name":"rsqrt","doc":"Returns element-wise inverse square-root value of the input.\n\n    rsqrt(x) = 1/sqrt(x)\n\nAssume *x* is an array with the following elements:\n    [4, 9, 16]\n\nThen:\n    rsqrt(x) = [0.5, 0.33333, 0.25]\n\n### Parameters\n* *data* (`Symbol`, required)\n  Input data.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Returns element-wise inverse square-root value of the input.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"rsqrt","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._rsqrt(data, **kwargs)"}},{"id":"sample_exponential(lam:self,shape=[]ofInt32,**kwargs)-class-method","html_id":"sample_exponential(lam:self,shape=[]ofInt32,**kwargs)-class-method","name":"sample_exponential","doc":"Draws concurrent samples from exponential distributions.\n\nSamples are drawn from multiple exponential distributions with\nparameters `lam` (rate).\n\nThe parameters of the distributions are provided as an input\narray. Let `[s]` be the shape of the input array, `n` be the\ndimension of `[s]`, `[t]` be the shape specified as the\nparameter of the operator, and `m` be the dimension of `[t]`.\nThen the output will be a (`n+m`)-dimensional array with shape\n`[s]x[t]`.\n\nFor any valid `n`-dimensional index `i` with respect to the\ninput array, output[i] will be an `m`-dimensional array that\nholds randomly drawn samples from the distribution which is\nparameterized by the input value at index `i`. If the shape\nparameter of the operator is not set, then one sample will be\ndrawn per distribution and the output array has the same shape\nas the input array.\n\nAssume *lam* is an array with the following elements:\n    [1.0, 8.5]\n\nThen:\n    sample_exponential(lam)             # => [0.51837951, 0.09994757]\n    sample_exponential(lam, shape: [2]) # => [[0.51837951, 0.19866663], [0.09994757, 0.50447971]]\n\n### Parameters\n* *lam* (`Symbol`)\n  Lambda parameters (rates) of the exponential distributions.\n* *shape* (`Int` or `Array(Int)`)\n  Shape to be sampled from each random distribution.\n* *dtype* (`::Symbol`, default = `:float32`)\n  The data type of the output in case this can’t be inferred.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Draws concurrent samples from exponential distributions.</p>","abstract":false,"args":[{"name":"lam","doc":null,"default_value":"","external_name":"lam","restriction":"self"},{"name":"shape","doc":null,"default_value":"[] of Int32","external_name":"shape","restriction":""}],"args_string":"(lam : <span class=\"k\">self</span>, shape = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Int32</span>, **kwargs)","args_html":"(lam : <span class=\"k\">self</span>, shape = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Int32</span>, **kwargs)","location":null,"def":{"name":"sample_exponential","args":[{"name":"lam","doc":null,"default_value":"","external_name":"lam","restriction":"self"},{"name":"shape","doc":null,"default_value":"[] of Int32","external_name":"shape","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Internal._sample_exponential(**kwargs.merge({lam: lam, shape: shape}))"}},{"id":"sample_gamma(alpha:self,beta:self,shape=[]ofInt32,**kwargs)-class-method","html_id":"sample_gamma(alpha:self,beta:self,shape=[]ofInt32,**kwargs)-class-method","name":"sample_gamma","doc":"Draws random samples from gamma distributions.\n\nSamples are drawn from multiple gamma distributions with\nparameters `alpha` (shape) and `beta` (scale).\n\nThe parameters of the distributions are provided as input\narrays. Let `[s]` be the shape of the input arrays, `n` be the\ndimension of `[s]`, `[t]` be the shape specified as the\nparameter of the operator, and `m` be the dimension of `[t]`.\nThen the output will be a (`n+m`)-dimensional array with shape\n`[s]x[t]`.\n\nFor any valid `n`-dimensional index `i` with respect to the\ninput arrays, `output[i]` will be an `m`-dimensional array\nthat holds randomly drawn samples from the distribution which\nis parameterized by the input values at index `i`. If the\nshape parameter of the operator is not set, then one sample\nwill be drawn per distribution and the output array has the\nsame shape as the input arrays.\n\nAssume *alpha* and *beta* are arrays with the following elements:\n    [0.0, 2.5] # alpha\n    [1.0, 0.7] # beta\n\nThen:\n    sample_gamma(alpha, beta)             # => [0.0, 2.25797319]\n    sample_gamma(alpha, beta, shape: [2]) # => [[0.0, 0.0], [2.25797319, 1.70734084]]\n\n### Parameters\n* *alpha* (`Symbol`)\n  Alpha parameters (shapes) of the distributions.\n* *beta* (`Symbol`)\n  Beta parameters (scales) of the distributions.\n* *shape* (`Int` or `Array(Int)`)\n  Shape to be sampled from each random distribution.\n* *dtype* (`::Symbol`, default = `:float32`)\n  The data type of the output in case this can’t be inferred.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Draws random samples from gamma distributions.</p>","abstract":false,"args":[{"name":"alpha","doc":null,"default_value":"","external_name":"alpha","restriction":"self"},{"name":"beta","doc":null,"default_value":"","external_name":"beta","restriction":"self"},{"name":"shape","doc":null,"default_value":"[] of Int32","external_name":"shape","restriction":""}],"args_string":"(alpha : <span class=\"k\">self</span>, beta : <span class=\"k\">self</span>, shape = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Int32</span>, **kwargs)","args_html":"(alpha : <span class=\"k\">self</span>, beta : <span class=\"k\">self</span>, shape = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Int32</span>, **kwargs)","location":null,"def":{"name":"sample_gamma","args":[{"name":"alpha","doc":null,"default_value":"","external_name":"alpha","restriction":"self"},{"name":"beta","doc":null,"default_value":"","external_name":"beta","restriction":"self"},{"name":"shape","doc":null,"default_value":"[] of Int32","external_name":"shape","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Internal._sample_gamma(**kwargs.merge({alpha: alpha, beta: beta, shape: shape}))"}},{"id":"sample_multinomial(data:self,get_prob:Bool=false,**kwargs)-class-method","html_id":"sample_multinomial(data:self,get_prob:Bool=false,**kwargs)-class-method","name":"sample_multinomial","doc":"Draws random samples from multinomial distributions.\n\nSamples are drawn from multiple multinomial distributions.\nNote that the input distribution must be normalized (data must\nsum to 1 along its last axis).\n\n`data` is an `n` dimensional array whose last dimension has\nlength `k`, where `k` is the number of possible outcomes of\neach multinomial distribution. This operator will draw shape\nsamples from each distribution. If `shape` is empty one sample\nwill be drawn from each distribution.\n\nIf `get_prob` is `true`, a second array containing log\nlikelihood of the drawn samples will also be returned. This is\nusually used for reinforcement learning where you can provide\nreward as head gradient for this array to estimate gradient.\n\nGiven:\n    probs = [[0.0, 0.1, 0.2, 0.3, 0.4], [0.4, 0.3, 0.2, 0.1, 0.0]]\n\nThen:\n    sample_multinomial(probs)                 # => [3, 0]\n    sample_multinomial(probs, shape: [2])     # => [[4, 2], [0, 0]]\n    sample_multinomial(probs, get_prob: true) # => [2, 1], [0.2, 0.3]\n\n### Parameters\n* *data* (`Symbol`)\n  Distribution probabilities. Must sum to one on the last axis.\n* *get_prob* (`Bool`, default = false)\n  Whether to also return the log probabilities of sampled\n  results. This is usually used for differentiating through\n  stochastic variables, e.g. in reinforcement learning.\n* *shape* (`Int` or `Array(Int)`)\n  Shape to be sampled from each random distribution.\n* *dtype* (`::Symbol`, default = `:float32`)\n  The data type of the output in case this can’t be inferred.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Draws random samples from multinomial distributions.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"self"},{"name":"get_prob","doc":null,"default_value":"false","external_name":"get_prob","restriction":"Bool"}],"args_string":"(data : <span class=\"k\">self</span>, get_prob : Bool = <span class=\"n\">false</span>, **kwargs)","args_html":"(data : <span class=\"k\">self</span>, get_prob : Bool = <span class=\"n\">false</span>, **kwargs)","location":null,"def":{"name":"sample_multinomial","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"self"},{"name":"get_prob","doc":null,"default_value":"false","external_name":"get_prob","restriction":"Bool"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Internal._sample_multinomial(**kwargs.merge({data: data, get_prob: get_prob}))"}},{"id":"sample_normal(mu:self,sigma:self,shape=[]ofInt32,**kwargs)-class-method","html_id":"sample_normal(mu:self,sigma:self,shape=[]ofInt32,**kwargs)-class-method","name":"sample_normal","doc":"Draws concurrent samples from normal (Gaussian) distributions.\n\nSamples are drawn from multiple normal distributions with\nparameters `mu` (mean) and `sigma` (standard deviation).\n\nThe parameters of the distributions are provided as input\narrays. Let `[s]` be the shape of the input arrays, `n` be the\ndimension of `[s]`, `[t]` be the shape specified as the\nparameter of the operator, and `m` be the dimension of `[t]`.\nThen the output will be a (`n+m`)-dimensional array with shape\n`[s]x[t]`.\n\nFor any valid `n`-dimensional index `i` with respect to the\ninput arrays, `output[i]` will be an `m`-dimensional array\nthat holds randomly drawn samples from the distribution which\nis parameterized by the input values at index `i`. If the\nshape parameter of the operator is not set, then one sample\nwill be drawn per distribution and the output array has the\nsame shape as the input arrays.\n\nAssume *mu* and *sigma* are arrays with the following elements:\n    [0.0, 2.5] # mu\n    [1.0, 3.7] # sigma\n\nThen:\n    sample_normal(mu, sigma)             # => [-0.56410581, 0.95934606]\n    sample_normal(mu, sigma, shape: [2]) # => [[-0.56410581, 0.2928229 ], [0.95934606, 4.48287058]]\n\n### Parameters\n* *mu* (`Symbol`)\n  Means of the distributions.\n* *sigma* (`Symbol`)\n  Standard deviations of the distributions.\n* *shape* (`Int` or `Array(Int)`)\n  Shape to be sampled from each random distribution.\n* *dtype* (`::Symbol`, default = `:float32`)\n  The data type of the output in case this can’t be inferred.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Draws concurrent samples from normal (Gaussian) distributions.</p>","abstract":false,"args":[{"name":"mu","doc":null,"default_value":"","external_name":"mu","restriction":"self"},{"name":"sigma","doc":null,"default_value":"","external_name":"sigma","restriction":"self"},{"name":"shape","doc":null,"default_value":"[] of Int32","external_name":"shape","restriction":""}],"args_string":"(mu : <span class=\"k\">self</span>, sigma : <span class=\"k\">self</span>, shape = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Int32</span>, **kwargs)","args_html":"(mu : <span class=\"k\">self</span>, sigma : <span class=\"k\">self</span>, shape = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Int32</span>, **kwargs)","location":null,"def":{"name":"sample_normal","args":[{"name":"mu","doc":null,"default_value":"","external_name":"mu","restriction":"self"},{"name":"sigma","doc":null,"default_value":"","external_name":"sigma","restriction":"self"},{"name":"shape","doc":null,"default_value":"[] of Int32","external_name":"shape","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Internal._sample_normal(**kwargs.merge({mu: mu, sigma: sigma, shape: shape}))"}},{"id":"sample_poisson(lam:self,shape=[]ofInt32,**kwargs)-class-method","html_id":"sample_poisson(lam:self,shape=[]ofInt32,**kwargs)-class-method","name":"sample_poisson","doc":"Draws concurrent samples from Poisson distributions.\n\nSamples are drawn from multiple Poisson distributions with\nparameters `lam` (rate). Samples will always be returned as\na floating point data type.\n\nThe parameters of the distributions are provided as an input\narray. Let `[s]` be the shape of the input array, `n` be the\ndimension of `[s]`, `[t]` be the shape specified as the\nparameter of the operator, and `m` be the dimension of `[t]`.\nThen the output will be a (`n+m`)-dimensional array with shape\n`[s]x[t]`.\n\nFor any valid `n`-dimensional index `i` with respect to the\ninput array, output[i] will be an `m`-dimensional array that\nholds randomly drawn samples from the distribution which is\nparameterized by the input value at index `i`. If the shape\nparameter of the operator is not set, then one sample will be\ndrawn per distribution and the output array has the same shape\nas the input array.\n\nAssume *lam* is an array with the following elements:\n    [1.0, 8.5]\n\nThen:\n    sample_poisson(lam)             # => [0.0, 13.0]\n    sample_poisson(lam, shape: [2]) # => [[0.0, 4.0], [13.0, 8.0]]\n\n### Parameters\n* *lam* (`Symbol`)\n  Lambda parameters (rates) of the Poisson distributions.\n* *shape* (`Int` or `Array(Int)`)\n  Shape to be sampled from each random distribution.\n* *dtype* (`::Symbol`, default = `:float32`)\n  The data type of the output in case this can’t be inferred.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Draws concurrent samples from Poisson distributions.</p>","abstract":false,"args":[{"name":"lam","doc":null,"default_value":"","external_name":"lam","restriction":"self"},{"name":"shape","doc":null,"default_value":"[] of Int32","external_name":"shape","restriction":""}],"args_string":"(lam : <span class=\"k\">self</span>, shape = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Int32</span>, **kwargs)","args_html":"(lam : <span class=\"k\">self</span>, shape = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Int32</span>, **kwargs)","location":null,"def":{"name":"sample_poisson","args":[{"name":"lam","doc":null,"default_value":"","external_name":"lam","restriction":"self"},{"name":"shape","doc":null,"default_value":"[] of Int32","external_name":"shape","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Internal._sample_poisson(**kwargs.merge({lam: lam, shape: shape}))"}},{"id":"sample_uniform(low:self,high:self,shape=[]ofInt32,**kwargs)-class-method","html_id":"sample_uniform(low:self,high:self,shape=[]ofInt32,**kwargs)-class-method","name":"sample_uniform","doc":"Draws concurrent samples from uniform distributions.\n\nSamples are drawn from multiple uniform distributions on the\nintervals given by `[low, high)`.\n\nThe parameters of the distributions are provided as input\narrays. Let `[s]` be the shape of the input arrays, `n` be the\ndimension of `[s]`, `[t]` be the shape specified as the\nparameter of the operator, and `m` be the dimension of `[t]`.\nThen the output will be a (`n+m`)-dimensional array with shape\n`[s]x[t]`.\n\nFor any valid `n`-dimensional index `i` with respect to the\ninput arrays, `output[i]` will be an `m`-dimensional array\nthat holds randomly drawn samples from the distribution which\nis parameterized by the input values at index `i`. If the\nshape parameter of the operator is not set, then one sample\nwill be drawn per distribution and the output array has the\nsame shape as the input arrays.\n\nAssume *low* and *high* are arrays with the following elements:\n    [0.0, 2.5] # low\n    [1.0, 3.7] # high\n\nThen:\n    sample_uniform(low, high)             # => [0.40451524, 3.18687344]\n    sample_uniform(low, high, shape: [2]) # => [[0.40451524, 0.18017688], [3.18687344, 3.68352246]]\n\n### Parameters\n* *low* (`Symbol`)\n  Lower bounds of the distributions.\n* *high* (`Symbol`)\n  Upper bounds of the distributions.\n* *shape* (`Int` or `Array(Int)`)\n  Shape to be sampled from each random distribution.\n* *dtype* (`::Symbol`, default = `:float32`)\n  The data type of the output in case this can’t be inferred.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Draws concurrent samples from uniform distributions.</p>","abstract":false,"args":[{"name":"low","doc":null,"default_value":"","external_name":"low","restriction":"self"},{"name":"high","doc":null,"default_value":"","external_name":"high","restriction":"self"},{"name":"shape","doc":null,"default_value":"[] of Int32","external_name":"shape","restriction":""}],"args_string":"(low : <span class=\"k\">self</span>, high : <span class=\"k\">self</span>, shape = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Int32</span>, **kwargs)","args_html":"(low : <span class=\"k\">self</span>, high : <span class=\"k\">self</span>, shape = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Int32</span>, **kwargs)","location":null,"def":{"name":"sample_uniform","args":[{"name":"low","doc":null,"default_value":"","external_name":"low","restriction":"self"},{"name":"high","doc":null,"default_value":"","external_name":"high","restriction":"self"},{"name":"shape","doc":null,"default_value":"[] of Int32","external_name":"shape","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Internal._sample_uniform(**kwargs.merge({low: low, high: high, shape: shape}))"}},{"id":"save(fname,symbol)-class-method","html_id":"save(fname,symbol)-class-method","name":"save","doc":"Saves symbol to a JSON file.\n\n### Parameters\n* *fname* (`String`)\n  The name of the file.\n* *symbol* (`MXNet::Symbol`)\n  Symbol to save.\n","summary":"<p>Saves symbol to a JSON file.</p>","abstract":false,"args":[{"name":"fname","doc":null,"default_value":"","external_name":"fname","restriction":""},{"name":"symbol","doc":null,"default_value":"","external_name":"symbol","restriction":""}],"args_string":"(fname, symbol)","args_html":"(fname, symbol)","location":{"filename":"src/mxnet/symbol.cr","line_number":547,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/symbol.cr#L547"},"def":{"name":"save","args":[{"name":"fname","doc":null,"default_value":"","external_name":"fname","restriction":""},{"name":"symbol","doc":null,"default_value":"","external_name":"symbol","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Internal.libcall(MXSymbolSaveToFile, symbol.handle, fname)"}},{"id":"sgd_mom_update(weight:self,grad:self,mom:self,lr:Float,**kwargs)-class-method","html_id":"sgd_mom_update(weight:self,grad:self,mom:self,lr:Float,**kwargs)-class-method","name":"sgd_mom_update","doc":"Momentum update function for Stochastic Gradient Descent (SGD)\noptimizer.\n\nMomentum update has better convergence rates on neural\nnetworks.\n\n### Parameters:\n* *weight* (`Symbol`, required)\n  Weights.\n* *grad* (`Symbol`, required)\n  Gradients.\n* *mom* (`Symbol`, required)\n  Momentum.\n* *lr* (`Float`, required)\n  Learning rate.\n* *momentum* (`Float`, optional, default = 0)\n  The decay rate of momentum estimates at each epoch.\n* *wd* (`Float`, optional, default = 0)\n  Weight decay augments the objective function with a\n  regularization term that penalizes large weights. The\n  penalty scales with the square of the magnitude of each\n  weight.\n* *rescale_grad* (`Float`, optional, default = 1.0)\n  Rescale gradient to `grad = rescale_grad * grad`.\n* *clip_gradient* (`Float`, optional, default = -1.0)\n  Clip gradient to the range of *[-clip_gradient,\n  clip_gradient]*. If `clip_gradient <= 0`, gradient clipping\n  is turned off.\n* *lazy_update* (`Bool`, optional, default = true)\n  If true, lazy updates are applied if gradient's stype is\n  row_sparse.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Momentum update function for Stochastic Gradient Descent (SGD) optimizer.</p>","abstract":false,"args":[{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"self"},{"name":"grad","doc":null,"default_value":"","external_name":"grad","restriction":"self"},{"name":"mom","doc":null,"default_value":"","external_name":"mom","restriction":"self"},{"name":"lr","doc":null,"default_value":"","external_name":"lr","restriction":"Float"}],"args_string":"(weight : <span class=\"k\">self</span>, grad : <span class=\"k\">self</span>, mom : <span class=\"k\">self</span>, lr : Float, **kwargs)","args_html":"(weight : <span class=\"k\">self</span>, grad : <span class=\"k\">self</span>, mom : <span class=\"k\">self</span>, lr : Float, **kwargs)","location":null,"def":{"name":"sgd_mom_update","args":[{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"self"},{"name":"grad","doc":null,"default_value":"","external_name":"grad","restriction":"self"},{"name":"mom","doc":null,"default_value":"","external_name":"mom","restriction":"self"},{"name":"lr","doc":null,"default_value":"","external_name":"lr","restriction":"Float"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._sgd_mom_update(weight, grad, mom, **kwargs.merge({lr: lr}))"}},{"id":"sgd_update(weight:self,grad:self,lr:Float,**kwargs)-class-method","html_id":"sgd_update(weight:self,grad:self,lr:Float,**kwargs)-class-method","name":"sgd_update","doc":"Update function for Stochastic Gradient Descent (SGD)\noptimizer.\n\nSGD updates the weights using:\n    weight = weight - learning_rate * (gradient + wd * weight)\n\n### Parameters\n* *weight* (`Symbol`, required)\n  Weights.\n* *grad* (`Symbol`, required)\n  Gradients.\n* *lr* (`Float`, required)\n  Learning rate.\n* *wd* (`Float`, optional, default = 0)\n  Weight decay augments the objective function with a\n  regularization term that penalizes large weights. The\n  penalty scales with the square of the magnitude of each\n  weight.\n* *rescale_grad* (`Float`, optional, default = 1.0)\n  Rescale gradient to `grad = rescale_grad * grad`.\n* *clip_gradient* (`Float`, optional, default = -1.0)\n  Clip gradient to the range of *[-clip_gradient,\n  clip_gradient]*. If `clip_gradient <= 0`, gradient clipping\n  is turned off.\n* *lazy_update* (`Bool`, optional, default = true)\n  If true, lazy updates are applied if gradient's stype is\n  row_sparse.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Update function for Stochastic Gradient Descent (SGD) optimizer.</p>","abstract":false,"args":[{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"self"},{"name":"grad","doc":null,"default_value":"","external_name":"grad","restriction":"self"},{"name":"lr","doc":null,"default_value":"","external_name":"lr","restriction":"Float"}],"args_string":"(weight : <span class=\"k\">self</span>, grad : <span class=\"k\">self</span>, lr : Float, **kwargs)","args_html":"(weight : <span class=\"k\">self</span>, grad : <span class=\"k\">self</span>, lr : Float, **kwargs)","location":null,"def":{"name":"sgd_update","args":[{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"self"},{"name":"grad","doc":null,"default_value":"","external_name":"grad","restriction":"self"},{"name":"lr","doc":null,"default_value":"","external_name":"lr","restriction":"Float"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._sgd_update(weight, grad, **kwargs.merge({lr: lr}))"}},{"id":"shape_array(data,**kwargs)-class-method","html_id":"shape_array(data,**kwargs)-class-method","name":"shape_array","doc":"Returns a 1-D array containing the shape of the data.\n\nAssume *x* is an array with the following elements:\n    [[1, 2, 3, 4], [5, 6, 7, 8]]\n\nThen:\n    shape_array(x) = [2, 4]\n\n### Parameters:\n* *data* (`Symbol`, required)\n  Input data.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Returns a 1-D array containing the shape of the data.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"shape_array","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._shape_array(data, **kwargs)"}},{"id":"shuffle(data,**kwargs)-class-method","html_id":"shuffle(data,**kwargs)-class-method","name":"shuffle","doc":"Randomly shuffles the elements.\n\nShuffles the array along the first axis. The order of the\nelements in each subarray does not change. For example, if a\n2-D array is given, the order of the rows randomly changes,\nbut the order of the elements in each row does not change.\n\n### Parameters\n* *data* (`Symbol`, required)\n  Input data.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Randomly shuffles the elements.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"shuffle","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._shuffle(data, **kwargs)"}},{"id":"sigmoid(data,**kwargs)-class-method","html_id":"sigmoid(data,**kwargs)-class-method","name":"sigmoid","doc":"Computes the sigmoid activation.\n\n_y=1/(1+exp(−x))_\n\n### Parameters\n* *data* (`Symbol`, required)\n  Input data.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Computes the sigmoid activation.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"sigmoid","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._sigmoid(data, **kwargs)"}},{"id":"sign(data,**kwargs)-class-method","html_id":"sign(data,**kwargs)-class-method","name":"sign","doc":"Returns the element-wise sign of the input.\n\nAssume *x* is an array with the following elements:\n    [-2, 0, 3]\n\nThen:\n    sign(x) # => [-1, 0, 1]\n\n### Parameters\n* *data* (`Symbol`, required)\n  Input data.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Returns the element-wise sign of the input.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"sign","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._sign(data, **kwargs)"}},{"id":"sin(data,**kwargs)-class-method","html_id":"sin(data,**kwargs)-class-method","name":"sin","doc":"Computes the element-wise sine of the input array.\n\nThe input should be in radians (`2\\𝜋` radians equals 360 degrees).\n\n    sin([0, 𝜋/4, 𝜋/2]) = [0, 0.707, 1]\n\n### Parameters\n* *data* (`Symbol`, required)\n  Input data.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Computes the element-wise sine of the input array.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"sin","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._sin(data, **kwargs)"}},{"id":"sinh(data,**kwargs)-class-method","html_id":"sinh(data,**kwargs)-class-method","name":"sinh","doc":"Returns the hyperbolic sine of the input array, computed element-wise.\n\n    sinh(x) = (exp(x) - exp(-x)) / 2\n\n### Parameters\n* *data* (`Symbol`, required)\n  Input data.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Returns the hyperbolic sine of the input array, computed element-wise.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"sinh","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._sinh(data, **kwargs)"}},{"id":"size_array(data,**kwargs)-class-method","html_id":"size_array(data,**kwargs)-class-method","name":"size_array","doc":"Returns a 1-D array containing the size of the data.\n\nAssume *x* is an array with the following elements:\n    [[1, 2, 3, 4], [5, 6, 7, 8]]\n\nThen:\n    size_array(x) = [8]\n\n### Parameters:\n* *data* (`Symbol`, required)\n  Input data.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Returns a 1-D array containing the size of the data.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"size_array","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._size_array(data, **kwargs)"}},{"id":"slice(data,begin_begin,end_end,**kwargs)-class-method","html_id":"slice(data,begin_begin,end_end,**kwargs)-class-method","name":"slice","doc":"Slices a region of the array.\n\nThis function returns a sliced array between the indices given\nby *begin* and *end* with the corresponding *step*.\n\nFor an input array of *shape=[d_0, d_1, ..., d_n-1]*, a slice\noperation with *begin=[b_0, b_1, ..., b_m-1]*, *end=[e_0, e_1,\n..., e_m-1]*, and *step=[s_0, s_1, ..., s_m-1]*, where *m <= n*,\nresults in an array with the shape *(|e_0-b_0|/|s_0|, ...,\n|e_m-1-b_m-1|/|s_m-1|, d_m, ..., d_n-1)*.\n\nThe resulting array's _k_-th dimension contains elements from\nthe _k_-th dimension of the input array starting from index\n*b_k* (inclusive) with step *s_k* until reaching *e_k*\n(exclusive).\n\nIf the _k_-th elements are `nil` in the sequence of *begin*,\n*end*, and *step*, the following rule will be used to set\ndefault values: if `s_k` is `nil`, set `s_k = 1`. If `s_k > 0`,\nset `b_k = 0`, `e_k = d_k`, else set `b_k = d_k-1`, `e_k = -1`.\n\n### Parameters\n* *data* (`Symbol`, required)\n  Input data.\n* *begin* (`Array(Int)`, required)\n  Beginning indices for the slice operation, supports negative\n  indices.\n* *end* (`Array(Int)`, required)\n  Ending indices for the slice operation, supports negative\n  indices.\n* *step* (`Array(Int)`, optional)\n  Step for the slice operation, supports negative values.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Slices a region of the array.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""},{"name":"_begin","doc":null,"default_value":"","external_name":"begin","restriction":""},{"name":"_end","doc":null,"default_value":"","external_name":"end","restriction":""}],"args_string":"(data, begin _begin, end _end, **kwargs)","args_html":"(data, begin _begin, end _end, **kwargs)","location":null,"def":{"name":"slice","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""},{"name":"_begin","doc":null,"default_value":"","external_name":"begin","restriction":""},{"name":"_end","doc":null,"default_value":"","external_name":"end","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._slice(data, _begin, _end, **kwargs)"}},{"id":"slice_axis(data,axis,begin_begin,end_end,**kwargs)-class-method","html_id":"slice_axis(data,axis,begin_begin,end_end,**kwargs)-class-method","name":"slice_axis","doc":"Slices along a given axis.\n\nReturns an array slice along a given *axis* starting from the\n*begin* index to the *end* index.\n\nAssume *x* is an array with the following elements:\n    [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]\n\nThen:\n    slice_axis(x, axis: 1, begin: 0, end: 2) # => [[1, 2], [5, 6], [9, 10]]\n\n### Parameters\n* *data* (`Symbol`, required)\n  Input data.\n* *axis* (`Int`, required)\n  Axis along which to slice. Supports negative indexes.\n* *begin* (`Int`, required)\n  The beginning index along the axis to be sliced. Supports\n  negative indexes.\n* *end* (`Int` or `nil`, required)\n  The ending index along the axis to be sliced. Supports\n  negative indexes.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Slices along a given axis.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""},{"name":"axis","doc":null,"default_value":"","external_name":"axis","restriction":""},{"name":"_begin","doc":null,"default_value":"","external_name":"begin","restriction":""},{"name":"_end","doc":null,"default_value":"","external_name":"end","restriction":""}],"args_string":"(data, axis, begin _begin, end _end, **kwargs)","args_html":"(data, axis, begin _begin, end _end, **kwargs)","location":null,"def":{"name":"slice_axis","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""},{"name":"axis","doc":null,"default_value":"","external_name":"axis","restriction":""},{"name":"_begin","doc":null,"default_value":"","external_name":"begin","restriction":""},{"name":"_end","doc":null,"default_value":"","external_name":"end","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._slice_axis(data, axis, _begin, _end, **kwargs)"}},{"id":"slice_like(data,shape_like,**kwargs)-class-method","html_id":"slice_like(data,shape_like,**kwargs)-class-method","name":"slice_like","doc":"Slices like the shape of another array.\n\nThis function is similar to `.slice`, however, the *begin*\nvalues are always `0` and the *end* values of specific axes\nare inferred from the second input *shape_like*.\n\nGiven a value of *shape_like* of *shape=[d_0, d_1, ..., d_n-1]*\nand default empty *axes*, `.slice_like` performs the following\noperation:\n\n    out = slice(input, begin: [0, 0, ..., 0], end: [d_0, d_1, ..., d_n-1])\n\nWhen *axes* is present, it is used to specify which axes are\nbeing sliced.\n\nIt is allowed to have first and second inputs with different\ndimensions, however, you have to make sure *axes* are\nspecified and do not exceed the dimension limits.\n\nFor example, given an input *a* with *shape=[2, 3, 4, 5]* and\nan input *b* with *shape=[1, 2, 3]*, the following is not\nallowed because the number of dimensions of *a* is 4 and the\nnumber of dimension of *b* is 3:\n\n    out = slice_like(a, b)\n\nThe following is allowed in this situation:\n\n    out = slice_like(a, b, axes: [0, 2])\n\nAssume *x* and *y* are arrays with the following elements:\n    [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]] # x\n    [[0, 0, 0], [0, 0, 0]]                        # y\n\n    slice_like(x, y) = [[1, 2, 3], [5, 6, 7]]\n    slice_like(x, y, axes: [0, 1]) = [[1, 2, 3], [5, 6, 7]]\n    slice_like(x, y, axes: [0]) = [[1, 2, 3, 4], [5, 6, 7, 8]]\n    slice_like(x, y, axes: [-1]) = [[1, 2, 3], [5, 6, 7], [9, 10, 11]]\n\n### Parameters\n* *data* (`Symbol`, required)\n  Input data.\n* *shape_like* (`Symbol`)\n  Input to shape like.\n* *axes* (`Int` or `Array(Int)`)\n  List of axes on which input data will be sliced according to\n  the corresponding size of the second input. By default it\n  will slice on all axes. Negative axes are supported.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Slices like the shape of another array.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""},{"name":"shape_like","doc":null,"default_value":"","external_name":"shape_like","restriction":""}],"args_string":"(data, shape_like, **kwargs)","args_html":"(data, shape_like, **kwargs)","location":null,"def":{"name":"slice_like","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""},{"name":"shape_like","doc":null,"default_value":"","external_name":"shape_like","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._slice_like(data, shape_like, **kwargs)"}},{"id":"softmax(data,**kwargs)-class-method","html_id":"softmax(data,**kwargs)-class-method","name":"softmax","doc":"Applies the softmax function.\n\nThe resulting array contains elements in the range *(0, 1)*\nand the elements along the given axis sum up to 1.\n\nAssume *x* is an array with the following elements:\n    [[1.0, 1.0, 1.0], [1.0, 1.0, 1.0]]\n\nThen:\n    softmax(x, axis: 0) # => [[0.5, 0.5, 0.5], [0.5, 0.5, 0.5]]\n    softmax(x, axis: 1) # => [[0.3334, 0.3334, 0.3334], [0.3334, 0.3334, 0.3334]]\n\n### Parameters\n* *data* (`Symbol`, required)\n  Input data.\n* *axis* (`Int`, optional, default = -1)\n  The axis along which to compute softmax.\n* *temperature* (`Float`, optional, default = 1.0)\n  Temperature parameter in softmax.\n* *dtype* (`::Symbol`, `:float16`, `:float32` or `:float64`, optional)\n  Type of the output in case this can't be inferred. Defaults\n  to the same type as the input if not defined.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Applies the softmax function.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"softmax","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._softmax(data, **kwargs)"}},{"id":"sort(data,**kwargs)-class-method","html_id":"sort(data,**kwargs)-class-method","name":"sort","doc":"Returns a sorted copy of an input array along the given axis.\n\nAssume *x* is an array with the following elements:\n    [[1, 4], [3, 1]]\n\nThen:\n    sort(x) = [[1, 4], [1, 3]]\n    sort(x, axis: 0) = [[1, 1], [3, 4]]\n    sort(x, axis: None) = [1, 1, 3, 4]\n    sort(x, is_ascend: false) = [[4, 1], [3, 1]]\n\n### Parameters\n* *data* (`Symbol`, required)\n  Input data.\n* *axis* (`Int` or `None`, optional, default = `-1`)\n  The axis along which to choose sort the input tensor. If\n  omitted, the last axis is used. If `None`, the flattened\n  array is used.\n* *is_ascend* (`Bool`, optional, default = false)\n  Whether to sort in ascending or descending order.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Returns a sorted copy of an input array along the given axis.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"sort","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._sort(data, **kwargs)"}},{"id":"sqrt(data,**kwargs)-class-method","html_id":"sqrt(data,**kwargs)-class-method","name":"sqrt","doc":"Returns element-wise square-root value of the input.\n\nAssume *x* is an array with the following elements:\n    [4, 9, 16]\n\nThen:\n    sqrt(x) # => [2, 3, 4]\n\n### Parameters\n* *data* (`Symbol`, required)\n  Input data.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Returns element-wise square-root value of the input.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"sqrt","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._sqrt(data, **kwargs)"}},{"id":"square(data,**kwargs)-class-method","html_id":"square(data,**kwargs)-class-method","name":"square","doc":"Returns element-wise squared value of the input.\n\nAssume *x* is an array with the following elements:\n    [2, 3, 4]\n\nThen:\n    square(x) # => [4, 9, 16]\n\n### Parameters\n* *data* (`Symbol`, required)\n  Input data.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Returns element-wise squared value of the input.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"square","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._square(data, **kwargs)"}},{"id":"subtract(lhs:self|Number,rhs:self|Number)-class-method","html_id":"subtract(lhs:self|Number,rhs:self|Number)-class-method","name":"subtract","doc":"Returns element-wise difference of the input arrays.\n\nBoth inputs can be a `Symbol` or a scalar number. Broadcasting\nis not supported.\n\nEquivalent to `lhs - rhs`.\n\n### Parameters\n* *lhs* (`Symbol` or `Number`)\n  The first value to be subtracted.\n* *rhs* (`Symbol` or `Number`)\n  The second value to be subtracted.\n","summary":"<p>Returns element-wise difference of the input arrays.</p>","abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"self | Number"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self | Number"}],"args_string":"(lhs : <span class=\"k\">self</span> | Number, rhs : <span class=\"k\">self</span> | Number)","args_html":"(lhs : <span class=\"k\">self</span> | <a href=\"../Number.html\">Number</a>, rhs : <span class=\"k\">self</span> | <a href=\"../Number.html\">Number</a>)","location":{"filename":"src/mxnet/symbol.cr","line_number":605,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/symbol.cr#L605"},"def":{"name":"subtract","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"self | Number"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self | Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if lhs.is_a?(self)\n  if rhs.is_a?(self)\n    Internal._minus(lhs, rhs)\n  else\n    Internal._minus_scalar(lhs, scalar: rhs)\n  end\nelse\n  if rhs.is_a?(self)\n    Internal._rminus_scalar(rhs, scalar: lhs)\n  else\n    raise(\"should never happen\")\n  end\nend"}},{"id":"sum(data,**kwargs)-class-method","html_id":"sum(data,**kwargs)-class-method","name":"sum","doc":"Computes the sum of array elements over given axes.\n\nAssume *x* is an array with the following elements:\n    [[[1, 2], [2, 3], [1, 3]],\n     [[1, 4], [4, 3], [5, 2]],\n     [[7, 1], [7, 2], [7, 3]]]\n\nThen:\n    sum(x, axis: 1) # => [[4, 8], [10, 9], [21, 6]]\n    sum(x, axis: [1, 2]) # => [12, 19, 27]\n\n### Parameters\n* *data* (`Symbol`, required)\n  Input data.\n* *axis* (`Int` or `Array(Int)`, optional)\n  The axis or axes along which to perform the\n  reduction. `axis: []` or `axis: nil` will compute over all\n  elements into a scalar array with shape `[1]`. If *axis* is\n  an `Int`, a reduction is performed on a particular axis. If\n  *axis* is an array of `Int`, a reduction is performed on all\n  the axes specified in the array. If *exclude* is true,\n  reduction will be performed on the axes that are **not** in\n  *axis* instead. Negative values means indexing from right to\n  left.\n* *keepdims* (`Bool`, optional, default = false)\n  If this is set to true, the reduced axes are left in the\n  result as dimension with size one.\n* *exclude* (`Bool`, optional, default = false)\n  Whether to perform reduction on axis that are **not** in\n  axis instead.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Computes the sum of array elements over given axes.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"sum","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._sum(data, **kwargs)"}},{"id":"take(a,indices,**kwargs)-class-method","html_id":"take(a,indices,**kwargs)-class-method","name":"take","doc":"Takes elements from an input array along the given axis.\n\nThis function slices the input array along a particular axis\nwith the provided indices.\n\nGiven data tensor of rank *r >= 1*, and indices tensor of rank\n*q*, gather entries of the axis dimension of data (by default\nouter-most one as axis=0) indexed by indices, and concatenate\nthem in an output tensor of rank *q + (r - 1)*.\n\nAssume *x* and *i* are arrays with the following elements:\n    [[1, 2], [3, 4], [5, 6]] # x\n    [[0, 1], [1, 2]]]        # i\n\nThen:\n    # get rows 0 and 1, then 1 and 2, along axis 0\n    take(x, i) # => [[[1, 2], [3, 4]], [[3, 4], [5, 6]]]\n\n### Parameters\n* *a* (`Symbol`, required)\n  The input array.\n* *indices* (`Symbol`, required)\n  The indices of the values to be extracted.\n* *axis* (`Int`, optional, default = 0)\n  The axis of input array to be taken. For input tensor of\n  rank *r*, it could be in the range of *[-r, r-1]*.\n* *mode* (`::Symbol`, `:clip` or `:wrap`, optional, default = :clip)\n  Specify how out-of-bound indices bahave. *:clip* means to\n  clip to the range. If all indices mentioned are too large,\n  they are replaced by the index that addresses the last\n  element along an axis. *:wrap* means to wrap around.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Takes elements from an input array along the given axis.</p>","abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":""},{"name":"indices","doc":null,"default_value":"","external_name":"indices","restriction":""}],"args_string":"(a, indices, **kwargs)","args_html":"(a, indices, **kwargs)","location":null,"def":{"name":"take","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":""},{"name":"indices","doc":null,"default_value":"","external_name":"indices","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._take(a, indices, **kwargs)"}},{"id":"tan(data,**kwargs)-class-method","html_id":"tan(data,**kwargs)-class-method","name":"tan","doc":"Computes the element-wise tangent of the input array.\n\nThe input should be in radians (`2\\𝜋` radians equals 360 degrees).\n\n    tan([0, 𝜋, 𝜋/2]) = [0, 1, -∞)]\n\n### Parameters\n* *data* (`Symbol`, required)\n  Input data.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Computes the element-wise tangent of the input array.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"tan","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._tan(data, **kwargs)"}},{"id":"tanh(data,**kwargs)-class-method","html_id":"tanh(data,**kwargs)-class-method","name":"tanh","doc":"Returns the hyperbolic tangent of the input array, computed element-wise.\n\n    tanh(x) = sinh(x) / cosh(x)\n\n### Parameters\n* *data* (`Symbol`, required)\n  Input data.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Returns the hyperbolic tangent of the input array, computed element-wise.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"tanh","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._tanh(data, **kwargs)"}},{"id":"tile(data,reps,**kwargs)-class-method","html_id":"tile(data,reps,**kwargs)-class-method","name":"tile","doc":"Repeats the array multiple times.\n\nAssume *x* is an array with the following elements:\n    [[1, 2], [3, 4]]\n\nIf *reps* has length *d*, and the input array has a\ncorresponding dimension of *n*. There are three cases:\n\n- **n=d**. Repeat *i*-th dimension of the input *reps[i]* times:\n    tile(x, reps: [2, 3]) = [[1, 2, 1, 2, 1, 2],\n                             [3, 4, 3, 4, 3, 4],\n                             [1, 2, 1, 2, 1, 2],\n                             [3, 4, 3, 4, 3, 4]]\n\n- **n>d**. *reps* is promoted to length *n* by pre-pending\n  1's. For an input shape `[2, 3]`, `reps: [2]` is treated\n  as `[1, 2]`:\n    tile(x, reps: [2]) = [[1, 2, 1, 2],\n                          [3, 4, 3, 4]]\n\n- **n<d**. The input is promoted to be d-dimensional by\n  prepending new axes. A shape `[2, 2]` array is promoted\n  to `[1, 2, 2]` for 3-D replication:\n    tile(x, reps: [2, 2, 3]) = [[[1, 2, 1, 2, 1, 2],\n                                 [3, 4, 3, 4, 3, 4],\n                                 [1, 2, 1, 2, 1, 2],\n                                 [3, 4, 3, 4, 3, 4]],\n                                [[1, 2, 1, 2, 1, 2],\n                                 [3, 4, 3, 4, 3, 4],\n                                 [1, 2, 1, 2, 1, 2],\n                                 [3, 4, 3, 4, 3, 4]]]\n\n### Parameters\n* *data* (`Symbol`, required)\n  Input data.\n* *reps* (`Array(Int)`)\n  The number of times to repeat the input array. Each\n  element of *reps* must be a positive integer.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Repeats the array multiple times.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""},{"name":"reps","doc":null,"default_value":"","external_name":"reps","restriction":""}],"args_string":"(data, reps, **kwargs)","args_html":"(data, reps, **kwargs)","location":null,"def":{"name":"tile","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""},{"name":"reps","doc":null,"default_value":"","external_name":"reps","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._tile(data, reps, **kwargs)"}},{"id":"topk(data,**kwargs)-class-method","html_id":"topk(data,**kwargs)-class-method","name":"topk","doc":"Returns the top *k* elements in an input array along the given\naxis.\n\nExamples::\n\nAssume *x* is an array with the following elements:\n    [[0.3, 0.2, 0.4], [0.1, 0.3, 0.2]]\n\nThen:\n    topk(x) = [[2.0], [1.0]]\n    topk(x, ret_typ: :value, k: 2) = [[0.4, 0.3], [0.3, 0.2]]\n    topk(x, ret_typ: :value, k: 2, is_ascend: true) = [[0.2, 0.3], [0.1, 0.2]]\n    topk(x, axis: 0, k: 2) = [[0.0, 1.0, 0.0], [1.0, 0.0, 1.0]]\n\n### Parameters\n* *data* (`Symbol`, required)\n  Input data.\n* *axis* (`Int` or `None`, optional, default = `-1`)\n  Axis along which to choose the top k indices. If omitted,\n  the last axis is used. If `None`, the flattened array is\n  used.\n* *k* (`Int`, optional, default = `1`)\n  Number of top elements to select. It should be always\n  smaller than or equal to the element number in the given\n  axis.\n* *ret_typ* (`::Symbol`, `:value`, `:indices`, `:mask`, `:both`, optional, default = `:indices`)\n  The return type. `:value` means to return the top *k*\n  values, `:indices` means to return the indices of the top\n  *k* values, `:mask` means to return a mask array containing\n  0 and 1 (1 means the top *k* value). `:both` means to return\n  a list of both values and indices of top *k* elements.\n* *is_ascend* (`Bool`, optional, default = false)\n  Whether to choose *k* largest or *k* smallest elements. Top\n  *k* largest elements will be chosen if set to `false`.\n* *dtype* (`::Symbol`, optional, default = `:float32`)\n  The data type of the output indices when *ret_typ* is\n  `:indices` or `:both`.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Returns the top <em>k</em> elements in an input array along the given axis.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"topk","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._topk(data, **kwargs)"}},{"id":"transpose(data,**kwargs)-class-method","html_id":"transpose(data,**kwargs)-class-method","name":"transpose","doc":"Permutes the dimensions of an array.\n\nAssume *x* and *y* are arrays with the following elements:\n    [[[1, 2], [3, 4], [5, 6], [7, 8]]] # x\n    [[1, 2], [3, 4]]                   # y\n\nThen:\n    transpose(x) # => [[[1], [3], [5], [7]], [[2], [4], [6], [8]]]\n    transpose(x, axes: [1, 0, 2]) # => [[[1, 2]], [[3, 4]], [[5, 6]], [[7, 8]]]\n    transpose(y) # => [[1, 3], [2, 4]]\n\n### Parameters\n* *data* (`Symbol`, required)\n  Input data.\n* *axes* (`Int` or `Array(Int)`, optional)\n  Target axis order. By default the axes will be inverted.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Permutes the dimensions of an array.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"transpose","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._transpose(data, **kwargs)"}},{"id":"trunc(data,**kwargs)-class-method","html_id":"trunc(data,**kwargs)-class-method","name":"trunc","doc":"Return the element-wise truncated value of the input.\n\nThe truncated value of `x` is the nearest integer `i` which is\ncloser to zero than `x` is. In short, the fractional part of\nthe signed number `x` is discarded.\n\nAssume *x* is an array with the following elements:\n    [-2.1, -1.9, 1.5, 1.9, 2.1]\n\nThen:\n    trunc(x) = [-2.0, -1.0, 1.0, 1.0, 2.0]\n\n### Parameters\n* *data* (`Symbol`, required)\n  Input data.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Return the element-wise truncated value of the input.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"trunc","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._trunc(data, **kwargs)"}},{"id":"var(name:String,attr=nil,shape=nil,dtype=nil)-class-method","html_id":"var(name:String,attr=nil,shape=nil,dtype=nil)-class-method","name":"var","doc":"Creates a symbolic variable with the specified name.\n\n### Parameters\n* *name* (`String`)\n  Variable name.\n* *attr* (`Enumerable`)\n  Additional attributes to set on the variable.\n* *shape* (`Array(Int)`)\n  The shape of a variable. If specified, it may be used during\n  the shape inference.\n* *dtype* (`::Symbol`)\n  The dtype for input variable. If not specified, this value\n  will be inferred.\n","summary":"<p>Creates a symbolic variable with the specified name.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"attr","doc":null,"default_value":"nil","external_name":"attr","restriction":""},{"name":"shape","doc":null,"default_value":"nil","external_name":"shape","restriction":""},{"name":"dtype","doc":null,"default_value":"nil","external_name":"dtype","restriction":""}],"args_string":"(name : String, attr = <span class=\"n\">nil</span>, shape = <span class=\"n\">nil</span>, dtype = <span class=\"n\">nil</span>)","args_html":"(name : String, attr = <span class=\"n\">nil</span>, shape = <span class=\"n\">nil</span>, dtype = <span class=\"n\">nil</span>)","location":{"filename":"src/mxnet/symbol.cr","line_number":1130,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/symbol.cr#L1130"},"def":{"name":"var","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"attr","doc":null,"default_value":"nil","external_name":"attr","restriction":""},{"name":"shape","doc":null,"default_value":"nil","external_name":"shape","restriction":""},{"name":"dtype","doc":null,"default_value":"nil","external_name":"dtype","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Internal.libcall(MXSymbolCreateVariable, name, out handle)\n(new(handle)).tap do |ret|\n  attr || (attr = {} of ::Symbol => String)\n  if shape\n    attr[:__shape__] = shape.to_s\n  end\n  if dtype\n    attr[:__dtype__] = T2DT[dtype].to_s\n  end\n  ret.set_attr(attr)\nend\n"}},{"id":"where(condition,x,y,**kwargs)-class-method","html_id":"where(condition,x,y,**kwargs)-class-method","name":"where","doc":"Returns elements, either from *x* or *y*, depending on the\n*condition*.\n\nGiven three arrays, *condition*, *x* and *y*, return an array\nwith the elements from *x* or *y*, depending on whether the\nelements from *condition* are true or false. *x* and *y* must\nhave the same shape.\n\nIf *condition* has the same shape as *x*, each element in the\noutput array is from *x* if the corresponding element in\n*condition* is true and from *y* if false.\n\nIf *condition* does not have the same shape as *x*, it must be\na 1-D array whose size is the same as the size of the first\ndimension of *x*. Each row of the output array is from *x* if\nthe corresponding element from *condition* is true and from\n*y* if false.\n\nNote: all non-zero values are interpreted as `true` in\n*condition*.\n\nAssume *x*, *y* and *condition* are arrays with the following\nelements:\n    [[1, 2], [3, 4]]  # x\n    [[5, 6], [7, 8]]  # y\n    [[0, 1], [-1, 0]] # condition\n\nThen:\n    where(condition, x, y) = [[5, 2], [3, 8]]\n\n### Parameters\n* *condition* ((`Symbol`, required))\n  The condition array.\n* *x* ((`Symbol`, required))\n  The first input.\n* *y* ((`Symbol`, required))\n  The second input.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Returns elements, either from <em>x</em> or <em>y</em>, depending on the <em>condition</em>.</p>","abstract":false,"args":[{"name":"condition","doc":null,"default_value":"","external_name":"condition","restriction":""},{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":""},{"name":"y","doc":null,"default_value":"","external_name":"y","restriction":""}],"args_string":"(condition, x, y, **kwargs)","args_html":"(condition, x, y, **kwargs)","location":null,"def":{"name":"where","args":[{"name":"condition","doc":null,"default_value":"","external_name":"condition","restriction":""},{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":""},{"name":"y","doc":null,"default_value":"","external_name":"y","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._where(condition, x, y, **kwargs)"}},{"id":"zeros(shape:Int|Array(Int),ctx=Context.current,**kwargs)-class-method","html_id":"zeros(shape:Int|Array(Int),ctx=Context.current,**kwargs)-class-method","name":"zeros","doc":"Returns an array filled with all zeros, with the given shape.\n\n### Parameters\n* *data* (`Symbol`, required)\n  Input data.\n* *shape* (`Int` or `Array(Int)`)\n  The shape of the array.\n* *dtype* (`::Symbol`, default = `:float32`)\n  The data type of the output array.\n* *ctx* (`Context`, optional)\n  Device context (default is the current context). Only used\n  for imperative calls.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Returns an array filled with all zeros, with the given shape.</p>","abstract":false,"args":[{"name":"shape","doc":null,"default_value":"","external_name":"shape","restriction":"Int | Array(Int)"},{"name":"ctx","doc":null,"default_value":"Context.current","external_name":"ctx","restriction":""}],"args_string":"(shape : Int | Array(Int), ctx = <span class=\"t\">Context</span>.current, **kwargs)","args_html":"(shape : Int | Array(Int), ctx = <span class=\"t\">Context</span>.current, **kwargs)","location":null,"def":{"name":"zeros","args":[{"name":"shape","doc":null,"default_value":"","external_name":"shape","restriction":"Int | Array(Int)"},{"name":"ctx","doc":null,"default_value":"Context.current","external_name":"ctx","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Internal._zeros(**kwargs.merge({shape: shape, ctx: ctx}))"}},{"id":"zeros_like(data,**kwargs)-class-method","html_id":"zeros_like(data,**kwargs)-class-method","name":"zeros_like","doc":"Returns an array of zeros with the same shape, data type and\nstorage type as the input array.\n\nAssume *x* is an array with the following elements:\n    [[1.0, 1.0, 1.0], [1.0, 1.0, 1.0]]\n\nThen:\n    zeros_like(x) # => [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]\n\n### Parameters\n* *data* (`Symbol`, required)\n  Input data.\n* *name* (`String`, optional)\n  Name of the symbol.\n","summary":"<p>Returns an array of zeros with the same shape, data type and storage type as the input array.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data, **kwargs)","args_html":"(data, **kwargs)","location":null,"def":{"name":"zeros_like","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Ops._zeros_like(data, **kwargs)"}}],"constructors":[],"instance_methods":[{"id":"!=(other)-instance-method","html_id":"!=(other)-instance-method","name":"!=","doc":"Performs element-wise not equal to (`!=`) comparison operation\n(without broadcasting).","summary":"<p>Performs element-wise not equal to (<code><a href=\"../MXNet/Symbol.html#!=(other)-instance-method\">#!=</a></code>) comparison operation (without broadcasting).</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":""}],"args_string":"(other)","args_html":"(other)","location":{"filename":"src/mxnet/symbol.cr","line_number":1025,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/symbol.cr#L1025"},"def":{"name":"!=","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.class.not_equal(self, other)"}},{"id":"%(other)-instance-method","html_id":"%(other)-instance-method","name":"%","doc":"Performs element-wise modulo (without broadcasting).","summary":"<p>Performs element-wise modulo (without broadcasting).</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":""}],"args_string":"(other)","args_html":"(other)","location":{"filename":"src/mxnet/symbol.cr","line_number":1006,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/symbol.cr#L1006"},"def":{"name":"%","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.class.modulo(self, other)"}},{"id":"&(other)-instance-method","html_id":"&(other)-instance-method","name":"&","doc":"Performs element-wise logical and (`&`) comparison operation\n(without broadcasting).","summary":"<p>Performs element-wise logical and (<code><a href=\"../MXNet/Symbol.html#&(other)-instance-method\">#&</a></code>) comparison operation (without broadcasting).</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":""}],"args_string":"(other)","args_html":"(other)","location":{"filename":"src/mxnet/symbol.cr","line_number":1055,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/symbol.cr#L1055"},"def":{"name":"&","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.class.logical_and(self, other)"}},{"id":"*(other)-instance-method","html_id":"*(other)-instance-method","name":"*","doc":"Performs element-wise multiplication (without broadcasting).","summary":"<p>Performs element-wise multiplication (without broadcasting).</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":""}],"args_string":"(other)","args_html":"(other)","location":{"filename":"src/mxnet/symbol.cr","line_number":996,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/symbol.cr#L996"},"def":{"name":"*","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.class.multiply(self, other)"}},{"id":"**(other)-instance-method","html_id":"**(other)-instance-method","name":"**","doc":"Returns the result of the first array elements raised to powers\nfrom the second array (or scalar), element-wise (without\nbroadcasting).","summary":"<p>Returns the result of the first array elements raised to powers from the second array (or scalar), element-wise (without broadcasting).</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":""}],"args_string":"(other)","args_html":"(other)","location":{"filename":"src/mxnet/symbol.cr","line_number":1013,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/symbol.cr#L1013"},"def":{"name":"**","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.class.power(self, other)"}},{"id":"+(other)-instance-method","html_id":"+(other)-instance-method","name":"+","doc":"Performs element-wise addition (without broadcasting).","summary":"<p>Performs element-wise addition (without broadcasting).</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":""}],"args_string":"(other)","args_html":"(other)","location":{"filename":"src/mxnet/symbol.cr","line_number":986,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/symbol.cr#L986"},"def":{"name":"+","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.class.add(self, other)"}},{"id":"+-instance-method","html_id":"+-instance-method","name":"+","doc":"Leaves the values unchanged.","summary":"<p>Leaves the values unchanged.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/mxnet/symbol.cr","line_number":1077,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/symbol.cr#L1077"},"def":{"name":"+","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self"}},{"id":"-(other)-instance-method","html_id":"-(other)-instance-method","name":"-","doc":"Performs element-wise subtraction (without broadcasting).","summary":"<p>Performs element-wise subtraction (without broadcasting).</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":""}],"args_string":"(other)","args_html":"(other)","location":{"filename":"src/mxnet/symbol.cr","line_number":991,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/symbol.cr#L991"},"def":{"name":"-","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.class.subtract(self, other)"}},{"id":"--instance-method","html_id":"--instance-method","name":"-","doc":"Performs element-wise numerical negative.","summary":"<p>Performs element-wise numerical negative.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/mxnet/symbol.cr","line_number":1072,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/symbol.cr#L1072"},"def":{"name":"-","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Symbol::Internal._mul_scalar(self, scalar: -1)"}},{"id":"/(other)-instance-method","html_id":"/(other)-instance-method","name":"/","doc":"Performs element-wise division (without broadcasting).","summary":"<p>Performs element-wise division (without broadcasting).</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":""}],"args_string":"(other)","args_html":"(other)","location":{"filename":"src/mxnet/symbol.cr","line_number":1001,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/symbol.cr#L1001"},"def":{"name":"/","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.class.divide(self, other)"}},{"id":"<(other)-instance-method","html_id":"<(other)-instance-method","name":"<","doc":"Performs element-wise less than (`<`) comparison operation\n(without broadcasting).","summary":"<p>Performs element-wise less than (<code><a href=\"../MXNet/Symbol.html#%3C(other)-instance-method\">#<</a></code>) comparison operation (without broadcasting).</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":""}],"args_string":"(other)","args_html":"(other)","location":{"filename":"src/mxnet/symbol.cr","line_number":1043,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/symbol.cr#L1043"},"def":{"name":"<","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.class.lesser(self, other)"}},{"id":"<=(other)-instance-method","html_id":"<=(other)-instance-method","name":"<=","doc":"Performs element-wise less than or equal to (`<=`) comparison\noperation (without broadcasting).","summary":"<p>Performs element-wise less than or equal to (<code><a href=\"../MXNet/Symbol.html#%3C=(other)-instance-method\">#<=</a></code>) comparison operation (without broadcasting).</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":""}],"args_string":"(other)","args_html":"(other)","location":{"filename":"src/mxnet/symbol.cr","line_number":1049,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/symbol.cr#L1049"},"def":{"name":"<=","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.class.lesser_equal(self, other)"}},{"id":"==(other)-instance-method","html_id":"==(other)-instance-method","name":"==","doc":"Performs element-wise equal to (`==`) comparison operation\n(without broadcasting).","summary":"<p>Performs element-wise equal to (<code><a href=\"../MXNet/Symbol.html#==(other)-instance-method\">#==</a></code>) comparison operation (without broadcasting).</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":""}],"args_string":"(other)","args_html":"(other)","location":{"filename":"src/mxnet/symbol.cr","line_number":1019,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/symbol.cr#L1019"},"def":{"name":"==","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.class.equal(self, other)"}},{"id":">(other)-instance-method","html_id":">(other)-instance-method","name":">","doc":"Performs element-wise greater than (`>`) comparison operation\n(without broadcasting).","summary":"<p>Performs element-wise greater than (<code><a href=\"../MXNet/Symbol.html#%3E(other)-instance-method\">#></a></code>) comparison operation (without broadcasting).</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":""}],"args_string":"(other)","args_html":"(other)","location":{"filename":"src/mxnet/symbol.cr","line_number":1031,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/symbol.cr#L1031"},"def":{"name":">","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.class.greater(self, other)"}},{"id":">=(other)-instance-method","html_id":">=(other)-instance-method","name":">=","doc":"Performs element-wise greater than or equal to (`>=`) comparison\noperation (without broadcasting).","summary":"<p>Performs element-wise greater than or equal to (<code><a href=\"../MXNet/Symbol.html#%3E=(other)-instance-method\">#>=</a></code>) comparison operation (without broadcasting).</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":""}],"args_string":"(other)","args_html":"(other)","location":{"filename":"src/mxnet/symbol.cr","line_number":1037,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/symbol.cr#L1037"},"def":{"name":">=","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.class.greater_equal(self, other)"}},{"id":"^(other)-instance-method","html_id":"^(other)-instance-method","name":"^","doc":"Performs element-wise logical xor (`^`) comparison operation\n(without broadcasting).","summary":"<p>Performs element-wise logical xor (<code><a href=\"../MXNet/Symbol.html#%5E(other)-instance-method\">#^</a></code>) comparison operation (without broadcasting).</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":""}],"args_string":"(other)","args_html":"(other)","location":{"filename":"src/mxnet/symbol.cr","line_number":1067,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/symbol.cr#L1067"},"def":{"name":"^","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.class.logical_xor(self, other)"}},{"id":"abs(**kwargs)-instance-method","html_id":"abs(**kwargs)-instance-method","name":"abs","doc":"Convenience fluent method for `.abs`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/Symbol.html#abs(data,**kwargs)-class-method\">.abs</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"abs","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.abs(self, **kwargs)"}},{"id":"arccos(**kwargs)-instance-method","html_id":"arccos(**kwargs)-instance-method","name":"arccos","doc":"Convenience fluent method for `.arccos`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/Symbol.html#arccos(data,**kwargs)-class-method\">.arccos</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"arccos","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.arccos(self, **kwargs)"}},{"id":"arccosh(**kwargs)-instance-method","html_id":"arccosh(**kwargs)-instance-method","name":"arccosh","doc":"Convenience fluent method for `.arccosh`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/Symbol.html#arccosh(data,**kwargs)-class-method\">.arccosh</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"arccosh","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.arccosh(self, **kwargs)"}},{"id":"arcsin(**kwargs)-instance-method","html_id":"arcsin(**kwargs)-instance-method","name":"arcsin","doc":"Convenience fluent method for `.arcsin`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/Symbol.html#arcsin(data,**kwargs)-class-method\">.arcsin</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"arcsin","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.arcsin(self, **kwargs)"}},{"id":"arcsinh(**kwargs)-instance-method","html_id":"arcsinh(**kwargs)-instance-method","name":"arcsinh","doc":"Convenience fluent method for `.arcsinh`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/Symbol.html#arcsinh(data,**kwargs)-class-method\">.arcsinh</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"arcsinh","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.arcsinh(self, **kwargs)"}},{"id":"arctan(**kwargs)-instance-method","html_id":"arctan(**kwargs)-instance-method","name":"arctan","doc":"Convenience fluent method for `.arctan`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/Symbol.html#arctan(data,**kwargs)-class-method\">.arctan</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"arctan","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.arctan(self, **kwargs)"}},{"id":"arctanh(**kwargs)-instance-method","html_id":"arctanh(**kwargs)-instance-method","name":"arctanh","doc":"Convenience fluent method for `.arctanh`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/Symbol.html#arctanh(data,**kwargs)-class-method\">.arctanh</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"arctanh","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.arctanh(self, **kwargs)"}},{"id":"argmax(**kwargs)-instance-method","html_id":"argmax(**kwargs)-instance-method","name":"argmax","doc":"Convenience fluent method for `.argmax`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/Symbol.html#argmax(data,**kwargs)-class-method\">.argmax</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"argmax","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.argmax(self, **kwargs)"}},{"id":"argmin(**kwargs)-instance-method","html_id":"argmin(**kwargs)-instance-method","name":"argmin","doc":"Convenience fluent method for `.argmin`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/Symbol.html#argmin(data,**kwargs)-class-method\">.argmin</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"argmin","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.argmin(self, **kwargs)"}},{"id":"argsort(**kwargs)-instance-method","html_id":"argsort(**kwargs)-instance-method","name":"argsort","doc":"Convenience fluent method for `.argsort`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/Symbol.html#argsort(data,**kwargs)-class-method\">.argsort</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"argsort","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.argsort(self, **kwargs)"}},{"id":"as_type(dtype:::Symbol)-instance-method","html_id":"as_type(dtype:::Symbol)-instance-method","name":"as_type","doc":"Casts all elements of the input to the specified type.\n\n### Parameters\n* *dtype* (`::Symbol`)\n  The new type.\n","summary":"<p>Casts all elements of the input to the specified type.</p>","abstract":false,"args":[{"name":"dtype","doc":null,"default_value":"","external_name":"dtype","restriction":"::Symbol"}],"args_string":"(dtype : ::Symbol)","args_html":"(dtype : ::Symbol)","location":{"filename":"src/mxnet/symbol.cr","line_number":1087,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/symbol.cr#L1087"},"def":{"name":"as_type","args":[{"name":"dtype","doc":null,"default_value":"","external_name":"dtype","restriction":"::Symbol"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"T2DT[dtype]? || (raise(MXNet::NDArrayException.new(\"type is unsupported: #{dtype}\")))\nOps._cast(self, dtype: dtype)\n"}},{"id":"attr(key)-instance-method","html_id":"attr(key)-instance-method","name":"attr","doc":"Gets the attribute for specified key.\n\nThis function only works for non-grouped symbols.\n\n```\ndata = MXNet::Symbol.var(\"data\", attr: {mood: \"angry\"})\ndata.attr(\"mood\") # => \"angry\"\n```\n\n### Parameters\n* *key* (`String`)\n  The key corresponding to the desired attribute.\n","summary":"<p>Gets the attribute for specified key.</p>","abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":""}],"args_string":"(key)","args_html":"(key)","location":{"filename":"src/mxnet/symbol.cr","line_number":73,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/symbol.cr#L73"},"def":{"name":"attr","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Internal.libcall(MXSymbolGetAttr, @handle, key, out value, out success)\nsuccess != 0 ? String.new(value) : nil\n"}},{"id":"attr_dict-instance-method","html_id":"attr_dict-instance-method","name":"attr_dict","doc":"Recursively gets all attributes from the symbol and its\nchildren.\n\nThere is a key in the returned hash for every child with a\nnon-empty set of attributes. For each symbol, the name of the\nsymbol is its key in the hash and the correspond value is that\nsymbol's attribute list.\n\n```\na = MXNet::Symbol.var(\"a\", attr: {\"a1\" => \"a2\"})\nb = MXNet::Symbol.var(\"b\", attr: {\"b1\" => \"b2\"})\nc = a + b\nc.attr_dict # => {\"a\" => {\"a1\" => \"a2\"}, \"b\" => {\"b1\" => \"b2\"}}\n```\n","summary":"<p>Recursively gets all attributes from the symbol and its children.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/mxnet/symbol.cr","line_number":116,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/symbol.cr#L116"},"def":{"name":"attr_dict","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Internal.libcall(MXSymbolListAttr, @handle, out size, out pairs)\nHash(String, Hash(String, String)).new.tap do |ret|\n  size.times do |i|\n    name, key = (String.new(pairs[i * 2])).split(\"$\")\n    value = String.new(pairs[(i * 2) + 1])\n    __temp_26 = name\n    ret[__temp_26]? || (ret[__temp_26] = Hash(String, String).new)\n    ret[name][key] = value\n  end\nend\n"}},{"id":"bind(args:Array(MXNet::NDArray)|Hash(String,MXNet::NDArray)=[]ofMXNet::NDArray,ctx:Context=MXNet::Context.current)-instance-method","html_id":"bind(args:Array(MXNet::NDArray)|Hash(String,MXNet::NDArray)=[]ofMXNet::NDArray,ctx:Context=MXNet::Context.current)-instance-method","name":"bind","doc":"Binds the current symbol to an executor and returns the executor.\n\nFirst, declare the computation and then bind to the data to\nevaluate.  This function returns an executor which provides an\n`Executor#forward()` method for evaluation.\n\n```\na = MXNet::Symbol.var(\"a\")\nb = MXNet::Symbol.var(\"b\")\nc = a + b # => \"<Symbol broadcast_add>\"\ne = c.bind(args: {\"a\" => MXNet::NDArray.ones([2, 3]), \"b\" => MXNet::NDArray.ones([2, 3])}, ctx: MXNet.cpu)\ne.forward.first # => [[2.0, 2.0, 2.0], [2.0, 2.0, 2.0]]\n                #    <NDArray 2x3 float32 cpu(0)>\n```\n\n### Parameters\n* *args* (`Array(MXNet::NDArray)` or `Hash(String, MXNet::NDArray)`, default `[]`)\n  Input arguments.\n  * If the input type is `Array(MXNet::NDArray)`, the order should be same as the order returned by `#list_arguments`.\n  * If the input type is `Hash(String, MXNet::NDArray)`, the arguments map to those returned by `#list_arguments`.\n* *ctx* (`Context`, default is current context)\n  The device context the executor is to evaluate on.\n","summary":"<p>Binds the current symbol to an executor and returns the executor.</p>","abstract":false,"args":[{"name":"args","doc":null,"default_value":"[] of MXNet::NDArray","external_name":"args","restriction":"Array(MXNet::NDArray) | Hash(String, MXNet::NDArray)"},{"name":"ctx","doc":null,"default_value":"MXNet::Context.current","external_name":"ctx","restriction":"Context"}],"args_string":"(args : Array(MXNet::NDArray) | Hash(String, MXNet::NDArray) = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">MXNet</span><span class=\"t\">::</span><span class=\"t\">NDArray</span>, ctx : Context = <span class=\"t\">MXNet</span><span class=\"t\">::</span><span class=\"t\">Context</span>.current)","args_html":"(args : Array(<a href=\"../MXNet/NDArray.html\">MXNet::NDArray</a>) | Hash(String, <a href=\"../MXNet/NDArray.html\">MXNet::NDArray</a>) = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">MXNet</span><span class=\"t\">::</span><span class=\"t\">NDArray</span>, ctx : <a href=\"../MXNet/Context.html\">Context</a> = <span class=\"t\">MXNet</span><span class=\"t\">::</span><span class=\"t\">Context</span>.current)","location":{"filename":"src/mxnet/symbol.cr","line_number":440,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/symbol.cr#L440"},"def":{"name":"bind","args":[{"name":"args","doc":null,"default_value":"[] of MXNet::NDArray","external_name":"args","restriction":"Array(MXNet::NDArray) | Hash(String, MXNet::NDArray)"},{"name":"ctx","doc":null,"default_value":"MXNet::Context.current","external_name":"ctx","restriction":"Context"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"arguments = list_arguments\nif args.is_a?(Array(MXNet::NDArray))\n  if arguments.size != args.size\n    raise(SymbolException.new(\"wrong number of arguments (expected #{arguments.size}, given #{args.size})\"))\n  end\nelse\n  if args.is_a?(Hash(String, MXNet::NDArray))\n    args = arguments.map do |a|\n      args[a]?.as(MXNet::NDArray | Nil)\n    end.compact\n    if arguments.size != args.size\n      raise(SymbolException.new(\"wrong number of arguments (expected #{arguments.size}, matched #{args.size})\"))\n    end\n  end\nend\narg_grad_store = Pointer(MXNet::Internal::LibMXNet::NDArrayHandle).malloc(args.size)\ngrad_req_type = Pointer(UInt32).malloc(args.size, 1_u32)\nMXNet::Internal.libcall(MXExecutorBindEX, @handle, *ctx.device, 0, [] of ::Pointer(UInt8), [] of Int32, [] of Int32, args.size, args.map(&.handle), arg_grad_store, grad_req_type, 0, [] of MXNet::Internal::LibMXNet::NDArrayHandle, nil, out exec_handle)\nMXNet::Executor.new(exec_handle)\n"}},{"id":"broadcast_add(rhs,**kwargs)-instance-method","html_id":"broadcast_add(rhs,**kwargs)-instance-method","name":"broadcast_add","doc":"Convenience fluent method for `.broadcast_add`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/Symbol.html#broadcast_add(lhs,rhs,**kwargs)-class-method\">.broadcast_add</a></code>.</p>","abstract":false,"args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"args_string":"(rhs, **kwargs)","args_html":"(rhs, **kwargs)","location":null,"def":{"name":"broadcast_add","args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.broadcast_add(self, rhs, **kwargs)"}},{"id":"broadcast_axis(**kwargs)-instance-method","html_id":"broadcast_axis(**kwargs)-instance-method","name":"broadcast_axis","doc":"Convenience fluent method for `.broadcast_axis`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/Symbol.html#broadcast_axis(data,**kwargs)-class-method\">.broadcast_axis</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"broadcast_axis","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.broadcast_axis(self, **kwargs)"}},{"id":"broadcast_div(rhs,**kwargs)-instance-method","html_id":"broadcast_div(rhs,**kwargs)-instance-method","name":"broadcast_div","doc":"Convenience fluent method for `.broadcast_div`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/Symbol.html#broadcast_div(lhs,rhs,**kwargs)-class-method\">.broadcast_div</a></code>.</p>","abstract":false,"args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"args_string":"(rhs, **kwargs)","args_html":"(rhs, **kwargs)","location":null,"def":{"name":"broadcast_div","args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.broadcast_div(self, rhs, **kwargs)"}},{"id":"broadcast_equal(rhs,**kwargs)-instance-method","html_id":"broadcast_equal(rhs,**kwargs)-instance-method","name":"broadcast_equal","doc":"Convenience fluent method for `.broadcast_equal`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/Symbol.html#broadcast_equal(lhs,rhs,**kwargs)-class-method\">.broadcast_equal</a></code>.</p>","abstract":false,"args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"args_string":"(rhs, **kwargs)","args_html":"(rhs, **kwargs)","location":null,"def":{"name":"broadcast_equal","args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.broadcast_equal(self, rhs, **kwargs)"}},{"id":"broadcast_greater(rhs,**kwargs)-instance-method","html_id":"broadcast_greater(rhs,**kwargs)-instance-method","name":"broadcast_greater","doc":"Convenience fluent method for `.broadcast_greater`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/Symbol.html#broadcast_greater(lhs,rhs,**kwargs)-class-method\">.broadcast_greater</a></code>.</p>","abstract":false,"args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"args_string":"(rhs, **kwargs)","args_html":"(rhs, **kwargs)","location":null,"def":{"name":"broadcast_greater","args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.broadcast_greater(self, rhs, **kwargs)"}},{"id":"broadcast_greater_equal(rhs,**kwargs)-instance-method","html_id":"broadcast_greater_equal(rhs,**kwargs)-instance-method","name":"broadcast_greater_equal","doc":"Convenience fluent method for `.broadcast_greater_equal`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/Symbol.html#broadcast_greater_equal(lhs,rhs,**kwargs)-class-method\">.broadcast_greater_equal</a></code>.</p>","abstract":false,"args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"args_string":"(rhs, **kwargs)","args_html":"(rhs, **kwargs)","location":null,"def":{"name":"broadcast_greater_equal","args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.broadcast_greater_equal(self, rhs, **kwargs)"}},{"id":"broadcast_lesser(rhs,**kwargs)-instance-method","html_id":"broadcast_lesser(rhs,**kwargs)-instance-method","name":"broadcast_lesser","doc":"Convenience fluent method for `.broadcast_lesser`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/Symbol.html#broadcast_lesser(lhs,rhs,**kwargs)-class-method\">.broadcast_lesser</a></code>.</p>","abstract":false,"args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"args_string":"(rhs, **kwargs)","args_html":"(rhs, **kwargs)","location":null,"def":{"name":"broadcast_lesser","args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.broadcast_lesser(self, rhs, **kwargs)"}},{"id":"broadcast_lesser_equal(rhs,**kwargs)-instance-method","html_id":"broadcast_lesser_equal(rhs,**kwargs)-instance-method","name":"broadcast_lesser_equal","doc":"Convenience fluent method for `.broadcast_lesser_equal`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/Symbol.html#broadcast_lesser_equal(lhs,rhs,**kwargs)-class-method\">.broadcast_lesser_equal</a></code>.</p>","abstract":false,"args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"args_string":"(rhs, **kwargs)","args_html":"(rhs, **kwargs)","location":null,"def":{"name":"broadcast_lesser_equal","args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.broadcast_lesser_equal(self, rhs, **kwargs)"}},{"id":"broadcast_like(rhs,**kwargs)-instance-method","html_id":"broadcast_like(rhs,**kwargs)-instance-method","name":"broadcast_like","doc":"Convenience fluent method for `.broadcast_like`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/Symbol.html#broadcast_like(lhs,rhs,**kwargs)-class-method\">.broadcast_like</a></code>.</p>","abstract":false,"args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"args_string":"(rhs, **kwargs)","args_html":"(rhs, **kwargs)","location":null,"def":{"name":"broadcast_like","args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.broadcast_like(self, rhs, **kwargs)"}},{"id":"broadcast_logical_and(rhs,**kwargs)-instance-method","html_id":"broadcast_logical_and(rhs,**kwargs)-instance-method","name":"broadcast_logical_and","doc":"Convenience fluent method for `.broadcast_logical_and`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/Symbol.html#broadcast_logical_and(lhs,rhs,**kwargs)-class-method\">.broadcast_logical_and</a></code>.</p>","abstract":false,"args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"args_string":"(rhs, **kwargs)","args_html":"(rhs, **kwargs)","location":null,"def":{"name":"broadcast_logical_and","args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.broadcast_logical_and(self, rhs, **kwargs)"}},{"id":"broadcast_logical_or(rhs,**kwargs)-instance-method","html_id":"broadcast_logical_or(rhs,**kwargs)-instance-method","name":"broadcast_logical_or","doc":"Convenience fluent method for `.broadcast_logical_or`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/Symbol.html#broadcast_logical_or(lhs,rhs,**kwargs)-class-method\">.broadcast_logical_or</a></code>.</p>","abstract":false,"args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"args_string":"(rhs, **kwargs)","args_html":"(rhs, **kwargs)","location":null,"def":{"name":"broadcast_logical_or","args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.broadcast_logical_or(self, rhs, **kwargs)"}},{"id":"broadcast_logical_xor(rhs,**kwargs)-instance-method","html_id":"broadcast_logical_xor(rhs,**kwargs)-instance-method","name":"broadcast_logical_xor","doc":"Convenience fluent method for `.broadcast_logical_xor`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/Symbol.html#broadcast_logical_xor(lhs,rhs,**kwargs)-class-method\">.broadcast_logical_xor</a></code>.</p>","abstract":false,"args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"args_string":"(rhs, **kwargs)","args_html":"(rhs, **kwargs)","location":null,"def":{"name":"broadcast_logical_xor","args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.broadcast_logical_xor(self, rhs, **kwargs)"}},{"id":"broadcast_maximum(rhs,**kwargs)-instance-method","html_id":"broadcast_maximum(rhs,**kwargs)-instance-method","name":"broadcast_maximum","doc":"Convenience fluent method for `.broadcast_maximum`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/Symbol.html#broadcast_maximum(lhs,rhs,**kwargs)-class-method\">.broadcast_maximum</a></code>.</p>","abstract":false,"args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"args_string":"(rhs, **kwargs)","args_html":"(rhs, **kwargs)","location":null,"def":{"name":"broadcast_maximum","args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.broadcast_maximum(self, rhs, **kwargs)"}},{"id":"broadcast_minimum(rhs,**kwargs)-instance-method","html_id":"broadcast_minimum(rhs,**kwargs)-instance-method","name":"broadcast_minimum","doc":"Convenience fluent method for `.broadcast_minimum`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/Symbol.html#broadcast_minimum(lhs,rhs,**kwargs)-class-method\">.broadcast_minimum</a></code>.</p>","abstract":false,"args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"args_string":"(rhs, **kwargs)","args_html":"(rhs, **kwargs)","location":null,"def":{"name":"broadcast_minimum","args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.broadcast_minimum(self, rhs, **kwargs)"}},{"id":"broadcast_minus(rhs,**kwargs)-instance-method","html_id":"broadcast_minus(rhs,**kwargs)-instance-method","name":"broadcast_minus","doc":"Convenience fluent method for `.broadcast_minus`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/Symbol.html#broadcast_minus(lhs,rhs,**kwargs)-class-method\">.broadcast_minus</a></code>.</p>","abstract":false,"args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"args_string":"(rhs, **kwargs)","args_html":"(rhs, **kwargs)","location":null,"def":{"name":"broadcast_minus","args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.broadcast_minus(self, rhs, **kwargs)"}},{"id":"broadcast_mul(rhs,**kwargs)-instance-method","html_id":"broadcast_mul(rhs,**kwargs)-instance-method","name":"broadcast_mul","doc":"Convenience fluent method for `.broadcast_mul`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/Symbol.html#broadcast_mul(lhs,rhs,**kwargs)-class-method\">.broadcast_mul</a></code>.</p>","abstract":false,"args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"args_string":"(rhs, **kwargs)","args_html":"(rhs, **kwargs)","location":null,"def":{"name":"broadcast_mul","args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.broadcast_mul(self, rhs, **kwargs)"}},{"id":"broadcast_not_equal(rhs,**kwargs)-instance-method","html_id":"broadcast_not_equal(rhs,**kwargs)-instance-method","name":"broadcast_not_equal","doc":"Convenience fluent method for `.broadcast_not_equal`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/Symbol.html#broadcast_not_equal(lhs,rhs,**kwargs)-class-method\">.broadcast_not_equal</a></code>.</p>","abstract":false,"args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"args_string":"(rhs, **kwargs)","args_html":"(rhs, **kwargs)","location":null,"def":{"name":"broadcast_not_equal","args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.broadcast_not_equal(self, rhs, **kwargs)"}},{"id":"broadcast_plus(rhs,**kwargs)-instance-method","html_id":"broadcast_plus(rhs,**kwargs)-instance-method","name":"broadcast_plus","doc":"Convenience fluent method for `.broadcast_plus`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/Symbol.html#broadcast_plus(lhs,rhs,**kwargs)-class-method\">.broadcast_plus</a></code>.</p>","abstract":false,"args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"args_string":"(rhs, **kwargs)","args_html":"(rhs, **kwargs)","location":null,"def":{"name":"broadcast_plus","args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.broadcast_plus(self, rhs, **kwargs)"}},{"id":"broadcast_power(rhs,**kwargs)-instance-method","html_id":"broadcast_power(rhs,**kwargs)-instance-method","name":"broadcast_power","doc":"Convenience fluent method for `.broadcast_power`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/Symbol.html#broadcast_power(lhs,rhs,**kwargs)-class-method\">.broadcast_power</a></code>.</p>","abstract":false,"args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"args_string":"(rhs, **kwargs)","args_html":"(rhs, **kwargs)","location":null,"def":{"name":"broadcast_power","args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.broadcast_power(self, rhs, **kwargs)"}},{"id":"broadcast_sub(rhs,**kwargs)-instance-method","html_id":"broadcast_sub(rhs,**kwargs)-instance-method","name":"broadcast_sub","doc":"Convenience fluent method for `.broadcast_sub`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/Symbol.html#broadcast_sub(lhs,rhs,**kwargs)-class-method\">.broadcast_sub</a></code>.</p>","abstract":false,"args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"args_string":"(rhs, **kwargs)","args_html":"(rhs, **kwargs)","location":null,"def":{"name":"broadcast_sub","args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.broadcast_sub(self, rhs, **kwargs)"}},{"id":"broadcast_to(**kwargs)-instance-method","html_id":"broadcast_to(**kwargs)-instance-method","name":"broadcast_to","doc":"Convenience fluent method for `.broadcast_to`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/Symbol.html#broadcast_to(data,**kwargs)-class-method\">.broadcast_to</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"broadcast_to","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.broadcast_to(self, **kwargs)"}},{"id":"cbrt(**kwargs)-instance-method","html_id":"cbrt(**kwargs)-instance-method","name":"cbrt","doc":"Convenience fluent method for `.cbrt`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/Symbol.html#cbrt(data,**kwargs)-class-method\">.cbrt</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"cbrt","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.cbrt(self, **kwargs)"}},{"id":"ceil(**kwargs)-instance-method","html_id":"ceil(**kwargs)-instance-method","name":"ceil","doc":"Convenience fluent method for `.ceil`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/Symbol.html#ceil(data,**kwargs)-class-method\">.ceil</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"ceil","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.ceil(self, **kwargs)"}},{"id":"clip(a_min,a_max,**kwargs)-instance-method","html_id":"clip(a_min,a_max,**kwargs)-instance-method","name":"clip","doc":"Convenience fluent method for `.clip`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/Symbol.html#clip(data,a_min,a_max,**kwargs)-class-method\">.clip</a></code>.</p>","abstract":false,"args":[{"name":"a_min","doc":null,"default_value":"","external_name":"a_min","restriction":""},{"name":"a_max","doc":null,"default_value":"","external_name":"a_max","restriction":""}],"args_string":"(a_min, a_max, **kwargs)","args_html":"(a_min, a_max, **kwargs)","location":null,"def":{"name":"clip","args":[{"name":"a_min","doc":null,"default_value":"","external_name":"a_min","restriction":""},{"name":"a_max","doc":null,"default_value":"","external_name":"a_max","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.clip(self, a_min, a_max, **kwargs)"}},{"id":"clone-instance-method","html_id":"clone-instance-method","name":"clone","doc":"Returns a deep copy of this symbol.\n\nThis method is functionally identical to `#dup`.\n","summary":"<p>Returns a deep copy of this symbol.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/mxnet/symbol.cr","line_number":530,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/symbol.cr#L530"},"def":{"name":"clone","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Internal.libcall(MXSymbolCopy, self.handle, out handle)\nself.class.new(handle)\n"}},{"id":"cos(**kwargs)-instance-method","html_id":"cos(**kwargs)-instance-method","name":"cos","doc":"Convenience fluent method for `.cos`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/Symbol.html#cos(data,**kwargs)-class-method\">.cos</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"cos","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.cos(self, **kwargs)"}},{"id":"cosh(**kwargs)-instance-method","html_id":"cosh(**kwargs)-instance-method","name":"cosh","doc":"Convenience fluent method for `.cosh`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/Symbol.html#cosh(data,**kwargs)-class-method\">.cosh</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"cosh","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.cosh(self, **kwargs)"}},{"id":"degrees(**kwargs)-instance-method","html_id":"degrees(**kwargs)-instance-method","name":"degrees","doc":"Convenience fluent method for `.degrees`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/Symbol.html#degrees(data,**kwargs)-class-method\">.degrees</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"degrees","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.degrees(self, **kwargs)"}},{"id":"diag(**kwargs)-instance-method","html_id":"diag(**kwargs)-instance-method","name":"diag","doc":"Convenience fluent method for `.diag`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/Symbol.html#diag(data,**kwargs)-class-method\">.diag</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"diag","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.diag(self, **kwargs)"}},{"id":"dot(rhs,**kwargs)-instance-method","html_id":"dot(rhs,**kwargs)-instance-method","name":"dot","doc":"Convenience fluent method for `.dot`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/Symbol.html#dot(lhs,rhs,**kwargs)-class-method\">.dot</a></code>.</p>","abstract":false,"args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"args_string":"(rhs, **kwargs)","args_html":"(rhs, **kwargs)","location":null,"def":{"name":"dot","args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.dot(self, rhs, **kwargs)"}},{"id":"dup-instance-method","html_id":"dup-instance-method","name":"dup","doc":"Returns a shallow copy of this symbol.\n\nThis method is functionally identical to `#clone`.\n","summary":"<p>Returns a shallow copy of this symbol.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/mxnet/symbol.cr","line_number":517,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/symbol.cr#L517"},"def":{"name":"dup","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Internal.libcall(MXSymbolCopy, self.handle, out handle)\nself.class.new(handle)\n"}},{"id":"eval(ctx:Context=MXNet::Context.current)-instance-method","html_id":"eval(ctx:Context=MXNet::Context.current)-instance-method","name":"eval","doc":"Evaluates a symbol given arguments.\n\nThe `#eval` method combines a call to `#bind` (which returns an\n`Executor`) with a call to `Executor#forward`. For the common\nuse case, where you might repeatedly evaluate with the same\narguments, `#eval` is slow. In that case, you should call `#bind`\nonce and then repeatedly call `Executor#forward`. This function\nallows simpler syntax for less cumbersome introspection.\n\nReturns an array of `MXNet::NDArray` corresponding to the values\ntaken by each symbol when evaluated on the given arguments. When\ncalled on a single symbol (not a group), the result will be an\narray with one element.\n\n```\na = MXNet::Symbol.var(\"a\")\nb = MXNet::Symbol.var(\"b\")\nc = a + b # => \"<Symbol broadcast_add>\"\nc.eval(a: MXNet::NDArray.ones([2, 3]), b: MXNet::NDArray.ones([2, 3])) # => [<NDArray 2x3 int32 @cpu(0)>]\nc.eval(MXNet::NDArray.ones([2, 3]), MXNet::NDArray.ones([2, 3])) # => [<NDArray 2x3 int32 @cpu(0)>]\n```\n\n### Parameters\n* *ctx* (`Context`, default is current context)\n  The device context the executor is to evaluate on.\n* *ndargs* (`MXNet::NDArray`)\n  Input arguments. All the arguments must be provided.\n","summary":"<p>Evaluates a symbol given arguments.</p>","abstract":false,"args":[{"name":"ctx","doc":null,"default_value":"MXNet::Context.current","external_name":"ctx","restriction":"Context"}],"args_string":"(ctx : Context = <span class=\"t\">MXNet</span><span class=\"t\">::</span><span class=\"t\">Context</span>.current)","args_html":"(ctx : <a href=\"../MXNet/Context.html\">Context</a> = <span class=\"t\">MXNet</span><span class=\"t\">::</span><span class=\"t\">Context</span>.current)","location":{"filename":"src/mxnet/symbol.cr","line_number":509,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/symbol.cr#L509"},"def":{"name":"eval","args":[{"name":"ctx","doc":null,"default_value":"MXNet::Context.current","external_name":"ctx","restriction":"Context"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"bind(ctx: ctx).forward"}},{"id":"eval(*ndargs:MXNet::NDArray,ctx:Context=MXNet::Context.current)-instance-method","html_id":"eval(*ndargs:MXNet::NDArray,ctx:Context=MXNet::Context.current)-instance-method","name":"eval","doc":"Evaluates a symbol given arguments.\n\nThe `#eval` method combines a call to `#bind` (which returns an\n`Executor`) with a call to `Executor#forward`. For the common\nuse case, where you might repeatedly evaluate with the same\narguments, `#eval` is slow. In that case, you should call `#bind`\nonce and then repeatedly call `Executor#forward`. This function\nallows simpler syntax for less cumbersome introspection.\n\nReturns an array of `MXNet::NDArray` corresponding to the values\ntaken by each symbol when evaluated on the given arguments. When\ncalled on a single symbol (not a group), the result will be an\narray with one element.\n\n```\na = MXNet::Symbol.var(\"a\")\nb = MXNet::Symbol.var(\"b\")\nc = a + b # => \"<Symbol broadcast_add>\"\nc.eval(a: MXNet::NDArray.ones([2, 3]), b: MXNet::NDArray.ones([2, 3])) # => [<NDArray 2x3 int32 @cpu(0)>]\nc.eval(MXNet::NDArray.ones([2, 3]), MXNet::NDArray.ones([2, 3])) # => [<NDArray 2x3 int32 @cpu(0)>]\n```\n\n### Parameters\n* *ctx* (`Context`, default is current context)\n  The device context the executor is to evaluate on.\n* *ndargs* (`MXNet::NDArray`)\n  Input arguments. All the arguments must be provided.\n","summary":"<p>Evaluates a symbol given arguments.</p>","abstract":false,"args":[{"name":"ndargs","doc":null,"default_value":"","external_name":"ndargs","restriction":"MXNet::NDArray"},{"name":"ctx","doc":null,"default_value":"MXNet::Context.current","external_name":"ctx","restriction":"Context"}],"args_string":"(*ndargs : MXNet::NDArray, ctx : Context = <span class=\"t\">MXNet</span><span class=\"t\">::</span><span class=\"t\">Context</span>.current)","args_html":"(*ndargs : <a href=\"../MXNet/NDArray.html\">MXNet::NDArray</a>, ctx : <a href=\"../MXNet/Context.html\">Context</a> = <span class=\"t\">MXNet</span><span class=\"t\">::</span><span class=\"t\">Context</span>.current)","location":{"filename":"src/mxnet/symbol.cr","line_number":497,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/symbol.cr#L497"},"def":{"name":"eval","args":[{"name":"ndargs","doc":null,"default_value":"","external_name":"ndargs","restriction":"MXNet::NDArray"},{"name":"ctx","doc":null,"default_value":"MXNet::Context.current","external_name":"ctx","restriction":"Context"}],"double_splat":null,"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"args = ndargs.to_a\nbind(args: args, ctx: ctx).forward\n"}},{"id":"eval(ctx:Context=MXNet::Context.current,**ndargs:MXNet::NDArray)-instance-method","html_id":"eval(ctx:Context=MXNet::Context.current,**ndargs:MXNet::NDArray)-instance-method","name":"eval","doc":"Evaluates a symbol given arguments.\n\nThe `#eval` method combines a call to `#bind` (which returns an\n`Executor`) with a call to `Executor#forward`. For the common\nuse case, where you might repeatedly evaluate with the same\narguments, `#eval` is slow. In that case, you should call `#bind`\nonce and then repeatedly call `Executor#forward`. This function\nallows simpler syntax for less cumbersome introspection.\n\nReturns an array of `MXNet::NDArray` corresponding to the values\ntaken by each symbol when evaluated on the given arguments. When\ncalled on a single symbol (not a group), the result will be an\narray with one element.\n\n```\na = MXNet::Symbol.var(\"a\")\nb = MXNet::Symbol.var(\"b\")\nc = a + b # => \"<Symbol broadcast_add>\"\nc.eval(a: MXNet::NDArray.ones([2, 3]), b: MXNet::NDArray.ones([2, 3])) # => [<NDArray 2x3 int32 @cpu(0)>]\nc.eval(MXNet::NDArray.ones([2, 3]), MXNet::NDArray.ones([2, 3])) # => [<NDArray 2x3 int32 @cpu(0)>]\n```\n\n### Parameters\n* *ctx* (`Context`, default is current context)\n  The device context the executor is to evaluate on.\n* *ndargs* (`MXNet::NDArray`)\n  Input arguments. All the arguments must be provided.\n","summary":"<p>Evaluates a symbol given arguments.</p>","abstract":false,"args":[{"name":"ctx","doc":null,"default_value":"MXNet::Context.current","external_name":"ctx","restriction":"Context"}],"args_string":"(ctx : Context = <span class=\"t\">MXNet</span><span class=\"t\">::</span><span class=\"t\">Context</span>.current, **ndargs : MXNet::NDArray)","args_html":"(ctx : <a href=\"../MXNet/Context.html\">Context</a> = <span class=\"t\">MXNet</span><span class=\"t\">::</span><span class=\"t\">Context</span>.current, **ndargs : MXNet::NDArray)","location":{"filename":"src/mxnet/symbol.cr","line_number":503,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/symbol.cr#L503"},"def":{"name":"eval","args":[{"name":"ctx","doc":null,"default_value":"MXNet::Context.current","external_name":"ctx","restriction":"Context"}],"double_splat":{"name":"ndargs","doc":null,"default_value":"","external_name":"ndargs","restriction":"MXNet::NDArray"},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"args = ndargs.map do |k, v|\n  {k.to_s, v}\nend.to_h\nbind(ctx: ctx, args: args).forward\n"}},{"id":"exp(**kwargs)-instance-method","html_id":"exp(**kwargs)-instance-method","name":"exp","doc":"Convenience fluent method for `.exp`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/Symbol.html#exp(data,**kwargs)-class-method\">.exp</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"exp","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.exp(self, **kwargs)"}},{"id":"expand_dims(axis,**kwargs)-instance-method","html_id":"expand_dims(axis,**kwargs)-instance-method","name":"expand_dims","doc":"Convenience fluent method for `.expand_dims`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/Symbol.html#expand_dims(data,axis,**kwargs)-class-method\">.expand_dims</a></code>.</p>","abstract":false,"args":[{"name":"axis","doc":null,"default_value":"","external_name":"axis","restriction":""}],"args_string":"(axis, **kwargs)","args_html":"(axis, **kwargs)","location":null,"def":{"name":"expand_dims","args":[{"name":"axis","doc":null,"default_value":"","external_name":"axis","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.expand_dims(self, axis, **kwargs)"}},{"id":"expm1(**kwargs)-instance-method","html_id":"expm1(**kwargs)-instance-method","name":"expm1","doc":"Convenience fluent method for `.expm1`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/Symbol.html#expm1(data,**kwargs)-class-method\">.expm1</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"expm1","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.expm1(self, **kwargs)"}},{"id":"fix(**kwargs)-instance-method","html_id":"fix(**kwargs)-instance-method","name":"fix","doc":"Convenience fluent method for `.fix`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/Symbol.html#fix(data,**kwargs)-class-method\">.fix</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"fix","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.fix(self, **kwargs)"}},{"id":"flatten(**kwargs)-instance-method","html_id":"flatten(**kwargs)-instance-method","name":"flatten","doc":"Convenience fluent method for `.flatten`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/Symbol.html#flatten(data,**kwargs)-class-method\">.flatten</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"flatten","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.flatten(self, **kwargs)"}},{"id":"flip(axis,**kwargs)-instance-method","html_id":"flip(axis,**kwargs)-instance-method","name":"flip","doc":"Convenience fluent method for `.flip`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/Symbol.html#flip(data,axis,**kwargs)-class-method\">.flip</a></code>.</p>","abstract":false,"args":[{"name":"axis","doc":null,"default_value":"","external_name":"axis","restriction":""}],"args_string":"(axis, **kwargs)","args_html":"(axis, **kwargs)","location":null,"def":{"name":"flip","args":[{"name":"axis","doc":null,"default_value":"","external_name":"axis","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.flip(self, axis, **kwargs)"}},{"id":"floor(**kwargs)-instance-method","html_id":"floor(**kwargs)-instance-method","name":"floor","doc":"Convenience fluent method for `.floor`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/Symbol.html#floor(data,**kwargs)-class-method\">.floor</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"floor","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.floor(self, **kwargs)"}},{"id":"gamma(**kwargs)-instance-method","html_id":"gamma(**kwargs)-instance-method","name":"gamma","doc":"Convenience fluent method for `.gamma`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/Symbol.html#gamma(data,**kwargs)-class-method\">.gamma</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"gamma","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.gamma(self, **kwargs)"}},{"id":"gammaln(**kwargs)-instance-method","html_id":"gammaln(**kwargs)-instance-method","name":"gammaln","doc":"Convenience fluent method for `.gammaln`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/Symbol.html#gammaln(data,**kwargs)-class-method\">.gammaln</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"gammaln","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.gammaln(self, **kwargs)"}},{"id":"infer_dtype(args)-instance-method","html_id":"infer_dtype(args)-instance-method","name":"infer_dtype","doc":"Infers the dtypes of all arguments and all outputs, given the\nknown dtypes of some arguments.\n\nThis function takes the known dtypes of arguments either\npositionally or by name. It returns a tuple of `nil` values if\nthere is not enough information to deduce the missing dtypes.\n\nInconsistencies in the known dtypes will cause an error to be\nraised.\n\n```\na = MXNet::Symbol.var(\"a\")\nb = MXNet::Symbol.var(\"b\")\nc = a + b\narg_types, out_types, aux_types = c.infer_dtype({\"a\" => :float32})\narg_types # => [:float32, :float32]\nout_types # => [:float32]\naux_types # => []\n```\n\n### Parameters\n* *args* (`Array(::Symbol | Nil)` or `Hash(String, ::Symbol | Nil)`)\n  Dtypes of known arguments. Unknown dtypes can be marked as `nil`.\n","summary":"<p>Infers the dtypes of all arguments and all outputs, given the known dtypes of some arguments.</p>","abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(args)","args_html":"(args)","location":{"filename":"src/mxnet/symbol.cr","line_number":393,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/symbol.cr#L393"},"def":{"name":"infer_dtype","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"keys = [] of String\ndata = [] of Int32\ncase args\nwhen Array(::Symbol | Nil), Array(::Symbol)\n  args.each do |s|\n    if s\n      data << T2DT[s]\n    else\n      data << -1\n    end\n  end\nwhen Hash(String, ::Symbol | Nil), Hash(String, ::Symbol)\n  args.each do |k, v|\n    keys << k\n    if v\n      data << T2DT[v]\n    else\n      data << -1\n    end\n  end\nelse\n  raise(ArgumentError.new(\"specify arguments either positionally or by name\"))\nend\nMXNet::Internal.libcall(MXSymbolInferType, @handle, data.size, keys.map(&.to_unsafe), data, out arg_type_size, out arg_type_data, out out_type_size, out out_type_data, out aux_type_size, out aux_type_data, out complete)\nif complete != 0\n  arg_types = arg_type_size.times.map do |i|\n    DT2T[arg_type_data[i]]?\n  end\n  out_types = out_type_size.times.map do |i|\n    DT2T[out_type_data[i]]?\n  end\n  aux_types = aux_type_size.times.map do |i|\n    DT2T[aux_type_data[i]]?\n  end\n  {arg_types.to_a, out_types.to_a, aux_types.to_a}\nelse\n  {nil, nil, nil}\nend\n"}},{"id":"infer_dtype_partial(args)-instance-method","html_id":"infer_dtype_partial(args)-instance-method","name":"infer_dtype_partial","doc":"Infers the dtypes partially.\n\nThis functions works the same way as `#infer_dtype`, except that\nthis function can return partial results.\n\nIn the following example, information about \"b\" is not\navailable. So, `#infer_shape` will return a tuple of `nil`\nvalues but this method will return partial values.\n\n```\na = MXNet::Symbol.var(\"a\")\nb = MXNet::Symbol::Ops._cast(MXNet::Symbol.var(\"b\"), dtype: :int32)\nc = a + b\narg_types, out_types, aux_types = c.infer_dtype_partial([:int32])\narg_types # => [:int32, nil]\nout_types # => [:int32]\naux_types # => []\n\n```\n","summary":"<p>Infers the dtypes partially.</p>","abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(args)","args_html":"(args)","location":{"filename":"src/mxnet/symbol.cr","line_number":415,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/symbol.cr#L415"},"def":{"name":"infer_dtype_partial","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"raise(MXNetException.new(\"not supported on MXNet version #{MXNet::Internal::MXNET_VERSION}: infer_dtype_partial\"))\nkeys = [] of String\ndata = [] of Int32\ncase args\nwhen Array(::Symbol | Nil), Array(::Symbol)\n  args.each do |s|\n    if s\n      data << T2DT[s]\n    else\n      data << -1\n    end\n  end\nwhen Hash(String, ::Symbol | Nil), Hash(String, ::Symbol)\n  args.each do |k, v|\n    keys << k\n    if v\n      data << T2DT[v]\n    else\n      data << -1\n    end\n  end\nelse\n  raise(ArgumentError.new(\"specify arguments either positionally or by name\"))\nend\nMXNet::Internal.libcall(MXSymbolInferTypePartial, @handle, data.size, keys.map(&.to_unsafe), data, out arg_type_size, out arg_type_data, out out_type_size, out out_type_data, out aux_type_size, out aux_type_data, out complete)\nif complete != 0\n  arg_types = arg_type_size.times.map do |i|\n    DT2T[arg_type_data[i]]?\n  end\n  out_types = out_type_size.times.map do |i|\n    DT2T[out_type_data[i]]?\n  end\n  aux_types = aux_type_size.times.map do |i|\n    DT2T[aux_type_data[i]]?\n  end\n  {arg_types.to_a, out_types.to_a, aux_types.to_a}\nelse\n  {nil, nil, nil}\nend\n"}},{"id":"infer_shape(args)-instance-method","html_id":"infer_shape(args)-instance-method","name":"infer_shape","doc":"Infers the shapes of all arguments and all outputs, given the\nknown shapes of some arguments.\n\nThis function takes the known shapes of arguments either\npositionally or by name. It returns a tuple of `nil` values if\nthere is not enough information to deduce the missing shapes.\n\nInconsistencies in the known shapes will cause an error to be\nraised.\n\n```\na = MXNet::Symbol.var(\"a\")\nb = MXNet::Symbol.var(\"b\")\nc = a + b\narg_shapes, out_shapes, aux_shapes = c.infer_shape([nil, [3, 3]])\narg_shapes # => [[3, 3], [3, 3]]\nout_shapes # => [[3, 3]]\naux_shapes # => []\n```\n\n### Parameters\n* *args* (`Array(Array(Int32) | Nil)` or `Hash(String, Array(Int32) | Nil)`)\n  Shapes of known arguments. Unknown shapes can be marked as `nil`.\n","summary":"<p>Infers the shapes of all arguments and all outputs, given the known shapes of some arguments.</p>","abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(args)","args_html":"(args)","location":{"filename":"src/mxnet/symbol.cr","line_number":277,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/symbol.cr#L277"},"def":{"name":"infer_shape","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"keys = [] of String\ndata = [] of UInt32\niptr = [0_u32]\ncase args\nwhen Array(Array(Int32) | Nil), Array(Array(Int32))\n  args.each do |s|\n    if s\n      data = data + s.map(&.to_u32)\n    end\n    iptr << data.size.to_u32\n  end\nwhen Hash(String, Array(Int32) | Nil), Hash(String, Array(Int32))\n  args.each do |k, v|\n    keys << k\n    if (    v)\n      data = data + v.map(&.to_u32)\n    end\n    iptr << data.size.to_u32\n  end\nelse\n  raise(ArgumentError.new(\"specify arguments either positionally or by name\"))\nend\nMXNet::Internal.libcall(MXSymbolInferShape, @handle, iptr.size - 1, keys.map(&.to_unsafe), iptr, data, out arg_shape_size, out arg_shape_ndim, out arg_shape_data, out out_shape_size, out out_shape_ndim, out out_shape_data, out aux_shape_size, out aux_shape_ndim, out aux_shape_data, out complete)\nif complete != 0\n  arg_shapes = arg_shape_size.times.map do |i|\n    l = arg_shape_ndim[i]\n    s = arg_shape_data[i].to_slice(l)\n    s[0, l].map(&.to_i).to_a\n  end\n  out_shapes = out_shape_size.times.map do |i|\n    l = out_shape_ndim[i]\n    s = out_shape_data[i].to_slice(l)\n    s[0, l].map(&.to_i).to_a\n  end\n  aux_shapes = aux_shape_size.times.map do |i|\n    l = aux_shape_ndim[i]\n    s = aux_shape_data[i].to_slice(l)\n    s[0, l].map(&.to_i).to_a\n  end\n  {arg_shapes.to_a, out_shapes.to_a, aux_shapes.to_a}\nelse\n  {nil, nil, nil}\nend\n"}},{"id":"infer_shape_partial(args)-instance-method","html_id":"infer_shape_partial(args)-instance-method","name":"infer_shape_partial","doc":"Infers the shapes partially.\n\nThis functions works the same way as `#infer_shape`, except that\nthis function can return partial results.\n\nIn the following example, information about \"b\" is not\navailable. So, `#infer_shape` will return a tuple of `nil`\nvalues but this method will return partial values.\n\n```\na = MXNet::Symbol.fully_connected(MXNet::Symbol.var(\"a\"), nil, nil, num_hidden: 128)\nb = MXNet::Symbol.fully_connected(MXNet::Symbol.var(\"b\"), nil, nil, num_hidden: 128)\nc = a + b\narg_shapes, out_shapes, aux_shapes = c.infer_shape_partial([[10, 64]])\narg_shapes # => [[10, 64], [128, 64], [128], [], [], []]\nout_shapes # => [[10, 128]]\naux_shapes # => []\n```\n","summary":"<p>Infers the shapes partially.</p>","abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(args)","args_html":"(args)","location":{"filename":"src/mxnet/symbol.cr","line_number":298,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/symbol.cr#L298"},"def":{"name":"infer_shape_partial","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"keys = [] of String\ndata = [] of UInt32\niptr = [0_u32]\ncase args\nwhen Array(Array(Int32) | Nil), Array(Array(Int32))\n  args.each do |s|\n    if s\n      data = data + s.map(&.to_u32)\n    end\n    iptr << data.size.to_u32\n  end\nwhen Hash(String, Array(Int32) | Nil), Hash(String, Array(Int32))\n  args.each do |k, v|\n    keys << k\n    if (    v)\n      data = data + v.map(&.to_u32)\n    end\n    iptr << data.size.to_u32\n  end\nelse\n  raise(ArgumentError.new(\"specify arguments either positionally or by name\"))\nend\nMXNet::Internal.libcall(MXSymbolInferShapePartial, @handle, iptr.size - 1, keys.map(&.to_unsafe), iptr, data, out arg_shape_size, out arg_shape_ndim, out arg_shape_data, out out_shape_size, out out_shape_ndim, out out_shape_data, out aux_shape_size, out aux_shape_ndim, out aux_shape_data, out complete)\nif complete != 0\n  arg_shapes = arg_shape_size.times.map do |i|\n    l = arg_shape_ndim[i]\n    s = arg_shape_data[i].to_slice(l)\n    s[0, l].map(&.to_i).to_a\n  end\n  out_shapes = out_shape_size.times.map do |i|\n    l = out_shape_ndim[i]\n    s = out_shape_data[i].to_slice(l)\n    s[0, l].map(&.to_i).to_a\n  end\n  aux_shapes = aux_shape_size.times.map do |i|\n    l = aux_shape_ndim[i]\n    s = aux_shape_data[i].to_slice(l)\n    s[0, l].map(&.to_i).to_a\n  end\n  {arg_shapes.to_a, out_shapes.to_a, aux_shapes.to_a}\nelse\n  {nil, nil, nil}\nend\n"}},{"id":"list_arguments-instance-method","html_id":"list_arguments-instance-method","name":"list_arguments","doc":"Lists all the arguments of the symbol.\n\n```\na = MXNet::Symbol.var(\"a\")\nb = MXNet::Symbol.var(\"b\")\nc = a * b\nc.list_arguments # => [\"a\", \"b\"]\n```\n","summary":"<p>Lists all the arguments of the symbol.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/mxnet/symbol.cr","line_number":142,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/symbol.cr#L142"},"def":{"name":"list_arguments","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Internal.libcall(MXSymbolListArguments, @handle, out size, out str_array)\n(str_array.to_slice(size)).map do |u|\n  String.new(u)\nend.to_a\n"}},{"id":"list_attr-instance-method","html_id":"list_attr-instance-method","name":"list_attr","doc":"Gets all attributes.\n\n```\ndata = MXNet::Symbol.var(\"data\", attr: {\"mood\" => \"angry\"})\ndata.list_attr # => {\"mood\" => \"angry\"}\n```\n","summary":"<p>Gets all attributes.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/mxnet/symbol.cr","line_number":85,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/symbol.cr#L85"},"def":{"name":"list_attr","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Internal.libcall(MXSymbolListAttrShallow, @handle, out size, out pairs)\nHash(String, String).new.tap do |ret|\n  size.times do |i|\n    key = String.new(pairs[i * 2])\n    value = String.new(pairs[(i * 2) + 1])\n    ret[key] = value\n  end\nend\n"}},{"id":"list_auxiliary_states-instance-method","html_id":"list_auxiliary_states-instance-method","name":"list_auxiliary_states","doc":"Lists all the auxiliary states of the symbol.\n\n```\na = MXNet::Symbol.var(\"a\")\nb = MXNet::Symbol.var(\"b\")\nc = a + b\nc.list_auxiliary_states # => []\n```\n\nAuxiliary states are special states of symbols that do not\ncorrespond to an argument, and are not updated by gradient\ndescent. Common examples of auxiliary states include the\n*moving_mean* and *moving_variance* in `BatchNorm`. Most\noperators do not have auxiliary states.\n","summary":"<p>Lists all the auxiliary states of the symbol.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/mxnet/symbol.cr","line_number":176,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/symbol.cr#L176"},"def":{"name":"list_auxiliary_states","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Internal.libcall(MXSymbolListAuxiliaryStates, @handle, out size, out str_array)\n(str_array.to_slice(size)).map do |u|\n  String.new(u)\nend.to_a\n"}},{"id":"list_outputs-instance-method","html_id":"list_outputs-instance-method","name":"list_outputs","doc":"Lists all the outputs of the symbol.\n\n```\na = MXNet::Symbol.var(\"a\")\nb = MXNet::Symbol.var(\"b\")\nc = a + b\nc.last_outputs # => [\"_plus12_output\"]\n```\n","summary":"<p>Lists all the outputs of the symbol.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/mxnet/symbol.cr","line_number":156,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/symbol.cr#L156"},"def":{"name":"list_outputs","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Internal.libcall(MXSymbolListOutputs, @handle, out size, out str_array)\n(str_array.to_slice(size)).map do |u|\n  String.new(u)\nend.to_a\n"}},{"id":"log(**kwargs)-instance-method","html_id":"log(**kwargs)-instance-method","name":"log","doc":"Convenience fluent method for `.log`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/Symbol.html#log(data,**kwargs)-class-method\">.log</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"log","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.log(self, **kwargs)"}},{"id":"log10(**kwargs)-instance-method","html_id":"log10(**kwargs)-instance-method","name":"log10","doc":"Convenience fluent method for `.log10`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/Symbol.html#log10(data,**kwargs)-class-method\">.log10</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"log10","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.log10(self, **kwargs)"}},{"id":"log1p(**kwargs)-instance-method","html_id":"log1p(**kwargs)-instance-method","name":"log1p","doc":"Convenience fluent method for `.log1p`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/Symbol.html#log1p(data,**kwargs)-class-method\">.log1p</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"log1p","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.log1p(self, **kwargs)"}},{"id":"log2(**kwargs)-instance-method","html_id":"log2(**kwargs)-instance-method","name":"log2","doc":"Convenience fluent method for `.log2`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/Symbol.html#log2(data,**kwargs)-class-method\">.log2</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"log2","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.log2(self, **kwargs)"}},{"id":"log_softmax(**kwargs)-instance-method","html_id":"log_softmax(**kwargs)-instance-method","name":"log_softmax","doc":"Convenience fluent method for `.log_softmax`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/Symbol.html#log_softmax(data,**kwargs)-class-method\">.log_softmax</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"log_softmax","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.log_softmax(self, **kwargs)"}},{"id":"logical_not(**kwargs)-instance-method","html_id":"logical_not(**kwargs)-instance-method","name":"logical_not","doc":"Convenience fluent method for `.logical_not`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/Symbol.html#logical_not(data,**kwargs)-class-method\">.logical_not</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"logical_not","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.logical_not(self, **kwargs)"}},{"id":"max(**kwargs)-instance-method","html_id":"max(**kwargs)-instance-method","name":"max","doc":"Convenience fluent method for `.max`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/Symbol.html#max(data,**kwargs)-class-method\">.max</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"max","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.max(self, **kwargs)"}},{"id":"mean(**kwargs)-instance-method","html_id":"mean(**kwargs)-instance-method","name":"mean","doc":"Convenience fluent method for `.mean`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/Symbol.html#mean(data,**kwargs)-class-method\">.mean</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"mean","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.mean(self, **kwargs)"}},{"id":"min(**kwargs)-instance-method","html_id":"min(**kwargs)-instance-method","name":"min","doc":"Convenience fluent method for `.min`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/Symbol.html#min(data,**kwargs)-class-method\">.min</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"min","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.min(self, **kwargs)"}},{"id":"name-instance-method","html_id":"name-instance-method","name":"name","doc":"Gets name of the symbol.\n\nThis function only works for a non-grouped symbol. It returns\n`nil` for a grouped symbol.\n","summary":"<p>Gets name of the symbol.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/mxnet/symbol.cr","line_number":55,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/symbol.cr#L55"},"def":{"name":"name","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Internal.libcall(MXSymbolGetName, @handle, out name, out success)\nsuccess != 0 ? String.new(name) : nil\n"}},{"id":"nanprod(**kwargs)-instance-method","html_id":"nanprod(**kwargs)-instance-method","name":"nanprod","doc":"Convenience fluent method for `.nanprod`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/Symbol.html#nanprod(data,**kwargs)-class-method\">.nanprod</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"nanprod","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.nanprod(self, **kwargs)"}},{"id":"nansum(**kwargs)-instance-method","html_id":"nansum(**kwargs)-instance-method","name":"nansum","doc":"Convenience fluent method for `.nansum`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/Symbol.html#nansum(data,**kwargs)-class-method\">.nansum</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"nansum","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.nansum(self, **kwargs)"}},{"id":"norm(**kwargs)-instance-method","html_id":"norm(**kwargs)-instance-method","name":"norm","doc":"Convenience fluent method for `.norm`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/Symbol.html#norm(data,**kwargs)-class-method\">.norm</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"norm","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.norm(self, **kwargs)"}},{"id":"one_hot(depth,**kwargs)-instance-method","html_id":"one_hot(depth,**kwargs)-instance-method","name":"one_hot","doc":"Convenience fluent method for `.one_hot`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/Symbol.html#one_hot(indices,depth,**kwargs)-class-method\">.one_hot</a></code>.</p>","abstract":false,"args":[{"name":"depth","doc":null,"default_value":"","external_name":"depth","restriction":""}],"args_string":"(depth, **kwargs)","args_html":"(depth, **kwargs)","location":null,"def":{"name":"one_hot","args":[{"name":"depth","doc":null,"default_value":"","external_name":"depth","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.one_hot(self, depth, **kwargs)"}},{"id":"ones_like(**kwargs)-instance-method","html_id":"ones_like(**kwargs)-instance-method","name":"ones_like","doc":"Convenience fluent method for `.ones_like`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/Symbol.html#ones_like(data,**kwargs)-class-method\">.ones_like</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"ones_like","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.ones_like(self, **kwargs)"}},{"id":"pick(index,**kwargs)-instance-method","html_id":"pick(index,**kwargs)-instance-method","name":"pick","doc":"Convenience fluent method for `.pick`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/Symbol.html#pick(data,index,**kwargs)-class-method\">.pick</a></code>.</p>","abstract":false,"args":[{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":""}],"args_string":"(index, **kwargs)","args_html":"(index, **kwargs)","location":null,"def":{"name":"pick","args":[{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.pick(self, index, **kwargs)"}},{"id":"prod(**kwargs)-instance-method","html_id":"prod(**kwargs)-instance-method","name":"prod","doc":"Convenience fluent method for `.prod`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/Symbol.html#prod(data,**kwargs)-class-method\">.prod</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"prod","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.prod(self, **kwargs)"}},{"id":"radians(**kwargs)-instance-method","html_id":"radians(**kwargs)-instance-method","name":"radians","doc":"Convenience fluent method for `.radians`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/Symbol.html#radians(data,**kwargs)-class-method\">.radians</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"radians","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.radians(self, **kwargs)"}},{"id":"rcbrt(**kwargs)-instance-method","html_id":"rcbrt(**kwargs)-instance-method","name":"rcbrt","doc":"Convenience fluent method for `.rcbrt`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/Symbol.html#rcbrt(data,**kwargs)-class-method\">.rcbrt</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"rcbrt","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.rcbrt(self, **kwargs)"}},{"id":"reciprocal(**kwargs)-instance-method","html_id":"reciprocal(**kwargs)-instance-method","name":"reciprocal","doc":"Convenience fluent method for `.reciprocal`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/Symbol.html#reciprocal(data,**kwargs)-class-method\">.reciprocal</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"reciprocal","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.reciprocal(self, **kwargs)"}},{"id":"relu(**kwargs)-instance-method","html_id":"relu(**kwargs)-instance-method","name":"relu","doc":"Convenience fluent method for `.relu`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/Symbol.html#relu(data,**kwargs)-class-method\">.relu</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"relu","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.relu(self, **kwargs)"}},{"id":"reshape(shape,**kwargs)-instance-method","html_id":"reshape(shape,**kwargs)-instance-method","name":"reshape","doc":"Convenience fluent method for `.reshape`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/Symbol.html#reshape(data,shape,**kwargs)-class-method\">.reshape</a></code>.</p>","abstract":false,"args":[{"name":"shape","doc":null,"default_value":"","external_name":"shape","restriction":""}],"args_string":"(shape, **kwargs)","args_html":"(shape, **kwargs)","location":null,"def":{"name":"reshape","args":[{"name":"shape","doc":null,"default_value":"","external_name":"shape","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.reshape(self, shape, **kwargs)"}},{"id":"reshape_like(rhs,**kwargs)-instance-method","html_id":"reshape_like(rhs,**kwargs)-instance-method","name":"reshape_like","doc":"Convenience fluent method for `.reshape_like`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/Symbol.html#reshape_like(lhs,rhs,**kwargs)-class-method\">.reshape_like</a></code>.</p>","abstract":false,"args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"args_string":"(rhs, **kwargs)","args_html":"(rhs, **kwargs)","location":null,"def":{"name":"reshape_like","args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.reshape_like(self, rhs, **kwargs)"}},{"id":"rint(**kwargs)-instance-method","html_id":"rint(**kwargs)-instance-method","name":"rint","doc":"Convenience fluent method for `.rint`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/Symbol.html#rint(data,**kwargs)-class-method\">.rint</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"rint","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.rint(self, **kwargs)"}},{"id":"round(**kwargs)-instance-method","html_id":"round(**kwargs)-instance-method","name":"round","doc":"Convenience fluent method for `.round`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/Symbol.html#round(data,**kwargs)-class-method\">.round</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"round","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.round(self, **kwargs)"}},{"id":"rsqrt(**kwargs)-instance-method","html_id":"rsqrt(**kwargs)-instance-method","name":"rsqrt","doc":"Convenience fluent method for `.rsqrt`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/Symbol.html#rsqrt(data,**kwargs)-class-method\">.rsqrt</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"rsqrt","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.rsqrt(self, **kwargs)"}},{"id":"shape_array(**kwargs)-instance-method","html_id":"shape_array(**kwargs)-instance-method","name":"shape_array","doc":"Convenience fluent method for `.shape_array`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/Symbol.html#shape_array(data,**kwargs)-class-method\">.shape_array</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"shape_array","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.shape_array(self, **kwargs)"}},{"id":"shuffle(**kwargs)-instance-method","html_id":"shuffle(**kwargs)-instance-method","name":"shuffle","doc":"Convenience fluent method for `.shuffle`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/Symbol.html#shuffle(data,**kwargs)-class-method\">.shuffle</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"shuffle","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.shuffle(self, **kwargs)"}},{"id":"sigmoid(**kwargs)-instance-method","html_id":"sigmoid(**kwargs)-instance-method","name":"sigmoid","doc":"Convenience fluent method for `.sigmoid`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/Symbol.html#sigmoid(data,**kwargs)-class-method\">.sigmoid</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"sigmoid","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.sigmoid(self, **kwargs)"}},{"id":"sign(**kwargs)-instance-method","html_id":"sign(**kwargs)-instance-method","name":"sign","doc":"Convenience fluent method for `.sign`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/Symbol.html#sign(data,**kwargs)-class-method\">.sign</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"sign","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.sign(self, **kwargs)"}},{"id":"sin(**kwargs)-instance-method","html_id":"sin(**kwargs)-instance-method","name":"sin","doc":"Convenience fluent method for `.sin`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/Symbol.html#sin(data,**kwargs)-class-method\">.sin</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"sin","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.sin(self, **kwargs)"}},{"id":"sinh(**kwargs)-instance-method","html_id":"sinh(**kwargs)-instance-method","name":"sinh","doc":"Convenience fluent method for `.sinh`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/Symbol.html#sinh(data,**kwargs)-class-method\">.sinh</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"sinh","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.sinh(self, **kwargs)"}},{"id":"size_array(**kwargs)-instance-method","html_id":"size_array(**kwargs)-instance-method","name":"size_array","doc":"Convenience fluent method for `.size_array`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/Symbol.html#size_array(data,**kwargs)-class-method\">.size_array</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"size_array","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.size_array(self, **kwargs)"}},{"id":"slice(begin_begin,end_end,**kwargs)-instance-method","html_id":"slice(begin_begin,end_end,**kwargs)-instance-method","name":"slice","doc":"Convenience fluent method for `.slice`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/Symbol.html#slice(data,begin_begin,end_end,**kwargs)-class-method\">.slice</a></code>.</p>","abstract":false,"args":[{"name":"_begin","doc":null,"default_value":"","external_name":"begin","restriction":""},{"name":"_end","doc":null,"default_value":"","external_name":"end","restriction":""}],"args_string":"(begin _begin, end _end, **kwargs)","args_html":"(begin _begin, end _end, **kwargs)","location":null,"def":{"name":"slice","args":[{"name":"_begin","doc":null,"default_value":"","external_name":"begin","restriction":""},{"name":"_end","doc":null,"default_value":"","external_name":"end","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.slice(self, _begin, _end, **kwargs)"}},{"id":"slice_axis(axis,begin_begin,end_end,**kwargs)-instance-method","html_id":"slice_axis(axis,begin_begin,end_end,**kwargs)-instance-method","name":"slice_axis","doc":"Convenience fluent method for `.slice_axis`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/Symbol.html#slice_axis(data,axis,begin_begin,end_end,**kwargs)-class-method\">.slice_axis</a></code>.</p>","abstract":false,"args":[{"name":"axis","doc":null,"default_value":"","external_name":"axis","restriction":""},{"name":"_begin","doc":null,"default_value":"","external_name":"begin","restriction":""},{"name":"_end","doc":null,"default_value":"","external_name":"end","restriction":""}],"args_string":"(axis, begin _begin, end _end, **kwargs)","args_html":"(axis, begin _begin, end _end, **kwargs)","location":null,"def":{"name":"slice_axis","args":[{"name":"axis","doc":null,"default_value":"","external_name":"axis","restriction":""},{"name":"_begin","doc":null,"default_value":"","external_name":"begin","restriction":""},{"name":"_end","doc":null,"default_value":"","external_name":"end","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.slice_axis(self, axis, _begin, _end, **kwargs)"}},{"id":"slice_like(shape_like,**kwargs)-instance-method","html_id":"slice_like(shape_like,**kwargs)-instance-method","name":"slice_like","doc":"Convenience fluent method for `.slice_like`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/Symbol.html#slice_like(data,shape_like,**kwargs)-class-method\">.slice_like</a></code>.</p>","abstract":false,"args":[{"name":"shape_like","doc":null,"default_value":"","external_name":"shape_like","restriction":""}],"args_string":"(shape_like, **kwargs)","args_html":"(shape_like, **kwargs)","location":null,"def":{"name":"slice_like","args":[{"name":"shape_like","doc":null,"default_value":"","external_name":"shape_like","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.slice_like(self, shape_like, **kwargs)"}},{"id":"softmax(**kwargs)-instance-method","html_id":"softmax(**kwargs)-instance-method","name":"softmax","doc":"Convenience fluent method for `.softmax`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/Symbol.html#softmax(data,**kwargs)-class-method\">.softmax</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"softmax","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.softmax(self, **kwargs)"}},{"id":"sort(**kwargs)-instance-method","html_id":"sort(**kwargs)-instance-method","name":"sort","doc":"Convenience fluent method for `.sort`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/Symbol.html#sort(data,**kwargs)-class-method\">.sort</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"sort","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.sort(self, **kwargs)"}},{"id":"sqrt(**kwargs)-instance-method","html_id":"sqrt(**kwargs)-instance-method","name":"sqrt","doc":"Convenience fluent method for `.sqrt`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/Symbol.html#sqrt(data,**kwargs)-class-method\">.sqrt</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"sqrt","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.sqrt(self, **kwargs)"}},{"id":"square(**kwargs)-instance-method","html_id":"square(**kwargs)-instance-method","name":"square","doc":"Convenience fluent method for `.square`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/Symbol.html#square(data,**kwargs)-class-method\">.square</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"square","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.square(self, **kwargs)"}},{"id":"sum(**kwargs)-instance-method","html_id":"sum(**kwargs)-instance-method","name":"sum","doc":"Convenience fluent method for `.sum`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/Symbol.html#sum(data,**kwargs)-class-method\">.sum</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"sum","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.sum(self, **kwargs)"}},{"id":"take(indices,**kwargs)-instance-method","html_id":"take(indices,**kwargs)-instance-method","name":"take","doc":"Convenience fluent method for `.take`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/Symbol.html#take(a,indices,**kwargs)-class-method\">.take</a></code>.</p>","abstract":false,"args":[{"name":"indices","doc":null,"default_value":"","external_name":"indices","restriction":""}],"args_string":"(indices, **kwargs)","args_html":"(indices, **kwargs)","location":null,"def":{"name":"take","args":[{"name":"indices","doc":null,"default_value":"","external_name":"indices","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.take(self, indices, **kwargs)"}},{"id":"tan(**kwargs)-instance-method","html_id":"tan(**kwargs)-instance-method","name":"tan","doc":"Convenience fluent method for `.tan`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/Symbol.html#tan(data,**kwargs)-class-method\">.tan</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"tan","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.tan(self, **kwargs)"}},{"id":"tanh(**kwargs)-instance-method","html_id":"tanh(**kwargs)-instance-method","name":"tanh","doc":"Convenience fluent method for `.tanh`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/Symbol.html#tanh(data,**kwargs)-class-method\">.tanh</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"tanh","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.tanh(self, **kwargs)"}},{"id":"tile(reps,**kwargs)-instance-method","html_id":"tile(reps,**kwargs)-instance-method","name":"tile","doc":"Convenience fluent method for `.tile`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/Symbol.html#tile(data,reps,**kwargs)-class-method\">.tile</a></code>.</p>","abstract":false,"args":[{"name":"reps","doc":null,"default_value":"","external_name":"reps","restriction":""}],"args_string":"(reps, **kwargs)","args_html":"(reps, **kwargs)","location":null,"def":{"name":"tile","args":[{"name":"reps","doc":null,"default_value":"","external_name":"reps","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.tile(self, reps, **kwargs)"}},{"id":"to_s(io)-instance-method","html_id":"to_s(io)-instance-method","name":"to_s","doc":null,"summary":null,"abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/mxnet/symbol.cr","line_number":1092,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/symbol.cr#L1092"},"def":{"name":"to_s","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"io << \"<Symbol\"\n(io << \" \") << name\nio << \">\"\n"}},{"id":"topk(**kwargs)-instance-method","html_id":"topk(**kwargs)-instance-method","name":"topk","doc":"Convenience fluent method for `.topk`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/Symbol.html#topk(data,**kwargs)-class-method\">.topk</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"topk","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.topk(self, **kwargs)"}},{"id":"transpose(**kwargs)-instance-method","html_id":"transpose(**kwargs)-instance-method","name":"transpose","doc":"Convenience fluent method for `.transpose`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/Symbol.html#transpose(data,**kwargs)-class-method\">.transpose</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"transpose","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.transpose(self, **kwargs)"}},{"id":"trunc(**kwargs)-instance-method","html_id":"trunc(**kwargs)-instance-method","name":"trunc","doc":"Convenience fluent method for `.trunc`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/Symbol.html#trunc(data,**kwargs)-class-method\">.trunc</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"trunc","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.trunc(self, **kwargs)"}},{"id":"where(x,y,**kwargs)-instance-method","html_id":"where(x,y,**kwargs)-instance-method","name":"where","doc":"Convenience fluent method for `.where`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/Symbol.html#where(condition,x,y,**kwargs)-class-method\">.where</a></code>.</p>","abstract":false,"args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":""},{"name":"y","doc":null,"default_value":"","external_name":"y","restriction":""}],"args_string":"(x, y, **kwargs)","args_html":"(x, y, **kwargs)","location":null,"def":{"name":"where","args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":""},{"name":"y","doc":null,"default_value":"","external_name":"y","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.where(self, x, y, **kwargs)"}},{"id":"zeros_like(**kwargs)-instance-method","html_id":"zeros_like(**kwargs)-instance-method","name":"zeros_like","doc":"Convenience fluent method for `.zeros_like`.","summary":"<p>Convenience fluent method for <code><a href=\"../MXNet/Symbol.html#zeros_like(data,**kwargs)-class-method\">.zeros_like</a></code>.</p>","abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"zeros_like","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.zeros_like(self, **kwargs)"}},{"id":"|(other)-instance-method","html_id":"|(other)-instance-method","name":"|","doc":"Performs element-wise logical or (`|`) comparison operation\n(without broadcasting).","summary":"<p>Performs element-wise logical or (<code><a href=\"../MXNet/Symbol.html#%7C(other)-instance-method\">#|</a></code>) comparison operation (without broadcasting).</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":""}],"args_string":"(other)","args_html":"(other)","location":{"filename":"src/mxnet/symbol.cr","line_number":1061,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/symbol.cr#L1061"},"def":{"name":"|","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.class.logical_or(self, other)"}}],"macros":[],"types":[{"html_id":"mxnet/MXNet/Symbol/Contrib","path":"MXNet/Symbol/Contrib.html","kind":"class","full_name":"MXNet::Symbol::Contrib","name":"Contrib","abstract":false,"superclass":{"html_id":"mxnet/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"mxnet/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"mxnet/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"mxnet","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"mxnet/MXNet/Symbol","kind":"class","full_name":"MXNet::Symbol","name":"Symbol"},"doc":null,"summary":null,"class_methods":[{"id":"_AdaptiveAvgPooling2D(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_AdaptiveAvgPooling2D(data:MXNet::Symbol?,**kwargs)-class-method","name":"_AdaptiveAvgPooling2D","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_AdaptiveAvgPooling2D","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_contrib_AdaptiveAvgPooling2D\", data, **kwargs)"}},{"id":"_backward_quadratic(**kwargs)-class-method","html_id":"_backward_quadratic(**kwargs)-class-method","name":"_backward_quadratic","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"_backward_quadratic","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_contrib_backward_quadratic\", **kwargs)"}},{"id":"_BilinearResize2D(data:MXNet::Symbol?,height,width,**kwargs)-class-method","html_id":"_BilinearResize2D(data:MXNet::Symbol?,height,width,**kwargs)-class-method","name":"_BilinearResize2D","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"height","doc":null,"default_value":"","external_name":"height","restriction":""},{"name":"width","doc":null,"default_value":"","external_name":"width","restriction":""}],"args_string":"(data : MXNet::Symbol?, height, width, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, height, width, **kwargs)","location":null,"def":{"name":"_BilinearResize2D","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"height","doc":null,"default_value":"","external_name":"height","restriction":""},{"name":"width","doc":null,"default_value":"","external_name":"width","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_contrib_BilinearResize2D\", data, **kwargs.merge(height: height, width: width))"}},{"id":"_bipartite_matching(data:MXNet::Symbol?,threshold,**kwargs)-class-method","html_id":"_bipartite_matching(data:MXNet::Symbol?,threshold,**kwargs)-class-method","name":"_bipartite_matching","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"threshold","doc":null,"default_value":"","external_name":"threshold","restriction":""}],"args_string":"(data : MXNet::Symbol?, threshold, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, threshold, **kwargs)","location":null,"def":{"name":"_bipartite_matching","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"threshold","doc":null,"default_value":"","external_name":"threshold","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_contrib_bipartite_matching\", data, **kwargs.merge(threshold: threshold))"}},{"id":"_box_iou(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","html_id":"_box_iou(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","name":"_box_iou","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(lhs : MXNet::Symbol?, rhs : MXNet::Symbol?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, rhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_box_iou","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_contrib_box_iou\", lhs, rhs, **kwargs)"}},{"id":"_box_nms(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_box_nms(data:MXNet::Symbol?,**kwargs)-class-method","name":"_box_nms","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_box_nms","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_contrib_box_nms\", data, **kwargs)"}},{"id":"_box_non_maximum_suppression(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_box_non_maximum_suppression(data:MXNet::Symbol?,**kwargs)-class-method","name":"_box_non_maximum_suppression","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_box_non_maximum_suppression","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_contrib_box_non_maximum_suppression\", data, **kwargs)"}},{"id":"_count_sketch(data:MXNet::Symbol?,h:MXNet::Symbol?,s:MXNet::Symbol?,out_dim,**kwargs)-class-method","html_id":"_count_sketch(data:MXNet::Symbol?,h:MXNet::Symbol?,s:MXNet::Symbol?,out_dim,**kwargs)-class-method","name":"_count_sketch","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"h","doc":null,"default_value":"","external_name":"h","restriction":"MXNet::Symbol | ::Nil"},{"name":"s","doc":null,"default_value":"","external_name":"s","restriction":"MXNet::Symbol | ::Nil"},{"name":"out_dim","doc":null,"default_value":"","external_name":"out_dim","restriction":""}],"args_string":"(data : MXNet::Symbol?, h : MXNet::Symbol?, s : MXNet::Symbol?, out_dim, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, h : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, s : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, out_dim, **kwargs)","location":null,"def":{"name":"_count_sketch","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"h","doc":null,"default_value":"","external_name":"h","restriction":"MXNet::Symbol | ::Nil"},{"name":"s","doc":null,"default_value":"","external_name":"s","restriction":"MXNet::Symbol | ::Nil"},{"name":"out_dim","doc":null,"default_value":"","external_name":"out_dim","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_contrib_count_sketch\", data, h, s, **kwargs.merge(out_dim: out_dim))"}},{"id":"_ctc_loss(data:MXNet::Symbol?,label:MXNet::Symbol?,data_lengths:MXNet::Symbol?,label_lengths:MXNet::Symbol?,**kwargs)-class-method","html_id":"_ctc_loss(data:MXNet::Symbol?,label:MXNet::Symbol?,data_lengths:MXNet::Symbol?,label_lengths:MXNet::Symbol?,**kwargs)-class-method","name":"_ctc_loss","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"label","doc":null,"default_value":"","external_name":"label","restriction":"MXNet::Symbol | ::Nil"},{"name":"data_lengths","doc":null,"default_value":"","external_name":"data_lengths","restriction":"MXNet::Symbol | ::Nil"},{"name":"label_lengths","doc":null,"default_value":"","external_name":"label_lengths","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, label : MXNet::Symbol?, data_lengths : MXNet::Symbol?, label_lengths : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, label : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, data_lengths : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, label_lengths : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_ctc_loss","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"label","doc":null,"default_value":"","external_name":"label","restriction":"MXNet::Symbol | ::Nil"},{"name":"data_lengths","doc":null,"default_value":"","external_name":"data_lengths","restriction":"MXNet::Symbol | ::Nil"},{"name":"label_lengths","doc":null,"default_value":"","external_name":"label_lengths","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_contrib_ctc_loss\", data, label, data_lengths, label_lengths, **kwargs)"}},{"id":"_CTCLoss(data:MXNet::Symbol?,label:MXNet::Symbol?,data_lengths:MXNet::Symbol?,label_lengths:MXNet::Symbol?,**kwargs)-class-method","html_id":"_CTCLoss(data:MXNet::Symbol?,label:MXNet::Symbol?,data_lengths:MXNet::Symbol?,label_lengths:MXNet::Symbol?,**kwargs)-class-method","name":"_CTCLoss","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"label","doc":null,"default_value":"","external_name":"label","restriction":"MXNet::Symbol | ::Nil"},{"name":"data_lengths","doc":null,"default_value":"","external_name":"data_lengths","restriction":"MXNet::Symbol | ::Nil"},{"name":"label_lengths","doc":null,"default_value":"","external_name":"label_lengths","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, label : MXNet::Symbol?, data_lengths : MXNet::Symbol?, label_lengths : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, label : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, data_lengths : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, label_lengths : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_CTCLoss","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"label","doc":null,"default_value":"","external_name":"label","restriction":"MXNet::Symbol | ::Nil"},{"name":"data_lengths","doc":null,"default_value":"","external_name":"data_lengths","restriction":"MXNet::Symbol | ::Nil"},{"name":"label_lengths","doc":null,"default_value":"","external_name":"label_lengths","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_contrib_CTCLoss\", data, label, data_lengths, label_lengths, **kwargs)"}},{"id":"_DeformableConvolution(data:MXNet::Symbol?,offset:MXNet::Symbol?,weight:MXNet::Symbol?,bias:MXNet::Symbol?,kernel,num_filter,**kwargs)-class-method","html_id":"_DeformableConvolution(data:MXNet::Symbol?,offset:MXNet::Symbol?,weight:MXNet::Symbol?,bias:MXNet::Symbol?,kernel,num_filter,**kwargs)-class-method","name":"_DeformableConvolution","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"offset","doc":null,"default_value":"","external_name":"offset","restriction":"MXNet::Symbol | ::Nil"},{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::Symbol | ::Nil"},{"name":"bias","doc":null,"default_value":"","external_name":"bias","restriction":"MXNet::Symbol | ::Nil"},{"name":"kernel","doc":null,"default_value":"","external_name":"kernel","restriction":""},{"name":"num_filter","doc":null,"default_value":"","external_name":"num_filter","restriction":""}],"args_string":"(data : MXNet::Symbol?, offset : MXNet::Symbol?, weight : MXNet::Symbol?, bias : MXNet::Symbol?, kernel, num_filter, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, offset : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, weight : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, bias : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, kernel, num_filter, **kwargs)","location":null,"def":{"name":"_DeformableConvolution","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"offset","doc":null,"default_value":"","external_name":"offset","restriction":"MXNet::Symbol | ::Nil"},{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::Symbol | ::Nil"},{"name":"bias","doc":null,"default_value":"","external_name":"bias","restriction":"MXNet::Symbol | ::Nil"},{"name":"kernel","doc":null,"default_value":"","external_name":"kernel","restriction":""},{"name":"num_filter","doc":null,"default_value":"","external_name":"num_filter","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_contrib_DeformableConvolution\", data, offset, weight, bias, **kwargs.merge(kernel: kernel, num_filter: num_filter))"}},{"id":"_DeformablePSROIPooling(spatial_scale,output_dim,group_size,pooled_size,**kwargs)-class-method","html_id":"_DeformablePSROIPooling(spatial_scale,output_dim,group_size,pooled_size,**kwargs)-class-method","name":"_DeformablePSROIPooling","doc":null,"summary":null,"abstract":false,"args":[{"name":"spatial_scale","doc":null,"default_value":"","external_name":"spatial_scale","restriction":""},{"name":"output_dim","doc":null,"default_value":"","external_name":"output_dim","restriction":""},{"name":"group_size","doc":null,"default_value":"","external_name":"group_size","restriction":""},{"name":"pooled_size","doc":null,"default_value":"","external_name":"pooled_size","restriction":""}],"args_string":"(spatial_scale, output_dim, group_size, pooled_size, **kwargs)","args_html":"(spatial_scale, output_dim, group_size, pooled_size, **kwargs)","location":null,"def":{"name":"_DeformablePSROIPooling","args":[{"name":"spatial_scale","doc":null,"default_value":"","external_name":"spatial_scale","restriction":""},{"name":"output_dim","doc":null,"default_value":"","external_name":"output_dim","restriction":""},{"name":"group_size","doc":null,"default_value":"","external_name":"group_size","restriction":""},{"name":"pooled_size","doc":null,"default_value":"","external_name":"pooled_size","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_contrib_DeformablePSROIPooling\", **kwargs.merge(spatial_scale: spatial_scale, output_dim: output_dim, group_size: group_size, pooled_size: pooled_size))"}},{"id":"_dequantize(data:MXNet::Symbol?,min_range:MXNet::Symbol?,max_range:MXNet::Symbol?,**kwargs)-class-method","html_id":"_dequantize(data:MXNet::Symbol?,min_range:MXNet::Symbol?,max_range:MXNet::Symbol?,**kwargs)-class-method","name":"_dequantize","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"min_range","doc":null,"default_value":"","external_name":"min_range","restriction":"MXNet::Symbol | ::Nil"},{"name":"max_range","doc":null,"default_value":"","external_name":"max_range","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, min_range : MXNet::Symbol?, max_range : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, min_range : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, max_range : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_dequantize","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"min_range","doc":null,"default_value":"","external_name":"min_range","restriction":"MXNet::Symbol | ::Nil"},{"name":"max_range","doc":null,"default_value":"","external_name":"max_range","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_contrib_dequantize\", data, min_range, max_range, **kwargs)"}},{"id":"_div_sqrt_dim(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_div_sqrt_dim(data:MXNet::Symbol?,**kwargs)-class-method","name":"_div_sqrt_dim","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_div_sqrt_dim","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_contrib_div_sqrt_dim\", data, **kwargs)"}},{"id":"_fft(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_fft(data:MXNet::Symbol?,**kwargs)-class-method","name":"_fft","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_fft","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_contrib_fft\", data, **kwargs)"}},{"id":"_ifft(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_ifft(data:MXNet::Symbol?,**kwargs)-class-method","name":"_ifft","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_ifft","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_contrib_ifft\", data, **kwargs)"}},{"id":"_MultiBoxDetection(cls_prob:MXNet::Symbol?,loc_pred:MXNet::Symbol?,anchor:MXNet::Symbol?,**kwargs)-class-method","html_id":"_MultiBoxDetection(cls_prob:MXNet::Symbol?,loc_pred:MXNet::Symbol?,anchor:MXNet::Symbol?,**kwargs)-class-method","name":"_MultiBoxDetection","doc":null,"summary":null,"abstract":false,"args":[{"name":"cls_prob","doc":null,"default_value":"","external_name":"cls_prob","restriction":"MXNet::Symbol | ::Nil"},{"name":"loc_pred","doc":null,"default_value":"","external_name":"loc_pred","restriction":"MXNet::Symbol | ::Nil"},{"name":"anchor","doc":null,"default_value":"","external_name":"anchor","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(cls_prob : MXNet::Symbol?, loc_pred : MXNet::Symbol?, anchor : MXNet::Symbol?, **kwargs)","args_html":"(cls_prob : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, loc_pred : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, anchor : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_MultiBoxDetection","args":[{"name":"cls_prob","doc":null,"default_value":"","external_name":"cls_prob","restriction":"MXNet::Symbol | ::Nil"},{"name":"loc_pred","doc":null,"default_value":"","external_name":"loc_pred","restriction":"MXNet::Symbol | ::Nil"},{"name":"anchor","doc":null,"default_value":"","external_name":"anchor","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_contrib_MultiBoxDetection\", cls_prob, loc_pred, anchor, **kwargs)"}},{"id":"_MultiBoxPrior(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_MultiBoxPrior(data:MXNet::Symbol?,**kwargs)-class-method","name":"_MultiBoxPrior","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_MultiBoxPrior","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_contrib_MultiBoxPrior\", data, **kwargs)"}},{"id":"_MultiBoxTarget(anchor:MXNet::Symbol?,label:MXNet::Symbol?,cls_pred:MXNet::Symbol?,**kwargs)-class-method","html_id":"_MultiBoxTarget(anchor:MXNet::Symbol?,label:MXNet::Symbol?,cls_pred:MXNet::Symbol?,**kwargs)-class-method","name":"_MultiBoxTarget","doc":null,"summary":null,"abstract":false,"args":[{"name":"anchor","doc":null,"default_value":"","external_name":"anchor","restriction":"MXNet::Symbol | ::Nil"},{"name":"label","doc":null,"default_value":"","external_name":"label","restriction":"MXNet::Symbol | ::Nil"},{"name":"cls_pred","doc":null,"default_value":"","external_name":"cls_pred","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(anchor : MXNet::Symbol?, label : MXNet::Symbol?, cls_pred : MXNet::Symbol?, **kwargs)","args_html":"(anchor : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, label : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, cls_pred : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_MultiBoxTarget","args":[{"name":"anchor","doc":null,"default_value":"","external_name":"anchor","restriction":"MXNet::Symbol | ::Nil"},{"name":"label","doc":null,"default_value":"","external_name":"label","restriction":"MXNet::Symbol | ::Nil"},{"name":"cls_pred","doc":null,"default_value":"","external_name":"cls_pred","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_contrib_MultiBoxTarget\", anchor, label, cls_pred, **kwargs)"}},{"id":"_MultiProposal(cls_prob:MXNet::Symbol?,bbox_pred:MXNet::Symbol?,im_info:MXNet::Symbol?,**kwargs)-class-method","html_id":"_MultiProposal(cls_prob:MXNet::Symbol?,bbox_pred:MXNet::Symbol?,im_info:MXNet::Symbol?,**kwargs)-class-method","name":"_MultiProposal","doc":null,"summary":null,"abstract":false,"args":[{"name":"cls_prob","doc":null,"default_value":"","external_name":"cls_prob","restriction":"MXNet::Symbol | ::Nil"},{"name":"bbox_pred","doc":null,"default_value":"","external_name":"bbox_pred","restriction":"MXNet::Symbol | ::Nil"},{"name":"im_info","doc":null,"default_value":"","external_name":"im_info","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(cls_prob : MXNet::Symbol?, bbox_pred : MXNet::Symbol?, im_info : MXNet::Symbol?, **kwargs)","args_html":"(cls_prob : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, bbox_pred : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, im_info : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_MultiProposal","args":[{"name":"cls_prob","doc":null,"default_value":"","external_name":"cls_prob","restriction":"MXNet::Symbol | ::Nil"},{"name":"bbox_pred","doc":null,"default_value":"","external_name":"bbox_pred","restriction":"MXNet::Symbol | ::Nil"},{"name":"im_info","doc":null,"default_value":"","external_name":"im_info","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_contrib_MultiProposal\", cls_prob, bbox_pred, im_info, **kwargs)"}},{"id":"_Proposal(cls_prob:MXNet::Symbol?,bbox_pred:MXNet::Symbol?,im_info:MXNet::Symbol?,**kwargs)-class-method","html_id":"_Proposal(cls_prob:MXNet::Symbol?,bbox_pred:MXNet::Symbol?,im_info:MXNet::Symbol?,**kwargs)-class-method","name":"_Proposal","doc":null,"summary":null,"abstract":false,"args":[{"name":"cls_prob","doc":null,"default_value":"","external_name":"cls_prob","restriction":"MXNet::Symbol | ::Nil"},{"name":"bbox_pred","doc":null,"default_value":"","external_name":"bbox_pred","restriction":"MXNet::Symbol | ::Nil"},{"name":"im_info","doc":null,"default_value":"","external_name":"im_info","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(cls_prob : MXNet::Symbol?, bbox_pred : MXNet::Symbol?, im_info : MXNet::Symbol?, **kwargs)","args_html":"(cls_prob : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, bbox_pred : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, im_info : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_Proposal","args":[{"name":"cls_prob","doc":null,"default_value":"","external_name":"cls_prob","restriction":"MXNet::Symbol | ::Nil"},{"name":"bbox_pred","doc":null,"default_value":"","external_name":"bbox_pred","restriction":"MXNet::Symbol | ::Nil"},{"name":"im_info","doc":null,"default_value":"","external_name":"im_info","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_contrib_Proposal\", cls_prob, bbox_pred, im_info, **kwargs)"}},{"id":"_PSROIPooling(spatial_scale,output_dim,pooled_size,**kwargs)-class-method","html_id":"_PSROIPooling(spatial_scale,output_dim,pooled_size,**kwargs)-class-method","name":"_PSROIPooling","doc":null,"summary":null,"abstract":false,"args":[{"name":"spatial_scale","doc":null,"default_value":"","external_name":"spatial_scale","restriction":""},{"name":"output_dim","doc":null,"default_value":"","external_name":"output_dim","restriction":""},{"name":"pooled_size","doc":null,"default_value":"","external_name":"pooled_size","restriction":""}],"args_string":"(spatial_scale, output_dim, pooled_size, **kwargs)","args_html":"(spatial_scale, output_dim, pooled_size, **kwargs)","location":null,"def":{"name":"_PSROIPooling","args":[{"name":"spatial_scale","doc":null,"default_value":"","external_name":"spatial_scale","restriction":""},{"name":"output_dim","doc":null,"default_value":"","external_name":"output_dim","restriction":""},{"name":"pooled_size","doc":null,"default_value":"","external_name":"pooled_size","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_contrib_PSROIPooling\", **kwargs.merge(spatial_scale: spatial_scale, output_dim: output_dim, pooled_size: pooled_size))"}},{"id":"_quadratic(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_quadratic(data:MXNet::Symbol?,**kwargs)-class-method","name":"_quadratic","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_quadratic","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_contrib_quadratic\", data, **kwargs)"}},{"id":"_quantize(data:MXNet::Symbol?,min_range:MXNet::Symbol?,max_range:MXNet::Symbol?,**kwargs)-class-method","html_id":"_quantize(data:MXNet::Symbol?,min_range:MXNet::Symbol?,max_range:MXNet::Symbol?,**kwargs)-class-method","name":"_quantize","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"min_range","doc":null,"default_value":"","external_name":"min_range","restriction":"MXNet::Symbol | ::Nil"},{"name":"max_range","doc":null,"default_value":"","external_name":"max_range","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, min_range : MXNet::Symbol?, max_range : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, min_range : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, max_range : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_quantize","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"min_range","doc":null,"default_value":"","external_name":"min_range","restriction":"MXNet::Symbol | ::Nil"},{"name":"max_range","doc":null,"default_value":"","external_name":"max_range","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_contrib_quantize\", data, min_range, max_range, **kwargs)"}},{"id":"_quantized_conv(data:MXNet::Symbol?,weight:MXNet::Symbol?,bias:MXNet::Symbol?,min_data:MXNet::Symbol?,max_data:MXNet::Symbol?,min_weight:MXNet::Symbol?,max_weight:MXNet::Symbol?,min_bias:MXNet::Symbol?,max_bias:MXNet::Symbol?,kernel,num_filter,**kwargs)-class-method","html_id":"_quantized_conv(data:MXNet::Symbol?,weight:MXNet::Symbol?,bias:MXNet::Symbol?,min_data:MXNet::Symbol?,max_data:MXNet::Symbol?,min_weight:MXNet::Symbol?,max_weight:MXNet::Symbol?,min_bias:MXNet::Symbol?,max_bias:MXNet::Symbol?,kernel,num_filter,**kwargs)-class-method","name":"_quantized_conv","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::Symbol | ::Nil"},{"name":"bias","doc":null,"default_value":"","external_name":"bias","restriction":"MXNet::Symbol | ::Nil"},{"name":"min_data","doc":null,"default_value":"","external_name":"min_data","restriction":"MXNet::Symbol | ::Nil"},{"name":"max_data","doc":null,"default_value":"","external_name":"max_data","restriction":"MXNet::Symbol | ::Nil"},{"name":"min_weight","doc":null,"default_value":"","external_name":"min_weight","restriction":"MXNet::Symbol | ::Nil"},{"name":"max_weight","doc":null,"default_value":"","external_name":"max_weight","restriction":"MXNet::Symbol | ::Nil"},{"name":"min_bias","doc":null,"default_value":"","external_name":"min_bias","restriction":"MXNet::Symbol | ::Nil"},{"name":"max_bias","doc":null,"default_value":"","external_name":"max_bias","restriction":"MXNet::Symbol | ::Nil"},{"name":"kernel","doc":null,"default_value":"","external_name":"kernel","restriction":""},{"name":"num_filter","doc":null,"default_value":"","external_name":"num_filter","restriction":""}],"args_string":"(data : MXNet::Symbol?, weight : MXNet::Symbol?, bias : MXNet::Symbol?, min_data : MXNet::Symbol?, max_data : MXNet::Symbol?, min_weight : MXNet::Symbol?, max_weight : MXNet::Symbol?, min_bias : MXNet::Symbol?, max_bias : MXNet::Symbol?, kernel, num_filter, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, weight : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, bias : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, min_data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, max_data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, min_weight : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, max_weight : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, min_bias : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, max_bias : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, kernel, num_filter, **kwargs)","location":null,"def":{"name":"_quantized_conv","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::Symbol | ::Nil"},{"name":"bias","doc":null,"default_value":"","external_name":"bias","restriction":"MXNet::Symbol | ::Nil"},{"name":"min_data","doc":null,"default_value":"","external_name":"min_data","restriction":"MXNet::Symbol | ::Nil"},{"name":"max_data","doc":null,"default_value":"","external_name":"max_data","restriction":"MXNet::Symbol | ::Nil"},{"name":"min_weight","doc":null,"default_value":"","external_name":"min_weight","restriction":"MXNet::Symbol | ::Nil"},{"name":"max_weight","doc":null,"default_value":"","external_name":"max_weight","restriction":"MXNet::Symbol | ::Nil"},{"name":"min_bias","doc":null,"default_value":"","external_name":"min_bias","restriction":"MXNet::Symbol | ::Nil"},{"name":"max_bias","doc":null,"default_value":"","external_name":"max_bias","restriction":"MXNet::Symbol | ::Nil"},{"name":"kernel","doc":null,"default_value":"","external_name":"kernel","restriction":""},{"name":"num_filter","doc":null,"default_value":"","external_name":"num_filter","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_contrib_quantized_conv\", data, weight, bias, min_data, max_data, min_weight, max_weight, min_bias, max_bias, **kwargs.merge(kernel: kernel, num_filter: num_filter))"}},{"id":"_quantized_flatten(data:MXNet::Symbol?,min_data:MXNet::Symbol?,max_data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_quantized_flatten(data:MXNet::Symbol?,min_data:MXNet::Symbol?,max_data:MXNet::Symbol?,**kwargs)-class-method","name":"_quantized_flatten","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"min_data","doc":null,"default_value":"","external_name":"min_data","restriction":"MXNet::Symbol | ::Nil"},{"name":"max_data","doc":null,"default_value":"","external_name":"max_data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, min_data : MXNet::Symbol?, max_data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, min_data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, max_data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_quantized_flatten","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"min_data","doc":null,"default_value":"","external_name":"min_data","restriction":"MXNet::Symbol | ::Nil"},{"name":"max_data","doc":null,"default_value":"","external_name":"max_data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_contrib_quantized_flatten\", data, min_data, max_data, **kwargs)"}},{"id":"_quantized_fully_connected(data:MXNet::Symbol?,weight:MXNet::Symbol?,bias:MXNet::Symbol?,min_data:MXNet::Symbol?,max_data:MXNet::Symbol?,min_weight:MXNet::Symbol?,max_weight:MXNet::Symbol?,min_bias:MXNet::Symbol?,max_bias:MXNet::Symbol?,num_hidden,**kwargs)-class-method","html_id":"_quantized_fully_connected(data:MXNet::Symbol?,weight:MXNet::Symbol?,bias:MXNet::Symbol?,min_data:MXNet::Symbol?,max_data:MXNet::Symbol?,min_weight:MXNet::Symbol?,max_weight:MXNet::Symbol?,min_bias:MXNet::Symbol?,max_bias:MXNet::Symbol?,num_hidden,**kwargs)-class-method","name":"_quantized_fully_connected","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::Symbol | ::Nil"},{"name":"bias","doc":null,"default_value":"","external_name":"bias","restriction":"MXNet::Symbol | ::Nil"},{"name":"min_data","doc":null,"default_value":"","external_name":"min_data","restriction":"MXNet::Symbol | ::Nil"},{"name":"max_data","doc":null,"default_value":"","external_name":"max_data","restriction":"MXNet::Symbol | ::Nil"},{"name":"min_weight","doc":null,"default_value":"","external_name":"min_weight","restriction":"MXNet::Symbol | ::Nil"},{"name":"max_weight","doc":null,"default_value":"","external_name":"max_weight","restriction":"MXNet::Symbol | ::Nil"},{"name":"min_bias","doc":null,"default_value":"","external_name":"min_bias","restriction":"MXNet::Symbol | ::Nil"},{"name":"max_bias","doc":null,"default_value":"","external_name":"max_bias","restriction":"MXNet::Symbol | ::Nil"},{"name":"num_hidden","doc":null,"default_value":"","external_name":"num_hidden","restriction":""}],"args_string":"(data : MXNet::Symbol?, weight : MXNet::Symbol?, bias : MXNet::Symbol?, min_data : MXNet::Symbol?, max_data : MXNet::Symbol?, min_weight : MXNet::Symbol?, max_weight : MXNet::Symbol?, min_bias : MXNet::Symbol?, max_bias : MXNet::Symbol?, num_hidden, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, weight : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, bias : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, min_data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, max_data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, min_weight : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, max_weight : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, min_bias : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, max_bias : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, num_hidden, **kwargs)","location":null,"def":{"name":"_quantized_fully_connected","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::Symbol | ::Nil"},{"name":"bias","doc":null,"default_value":"","external_name":"bias","restriction":"MXNet::Symbol | ::Nil"},{"name":"min_data","doc":null,"default_value":"","external_name":"min_data","restriction":"MXNet::Symbol | ::Nil"},{"name":"max_data","doc":null,"default_value":"","external_name":"max_data","restriction":"MXNet::Symbol | ::Nil"},{"name":"min_weight","doc":null,"default_value":"","external_name":"min_weight","restriction":"MXNet::Symbol | ::Nil"},{"name":"max_weight","doc":null,"default_value":"","external_name":"max_weight","restriction":"MXNet::Symbol | ::Nil"},{"name":"min_bias","doc":null,"default_value":"","external_name":"min_bias","restriction":"MXNet::Symbol | ::Nil"},{"name":"max_bias","doc":null,"default_value":"","external_name":"max_bias","restriction":"MXNet::Symbol | ::Nil"},{"name":"num_hidden","doc":null,"default_value":"","external_name":"num_hidden","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_contrib_quantized_fully_connected\", data, weight, bias, min_data, max_data, min_weight, max_weight, min_bias, max_bias, **kwargs.merge(num_hidden: num_hidden))"}},{"id":"_quantized_pooling(data:MXNet::Symbol?,min_data:MXNet::Symbol?,max_data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_quantized_pooling(data:MXNet::Symbol?,min_data:MXNet::Symbol?,max_data:MXNet::Symbol?,**kwargs)-class-method","name":"_quantized_pooling","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"min_data","doc":null,"default_value":"","external_name":"min_data","restriction":"MXNet::Symbol | ::Nil"},{"name":"max_data","doc":null,"default_value":"","external_name":"max_data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, min_data : MXNet::Symbol?, max_data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, min_data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, max_data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_quantized_pooling","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"min_data","doc":null,"default_value":"","external_name":"min_data","restriction":"MXNet::Symbol | ::Nil"},{"name":"max_data","doc":null,"default_value":"","external_name":"max_data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_contrib_quantized_pooling\", data, min_data, max_data, **kwargs)"}},{"id":"_requantize(data:MXNet::Symbol?,min_range:MXNet::Symbol?,max_range:MXNet::Symbol?,**kwargs)-class-method","html_id":"_requantize(data:MXNet::Symbol?,min_range:MXNet::Symbol?,max_range:MXNet::Symbol?,**kwargs)-class-method","name":"_requantize","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"min_range","doc":null,"default_value":"","external_name":"min_range","restriction":"MXNet::Symbol | ::Nil"},{"name":"max_range","doc":null,"default_value":"","external_name":"max_range","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, min_range : MXNet::Symbol?, max_range : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, min_range : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, max_range : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_requantize","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"min_range","doc":null,"default_value":"","external_name":"min_range","restriction":"MXNet::Symbol | ::Nil"},{"name":"max_range","doc":null,"default_value":"","external_name":"max_range","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_contrib_requantize\", data, min_range, max_range, **kwargs)"}},{"id":"_ROIAlign(data:MXNet::Symbol?,rois:MXNet::Symbol?,pooled_size,spatial_scale,**kwargs)-class-method","html_id":"_ROIAlign(data:MXNet::Symbol?,rois:MXNet::Symbol?,pooled_size,spatial_scale,**kwargs)-class-method","name":"_ROIAlign","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"rois","doc":null,"default_value":"","external_name":"rois","restriction":"MXNet::Symbol | ::Nil"},{"name":"pooled_size","doc":null,"default_value":"","external_name":"pooled_size","restriction":""},{"name":"spatial_scale","doc":null,"default_value":"","external_name":"spatial_scale","restriction":""}],"args_string":"(data : MXNet::Symbol?, rois : MXNet::Symbol?, pooled_size, spatial_scale, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, rois : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, pooled_size, spatial_scale, **kwargs)","location":null,"def":{"name":"_ROIAlign","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"rois","doc":null,"default_value":"","external_name":"rois","restriction":"MXNet::Symbol | ::Nil"},{"name":"pooled_size","doc":null,"default_value":"","external_name":"pooled_size","restriction":""},{"name":"spatial_scale","doc":null,"default_value":"","external_name":"spatial_scale","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_contrib_ROIAlign\", data, rois, **kwargs.merge(pooled_size: pooled_size, spatial_scale: spatial_scale))"}},{"id":"_SparseEmbedding(data:MXNet::Symbol?,weight:MXNet::Symbol?,input_dim,output_dim,**kwargs)-class-method","html_id":"_SparseEmbedding(data:MXNet::Symbol?,weight:MXNet::Symbol?,input_dim,output_dim,**kwargs)-class-method","name":"_SparseEmbedding","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::Symbol | ::Nil"},{"name":"input_dim","doc":null,"default_value":"","external_name":"input_dim","restriction":""},{"name":"output_dim","doc":null,"default_value":"","external_name":"output_dim","restriction":""}],"args_string":"(data : MXNet::Symbol?, weight : MXNet::Symbol?, input_dim, output_dim, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, weight : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, input_dim, output_dim, **kwargs)","location":null,"def":{"name":"_SparseEmbedding","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::Symbol | ::Nil"},{"name":"input_dim","doc":null,"default_value":"","external_name":"input_dim","restriction":""},{"name":"output_dim","doc":null,"default_value":"","external_name":"output_dim","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_contrib_SparseEmbedding\", data, weight, **kwargs.merge(input_dim: input_dim, output_dim: output_dim))"}},{"id":"_SyncBatchNorm(data:MXNet::Symbol?,gamma:MXNet::Symbol?,beta:MXNet::Symbol?,moving_mean:MXNet::Symbol?,moving_var:MXNet::Symbol?,**kwargs)-class-method","html_id":"_SyncBatchNorm(data:MXNet::Symbol?,gamma:MXNet::Symbol?,beta:MXNet::Symbol?,moving_mean:MXNet::Symbol?,moving_var:MXNet::Symbol?,**kwargs)-class-method","name":"_SyncBatchNorm","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"gamma","doc":null,"default_value":"","external_name":"gamma","restriction":"MXNet::Symbol | ::Nil"},{"name":"beta","doc":null,"default_value":"","external_name":"beta","restriction":"MXNet::Symbol | ::Nil"},{"name":"moving_mean","doc":null,"default_value":"","external_name":"moving_mean","restriction":"MXNet::Symbol | ::Nil"},{"name":"moving_var","doc":null,"default_value":"","external_name":"moving_var","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, gamma : MXNet::Symbol?, beta : MXNet::Symbol?, moving_mean : MXNet::Symbol?, moving_var : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, gamma : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, beta : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, moving_mean : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, moving_var : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_SyncBatchNorm","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"gamma","doc":null,"default_value":"","external_name":"gamma","restriction":"MXNet::Symbol | ::Nil"},{"name":"beta","doc":null,"default_value":"","external_name":"beta","restriction":"MXNet::Symbol | ::Nil"},{"name":"moving_mean","doc":null,"default_value":"","external_name":"moving_mean","restriction":"MXNet::Symbol | ::Nil"},{"name":"moving_var","doc":null,"default_value":"","external_name":"moving_var","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_contrib_SyncBatchNorm\", data, gamma, beta, moving_mean, moving_var, **kwargs)"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"mxnet/MXNet/Symbol/Internal","path":"MXNet/Symbol/Internal.html","kind":"class","full_name":"MXNet::Symbol::Internal","name":"Internal","abstract":false,"superclass":{"html_id":"mxnet/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"mxnet/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"mxnet/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"mxnet","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"mxnet/MXNet/Symbol","kind":"class","full_name":"MXNet::Symbol","name":"Symbol"},"doc":null,"summary":null,"class_methods":[{"id":"_add(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","html_id":"_add(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","name":"_add","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(lhs : MXNet::Symbol?, rhs : MXNet::Symbol?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, rhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_add","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_add\", lhs, rhs, **kwargs)"}},{"id":"_arange(start,**kwargs)-class-method","html_id":"_arange(start,**kwargs)-class-method","name":"_arange","doc":null,"summary":null,"abstract":false,"args":[{"name":"start","doc":null,"default_value":"","external_name":"start","restriction":""}],"args_string":"(start, **kwargs)","args_html":"(start, **kwargs)","location":null,"def":{"name":"_arange","args":[{"name":"start","doc":null,"default_value":"","external_name":"start","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_arange\", **kwargs.merge(start: start))"}},{"id":"_broadcast_backward(**kwargs)-class-method","html_id":"_broadcast_backward(**kwargs)-class-method","name":"_broadcast_backward","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"_broadcast_backward","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_broadcast_backward\", **kwargs)"}},{"id":"_CachedOp(**kwargs)-class-method","html_id":"_CachedOp(**kwargs)-class-method","name":"_CachedOp","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"_CachedOp","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_CachedOp\", **kwargs)"}},{"id":"_cond(data:Array(MXNet::Symbol),num_args,num_outputs,cond_input_locs,then_input_locs,else_input_locs,**kwargs)-class-method","html_id":"_cond(data:Array(MXNet::Symbol),num_args,num_outputs,cond_input_locs,then_input_locs,else_input_locs,**kwargs)-class-method","name":"_cond","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"Array(MXNet::Symbol)"},{"name":"num_args","doc":null,"default_value":"","external_name":"num_args","restriction":""},{"name":"num_outputs","doc":null,"default_value":"","external_name":"num_outputs","restriction":""},{"name":"cond_input_locs","doc":null,"default_value":"","external_name":"cond_input_locs","restriction":""},{"name":"then_input_locs","doc":null,"default_value":"","external_name":"then_input_locs","restriction":""},{"name":"else_input_locs","doc":null,"default_value":"","external_name":"else_input_locs","restriction":""}],"args_string":"(data : Array(MXNet::Symbol), num_args, num_outputs, cond_input_locs, then_input_locs, else_input_locs, **kwargs)","args_html":"(data : Array(<a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>), num_args, num_outputs, cond_input_locs, then_input_locs, else_input_locs, **kwargs)","location":null,"def":{"name":"_cond","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"Array(MXNet::Symbol)"},{"name":"num_args","doc":null,"default_value":"","external_name":"num_args","restriction":""},{"name":"num_outputs","doc":null,"default_value":"","external_name":"num_outputs","restriction":""},{"name":"cond_input_locs","doc":null,"default_value":"","external_name":"cond_input_locs","restriction":""},{"name":"then_input_locs","doc":null,"default_value":"","external_name":"then_input_locs","restriction":""},{"name":"else_input_locs","doc":null,"default_value":"","external_name":"else_input_locs","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_cond\", data, **kwargs.merge(num_args: num_args, num_outputs: num_outputs, cond_input_locs: cond_input_locs, then_input_locs: then_input_locs, else_input_locs: else_input_locs))"}},{"id":"_copy(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_copy(data:MXNet::Symbol?,**kwargs)-class-method","name":"_copy","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_copy","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_copy\", data, **kwargs)"}},{"id":"_copyto(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_copyto(data:MXNet::Symbol?,**kwargs)-class-method","name":"_copyto","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_copyto","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_copyto\", data, **kwargs)"}},{"id":"_crop_assign(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,begin_begin,end_end,**kwargs)-class-method","html_id":"_crop_assign(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,begin_begin,end_end,**kwargs)-class-method","name":"_crop_assign","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"_begin","doc":null,"default_value":"","external_name":"begin","restriction":""},{"name":"_end","doc":null,"default_value":"","external_name":"end","restriction":""}],"args_string":"(lhs : MXNet::Symbol?, rhs : MXNet::Symbol?, begin _begin, end _end, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, rhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, begin _begin, end _end, **kwargs)","location":null,"def":{"name":"_crop_assign","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"_begin","doc":null,"default_value":"","external_name":"begin","restriction":""},{"name":"_end","doc":null,"default_value":"","external_name":"end","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_crop_assign\", lhs, rhs, **kwargs.merge(begin: _begin, end: _end))"}},{"id":"_crop_assign_scalar(data:MXNet::Symbol?,begin_begin,end_end,**kwargs)-class-method","html_id":"_crop_assign_scalar(data:MXNet::Symbol?,begin_begin,end_end,**kwargs)-class-method","name":"_crop_assign_scalar","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"_begin","doc":null,"default_value":"","external_name":"begin","restriction":""},{"name":"_end","doc":null,"default_value":"","external_name":"end","restriction":""}],"args_string":"(data : MXNet::Symbol?, begin _begin, end _end, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, begin _begin, end _end, **kwargs)","location":null,"def":{"name":"_crop_assign_scalar","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"_begin","doc":null,"default_value":"","external_name":"begin","restriction":""},{"name":"_end","doc":null,"default_value":"","external_name":"end","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_crop_assign_scalar\", data, **kwargs.merge(begin: _begin, end: _end))"}},{"id":"_CrossDeviceCopy(**kwargs)-class-method","html_id":"_CrossDeviceCopy(**kwargs)-class-method","name":"_CrossDeviceCopy","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"_CrossDeviceCopy","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_CrossDeviceCopy\", **kwargs)"}},{"id":"_CustomFunction(**kwargs)-class-method","html_id":"_CustomFunction(**kwargs)-class-method","name":"_CustomFunction","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"_CustomFunction","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_CustomFunction\", **kwargs)"}},{"id":"_cvcopyMakeBorder(top,bot,left,right,**kwargs)-class-method","html_id":"_cvcopyMakeBorder(top,bot,left,right,**kwargs)-class-method","name":"_cvcopyMakeBorder","doc":null,"summary":null,"abstract":false,"args":[{"name":"top","doc":null,"default_value":"","external_name":"top","restriction":""},{"name":"bot","doc":null,"default_value":"","external_name":"bot","restriction":""},{"name":"left","doc":null,"default_value":"","external_name":"left","restriction":""},{"name":"right","doc":null,"default_value":"","external_name":"right","restriction":""}],"args_string":"(top, bot, left, right, **kwargs)","args_html":"(top, bot, left, right, **kwargs)","location":null,"def":{"name":"_cvcopyMakeBorder","args":[{"name":"top","doc":null,"default_value":"","external_name":"top","restriction":""},{"name":"bot","doc":null,"default_value":"","external_name":"bot","restriction":""},{"name":"left","doc":null,"default_value":"","external_name":"left","restriction":""},{"name":"right","doc":null,"default_value":"","external_name":"right","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_cvcopyMakeBorder\", **kwargs.merge(top: top, bot: bot, left: left, right: right))"}},{"id":"_cvimdecode(**kwargs)-class-method","html_id":"_cvimdecode(**kwargs)-class-method","name":"_cvimdecode","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"_cvimdecode","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_cvimdecode\", **kwargs)"}},{"id":"_cvimread(filename,**kwargs)-class-method","html_id":"_cvimread(filename,**kwargs)-class-method","name":"_cvimread","doc":null,"summary":null,"abstract":false,"args":[{"name":"filename","doc":null,"default_value":"","external_name":"filename","restriction":""}],"args_string":"(filename, **kwargs)","args_html":"(filename, **kwargs)","location":null,"def":{"name":"_cvimread","args":[{"name":"filename","doc":null,"default_value":"","external_name":"filename","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_cvimread\", **kwargs.merge(filename: filename))"}},{"id":"_cvimresize(w,h,**kwargs)-class-method","html_id":"_cvimresize(w,h,**kwargs)-class-method","name":"_cvimresize","doc":null,"summary":null,"abstract":false,"args":[{"name":"w","doc":null,"default_value":"","external_name":"w","restriction":""},{"name":"h","doc":null,"default_value":"","external_name":"h","restriction":""}],"args_string":"(w, h, **kwargs)","args_html":"(w, h, **kwargs)","location":null,"def":{"name":"_cvimresize","args":[{"name":"w","doc":null,"default_value":"","external_name":"w","restriction":""},{"name":"h","doc":null,"default_value":"","external_name":"h","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_cvimresize\", **kwargs.merge(w: w, h: h))"}},{"id":"_Div(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","html_id":"_Div(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","name":"_Div","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(lhs : MXNet::Symbol?, rhs : MXNet::Symbol?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, rhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_Div","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_Div\", lhs, rhs, **kwargs)"}},{"id":"_div(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","html_id":"_div(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","name":"_div","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(lhs : MXNet::Symbol?, rhs : MXNet::Symbol?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, rhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_div","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_div\", lhs, rhs, **kwargs)"}},{"id":"_div_scalar(data:MXNet::Symbol?,scalar,**kwargs)-class-method","html_id":"_div_scalar(data:MXNet::Symbol?,scalar,**kwargs)-class-method","name":"_div_scalar","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"args_string":"(data : MXNet::Symbol?, scalar, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, scalar, **kwargs)","location":null,"def":{"name":"_div_scalar","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_div_scalar\", data, **kwargs.merge(scalar: scalar))"}},{"id":"_DivScalar(data:MXNet::Symbol?,scalar,**kwargs)-class-method","html_id":"_DivScalar(data:MXNet::Symbol?,scalar,**kwargs)-class-method","name":"_DivScalar","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"args_string":"(data : MXNet::Symbol?, scalar, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, scalar, **kwargs)","location":null,"def":{"name":"_DivScalar","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_DivScalar\", data, **kwargs.merge(scalar: scalar))"}},{"id":"_equal(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","html_id":"_equal(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","name":"_equal","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(lhs : MXNet::Symbol?, rhs : MXNet::Symbol?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, rhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_equal","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_equal\", lhs, rhs, **kwargs)"}},{"id":"_Equal(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","html_id":"_Equal(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","name":"_Equal","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(lhs : MXNet::Symbol?, rhs : MXNet::Symbol?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, rhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_Equal","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_Equal\", lhs, rhs, **kwargs)"}},{"id":"_equal_scalar(data:MXNet::Symbol?,scalar,**kwargs)-class-method","html_id":"_equal_scalar(data:MXNet::Symbol?,scalar,**kwargs)-class-method","name":"_equal_scalar","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"args_string":"(data : MXNet::Symbol?, scalar, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, scalar, **kwargs)","location":null,"def":{"name":"_equal_scalar","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_equal_scalar\", data, **kwargs.merge(scalar: scalar))"}},{"id":"_EqualScalar(data:MXNet::Symbol?,scalar,**kwargs)-class-method","html_id":"_EqualScalar(data:MXNet::Symbol?,scalar,**kwargs)-class-method","name":"_EqualScalar","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"args_string":"(data : MXNet::Symbol?, scalar, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, scalar, **kwargs)","location":null,"def":{"name":"_EqualScalar","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_EqualScalar\", data, **kwargs.merge(scalar: scalar))"}},{"id":"_eye(n,**kwargs)-class-method","html_id":"_eye(n,**kwargs)-class-method","name":"_eye","doc":null,"summary":null,"abstract":false,"args":[{"name":"n","doc":null,"default_value":"","external_name":"n","restriction":""}],"args_string":"(n, **kwargs)","args_html":"(n, **kwargs)","location":null,"def":{"name":"_eye","args":[{"name":"n","doc":null,"default_value":"","external_name":"n","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_eye\", **kwargs.merge(n: n))"}},{"id":"_foreach(data:Array(MXNet::Symbol),num_args,num_outputs,num_out_data,in_state_locs,in_data_locs,remain_locs,**kwargs)-class-method","html_id":"_foreach(data:Array(MXNet::Symbol),num_args,num_outputs,num_out_data,in_state_locs,in_data_locs,remain_locs,**kwargs)-class-method","name":"_foreach","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"Array(MXNet::Symbol)"},{"name":"num_args","doc":null,"default_value":"","external_name":"num_args","restriction":""},{"name":"num_outputs","doc":null,"default_value":"","external_name":"num_outputs","restriction":""},{"name":"num_out_data","doc":null,"default_value":"","external_name":"num_out_data","restriction":""},{"name":"in_state_locs","doc":null,"default_value":"","external_name":"in_state_locs","restriction":""},{"name":"in_data_locs","doc":null,"default_value":"","external_name":"in_data_locs","restriction":""},{"name":"remain_locs","doc":null,"default_value":"","external_name":"remain_locs","restriction":""}],"args_string":"(data : Array(MXNet::Symbol), num_args, num_outputs, num_out_data, in_state_locs, in_data_locs, remain_locs, **kwargs)","args_html":"(data : Array(<a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>), num_args, num_outputs, num_out_data, in_state_locs, in_data_locs, remain_locs, **kwargs)","location":null,"def":{"name":"_foreach","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"Array(MXNet::Symbol)"},{"name":"num_args","doc":null,"default_value":"","external_name":"num_args","restriction":""},{"name":"num_outputs","doc":null,"default_value":"","external_name":"num_outputs","restriction":""},{"name":"num_out_data","doc":null,"default_value":"","external_name":"num_out_data","restriction":""},{"name":"in_state_locs","doc":null,"default_value":"","external_name":"in_state_locs","restriction":""},{"name":"in_data_locs","doc":null,"default_value":"","external_name":"in_data_locs","restriction":""},{"name":"remain_locs","doc":null,"default_value":"","external_name":"remain_locs","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_foreach\", data, **kwargs.merge(num_args: num_args, num_outputs: num_outputs, num_out_data: num_out_data, in_state_locs: in_state_locs, in_data_locs: in_data_locs, remain_locs: remain_locs))"}},{"id":"_full(value,**kwargs)-class-method","html_id":"_full(value,**kwargs)-class-method","name":"_full","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"args_string":"(value, **kwargs)","args_html":"(value, **kwargs)","location":null,"def":{"name":"_full","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_full\", **kwargs.merge(value: value))"}},{"id":"_grad_add(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","html_id":"_grad_add(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","name":"_grad_add","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(lhs : MXNet::Symbol?, rhs : MXNet::Symbol?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, rhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_grad_add","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_grad_add\", lhs, rhs, **kwargs)"}},{"id":"_greater(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","html_id":"_greater(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","name":"_greater","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(lhs : MXNet::Symbol?, rhs : MXNet::Symbol?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, rhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_greater","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_greater\", lhs, rhs, **kwargs)"}},{"id":"_Greater(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","html_id":"_Greater(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","name":"_Greater","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(lhs : MXNet::Symbol?, rhs : MXNet::Symbol?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, rhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_Greater","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_Greater\", lhs, rhs, **kwargs)"}},{"id":"_Greater_Equal(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","html_id":"_Greater_Equal(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","name":"_Greater_Equal","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(lhs : MXNet::Symbol?, rhs : MXNet::Symbol?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, rhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_Greater_Equal","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_Greater_Equal\", lhs, rhs, **kwargs)"}},{"id":"_greater_equal(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","html_id":"_greater_equal(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","name":"_greater_equal","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(lhs : MXNet::Symbol?, rhs : MXNet::Symbol?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, rhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_greater_equal","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_greater_equal\", lhs, rhs, **kwargs)"}},{"id":"_greater_equal_scalar(data:MXNet::Symbol?,scalar,**kwargs)-class-method","html_id":"_greater_equal_scalar(data:MXNet::Symbol?,scalar,**kwargs)-class-method","name":"_greater_equal_scalar","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"args_string":"(data : MXNet::Symbol?, scalar, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, scalar, **kwargs)","location":null,"def":{"name":"_greater_equal_scalar","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_greater_equal_scalar\", data, **kwargs.merge(scalar: scalar))"}},{"id":"_greater_scalar(data:MXNet::Symbol?,scalar,**kwargs)-class-method","html_id":"_greater_scalar(data:MXNet::Symbol?,scalar,**kwargs)-class-method","name":"_greater_scalar","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"args_string":"(data : MXNet::Symbol?, scalar, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, scalar, **kwargs)","location":null,"def":{"name":"_greater_scalar","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_greater_scalar\", data, **kwargs.merge(scalar: scalar))"}},{"id":"_GreaterEqualScalar(data:MXNet::Symbol?,scalar,**kwargs)-class-method","html_id":"_GreaterEqualScalar(data:MXNet::Symbol?,scalar,**kwargs)-class-method","name":"_GreaterEqualScalar","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"args_string":"(data : MXNet::Symbol?, scalar, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, scalar, **kwargs)","location":null,"def":{"name":"_GreaterEqualScalar","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_GreaterEqualScalar\", data, **kwargs.merge(scalar: scalar))"}},{"id":"_GreaterScalar(data:MXNet::Symbol?,scalar,**kwargs)-class-method","html_id":"_GreaterScalar(data:MXNet::Symbol?,scalar,**kwargs)-class-method","name":"_GreaterScalar","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"args_string":"(data : MXNet::Symbol?, scalar, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, scalar, **kwargs)","location":null,"def":{"name":"_GreaterScalar","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_GreaterScalar\", data, **kwargs.merge(scalar: scalar))"}},{"id":"_histogram(data:MXNet::Symbol?,bins:MXNet::Symbol?,**kwargs)-class-method","html_id":"_histogram(data:MXNet::Symbol?,bins:MXNet::Symbol?,**kwargs)-class-method","name":"_histogram","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"bins","doc":null,"default_value":"","external_name":"bins","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, bins : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, bins : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_histogram","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"bins","doc":null,"default_value":"","external_name":"bins","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_histogram\", data, bins, **kwargs)"}},{"id":"_hypot(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","html_id":"_hypot(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","name":"_hypot","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(lhs : MXNet::Symbol?, rhs : MXNet::Symbol?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, rhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_hypot","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_hypot\", lhs, rhs, **kwargs)"}},{"id":"_Hypot(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","html_id":"_Hypot(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","name":"_Hypot","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(lhs : MXNet::Symbol?, rhs : MXNet::Symbol?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, rhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_Hypot","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_Hypot\", lhs, rhs, **kwargs)"}},{"id":"_hypot_scalar(data:MXNet::Symbol?,scalar,**kwargs)-class-method","html_id":"_hypot_scalar(data:MXNet::Symbol?,scalar,**kwargs)-class-method","name":"_hypot_scalar","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"args_string":"(data : MXNet::Symbol?, scalar, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, scalar, **kwargs)","location":null,"def":{"name":"_hypot_scalar","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_hypot_scalar\", data, **kwargs.merge(scalar: scalar))"}},{"id":"_HypotScalar(data:MXNet::Symbol?,scalar,**kwargs)-class-method","html_id":"_HypotScalar(data:MXNet::Symbol?,scalar,**kwargs)-class-method","name":"_HypotScalar","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"args_string":"(data : MXNet::Symbol?, scalar, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, scalar, **kwargs)","location":null,"def":{"name":"_HypotScalar","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_HypotScalar\", data, **kwargs.merge(scalar: scalar))"}},{"id":"_identity_with_attr_like_rhs(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","html_id":"_identity_with_attr_like_rhs(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","name":"_identity_with_attr_like_rhs","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(lhs : MXNet::Symbol?, rhs : MXNet::Symbol?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, rhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_identity_with_attr_like_rhs","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_identity_with_attr_like_rhs\", lhs, rhs, **kwargs)"}},{"id":"_image_adjust_lighting(data:MXNet::Symbol?,alpha,**kwargs)-class-method","html_id":"_image_adjust_lighting(data:MXNet::Symbol?,alpha,**kwargs)-class-method","name":"_image_adjust_lighting","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"alpha","doc":null,"default_value":"","external_name":"alpha","restriction":""}],"args_string":"(data : MXNet::Symbol?, alpha, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, alpha, **kwargs)","location":null,"def":{"name":"_image_adjust_lighting","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"alpha","doc":null,"default_value":"","external_name":"alpha","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_image_adjust_lighting\", data, **kwargs.merge(alpha: alpha))"}},{"id":"_image_flip_left_right(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_image_flip_left_right(data:MXNet::Symbol?,**kwargs)-class-method","name":"_image_flip_left_right","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_image_flip_left_right","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_image_flip_left_right\", data, **kwargs)"}},{"id":"_image_flip_top_bottom(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_image_flip_top_bottom(data:MXNet::Symbol?,**kwargs)-class-method","name":"_image_flip_top_bottom","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_image_flip_top_bottom","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_image_flip_top_bottom\", data, **kwargs)"}},{"id":"_image_normalize(data:MXNet::Symbol?,mean,std,**kwargs)-class-method","html_id":"_image_normalize(data:MXNet::Symbol?,mean,std,**kwargs)-class-method","name":"_image_normalize","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"mean","doc":null,"default_value":"","external_name":"mean","restriction":""},{"name":"std","doc":null,"default_value":"","external_name":"std","restriction":""}],"args_string":"(data : MXNet::Symbol?, mean, std, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, mean, std, **kwargs)","location":null,"def":{"name":"_image_normalize","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"mean","doc":null,"default_value":"","external_name":"mean","restriction":""},{"name":"std","doc":null,"default_value":"","external_name":"std","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_image_normalize\", data, **kwargs.merge(mean: mean, std: std))"}},{"id":"_image_random_brightness(data:MXNet::Symbol?,min_factor,max_factor,**kwargs)-class-method","html_id":"_image_random_brightness(data:MXNet::Symbol?,min_factor,max_factor,**kwargs)-class-method","name":"_image_random_brightness","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"min_factor","doc":null,"default_value":"","external_name":"min_factor","restriction":""},{"name":"max_factor","doc":null,"default_value":"","external_name":"max_factor","restriction":""}],"args_string":"(data : MXNet::Symbol?, min_factor, max_factor, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, min_factor, max_factor, **kwargs)","location":null,"def":{"name":"_image_random_brightness","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"min_factor","doc":null,"default_value":"","external_name":"min_factor","restriction":""},{"name":"max_factor","doc":null,"default_value":"","external_name":"max_factor","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_image_random_brightness\", data, **kwargs.merge(min_factor: min_factor, max_factor: max_factor))"}},{"id":"_image_random_color_jitter(data:MXNet::Symbol?,brightness,contrast,saturation,hue,**kwargs)-class-method","html_id":"_image_random_color_jitter(data:MXNet::Symbol?,brightness,contrast,saturation,hue,**kwargs)-class-method","name":"_image_random_color_jitter","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"brightness","doc":null,"default_value":"","external_name":"brightness","restriction":""},{"name":"contrast","doc":null,"default_value":"","external_name":"contrast","restriction":""},{"name":"saturation","doc":null,"default_value":"","external_name":"saturation","restriction":""},{"name":"hue","doc":null,"default_value":"","external_name":"hue","restriction":""}],"args_string":"(data : MXNet::Symbol?, brightness, contrast, saturation, hue, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, brightness, contrast, saturation, hue, **kwargs)","location":null,"def":{"name":"_image_random_color_jitter","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"brightness","doc":null,"default_value":"","external_name":"brightness","restriction":""},{"name":"contrast","doc":null,"default_value":"","external_name":"contrast","restriction":""},{"name":"saturation","doc":null,"default_value":"","external_name":"saturation","restriction":""},{"name":"hue","doc":null,"default_value":"","external_name":"hue","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_image_random_color_jitter\", data, **kwargs.merge(brightness: brightness, contrast: contrast, saturation: saturation, hue: hue))"}},{"id":"_image_random_contrast(data:MXNet::Symbol?,min_factor,max_factor,**kwargs)-class-method","html_id":"_image_random_contrast(data:MXNet::Symbol?,min_factor,max_factor,**kwargs)-class-method","name":"_image_random_contrast","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"min_factor","doc":null,"default_value":"","external_name":"min_factor","restriction":""},{"name":"max_factor","doc":null,"default_value":"","external_name":"max_factor","restriction":""}],"args_string":"(data : MXNet::Symbol?, min_factor, max_factor, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, min_factor, max_factor, **kwargs)","location":null,"def":{"name":"_image_random_contrast","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"min_factor","doc":null,"default_value":"","external_name":"min_factor","restriction":""},{"name":"max_factor","doc":null,"default_value":"","external_name":"max_factor","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_image_random_contrast\", data, **kwargs.merge(min_factor: min_factor, max_factor: max_factor))"}},{"id":"_image_random_flip_left_right(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_image_random_flip_left_right(data:MXNet::Symbol?,**kwargs)-class-method","name":"_image_random_flip_left_right","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_image_random_flip_left_right","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_image_random_flip_left_right\", data, **kwargs)"}},{"id":"_image_random_flip_top_bottom(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_image_random_flip_top_bottom(data:MXNet::Symbol?,**kwargs)-class-method","name":"_image_random_flip_top_bottom","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_image_random_flip_top_bottom","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_image_random_flip_top_bottom\", data, **kwargs)"}},{"id":"_image_random_hue(data:MXNet::Symbol?,min_factor,max_factor,**kwargs)-class-method","html_id":"_image_random_hue(data:MXNet::Symbol?,min_factor,max_factor,**kwargs)-class-method","name":"_image_random_hue","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"min_factor","doc":null,"default_value":"","external_name":"min_factor","restriction":""},{"name":"max_factor","doc":null,"default_value":"","external_name":"max_factor","restriction":""}],"args_string":"(data : MXNet::Symbol?, min_factor, max_factor, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, min_factor, max_factor, **kwargs)","location":null,"def":{"name":"_image_random_hue","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"min_factor","doc":null,"default_value":"","external_name":"min_factor","restriction":""},{"name":"max_factor","doc":null,"default_value":"","external_name":"max_factor","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_image_random_hue\", data, **kwargs.merge(min_factor: min_factor, max_factor: max_factor))"}},{"id":"_image_random_lighting(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_image_random_lighting(data:MXNet::Symbol?,**kwargs)-class-method","name":"_image_random_lighting","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_image_random_lighting","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_image_random_lighting\", data, **kwargs)"}},{"id":"_image_random_saturation(data:MXNet::Symbol?,min_factor,max_factor,**kwargs)-class-method","html_id":"_image_random_saturation(data:MXNet::Symbol?,min_factor,max_factor,**kwargs)-class-method","name":"_image_random_saturation","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"min_factor","doc":null,"default_value":"","external_name":"min_factor","restriction":""},{"name":"max_factor","doc":null,"default_value":"","external_name":"max_factor","restriction":""}],"args_string":"(data : MXNet::Symbol?, min_factor, max_factor, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, min_factor, max_factor, **kwargs)","location":null,"def":{"name":"_image_random_saturation","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"min_factor","doc":null,"default_value":"","external_name":"min_factor","restriction":""},{"name":"max_factor","doc":null,"default_value":"","external_name":"max_factor","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_image_random_saturation\", data, **kwargs.merge(min_factor: min_factor, max_factor: max_factor))"}},{"id":"_image_to_tensor(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_image_to_tensor(data:MXNet::Symbol?,**kwargs)-class-method","name":"_image_to_tensor","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_image_to_tensor","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_image_to_tensor\", data, **kwargs)"}},{"id":"_imdecode(mean:MXNet::Symbol?,index,x0,y0,x1,y1,c,size,**kwargs)-class-method","html_id":"_imdecode(mean:MXNet::Symbol?,index,x0,y0,x1,y1,c,size,**kwargs)-class-method","name":"_imdecode","doc":null,"summary":null,"abstract":false,"args":[{"name":"mean","doc":null,"default_value":"","external_name":"mean","restriction":"MXNet::Symbol | ::Nil"},{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":""},{"name":"x0","doc":null,"default_value":"","external_name":"x0","restriction":""},{"name":"y0","doc":null,"default_value":"","external_name":"y0","restriction":""},{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":""},{"name":"y1","doc":null,"default_value":"","external_name":"y1","restriction":""},{"name":"c","doc":null,"default_value":"","external_name":"c","restriction":""},{"name":"size","doc":null,"default_value":"","external_name":"size","restriction":""}],"args_string":"(mean : MXNet::Symbol?, index, x0, y0, x1, y1, c, size, **kwargs)","args_html":"(mean : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, index, x0, y0, x1, y1, c, size, **kwargs)","location":null,"def":{"name":"_imdecode","args":[{"name":"mean","doc":null,"default_value":"","external_name":"mean","restriction":"MXNet::Symbol | ::Nil"},{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":""},{"name":"x0","doc":null,"default_value":"","external_name":"x0","restriction":""},{"name":"y0","doc":null,"default_value":"","external_name":"y0","restriction":""},{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":""},{"name":"y1","doc":null,"default_value":"","external_name":"y1","restriction":""},{"name":"c","doc":null,"default_value":"","external_name":"c","restriction":""},{"name":"size","doc":null,"default_value":"","external_name":"size","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_imdecode\", mean, **kwargs.merge(index: index, x0: x0, y0: y0, x1: x1, y1: y1, c: c, size: size))"}},{"id":"_Lesser(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","html_id":"_Lesser(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","name":"_Lesser","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(lhs : MXNet::Symbol?, rhs : MXNet::Symbol?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, rhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_Lesser","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_Lesser\", lhs, rhs, **kwargs)"}},{"id":"_lesser(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","html_id":"_lesser(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","name":"_lesser","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(lhs : MXNet::Symbol?, rhs : MXNet::Symbol?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, rhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_lesser","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_lesser\", lhs, rhs, **kwargs)"}},{"id":"_Lesser_Equal(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","html_id":"_Lesser_Equal(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","name":"_Lesser_Equal","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(lhs : MXNet::Symbol?, rhs : MXNet::Symbol?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, rhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_Lesser_Equal","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_Lesser_Equal\", lhs, rhs, **kwargs)"}},{"id":"_lesser_equal(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","html_id":"_lesser_equal(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","name":"_lesser_equal","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(lhs : MXNet::Symbol?, rhs : MXNet::Symbol?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, rhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_lesser_equal","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_lesser_equal\", lhs, rhs, **kwargs)"}},{"id":"_lesser_equal_scalar(data:MXNet::Symbol?,scalar,**kwargs)-class-method","html_id":"_lesser_equal_scalar(data:MXNet::Symbol?,scalar,**kwargs)-class-method","name":"_lesser_equal_scalar","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"args_string":"(data : MXNet::Symbol?, scalar, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, scalar, **kwargs)","location":null,"def":{"name":"_lesser_equal_scalar","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_lesser_equal_scalar\", data, **kwargs.merge(scalar: scalar))"}},{"id":"_lesser_scalar(data:MXNet::Symbol?,scalar,**kwargs)-class-method","html_id":"_lesser_scalar(data:MXNet::Symbol?,scalar,**kwargs)-class-method","name":"_lesser_scalar","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"args_string":"(data : MXNet::Symbol?, scalar, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, scalar, **kwargs)","location":null,"def":{"name":"_lesser_scalar","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_lesser_scalar\", data, **kwargs.merge(scalar: scalar))"}},{"id":"_LesserEqualScalar(data:MXNet::Symbol?,scalar,**kwargs)-class-method","html_id":"_LesserEqualScalar(data:MXNet::Symbol?,scalar,**kwargs)-class-method","name":"_LesserEqualScalar","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"args_string":"(data : MXNet::Symbol?, scalar, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, scalar, **kwargs)","location":null,"def":{"name":"_LesserEqualScalar","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_LesserEqualScalar\", data, **kwargs.merge(scalar: scalar))"}},{"id":"_LesserScalar(data:MXNet::Symbol?,scalar,**kwargs)-class-method","html_id":"_LesserScalar(data:MXNet::Symbol?,scalar,**kwargs)-class-method","name":"_LesserScalar","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"args_string":"(data : MXNet::Symbol?, scalar, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, scalar, **kwargs)","location":null,"def":{"name":"_LesserScalar","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_LesserScalar\", data, **kwargs.merge(scalar: scalar))"}},{"id":"_logical_and(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","html_id":"_logical_and(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","name":"_logical_and","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(lhs : MXNet::Symbol?, rhs : MXNet::Symbol?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, rhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_logical_and","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_logical_and\", lhs, rhs, **kwargs)"}},{"id":"_Logical_And(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","html_id":"_Logical_And(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","name":"_Logical_And","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(lhs : MXNet::Symbol?, rhs : MXNet::Symbol?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, rhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_Logical_And","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_Logical_And\", lhs, rhs, **kwargs)"}},{"id":"_logical_and_scalar(data:MXNet::Symbol?,scalar,**kwargs)-class-method","html_id":"_logical_and_scalar(data:MXNet::Symbol?,scalar,**kwargs)-class-method","name":"_logical_and_scalar","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"args_string":"(data : MXNet::Symbol?, scalar, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, scalar, **kwargs)","location":null,"def":{"name":"_logical_and_scalar","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_logical_and_scalar\", data, **kwargs.merge(scalar: scalar))"}},{"id":"_logical_or(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","html_id":"_logical_or(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","name":"_logical_or","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(lhs : MXNet::Symbol?, rhs : MXNet::Symbol?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, rhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_logical_or","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_logical_or\", lhs, rhs, **kwargs)"}},{"id":"_Logical_Or(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","html_id":"_Logical_Or(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","name":"_Logical_Or","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(lhs : MXNet::Symbol?, rhs : MXNet::Symbol?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, rhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_Logical_Or","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_Logical_Or\", lhs, rhs, **kwargs)"}},{"id":"_logical_or_scalar(data:MXNet::Symbol?,scalar,**kwargs)-class-method","html_id":"_logical_or_scalar(data:MXNet::Symbol?,scalar,**kwargs)-class-method","name":"_logical_or_scalar","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"args_string":"(data : MXNet::Symbol?, scalar, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, scalar, **kwargs)","location":null,"def":{"name":"_logical_or_scalar","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_logical_or_scalar\", data, **kwargs.merge(scalar: scalar))"}},{"id":"_logical_xor(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","html_id":"_logical_xor(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","name":"_logical_xor","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(lhs : MXNet::Symbol?, rhs : MXNet::Symbol?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, rhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_logical_xor","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_logical_xor\", lhs, rhs, **kwargs)"}},{"id":"_Logical_Xor(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","html_id":"_Logical_Xor(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","name":"_Logical_Xor","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(lhs : MXNet::Symbol?, rhs : MXNet::Symbol?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, rhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_Logical_Xor","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_Logical_Xor\", lhs, rhs, **kwargs)"}},{"id":"_logical_xor_scalar(data:MXNet::Symbol?,scalar,**kwargs)-class-method","html_id":"_logical_xor_scalar(data:MXNet::Symbol?,scalar,**kwargs)-class-method","name":"_logical_xor_scalar","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"args_string":"(data : MXNet::Symbol?, scalar, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, scalar, **kwargs)","location":null,"def":{"name":"_logical_xor_scalar","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_logical_xor_scalar\", data, **kwargs.merge(scalar: scalar))"}},{"id":"_LogicalAndScalar(data:MXNet::Symbol?,scalar,**kwargs)-class-method","html_id":"_LogicalAndScalar(data:MXNet::Symbol?,scalar,**kwargs)-class-method","name":"_LogicalAndScalar","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"args_string":"(data : MXNet::Symbol?, scalar, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, scalar, **kwargs)","location":null,"def":{"name":"_LogicalAndScalar","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_LogicalAndScalar\", data, **kwargs.merge(scalar: scalar))"}},{"id":"_LogicalOrScalar(data:MXNet::Symbol?,scalar,**kwargs)-class-method","html_id":"_LogicalOrScalar(data:MXNet::Symbol?,scalar,**kwargs)-class-method","name":"_LogicalOrScalar","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"args_string":"(data : MXNet::Symbol?, scalar, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, scalar, **kwargs)","location":null,"def":{"name":"_LogicalOrScalar","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_LogicalOrScalar\", data, **kwargs.merge(scalar: scalar))"}},{"id":"_LogicalXorScalar(data:MXNet::Symbol?,scalar,**kwargs)-class-method","html_id":"_LogicalXorScalar(data:MXNet::Symbol?,scalar,**kwargs)-class-method","name":"_LogicalXorScalar","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"args_string":"(data : MXNet::Symbol?, scalar, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, scalar, **kwargs)","location":null,"def":{"name":"_LogicalXorScalar","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_LogicalXorScalar\", data, **kwargs.merge(scalar: scalar))"}},{"id":"_Maximum(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","html_id":"_Maximum(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","name":"_Maximum","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(lhs : MXNet::Symbol?, rhs : MXNet::Symbol?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, rhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_Maximum","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_Maximum\", lhs, rhs, **kwargs)"}},{"id":"_maximum(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","html_id":"_maximum(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","name":"_maximum","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(lhs : MXNet::Symbol?, rhs : MXNet::Symbol?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, rhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_maximum","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_maximum\", lhs, rhs, **kwargs)"}},{"id":"_maximum_scalar(data:MXNet::Symbol?,scalar,**kwargs)-class-method","html_id":"_maximum_scalar(data:MXNet::Symbol?,scalar,**kwargs)-class-method","name":"_maximum_scalar","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"args_string":"(data : MXNet::Symbol?, scalar, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, scalar, **kwargs)","location":null,"def":{"name":"_maximum_scalar","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_maximum_scalar\", data, **kwargs.merge(scalar: scalar))"}},{"id":"_MaximumScalar(data:MXNet::Symbol?,scalar,**kwargs)-class-method","html_id":"_MaximumScalar(data:MXNet::Symbol?,scalar,**kwargs)-class-method","name":"_MaximumScalar","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"args_string":"(data : MXNet::Symbol?, scalar, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, scalar, **kwargs)","location":null,"def":{"name":"_MaximumScalar","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_MaximumScalar\", data, **kwargs.merge(scalar: scalar))"}},{"id":"_minimum(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","html_id":"_minimum(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","name":"_minimum","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(lhs : MXNet::Symbol?, rhs : MXNet::Symbol?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, rhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_minimum","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_minimum\", lhs, rhs, **kwargs)"}},{"id":"_Minimum(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","html_id":"_Minimum(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","name":"_Minimum","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(lhs : MXNet::Symbol?, rhs : MXNet::Symbol?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, rhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_Minimum","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_Minimum\", lhs, rhs, **kwargs)"}},{"id":"_minimum_scalar(data:MXNet::Symbol?,scalar,**kwargs)-class-method","html_id":"_minimum_scalar(data:MXNet::Symbol?,scalar,**kwargs)-class-method","name":"_minimum_scalar","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"args_string":"(data : MXNet::Symbol?, scalar, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, scalar, **kwargs)","location":null,"def":{"name":"_minimum_scalar","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_minimum_scalar\", data, **kwargs.merge(scalar: scalar))"}},{"id":"_MinimumScalar(data:MXNet::Symbol?,scalar,**kwargs)-class-method","html_id":"_MinimumScalar(data:MXNet::Symbol?,scalar,**kwargs)-class-method","name":"_MinimumScalar","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"args_string":"(data : MXNet::Symbol?, scalar, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, scalar, **kwargs)","location":null,"def":{"name":"_MinimumScalar","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_MinimumScalar\", data, **kwargs.merge(scalar: scalar))"}},{"id":"_minus(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","html_id":"_minus(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","name":"_minus","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(lhs : MXNet::Symbol?, rhs : MXNet::Symbol?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, rhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_minus","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_minus\", lhs, rhs, **kwargs)"}},{"id":"_Minus(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","html_id":"_Minus(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","name":"_Minus","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(lhs : MXNet::Symbol?, rhs : MXNet::Symbol?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, rhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_Minus","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_Minus\", lhs, rhs, **kwargs)"}},{"id":"_minus_scalar(data:MXNet::Symbol?,scalar,**kwargs)-class-method","html_id":"_minus_scalar(data:MXNet::Symbol?,scalar,**kwargs)-class-method","name":"_minus_scalar","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"args_string":"(data : MXNet::Symbol?, scalar, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, scalar, **kwargs)","location":null,"def":{"name":"_minus_scalar","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_minus_scalar\", data, **kwargs.merge(scalar: scalar))"}},{"id":"_MinusScalar(data:MXNet::Symbol?,scalar,**kwargs)-class-method","html_id":"_MinusScalar(data:MXNet::Symbol?,scalar,**kwargs)-class-method","name":"_MinusScalar","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"args_string":"(data : MXNet::Symbol?, scalar, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, scalar, **kwargs)","location":null,"def":{"name":"_MinusScalar","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_MinusScalar\", data, **kwargs.merge(scalar: scalar))"}},{"id":"_mod(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","html_id":"_mod(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","name":"_mod","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(lhs : MXNet::Symbol?, rhs : MXNet::Symbol?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, rhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_mod","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_mod\", lhs, rhs, **kwargs)"}},{"id":"_Mod(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","html_id":"_Mod(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","name":"_Mod","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(lhs : MXNet::Symbol?, rhs : MXNet::Symbol?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, rhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_Mod","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_Mod\", lhs, rhs, **kwargs)"}},{"id":"_mod_scalar(data:MXNet::Symbol?,scalar,**kwargs)-class-method","html_id":"_mod_scalar(data:MXNet::Symbol?,scalar,**kwargs)-class-method","name":"_mod_scalar","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"args_string":"(data : MXNet::Symbol?, scalar, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, scalar, **kwargs)","location":null,"def":{"name":"_mod_scalar","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_mod_scalar\", data, **kwargs.merge(scalar: scalar))"}},{"id":"_ModScalar(data:MXNet::Symbol?,scalar,**kwargs)-class-method","html_id":"_ModScalar(data:MXNet::Symbol?,scalar,**kwargs)-class-method","name":"_ModScalar","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"args_string":"(data : MXNet::Symbol?, scalar, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, scalar, **kwargs)","location":null,"def":{"name":"_ModScalar","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_ModScalar\", data, **kwargs.merge(scalar: scalar))"}},{"id":"_mul(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","html_id":"_mul(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","name":"_mul","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(lhs : MXNet::Symbol?, rhs : MXNet::Symbol?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, rhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_mul","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_mul\", lhs, rhs, **kwargs)"}},{"id":"_Mul(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","html_id":"_Mul(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","name":"_Mul","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(lhs : MXNet::Symbol?, rhs : MXNet::Symbol?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, rhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_Mul","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_Mul\", lhs, rhs, **kwargs)"}},{"id":"_mul_scalar(data:MXNet::Symbol?,scalar,**kwargs)-class-method","html_id":"_mul_scalar(data:MXNet::Symbol?,scalar,**kwargs)-class-method","name":"_mul_scalar","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"args_string":"(data : MXNet::Symbol?, scalar, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, scalar, **kwargs)","location":null,"def":{"name":"_mul_scalar","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_mul_scalar\", data, **kwargs.merge(scalar: scalar))"}},{"id":"_MulScalar(data:MXNet::Symbol?,scalar,**kwargs)-class-method","html_id":"_MulScalar(data:MXNet::Symbol?,scalar,**kwargs)-class-method","name":"_MulScalar","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"args_string":"(data : MXNet::Symbol?, scalar, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, scalar, **kwargs)","location":null,"def":{"name":"_MulScalar","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_MulScalar\", data, **kwargs.merge(scalar: scalar))"}},{"id":"_Native(data:Array(MXNet::Symbol),info,**kwargs)-class-method","html_id":"_Native(data:Array(MXNet::Symbol),info,**kwargs)-class-method","name":"_Native","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"Array(MXNet::Symbol)"},{"name":"info","doc":null,"default_value":"","external_name":"info","restriction":""}],"args_string":"(data : Array(MXNet::Symbol), info, **kwargs)","args_html":"(data : Array(<a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>), info, **kwargs)","location":null,"def":{"name":"_Native","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"Array(MXNet::Symbol)"},{"name":"info","doc":null,"default_value":"","external_name":"info","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_Native\", data, **kwargs.merge(info: info))"}},{"id":"_NDArray(data:Array(MXNet::Symbol),info,**kwargs)-class-method","html_id":"_NDArray(data:Array(MXNet::Symbol),info,**kwargs)-class-method","name":"_NDArray","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"Array(MXNet::Symbol)"},{"name":"info","doc":null,"default_value":"","external_name":"info","restriction":""}],"args_string":"(data : Array(MXNet::Symbol), info, **kwargs)","args_html":"(data : Array(<a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>), info, **kwargs)","location":null,"def":{"name":"_NDArray","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"Array(MXNet::Symbol)"},{"name":"info","doc":null,"default_value":"","external_name":"info","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_NDArray\", data, **kwargs.merge(info: info))"}},{"id":"_NoGradient(**kwargs)-class-method","html_id":"_NoGradient(**kwargs)-class-method","name":"_NoGradient","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"_NoGradient","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_NoGradient\", **kwargs)"}},{"id":"_not_equal(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","html_id":"_not_equal(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","name":"_not_equal","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(lhs : MXNet::Symbol?, rhs : MXNet::Symbol?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, rhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_not_equal","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_not_equal\", lhs, rhs, **kwargs)"}},{"id":"_Not_Equal(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","html_id":"_Not_Equal(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","name":"_Not_Equal","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(lhs : MXNet::Symbol?, rhs : MXNet::Symbol?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, rhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_Not_Equal","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_Not_Equal\", lhs, rhs, **kwargs)"}},{"id":"_not_equal_scalar(data:MXNet::Symbol?,scalar,**kwargs)-class-method","html_id":"_not_equal_scalar(data:MXNet::Symbol?,scalar,**kwargs)-class-method","name":"_not_equal_scalar","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"args_string":"(data : MXNet::Symbol?, scalar, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, scalar, **kwargs)","location":null,"def":{"name":"_not_equal_scalar","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_not_equal_scalar\", data, **kwargs.merge(scalar: scalar))"}},{"id":"_NotEqualScalar(data:MXNet::Symbol?,scalar,**kwargs)-class-method","html_id":"_NotEqualScalar(data:MXNet::Symbol?,scalar,**kwargs)-class-method","name":"_NotEqualScalar","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"args_string":"(data : MXNet::Symbol?, scalar, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, scalar, **kwargs)","location":null,"def":{"name":"_NotEqualScalar","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_NotEqualScalar\", data, **kwargs.merge(scalar: scalar))"}},{"id":"_onehot_encode(**kwargs)-class-method","html_id":"_onehot_encode(**kwargs)-class-method","name":"_onehot_encode","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"_onehot_encode","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_onehot_encode\", **kwargs)"}},{"id":"_ones(**kwargs)-class-method","html_id":"_ones(**kwargs)-class-method","name":"_ones","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"_ones","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_ones\", **kwargs)"}},{"id":"_Plus(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","html_id":"_Plus(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","name":"_Plus","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(lhs : MXNet::Symbol?, rhs : MXNet::Symbol?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, rhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_Plus","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_Plus\", lhs, rhs, **kwargs)"}},{"id":"_plus(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","html_id":"_plus(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","name":"_plus","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(lhs : MXNet::Symbol?, rhs : MXNet::Symbol?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, rhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_plus","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_plus\", lhs, rhs, **kwargs)"}},{"id":"_plus_scalar(data:MXNet::Symbol?,scalar,**kwargs)-class-method","html_id":"_plus_scalar(data:MXNet::Symbol?,scalar,**kwargs)-class-method","name":"_plus_scalar","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"args_string":"(data : MXNet::Symbol?, scalar, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, scalar, **kwargs)","location":null,"def":{"name":"_plus_scalar","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_plus_scalar\", data, **kwargs.merge(scalar: scalar))"}},{"id":"_PlusScalar(data:MXNet::Symbol?,scalar,**kwargs)-class-method","html_id":"_PlusScalar(data:MXNet::Symbol?,scalar,**kwargs)-class-method","name":"_PlusScalar","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"args_string":"(data : MXNet::Symbol?, scalar, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, scalar, **kwargs)","location":null,"def":{"name":"_PlusScalar","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_PlusScalar\", data, **kwargs.merge(scalar: scalar))"}},{"id":"_Power(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","html_id":"_Power(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","name":"_Power","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(lhs : MXNet::Symbol?, rhs : MXNet::Symbol?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, rhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_Power","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_Power\", lhs, rhs, **kwargs)"}},{"id":"_power(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","html_id":"_power(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","name":"_power","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(lhs : MXNet::Symbol?, rhs : MXNet::Symbol?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, rhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_power","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_power\", lhs, rhs, **kwargs)"}},{"id":"_power_scalar(data:MXNet::Symbol?,scalar,**kwargs)-class-method","html_id":"_power_scalar(data:MXNet::Symbol?,scalar,**kwargs)-class-method","name":"_power_scalar","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"args_string":"(data : MXNet::Symbol?, scalar, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, scalar, **kwargs)","location":null,"def":{"name":"_power_scalar","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_power_scalar\", data, **kwargs.merge(scalar: scalar))"}},{"id":"_PowerScalar(data:MXNet::Symbol?,scalar,**kwargs)-class-method","html_id":"_PowerScalar(data:MXNet::Symbol?,scalar,**kwargs)-class-method","name":"_PowerScalar","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"args_string":"(data : MXNet::Symbol?, scalar, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, scalar, **kwargs)","location":null,"def":{"name":"_PowerScalar","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_PowerScalar\", data, **kwargs.merge(scalar: scalar))"}},{"id":"_random_exponential(**kwargs)-class-method","html_id":"_random_exponential(**kwargs)-class-method","name":"_random_exponential","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"_random_exponential","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_random_exponential\", **kwargs)"}},{"id":"_random_gamma(**kwargs)-class-method","html_id":"_random_gamma(**kwargs)-class-method","name":"_random_gamma","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"_random_gamma","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_random_gamma\", **kwargs)"}},{"id":"_random_generalized_negative_binomial(**kwargs)-class-method","html_id":"_random_generalized_negative_binomial(**kwargs)-class-method","name":"_random_generalized_negative_binomial","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"_random_generalized_negative_binomial","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_random_generalized_negative_binomial\", **kwargs)"}},{"id":"_random_negative_binomial(**kwargs)-class-method","html_id":"_random_negative_binomial(**kwargs)-class-method","name":"_random_negative_binomial","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"_random_negative_binomial","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_random_negative_binomial\", **kwargs)"}},{"id":"_random_normal(**kwargs)-class-method","html_id":"_random_normal(**kwargs)-class-method","name":"_random_normal","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"_random_normal","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_random_normal\", **kwargs)"}},{"id":"_random_poisson(**kwargs)-class-method","html_id":"_random_poisson(**kwargs)-class-method","name":"_random_poisson","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"_random_poisson","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_random_poisson\", **kwargs)"}},{"id":"_random_randint(low,high,**kwargs)-class-method","html_id":"_random_randint(low,high,**kwargs)-class-method","name":"_random_randint","doc":null,"summary":null,"abstract":false,"args":[{"name":"low","doc":null,"default_value":"","external_name":"low","restriction":""},{"name":"high","doc":null,"default_value":"","external_name":"high","restriction":""}],"args_string":"(low, high, **kwargs)","args_html":"(low, high, **kwargs)","location":null,"def":{"name":"_random_randint","args":[{"name":"low","doc":null,"default_value":"","external_name":"low","restriction":""},{"name":"high","doc":null,"default_value":"","external_name":"high","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_random_randint\", **kwargs.merge(low: low, high: high))"}},{"id":"_random_uniform(**kwargs)-class-method","html_id":"_random_uniform(**kwargs)-class-method","name":"_random_uniform","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"_random_uniform","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_random_uniform\", **kwargs)"}},{"id":"_ravel_multi_index(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_ravel_multi_index(data:MXNet::Symbol?,**kwargs)-class-method","name":"_ravel_multi_index","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_ravel_multi_index","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_ravel_multi_index\", data, **kwargs)"}},{"id":"_rdiv_scalar(data:MXNet::Symbol?,scalar,**kwargs)-class-method","html_id":"_rdiv_scalar(data:MXNet::Symbol?,scalar,**kwargs)-class-method","name":"_rdiv_scalar","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"args_string":"(data : MXNet::Symbol?, scalar, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, scalar, **kwargs)","location":null,"def":{"name":"_rdiv_scalar","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_rdiv_scalar\", data, **kwargs.merge(scalar: scalar))"}},{"id":"_RDivScalar(data:MXNet::Symbol?,scalar,**kwargs)-class-method","html_id":"_RDivScalar(data:MXNet::Symbol?,scalar,**kwargs)-class-method","name":"_RDivScalar","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"args_string":"(data : MXNet::Symbol?, scalar, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, scalar, **kwargs)","location":null,"def":{"name":"_RDivScalar","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_RDivScalar\", data, **kwargs.merge(scalar: scalar))"}},{"id":"_rminus_scalar(data:MXNet::Symbol?,scalar,**kwargs)-class-method","html_id":"_rminus_scalar(data:MXNet::Symbol?,scalar,**kwargs)-class-method","name":"_rminus_scalar","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"args_string":"(data : MXNet::Symbol?, scalar, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, scalar, **kwargs)","location":null,"def":{"name":"_rminus_scalar","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_rminus_scalar\", data, **kwargs.merge(scalar: scalar))"}},{"id":"_RMinusScalar(data:MXNet::Symbol?,scalar,**kwargs)-class-method","html_id":"_RMinusScalar(data:MXNet::Symbol?,scalar,**kwargs)-class-method","name":"_RMinusScalar","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"args_string":"(data : MXNet::Symbol?, scalar, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, scalar, **kwargs)","location":null,"def":{"name":"_RMinusScalar","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_RMinusScalar\", data, **kwargs.merge(scalar: scalar))"}},{"id":"_rmod_scalar(data:MXNet::Symbol?,scalar,**kwargs)-class-method","html_id":"_rmod_scalar(data:MXNet::Symbol?,scalar,**kwargs)-class-method","name":"_rmod_scalar","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"args_string":"(data : MXNet::Symbol?, scalar, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, scalar, **kwargs)","location":null,"def":{"name":"_rmod_scalar","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_rmod_scalar\", data, **kwargs.merge(scalar: scalar))"}},{"id":"_RModScalar(data:MXNet::Symbol?,scalar,**kwargs)-class-method","html_id":"_RModScalar(data:MXNet::Symbol?,scalar,**kwargs)-class-method","name":"_RModScalar","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"args_string":"(data : MXNet::Symbol?, scalar, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, scalar, **kwargs)","location":null,"def":{"name":"_RModScalar","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_RModScalar\", data, **kwargs.merge(scalar: scalar))"}},{"id":"_rpower_scalar(data:MXNet::Symbol?,scalar,**kwargs)-class-method","html_id":"_rpower_scalar(data:MXNet::Symbol?,scalar,**kwargs)-class-method","name":"_rpower_scalar","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"args_string":"(data : MXNet::Symbol?, scalar, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, scalar, **kwargs)","location":null,"def":{"name":"_rpower_scalar","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_rpower_scalar\", data, **kwargs.merge(scalar: scalar))"}},{"id":"_RPowerScalar(data:MXNet::Symbol?,scalar,**kwargs)-class-method","html_id":"_RPowerScalar(data:MXNet::Symbol?,scalar,**kwargs)-class-method","name":"_RPowerScalar","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"args_string":"(data : MXNet::Symbol?, scalar, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, scalar, **kwargs)","location":null,"def":{"name":"_RPowerScalar","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_RPowerScalar\", data, **kwargs.merge(scalar: scalar))"}},{"id":"_sample_exponential(lam:MXNet::Symbol?,**kwargs)-class-method","html_id":"_sample_exponential(lam:MXNet::Symbol?,**kwargs)-class-method","name":"_sample_exponential","doc":null,"summary":null,"abstract":false,"args":[{"name":"lam","doc":null,"default_value":"","external_name":"lam","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(lam : MXNet::Symbol?, **kwargs)","args_html":"(lam : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_sample_exponential","args":[{"name":"lam","doc":null,"default_value":"","external_name":"lam","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_sample_exponential\", lam, **kwargs)"}},{"id":"_sample_gamma(alpha:MXNet::Symbol?,beta:MXNet::Symbol?,**kwargs)-class-method","html_id":"_sample_gamma(alpha:MXNet::Symbol?,beta:MXNet::Symbol?,**kwargs)-class-method","name":"_sample_gamma","doc":null,"summary":null,"abstract":false,"args":[{"name":"alpha","doc":null,"default_value":"","external_name":"alpha","restriction":"MXNet::Symbol | ::Nil"},{"name":"beta","doc":null,"default_value":"","external_name":"beta","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(alpha : MXNet::Symbol?, beta : MXNet::Symbol?, **kwargs)","args_html":"(alpha : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, beta : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_sample_gamma","args":[{"name":"alpha","doc":null,"default_value":"","external_name":"alpha","restriction":"MXNet::Symbol | ::Nil"},{"name":"beta","doc":null,"default_value":"","external_name":"beta","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_sample_gamma\", alpha, beta, **kwargs)"}},{"id":"_sample_generalized_negative_binomial(mu:MXNet::Symbol?,alpha:MXNet::Symbol?,**kwargs)-class-method","html_id":"_sample_generalized_negative_binomial(mu:MXNet::Symbol?,alpha:MXNet::Symbol?,**kwargs)-class-method","name":"_sample_generalized_negative_binomial","doc":null,"summary":null,"abstract":false,"args":[{"name":"mu","doc":null,"default_value":"","external_name":"mu","restriction":"MXNet::Symbol | ::Nil"},{"name":"alpha","doc":null,"default_value":"","external_name":"alpha","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(mu : MXNet::Symbol?, alpha : MXNet::Symbol?, **kwargs)","args_html":"(mu : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, alpha : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_sample_generalized_negative_binomial","args":[{"name":"mu","doc":null,"default_value":"","external_name":"mu","restriction":"MXNet::Symbol | ::Nil"},{"name":"alpha","doc":null,"default_value":"","external_name":"alpha","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_sample_generalized_negative_binomial\", mu, alpha, **kwargs)"}},{"id":"_sample_multinomial(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_sample_multinomial(data:MXNet::Symbol?,**kwargs)-class-method","name":"_sample_multinomial","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_sample_multinomial","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_sample_multinomial\", data, **kwargs)"}},{"id":"_sample_negative_binomial(k:MXNet::Symbol?,p:MXNet::Symbol?,**kwargs)-class-method","html_id":"_sample_negative_binomial(k:MXNet::Symbol?,p:MXNet::Symbol?,**kwargs)-class-method","name":"_sample_negative_binomial","doc":null,"summary":null,"abstract":false,"args":[{"name":"k","doc":null,"default_value":"","external_name":"k","restriction":"MXNet::Symbol | ::Nil"},{"name":"p","doc":null,"default_value":"","external_name":"p","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(k : MXNet::Symbol?, p : MXNet::Symbol?, **kwargs)","args_html":"(k : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, p : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_sample_negative_binomial","args":[{"name":"k","doc":null,"default_value":"","external_name":"k","restriction":"MXNet::Symbol | ::Nil"},{"name":"p","doc":null,"default_value":"","external_name":"p","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_sample_negative_binomial\", k, p, **kwargs)"}},{"id":"_sample_normal(mu:MXNet::Symbol?,sigma:MXNet::Symbol?,**kwargs)-class-method","html_id":"_sample_normal(mu:MXNet::Symbol?,sigma:MXNet::Symbol?,**kwargs)-class-method","name":"_sample_normal","doc":null,"summary":null,"abstract":false,"args":[{"name":"mu","doc":null,"default_value":"","external_name":"mu","restriction":"MXNet::Symbol | ::Nil"},{"name":"sigma","doc":null,"default_value":"","external_name":"sigma","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(mu : MXNet::Symbol?, sigma : MXNet::Symbol?, **kwargs)","args_html":"(mu : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, sigma : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_sample_normal","args":[{"name":"mu","doc":null,"default_value":"","external_name":"mu","restriction":"MXNet::Symbol | ::Nil"},{"name":"sigma","doc":null,"default_value":"","external_name":"sigma","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_sample_normal\", mu, sigma, **kwargs)"}},{"id":"_sample_poisson(lam:MXNet::Symbol?,**kwargs)-class-method","html_id":"_sample_poisson(lam:MXNet::Symbol?,**kwargs)-class-method","name":"_sample_poisson","doc":null,"summary":null,"abstract":false,"args":[{"name":"lam","doc":null,"default_value":"","external_name":"lam","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(lam : MXNet::Symbol?, **kwargs)","args_html":"(lam : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_sample_poisson","args":[{"name":"lam","doc":null,"default_value":"","external_name":"lam","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_sample_poisson\", lam, **kwargs)"}},{"id":"_sample_uniform(low:MXNet::Symbol?,high:MXNet::Symbol?,**kwargs)-class-method","html_id":"_sample_uniform(low:MXNet::Symbol?,high:MXNet::Symbol?,**kwargs)-class-method","name":"_sample_uniform","doc":null,"summary":null,"abstract":false,"args":[{"name":"low","doc":null,"default_value":"","external_name":"low","restriction":"MXNet::Symbol | ::Nil"},{"name":"high","doc":null,"default_value":"","external_name":"high","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(low : MXNet::Symbol?, high : MXNet::Symbol?, **kwargs)","args_html":"(low : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, high : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_sample_uniform","args":[{"name":"low","doc":null,"default_value":"","external_name":"low","restriction":"MXNet::Symbol | ::Nil"},{"name":"high","doc":null,"default_value":"","external_name":"high","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_sample_uniform\", low, high, **kwargs)"}},{"id":"_scatter_elemwise_div(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","html_id":"_scatter_elemwise_div(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","name":"_scatter_elemwise_div","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(lhs : MXNet::Symbol?, rhs : MXNet::Symbol?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, rhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_scatter_elemwise_div","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_scatter_elemwise_div\", lhs, rhs, **kwargs)"}},{"id":"_scatter_minus_scalar(data:MXNet::Symbol?,scalar,**kwargs)-class-method","html_id":"_scatter_minus_scalar(data:MXNet::Symbol?,scalar,**kwargs)-class-method","name":"_scatter_minus_scalar","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"args_string":"(data : MXNet::Symbol?, scalar, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, scalar, **kwargs)","location":null,"def":{"name":"_scatter_minus_scalar","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_scatter_minus_scalar\", data, **kwargs.merge(scalar: scalar))"}},{"id":"_scatter_plus_scalar(data:MXNet::Symbol?,scalar,**kwargs)-class-method","html_id":"_scatter_plus_scalar(data:MXNet::Symbol?,scalar,**kwargs)-class-method","name":"_scatter_plus_scalar","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"args_string":"(data : MXNet::Symbol?, scalar, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, scalar, **kwargs)","location":null,"def":{"name":"_scatter_plus_scalar","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_scatter_plus_scalar\", data, **kwargs.merge(scalar: scalar))"}},{"id":"_scatter_set_nd(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,indices:MXNet::Symbol?,shape,**kwargs)-class-method","html_id":"_scatter_set_nd(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,indices:MXNet::Symbol?,shape,**kwargs)-class-method","name":"_scatter_set_nd","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"indices","doc":null,"default_value":"","external_name":"indices","restriction":"MXNet::Symbol | ::Nil"},{"name":"shape","doc":null,"default_value":"","external_name":"shape","restriction":""}],"args_string":"(lhs : MXNet::Symbol?, rhs : MXNet::Symbol?, indices : MXNet::Symbol?, shape, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, rhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, indices : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, shape, **kwargs)","location":null,"def":{"name":"_scatter_set_nd","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"indices","doc":null,"default_value":"","external_name":"indices","restriction":"MXNet::Symbol | ::Nil"},{"name":"shape","doc":null,"default_value":"","external_name":"shape","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_scatter_set_nd\", lhs, rhs, indices, **kwargs.merge(shape: shape))"}},{"id":"_set_value(**kwargs)-class-method","html_id":"_set_value(**kwargs)-class-method","name":"_set_value","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"_set_value","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_set_value\", **kwargs)"}},{"id":"_shuffle(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_shuffle(data:MXNet::Symbol?,**kwargs)-class-method","name":"_shuffle","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_shuffle","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_shuffle\", data, **kwargs)"}},{"id":"_slice_assign(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,begin_begin,end_end,**kwargs)-class-method","html_id":"_slice_assign(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,begin_begin,end_end,**kwargs)-class-method","name":"_slice_assign","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"_begin","doc":null,"default_value":"","external_name":"begin","restriction":""},{"name":"_end","doc":null,"default_value":"","external_name":"end","restriction":""}],"args_string":"(lhs : MXNet::Symbol?, rhs : MXNet::Symbol?, begin _begin, end _end, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, rhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, begin _begin, end _end, **kwargs)","location":null,"def":{"name":"_slice_assign","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"_begin","doc":null,"default_value":"","external_name":"begin","restriction":""},{"name":"_end","doc":null,"default_value":"","external_name":"end","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_slice_assign\", lhs, rhs, **kwargs.merge(begin: _begin, end: _end))"}},{"id":"_slice_assign_scalar(data:MXNet::Symbol?,begin_begin,end_end,**kwargs)-class-method","html_id":"_slice_assign_scalar(data:MXNet::Symbol?,begin_begin,end_end,**kwargs)-class-method","name":"_slice_assign_scalar","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"_begin","doc":null,"default_value":"","external_name":"begin","restriction":""},{"name":"_end","doc":null,"default_value":"","external_name":"end","restriction":""}],"args_string":"(data : MXNet::Symbol?, begin _begin, end _end, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, begin _begin, end _end, **kwargs)","location":null,"def":{"name":"_slice_assign_scalar","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"_begin","doc":null,"default_value":"","external_name":"begin","restriction":""},{"name":"_end","doc":null,"default_value":"","external_name":"end","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_slice_assign_scalar\", data, **kwargs.merge(begin: _begin, end: _end))"}},{"id":"_square_sum(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_square_sum(data:MXNet::Symbol?,**kwargs)-class-method","name":"_square_sum","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_square_sum","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_square_sum\", data, **kwargs)"}},{"id":"_sub(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","html_id":"_sub(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","name":"_sub","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(lhs : MXNet::Symbol?, rhs : MXNet::Symbol?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, rhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_sub","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_sub\", lhs, rhs, **kwargs)"}},{"id":"_unravel_index(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_unravel_index(data:MXNet::Symbol?,**kwargs)-class-method","name":"_unravel_index","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_unravel_index","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_unravel_index\", data, **kwargs)"}},{"id":"_while_loop(data:Array(MXNet::Symbol),num_args,num_outputs,num_out_data,max_iterations,cond_input_locs,func_input_locs,func_var_locs,**kwargs)-class-method","html_id":"_while_loop(data:Array(MXNet::Symbol),num_args,num_outputs,num_out_data,max_iterations,cond_input_locs,func_input_locs,func_var_locs,**kwargs)-class-method","name":"_while_loop","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"Array(MXNet::Symbol)"},{"name":"num_args","doc":null,"default_value":"","external_name":"num_args","restriction":""},{"name":"num_outputs","doc":null,"default_value":"","external_name":"num_outputs","restriction":""},{"name":"num_out_data","doc":null,"default_value":"","external_name":"num_out_data","restriction":""},{"name":"max_iterations","doc":null,"default_value":"","external_name":"max_iterations","restriction":""},{"name":"cond_input_locs","doc":null,"default_value":"","external_name":"cond_input_locs","restriction":""},{"name":"func_input_locs","doc":null,"default_value":"","external_name":"func_input_locs","restriction":""},{"name":"func_var_locs","doc":null,"default_value":"","external_name":"func_var_locs","restriction":""}],"args_string":"(data : Array(MXNet::Symbol), num_args, num_outputs, num_out_data, max_iterations, cond_input_locs, func_input_locs, func_var_locs, **kwargs)","args_html":"(data : Array(<a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>), num_args, num_outputs, num_out_data, max_iterations, cond_input_locs, func_input_locs, func_var_locs, **kwargs)","location":null,"def":{"name":"_while_loop","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"Array(MXNet::Symbol)"},{"name":"num_args","doc":null,"default_value":"","external_name":"num_args","restriction":""},{"name":"num_outputs","doc":null,"default_value":"","external_name":"num_outputs","restriction":""},{"name":"num_out_data","doc":null,"default_value":"","external_name":"num_out_data","restriction":""},{"name":"max_iterations","doc":null,"default_value":"","external_name":"max_iterations","restriction":""},{"name":"cond_input_locs","doc":null,"default_value":"","external_name":"cond_input_locs","restriction":""},{"name":"func_input_locs","doc":null,"default_value":"","external_name":"func_input_locs","restriction":""},{"name":"func_var_locs","doc":null,"default_value":"","external_name":"func_var_locs","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_while_loop\", data, **kwargs.merge(num_args: num_args, num_outputs: num_outputs, num_out_data: num_out_data, max_iterations: max_iterations, cond_input_locs: cond_input_locs, func_input_locs: func_input_locs, func_var_locs: func_var_locs))"}},{"id":"_zeros(**kwargs)-class-method","html_id":"_zeros(**kwargs)-class-method","name":"_zeros","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"_zeros","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_zeros\", **kwargs)"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"mxnet/MXNet/Symbol/Linalg","path":"MXNet/Symbol/Linalg.html","kind":"class","full_name":"MXNet::Symbol::Linalg","name":"Linalg","abstract":false,"superclass":{"html_id":"mxnet/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"mxnet/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"mxnet/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"mxnet","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"mxnet/MXNet/Symbol","kind":"class","full_name":"MXNet::Symbol","name":"Symbol"},"doc":null,"summary":null,"class_methods":[{"id":"_gelqf(a:MXNet::Symbol?,**kwargs)-class-method","html_id":"_gelqf(a:MXNet::Symbol?,**kwargs)-class-method","name":"_gelqf","doc":null,"summary":null,"abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(a : MXNet::Symbol?, **kwargs)","args_html":"(a : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_gelqf","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_linalg_gelqf\", a, **kwargs)"}},{"id":"_gemm(a:MXNet::Symbol?,b:MXNet::Symbol?,c:MXNet::Symbol?,**kwargs)-class-method","html_id":"_gemm(a:MXNet::Symbol?,b:MXNet::Symbol?,c:MXNet::Symbol?,**kwargs)-class-method","name":"_gemm","doc":null,"summary":null,"abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"MXNet::Symbol | ::Nil"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"MXNet::Symbol | ::Nil"},{"name":"c","doc":null,"default_value":"","external_name":"c","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(a : MXNet::Symbol?, b : MXNet::Symbol?, c : MXNet::Symbol?, **kwargs)","args_html":"(a : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, b : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, c : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_gemm","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"MXNet::Symbol | ::Nil"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"MXNet::Symbol | ::Nil"},{"name":"c","doc":null,"default_value":"","external_name":"c","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_linalg_gemm\", a, b, c, **kwargs)"}},{"id":"_gemm2(a:MXNet::Symbol?,b:MXNet::Symbol?,**kwargs)-class-method","html_id":"_gemm2(a:MXNet::Symbol?,b:MXNet::Symbol?,**kwargs)-class-method","name":"_gemm2","doc":null,"summary":null,"abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"MXNet::Symbol | ::Nil"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(a : MXNet::Symbol?, b : MXNet::Symbol?, **kwargs)","args_html":"(a : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, b : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_gemm2","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"MXNet::Symbol | ::Nil"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_linalg_gemm2\", a, b, **kwargs)"}},{"id":"_potrf(a:MXNet::Symbol?,**kwargs)-class-method","html_id":"_potrf(a:MXNet::Symbol?,**kwargs)-class-method","name":"_potrf","doc":null,"summary":null,"abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(a : MXNet::Symbol?, **kwargs)","args_html":"(a : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_potrf","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_linalg_potrf\", a, **kwargs)"}},{"id":"_potri(a:MXNet::Symbol?,**kwargs)-class-method","html_id":"_potri(a:MXNet::Symbol?,**kwargs)-class-method","name":"_potri","doc":null,"summary":null,"abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(a : MXNet::Symbol?, **kwargs)","args_html":"(a : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_potri","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_linalg_potri\", a, **kwargs)"}},{"id":"_sumlogdiag(a:MXNet::Symbol?,**kwargs)-class-method","html_id":"_sumlogdiag(a:MXNet::Symbol?,**kwargs)-class-method","name":"_sumlogdiag","doc":null,"summary":null,"abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(a : MXNet::Symbol?, **kwargs)","args_html":"(a : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_sumlogdiag","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_linalg_sumlogdiag\", a, **kwargs)"}},{"id":"_syevd(a:MXNet::Symbol?,**kwargs)-class-method","html_id":"_syevd(a:MXNet::Symbol?,**kwargs)-class-method","name":"_syevd","doc":null,"summary":null,"abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(a : MXNet::Symbol?, **kwargs)","args_html":"(a : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_syevd","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_linalg_syevd\", a, **kwargs)"}},{"id":"_syrk(a:MXNet::Symbol?,**kwargs)-class-method","html_id":"_syrk(a:MXNet::Symbol?,**kwargs)-class-method","name":"_syrk","doc":null,"summary":null,"abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(a : MXNet::Symbol?, **kwargs)","args_html":"(a : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_syrk","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_linalg_syrk\", a, **kwargs)"}},{"id":"_trmm(a:MXNet::Symbol?,b:MXNet::Symbol?,**kwargs)-class-method","html_id":"_trmm(a:MXNet::Symbol?,b:MXNet::Symbol?,**kwargs)-class-method","name":"_trmm","doc":null,"summary":null,"abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"MXNet::Symbol | ::Nil"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(a : MXNet::Symbol?, b : MXNet::Symbol?, **kwargs)","args_html":"(a : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, b : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_trmm","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"MXNet::Symbol | ::Nil"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_linalg_trmm\", a, b, **kwargs)"}},{"id":"_trsm(a:MXNet::Symbol?,b:MXNet::Symbol?,**kwargs)-class-method","html_id":"_trsm(a:MXNet::Symbol?,b:MXNet::Symbol?,**kwargs)-class-method","name":"_trsm","doc":null,"summary":null,"abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"MXNet::Symbol | ::Nil"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(a : MXNet::Symbol?, b : MXNet::Symbol?, **kwargs)","args_html":"(a : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, b : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_trsm","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"MXNet::Symbol | ::Nil"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_linalg_trsm\", a, b, **kwargs)"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"mxnet/MXNet/Symbol/Ops","path":"MXNet/Symbol/Ops.html","kind":"class","full_name":"MXNet::Symbol::Ops","name":"Ops","abstract":false,"superclass":{"html_id":"mxnet/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"mxnet/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"mxnet/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"mxnet","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"mxnet/MXNet/Symbol","kind":"class","full_name":"MXNet::Symbol","name":"Symbol"},"doc":null,"summary":null,"class_methods":[{"id":"_abs(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_abs(data:MXNet::Symbol?,**kwargs)-class-method","name":"_abs","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_abs","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"abs\", data, **kwargs)"}},{"id":"_Activation(data:MXNet::Symbol?,act_type,**kwargs)-class-method","html_id":"_Activation(data:MXNet::Symbol?,act_type,**kwargs)-class-method","name":"_Activation","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"act_type","doc":null,"default_value":"","external_name":"act_type","restriction":""}],"args_string":"(data : MXNet::Symbol?, act_type, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, act_type, **kwargs)","location":null,"def":{"name":"_Activation","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"act_type","doc":null,"default_value":"","external_name":"act_type","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"Activation\", data, **kwargs.merge(act_type: act_type))"}},{"id":"_adam_update(weight:MXNet::Symbol?,grad:MXNet::Symbol?,mean:MXNet::Symbol?,var:MXNet::Symbol?,lr,**kwargs)-class-method","html_id":"_adam_update(weight:MXNet::Symbol?,grad:MXNet::Symbol?,mean:MXNet::Symbol?,var:MXNet::Symbol?,lr,**kwargs)-class-method","name":"_adam_update","doc":null,"summary":null,"abstract":false,"args":[{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::Symbol | ::Nil"},{"name":"grad","doc":null,"default_value":"","external_name":"grad","restriction":"MXNet::Symbol | ::Nil"},{"name":"mean","doc":null,"default_value":"","external_name":"mean","restriction":"MXNet::Symbol | ::Nil"},{"name":"var","doc":null,"default_value":"","external_name":"var","restriction":"MXNet::Symbol | ::Nil"},{"name":"lr","doc":null,"default_value":"","external_name":"lr","restriction":""}],"args_string":"(weight : MXNet::Symbol?, grad : MXNet::Symbol?, mean : MXNet::Symbol?, var : MXNet::Symbol?, lr, **kwargs)","args_html":"(weight : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, grad : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, mean : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, var : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, lr, **kwargs)","location":null,"def":{"name":"_adam_update","args":[{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::Symbol | ::Nil"},{"name":"grad","doc":null,"default_value":"","external_name":"grad","restriction":"MXNet::Symbol | ::Nil"},{"name":"mean","doc":null,"default_value":"","external_name":"mean","restriction":"MXNet::Symbol | ::Nil"},{"name":"var","doc":null,"default_value":"","external_name":"var","restriction":"MXNet::Symbol | ::Nil"},{"name":"lr","doc":null,"default_value":"","external_name":"lr","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"adam_update\", weight, grad, mean, var, **kwargs.merge(lr: lr))"}},{"id":"_add_n(args:Array(MXNet::Symbol),**kwargs)-class-method","html_id":"_add_n(args:Array(MXNet::Symbol),**kwargs)-class-method","name":"_add_n","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":"Array(MXNet::Symbol)"}],"args_string":"(args : Array(MXNet::Symbol), **kwargs)","args_html":"(args : Array(<a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>), **kwargs)","location":null,"def":{"name":"_add_n","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":"Array(MXNet::Symbol)"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"add_n\", args, **kwargs)"}},{"id":"_arccos(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_arccos(data:MXNet::Symbol?,**kwargs)-class-method","name":"_arccos","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_arccos","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"arccos\", data, **kwargs)"}},{"id":"_arccosh(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_arccosh(data:MXNet::Symbol?,**kwargs)-class-method","name":"_arccosh","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_arccosh","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"arccosh\", data, **kwargs)"}},{"id":"_arcsin(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_arcsin(data:MXNet::Symbol?,**kwargs)-class-method","name":"_arcsin","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_arcsin","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"arcsin\", data, **kwargs)"}},{"id":"_arcsinh(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_arcsinh(data:MXNet::Symbol?,**kwargs)-class-method","name":"_arcsinh","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_arcsinh","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"arcsinh\", data, **kwargs)"}},{"id":"_arctan(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_arctan(data:MXNet::Symbol?,**kwargs)-class-method","name":"_arctan","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_arctan","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"arctan\", data, **kwargs)"}},{"id":"_arctanh(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_arctanh(data:MXNet::Symbol?,**kwargs)-class-method","name":"_arctanh","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_arctanh","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"arctanh\", data, **kwargs)"}},{"id":"_argmax(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_argmax(data:MXNet::Symbol?,**kwargs)-class-method","name":"_argmax","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_argmax","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"argmax\", data, **kwargs)"}},{"id":"_argmax_channel(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_argmax_channel(data:MXNet::Symbol?,**kwargs)-class-method","name":"_argmax_channel","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_argmax_channel","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"argmax_channel\", data, **kwargs)"}},{"id":"_argmin(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_argmin(data:MXNet::Symbol?,**kwargs)-class-method","name":"_argmin","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_argmin","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"argmin\", data, **kwargs)"}},{"id":"_argsort(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_argsort(data:MXNet::Symbol?,**kwargs)-class-method","name":"_argsort","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_argsort","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"argsort\", data, **kwargs)"}},{"id":"_batch_dot(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","html_id":"_batch_dot(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","name":"_batch_dot","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(lhs : MXNet::Symbol?, rhs : MXNet::Symbol?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, rhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_batch_dot","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"batch_dot\", lhs, rhs, **kwargs)"}},{"id":"_batch_take(a:MXNet::Symbol?,indices:MXNet::Symbol?,**kwargs)-class-method","html_id":"_batch_take(a:MXNet::Symbol?,indices:MXNet::Symbol?,**kwargs)-class-method","name":"_batch_take","doc":null,"summary":null,"abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"MXNet::Symbol | ::Nil"},{"name":"indices","doc":null,"default_value":"","external_name":"indices","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(a : MXNet::Symbol?, indices : MXNet::Symbol?, **kwargs)","args_html":"(a : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, indices : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_batch_take","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"MXNet::Symbol | ::Nil"},{"name":"indices","doc":null,"default_value":"","external_name":"indices","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"batch_take\", a, indices, **kwargs)"}},{"id":"_BatchNorm(data:MXNet::Symbol?,gamma:MXNet::Symbol?,beta:MXNet::Symbol?,moving_mean:MXNet::Symbol?,moving_var:MXNet::Symbol?,**kwargs)-class-method","html_id":"_BatchNorm(data:MXNet::Symbol?,gamma:MXNet::Symbol?,beta:MXNet::Symbol?,moving_mean:MXNet::Symbol?,moving_var:MXNet::Symbol?,**kwargs)-class-method","name":"_BatchNorm","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"gamma","doc":null,"default_value":"","external_name":"gamma","restriction":"MXNet::Symbol | ::Nil"},{"name":"beta","doc":null,"default_value":"","external_name":"beta","restriction":"MXNet::Symbol | ::Nil"},{"name":"moving_mean","doc":null,"default_value":"","external_name":"moving_mean","restriction":"MXNet::Symbol | ::Nil"},{"name":"moving_var","doc":null,"default_value":"","external_name":"moving_var","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, gamma : MXNet::Symbol?, beta : MXNet::Symbol?, moving_mean : MXNet::Symbol?, moving_var : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, gamma : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, beta : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, moving_mean : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, moving_var : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_BatchNorm","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"gamma","doc":null,"default_value":"","external_name":"gamma","restriction":"MXNet::Symbol | ::Nil"},{"name":"beta","doc":null,"default_value":"","external_name":"beta","restriction":"MXNet::Symbol | ::Nil"},{"name":"moving_mean","doc":null,"default_value":"","external_name":"moving_mean","restriction":"MXNet::Symbol | ::Nil"},{"name":"moving_var","doc":null,"default_value":"","external_name":"moving_var","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"BatchNorm\", data, gamma, beta, moving_mean, moving_var, **kwargs)"}},{"id":"_BatchNorm_v1(data:MXNet::Symbol?,gamma:MXNet::Symbol?,beta:MXNet::Symbol?,**kwargs)-class-method","html_id":"_BatchNorm_v1(data:MXNet::Symbol?,gamma:MXNet::Symbol?,beta:MXNet::Symbol?,**kwargs)-class-method","name":"_BatchNorm_v1","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"gamma","doc":null,"default_value":"","external_name":"gamma","restriction":"MXNet::Symbol | ::Nil"},{"name":"beta","doc":null,"default_value":"","external_name":"beta","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, gamma : MXNet::Symbol?, beta : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, gamma : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, beta : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_BatchNorm_v1","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"gamma","doc":null,"default_value":"","external_name":"gamma","restriction":"MXNet::Symbol | ::Nil"},{"name":"beta","doc":null,"default_value":"","external_name":"beta","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"BatchNorm_v1\", data, gamma, beta, **kwargs)"}},{"id":"_BilinearSampler(data:MXNet::Symbol?,grid:MXNet::Symbol?,**kwargs)-class-method","html_id":"_BilinearSampler(data:MXNet::Symbol?,grid:MXNet::Symbol?,**kwargs)-class-method","name":"_BilinearSampler","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"grid","doc":null,"default_value":"","external_name":"grid","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, grid : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, grid : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_BilinearSampler","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"grid","doc":null,"default_value":"","external_name":"grid","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"BilinearSampler\", data, grid, **kwargs)"}},{"id":"_BlockGrad(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_BlockGrad(data:MXNet::Symbol?,**kwargs)-class-method","name":"_BlockGrad","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_BlockGrad","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"BlockGrad\", data, **kwargs)"}},{"id":"_broadcast_add(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","html_id":"_broadcast_add(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","name":"_broadcast_add","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(lhs : MXNet::Symbol?, rhs : MXNet::Symbol?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, rhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_broadcast_add","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"broadcast_add\", lhs, rhs, **kwargs)"}},{"id":"_broadcast_axes(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_broadcast_axes(data:MXNet::Symbol?,**kwargs)-class-method","name":"_broadcast_axes","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_broadcast_axes","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"broadcast_axes\", data, **kwargs)"}},{"id":"_broadcast_axis(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_broadcast_axis(data:MXNet::Symbol?,**kwargs)-class-method","name":"_broadcast_axis","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_broadcast_axis","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"broadcast_axis\", data, **kwargs)"}},{"id":"_broadcast_div(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","html_id":"_broadcast_div(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","name":"_broadcast_div","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(lhs : MXNet::Symbol?, rhs : MXNet::Symbol?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, rhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_broadcast_div","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"broadcast_div\", lhs, rhs, **kwargs)"}},{"id":"_broadcast_equal(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","html_id":"_broadcast_equal(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","name":"_broadcast_equal","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(lhs : MXNet::Symbol?, rhs : MXNet::Symbol?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, rhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_broadcast_equal","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"broadcast_equal\", lhs, rhs, **kwargs)"}},{"id":"_broadcast_greater(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","html_id":"_broadcast_greater(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","name":"_broadcast_greater","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(lhs : MXNet::Symbol?, rhs : MXNet::Symbol?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, rhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_broadcast_greater","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"broadcast_greater\", lhs, rhs, **kwargs)"}},{"id":"_broadcast_greater_equal(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","html_id":"_broadcast_greater_equal(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","name":"_broadcast_greater_equal","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(lhs : MXNet::Symbol?, rhs : MXNet::Symbol?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, rhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_broadcast_greater_equal","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"broadcast_greater_equal\", lhs, rhs, **kwargs)"}},{"id":"_broadcast_hypot(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","html_id":"_broadcast_hypot(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","name":"_broadcast_hypot","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(lhs : MXNet::Symbol?, rhs : MXNet::Symbol?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, rhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_broadcast_hypot","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"broadcast_hypot\", lhs, rhs, **kwargs)"}},{"id":"_broadcast_lesser(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","html_id":"_broadcast_lesser(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","name":"_broadcast_lesser","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(lhs : MXNet::Symbol?, rhs : MXNet::Symbol?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, rhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_broadcast_lesser","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"broadcast_lesser\", lhs, rhs, **kwargs)"}},{"id":"_broadcast_lesser_equal(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","html_id":"_broadcast_lesser_equal(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","name":"_broadcast_lesser_equal","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(lhs : MXNet::Symbol?, rhs : MXNet::Symbol?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, rhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_broadcast_lesser_equal","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"broadcast_lesser_equal\", lhs, rhs, **kwargs)"}},{"id":"_broadcast_like(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","html_id":"_broadcast_like(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","name":"_broadcast_like","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(lhs : MXNet::Symbol?, rhs : MXNet::Symbol?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, rhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_broadcast_like","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"broadcast_like\", lhs, rhs, **kwargs)"}},{"id":"_broadcast_logical_and(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","html_id":"_broadcast_logical_and(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","name":"_broadcast_logical_and","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(lhs : MXNet::Symbol?, rhs : MXNet::Symbol?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, rhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_broadcast_logical_and","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"broadcast_logical_and\", lhs, rhs, **kwargs)"}},{"id":"_broadcast_logical_or(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","html_id":"_broadcast_logical_or(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","name":"_broadcast_logical_or","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(lhs : MXNet::Symbol?, rhs : MXNet::Symbol?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, rhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_broadcast_logical_or","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"broadcast_logical_or\", lhs, rhs, **kwargs)"}},{"id":"_broadcast_logical_xor(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","html_id":"_broadcast_logical_xor(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","name":"_broadcast_logical_xor","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(lhs : MXNet::Symbol?, rhs : MXNet::Symbol?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, rhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_broadcast_logical_xor","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"broadcast_logical_xor\", lhs, rhs, **kwargs)"}},{"id":"_broadcast_maximum(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","html_id":"_broadcast_maximum(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","name":"_broadcast_maximum","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(lhs : MXNet::Symbol?, rhs : MXNet::Symbol?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, rhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_broadcast_maximum","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"broadcast_maximum\", lhs, rhs, **kwargs)"}},{"id":"_broadcast_minimum(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","html_id":"_broadcast_minimum(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","name":"_broadcast_minimum","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(lhs : MXNet::Symbol?, rhs : MXNet::Symbol?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, rhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_broadcast_minimum","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"broadcast_minimum\", lhs, rhs, **kwargs)"}},{"id":"_broadcast_minus(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","html_id":"_broadcast_minus(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","name":"_broadcast_minus","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(lhs : MXNet::Symbol?, rhs : MXNet::Symbol?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, rhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_broadcast_minus","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"broadcast_minus\", lhs, rhs, **kwargs)"}},{"id":"_broadcast_mod(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","html_id":"_broadcast_mod(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","name":"_broadcast_mod","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(lhs : MXNet::Symbol?, rhs : MXNet::Symbol?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, rhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_broadcast_mod","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"broadcast_mod\", lhs, rhs, **kwargs)"}},{"id":"_broadcast_mul(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","html_id":"_broadcast_mul(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","name":"_broadcast_mul","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(lhs : MXNet::Symbol?, rhs : MXNet::Symbol?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, rhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_broadcast_mul","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"broadcast_mul\", lhs, rhs, **kwargs)"}},{"id":"_broadcast_not_equal(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","html_id":"_broadcast_not_equal(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","name":"_broadcast_not_equal","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(lhs : MXNet::Symbol?, rhs : MXNet::Symbol?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, rhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_broadcast_not_equal","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"broadcast_not_equal\", lhs, rhs, **kwargs)"}},{"id":"_broadcast_plus(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","html_id":"_broadcast_plus(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","name":"_broadcast_plus","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(lhs : MXNet::Symbol?, rhs : MXNet::Symbol?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, rhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_broadcast_plus","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"broadcast_plus\", lhs, rhs, **kwargs)"}},{"id":"_broadcast_power(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","html_id":"_broadcast_power(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","name":"_broadcast_power","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(lhs : MXNet::Symbol?, rhs : MXNet::Symbol?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, rhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_broadcast_power","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"broadcast_power\", lhs, rhs, **kwargs)"}},{"id":"_broadcast_sub(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","html_id":"_broadcast_sub(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","name":"_broadcast_sub","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(lhs : MXNet::Symbol?, rhs : MXNet::Symbol?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, rhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_broadcast_sub","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"broadcast_sub\", lhs, rhs, **kwargs)"}},{"id":"_broadcast_to(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_broadcast_to(data:MXNet::Symbol?,**kwargs)-class-method","name":"_broadcast_to","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_broadcast_to","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"broadcast_to\", data, **kwargs)"}},{"id":"_cast(data:MXNet::Symbol?,dtype,**kwargs)-class-method","html_id":"_cast(data:MXNet::Symbol?,dtype,**kwargs)-class-method","name":"_cast","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"dtype","doc":null,"default_value":"","external_name":"dtype","restriction":""}],"args_string":"(data : MXNet::Symbol?, dtype, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, dtype, **kwargs)","location":null,"def":{"name":"_cast","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"dtype","doc":null,"default_value":"","external_name":"dtype","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"cast\", data, **kwargs.merge(dtype: dtype))"}},{"id":"_Cast(data:MXNet::Symbol?,dtype,**kwargs)-class-method","html_id":"_Cast(data:MXNet::Symbol?,dtype,**kwargs)-class-method","name":"_Cast","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"dtype","doc":null,"default_value":"","external_name":"dtype","restriction":""}],"args_string":"(data : MXNet::Symbol?, dtype, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, dtype, **kwargs)","location":null,"def":{"name":"_Cast","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"dtype","doc":null,"default_value":"","external_name":"dtype","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"Cast\", data, **kwargs.merge(dtype: dtype))"}},{"id":"_cast_storage(data:MXNet::Symbol?,stype,**kwargs)-class-method","html_id":"_cast_storage(data:MXNet::Symbol?,stype,**kwargs)-class-method","name":"_cast_storage","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"stype","doc":null,"default_value":"","external_name":"stype","restriction":""}],"args_string":"(data : MXNet::Symbol?, stype, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, stype, **kwargs)","location":null,"def":{"name":"_cast_storage","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"stype","doc":null,"default_value":"","external_name":"stype","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"cast_storage\", data, **kwargs.merge(stype: stype))"}},{"id":"_cbrt(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_cbrt(data:MXNet::Symbol?,**kwargs)-class-method","name":"_cbrt","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_cbrt","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"cbrt\", data, **kwargs)"}},{"id":"_ceil(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_ceil(data:MXNet::Symbol?,**kwargs)-class-method","name":"_ceil","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_ceil","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"ceil\", data, **kwargs)"}},{"id":"_choose_element_0index(**kwargs)-class-method","html_id":"_choose_element_0index(**kwargs)-class-method","name":"_choose_element_0index","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"_choose_element_0index","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"choose_element_0index\", **kwargs)"}},{"id":"_clip(data:MXNet::Symbol?,a_min,a_max,**kwargs)-class-method","html_id":"_clip(data:MXNet::Symbol?,a_min,a_max,**kwargs)-class-method","name":"_clip","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"a_min","doc":null,"default_value":"","external_name":"a_min","restriction":""},{"name":"a_max","doc":null,"default_value":"","external_name":"a_max","restriction":""}],"args_string":"(data : MXNet::Symbol?, a_min, a_max, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, a_min, a_max, **kwargs)","location":null,"def":{"name":"_clip","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"a_min","doc":null,"default_value":"","external_name":"a_min","restriction":""},{"name":"a_max","doc":null,"default_value":"","external_name":"a_max","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"clip\", data, **kwargs.merge(a_min: a_min, a_max: a_max))"}},{"id":"_concat(data:Array(MXNet::Symbol),num_args,**kwargs)-class-method","html_id":"_concat(data:Array(MXNet::Symbol),num_args,**kwargs)-class-method","name":"_concat","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"Array(MXNet::Symbol)"},{"name":"num_args","doc":null,"default_value":"","external_name":"num_args","restriction":""}],"args_string":"(data : Array(MXNet::Symbol), num_args, **kwargs)","args_html":"(data : Array(<a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>), num_args, **kwargs)","location":null,"def":{"name":"_concat","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"Array(MXNet::Symbol)"},{"name":"num_args","doc":null,"default_value":"","external_name":"num_args","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"concat\", data, **kwargs.merge(num_args: num_args))"}},{"id":"_Concat(data:Array(MXNet::Symbol),num_args,**kwargs)-class-method","html_id":"_Concat(data:Array(MXNet::Symbol),num_args,**kwargs)-class-method","name":"_Concat","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"Array(MXNet::Symbol)"},{"name":"num_args","doc":null,"default_value":"","external_name":"num_args","restriction":""}],"args_string":"(data : Array(MXNet::Symbol), num_args, **kwargs)","args_html":"(data : Array(<a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>), num_args, **kwargs)","location":null,"def":{"name":"_Concat","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"Array(MXNet::Symbol)"},{"name":"num_args","doc":null,"default_value":"","external_name":"num_args","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"Concat\", data, **kwargs.merge(num_args: num_args))"}},{"id":"_Convolution(data:MXNet::Symbol?,weight:MXNet::Symbol?,bias:MXNet::Symbol?,kernel,num_filter,**kwargs)-class-method","html_id":"_Convolution(data:MXNet::Symbol?,weight:MXNet::Symbol?,bias:MXNet::Symbol?,kernel,num_filter,**kwargs)-class-method","name":"_Convolution","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::Symbol | ::Nil"},{"name":"bias","doc":null,"default_value":"","external_name":"bias","restriction":"MXNet::Symbol | ::Nil"},{"name":"kernel","doc":null,"default_value":"","external_name":"kernel","restriction":""},{"name":"num_filter","doc":null,"default_value":"","external_name":"num_filter","restriction":""}],"args_string":"(data : MXNet::Symbol?, weight : MXNet::Symbol?, bias : MXNet::Symbol?, kernel, num_filter, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, weight : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, bias : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, kernel, num_filter, **kwargs)","location":null,"def":{"name":"_Convolution","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::Symbol | ::Nil"},{"name":"bias","doc":null,"default_value":"","external_name":"bias","restriction":"MXNet::Symbol | ::Nil"},{"name":"kernel","doc":null,"default_value":"","external_name":"kernel","restriction":""},{"name":"num_filter","doc":null,"default_value":"","external_name":"num_filter","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"Convolution\", data, weight, bias, **kwargs.merge(kernel: kernel, num_filter: num_filter))"}},{"id":"_Convolution_v1(data:MXNet::Symbol?,weight:MXNet::Symbol?,bias:MXNet::Symbol?,kernel,num_filter,**kwargs)-class-method","html_id":"_Convolution_v1(data:MXNet::Symbol?,weight:MXNet::Symbol?,bias:MXNet::Symbol?,kernel,num_filter,**kwargs)-class-method","name":"_Convolution_v1","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::Symbol | ::Nil"},{"name":"bias","doc":null,"default_value":"","external_name":"bias","restriction":"MXNet::Symbol | ::Nil"},{"name":"kernel","doc":null,"default_value":"","external_name":"kernel","restriction":""},{"name":"num_filter","doc":null,"default_value":"","external_name":"num_filter","restriction":""}],"args_string":"(data : MXNet::Symbol?, weight : MXNet::Symbol?, bias : MXNet::Symbol?, kernel, num_filter, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, weight : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, bias : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, kernel, num_filter, **kwargs)","location":null,"def":{"name":"_Convolution_v1","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::Symbol | ::Nil"},{"name":"bias","doc":null,"default_value":"","external_name":"bias","restriction":"MXNet::Symbol | ::Nil"},{"name":"kernel","doc":null,"default_value":"","external_name":"kernel","restriction":""},{"name":"num_filter","doc":null,"default_value":"","external_name":"num_filter","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"Convolution_v1\", data, weight, bias, **kwargs.merge(kernel: kernel, num_filter: num_filter))"}},{"id":"_Correlation(data1:MXNet::Symbol?,data2:MXNet::Symbol?,**kwargs)-class-method","html_id":"_Correlation(data1:MXNet::Symbol?,data2:MXNet::Symbol?,**kwargs)-class-method","name":"_Correlation","doc":null,"summary":null,"abstract":false,"args":[{"name":"data1","doc":null,"default_value":"","external_name":"data1","restriction":"MXNet::Symbol | ::Nil"},{"name":"data2","doc":null,"default_value":"","external_name":"data2","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data1 : MXNet::Symbol?, data2 : MXNet::Symbol?, **kwargs)","args_html":"(data1 : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, data2 : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_Correlation","args":[{"name":"data1","doc":null,"default_value":"","external_name":"data1","restriction":"MXNet::Symbol | ::Nil"},{"name":"data2","doc":null,"default_value":"","external_name":"data2","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"Correlation\", data1, data2, **kwargs)"}},{"id":"_cos(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_cos(data:MXNet::Symbol?,**kwargs)-class-method","name":"_cos","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_cos","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"cos\", data, **kwargs)"}},{"id":"_cosh(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_cosh(data:MXNet::Symbol?,**kwargs)-class-method","name":"_cosh","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_cosh","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"cosh\", data, **kwargs)"}},{"id":"_crop(data:MXNet::Symbol?,begin_begin,end_end,**kwargs)-class-method","html_id":"_crop(data:MXNet::Symbol?,begin_begin,end_end,**kwargs)-class-method","name":"_crop","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"_begin","doc":null,"default_value":"","external_name":"begin","restriction":""},{"name":"_end","doc":null,"default_value":"","external_name":"end","restriction":""}],"args_string":"(data : MXNet::Symbol?, begin _begin, end _end, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, begin _begin, end _end, **kwargs)","location":null,"def":{"name":"_crop","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"_begin","doc":null,"default_value":"","external_name":"begin","restriction":""},{"name":"_end","doc":null,"default_value":"","external_name":"end","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"crop\", data, **kwargs.merge(begin: _begin, end: _end))"}},{"id":"_Crop(num_args,**kwargs)-class-method","html_id":"_Crop(num_args,**kwargs)-class-method","name":"_Crop","doc":null,"summary":null,"abstract":false,"args":[{"name":"num_args","doc":null,"default_value":"","external_name":"num_args","restriction":""}],"args_string":"(num_args, **kwargs)","args_html":"(num_args, **kwargs)","location":null,"def":{"name":"_Crop","args":[{"name":"num_args","doc":null,"default_value":"","external_name":"num_args","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"Crop\", **kwargs.merge(num_args: num_args))"}},{"id":"_CuDNNBatchNorm(data:MXNet::Symbol?,gamma:MXNet::Symbol?,beta:MXNet::Symbol?,moving_mean:MXNet::Symbol?,moving_var:MXNet::Symbol?,**kwargs)-class-method","html_id":"_CuDNNBatchNorm(data:MXNet::Symbol?,gamma:MXNet::Symbol?,beta:MXNet::Symbol?,moving_mean:MXNet::Symbol?,moving_var:MXNet::Symbol?,**kwargs)-class-method","name":"_CuDNNBatchNorm","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"gamma","doc":null,"default_value":"","external_name":"gamma","restriction":"MXNet::Symbol | ::Nil"},{"name":"beta","doc":null,"default_value":"","external_name":"beta","restriction":"MXNet::Symbol | ::Nil"},{"name":"moving_mean","doc":null,"default_value":"","external_name":"moving_mean","restriction":"MXNet::Symbol | ::Nil"},{"name":"moving_var","doc":null,"default_value":"","external_name":"moving_var","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, gamma : MXNet::Symbol?, beta : MXNet::Symbol?, moving_mean : MXNet::Symbol?, moving_var : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, gamma : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, beta : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, moving_mean : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, moving_var : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_CuDNNBatchNorm","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"gamma","doc":null,"default_value":"","external_name":"gamma","restriction":"MXNet::Symbol | ::Nil"},{"name":"beta","doc":null,"default_value":"","external_name":"beta","restriction":"MXNet::Symbol | ::Nil"},{"name":"moving_mean","doc":null,"default_value":"","external_name":"moving_mean","restriction":"MXNet::Symbol | ::Nil"},{"name":"moving_var","doc":null,"default_value":"","external_name":"moving_var","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"CuDNNBatchNorm\", data, gamma, beta, moving_mean, moving_var, **kwargs)"}},{"id":"_Custom(data:Array(MXNet::Symbol),op_type,**kwargs)-class-method","html_id":"_Custom(data:Array(MXNet::Symbol),op_type,**kwargs)-class-method","name":"_Custom","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"Array(MXNet::Symbol)"},{"name":"op_type","doc":null,"default_value":"","external_name":"op_type","restriction":""}],"args_string":"(data : Array(MXNet::Symbol), op_type, **kwargs)","args_html":"(data : Array(<a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>), op_type, **kwargs)","location":null,"def":{"name":"_Custom","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"Array(MXNet::Symbol)"},{"name":"op_type","doc":null,"default_value":"","external_name":"op_type","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"Custom\", data, **kwargs.merge(op_type: op_type))"}},{"id":"_Deconvolution(data:MXNet::Symbol?,weight:MXNet::Symbol?,bias:MXNet::Symbol?,kernel,num_filter,**kwargs)-class-method","html_id":"_Deconvolution(data:MXNet::Symbol?,weight:MXNet::Symbol?,bias:MXNet::Symbol?,kernel,num_filter,**kwargs)-class-method","name":"_Deconvolution","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::Symbol | ::Nil"},{"name":"bias","doc":null,"default_value":"","external_name":"bias","restriction":"MXNet::Symbol | ::Nil"},{"name":"kernel","doc":null,"default_value":"","external_name":"kernel","restriction":""},{"name":"num_filter","doc":null,"default_value":"","external_name":"num_filter","restriction":""}],"args_string":"(data : MXNet::Symbol?, weight : MXNet::Symbol?, bias : MXNet::Symbol?, kernel, num_filter, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, weight : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, bias : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, kernel, num_filter, **kwargs)","location":null,"def":{"name":"_Deconvolution","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::Symbol | ::Nil"},{"name":"bias","doc":null,"default_value":"","external_name":"bias","restriction":"MXNet::Symbol | ::Nil"},{"name":"kernel","doc":null,"default_value":"","external_name":"kernel","restriction":""},{"name":"num_filter","doc":null,"default_value":"","external_name":"num_filter","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"Deconvolution\", data, weight, bias, **kwargs.merge(kernel: kernel, num_filter: num_filter))"}},{"id":"_degrees(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_degrees(data:MXNet::Symbol?,**kwargs)-class-method","name":"_degrees","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_degrees","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"degrees\", data, **kwargs)"}},{"id":"_depth_to_space(data:MXNet::Symbol?,block_size,**kwargs)-class-method","html_id":"_depth_to_space(data:MXNet::Symbol?,block_size,**kwargs)-class-method","name":"_depth_to_space","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"block_size","doc":null,"default_value":"","external_name":"block_size","restriction":""}],"args_string":"(data : MXNet::Symbol?, block_size, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, block_size, **kwargs)","location":null,"def":{"name":"_depth_to_space","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"block_size","doc":null,"default_value":"","external_name":"block_size","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"depth_to_space\", data, **kwargs.merge(block_size: block_size))"}},{"id":"_diag(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_diag(data:MXNet::Symbol?,**kwargs)-class-method","name":"_diag","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_diag","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"diag\", data, **kwargs)"}},{"id":"_dot(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","html_id":"_dot(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","name":"_dot","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(lhs : MXNet::Symbol?, rhs : MXNet::Symbol?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, rhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_dot","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"dot\", lhs, rhs, **kwargs)"}},{"id":"_Dropout(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_Dropout(data:MXNet::Symbol?,**kwargs)-class-method","name":"_Dropout","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_Dropout","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"Dropout\", data, **kwargs)"}},{"id":"_ElementWiseSum(args:Array(MXNet::Symbol),**kwargs)-class-method","html_id":"_ElementWiseSum(args:Array(MXNet::Symbol),**kwargs)-class-method","name":"_ElementWiseSum","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":"Array(MXNet::Symbol)"}],"args_string":"(args : Array(MXNet::Symbol), **kwargs)","args_html":"(args : Array(<a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>), **kwargs)","location":null,"def":{"name":"_ElementWiseSum","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":"Array(MXNet::Symbol)"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"ElementWiseSum\", args, **kwargs)"}},{"id":"_elemwise_add(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","html_id":"_elemwise_add(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","name":"_elemwise_add","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(lhs : MXNet::Symbol?, rhs : MXNet::Symbol?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, rhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_elemwise_add","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"elemwise_add\", lhs, rhs, **kwargs)"}},{"id":"_elemwise_div(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","html_id":"_elemwise_div(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","name":"_elemwise_div","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(lhs : MXNet::Symbol?, rhs : MXNet::Symbol?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, rhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_elemwise_div","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"elemwise_div\", lhs, rhs, **kwargs)"}},{"id":"_elemwise_mul(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","html_id":"_elemwise_mul(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","name":"_elemwise_mul","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(lhs : MXNet::Symbol?, rhs : MXNet::Symbol?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, rhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_elemwise_mul","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"elemwise_mul\", lhs, rhs, **kwargs)"}},{"id":"_elemwise_sub(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","html_id":"_elemwise_sub(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","name":"_elemwise_sub","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(lhs : MXNet::Symbol?, rhs : MXNet::Symbol?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, rhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_elemwise_sub","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"elemwise_sub\", lhs, rhs, **kwargs)"}},{"id":"_Embedding(data:MXNet::Symbol?,weight:MXNet::Symbol?,input_dim,output_dim,**kwargs)-class-method","html_id":"_Embedding(data:MXNet::Symbol?,weight:MXNet::Symbol?,input_dim,output_dim,**kwargs)-class-method","name":"_Embedding","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::Symbol | ::Nil"},{"name":"input_dim","doc":null,"default_value":"","external_name":"input_dim","restriction":""},{"name":"output_dim","doc":null,"default_value":"","external_name":"output_dim","restriction":""}],"args_string":"(data : MXNet::Symbol?, weight : MXNet::Symbol?, input_dim, output_dim, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, weight : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, input_dim, output_dim, **kwargs)","location":null,"def":{"name":"_Embedding","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::Symbol | ::Nil"},{"name":"input_dim","doc":null,"default_value":"","external_name":"input_dim","restriction":""},{"name":"output_dim","doc":null,"default_value":"","external_name":"output_dim","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"Embedding\", data, weight, **kwargs.merge(input_dim: input_dim, output_dim: output_dim))"}},{"id":"_exp(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_exp(data:MXNet::Symbol?,**kwargs)-class-method","name":"_exp","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_exp","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"exp\", data, **kwargs)"}},{"id":"_expand_dims(data:MXNet::Symbol?,axis,**kwargs)-class-method","html_id":"_expand_dims(data:MXNet::Symbol?,axis,**kwargs)-class-method","name":"_expand_dims","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"axis","doc":null,"default_value":"","external_name":"axis","restriction":""}],"args_string":"(data : MXNet::Symbol?, axis, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, axis, **kwargs)","location":null,"def":{"name":"_expand_dims","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"axis","doc":null,"default_value":"","external_name":"axis","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"expand_dims\", data, **kwargs.merge(axis: axis))"}},{"id":"_expm1(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_expm1(data:MXNet::Symbol?,**kwargs)-class-method","name":"_expm1","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_expm1","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"expm1\", data, **kwargs)"}},{"id":"_fill_element_0index(**kwargs)-class-method","html_id":"_fill_element_0index(**kwargs)-class-method","name":"_fill_element_0index","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"_fill_element_0index","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"fill_element_0index\", **kwargs)"}},{"id":"_fix(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_fix(data:MXNet::Symbol?,**kwargs)-class-method","name":"_fix","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_fix","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"fix\", data, **kwargs)"}},{"id":"_Flatten(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_Flatten(data:MXNet::Symbol?,**kwargs)-class-method","name":"_Flatten","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_Flatten","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"Flatten\", data, **kwargs)"}},{"id":"_flatten(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_flatten(data:MXNet::Symbol?,**kwargs)-class-method","name":"_flatten","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_flatten","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"flatten\", data, **kwargs)"}},{"id":"_flip(data:MXNet::Symbol?,axis,**kwargs)-class-method","html_id":"_flip(data:MXNet::Symbol?,axis,**kwargs)-class-method","name":"_flip","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"axis","doc":null,"default_value":"","external_name":"axis","restriction":""}],"args_string":"(data : MXNet::Symbol?, axis, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, axis, **kwargs)","location":null,"def":{"name":"_flip","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"axis","doc":null,"default_value":"","external_name":"axis","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"flip\", data, **kwargs.merge(axis: axis))"}},{"id":"_floor(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_floor(data:MXNet::Symbol?,**kwargs)-class-method","name":"_floor","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_floor","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"floor\", data, **kwargs)"}},{"id":"_ftml_update(weight:MXNet::Symbol?,grad:MXNet::Symbol?,d:MXNet::Symbol?,v:MXNet::Symbol?,z:MXNet::Symbol?,lr,t,**kwargs)-class-method","html_id":"_ftml_update(weight:MXNet::Symbol?,grad:MXNet::Symbol?,d:MXNet::Symbol?,v:MXNet::Symbol?,z:MXNet::Symbol?,lr,t,**kwargs)-class-method","name":"_ftml_update","doc":null,"summary":null,"abstract":false,"args":[{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::Symbol | ::Nil"},{"name":"grad","doc":null,"default_value":"","external_name":"grad","restriction":"MXNet::Symbol | ::Nil"},{"name":"d","doc":null,"default_value":"","external_name":"d","restriction":"MXNet::Symbol | ::Nil"},{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"MXNet::Symbol | ::Nil"},{"name":"z","doc":null,"default_value":"","external_name":"z","restriction":"MXNet::Symbol | ::Nil"},{"name":"lr","doc":null,"default_value":"","external_name":"lr","restriction":""},{"name":"t","doc":null,"default_value":"","external_name":"t","restriction":""}],"args_string":"(weight : MXNet::Symbol?, grad : MXNet::Symbol?, d : MXNet::Symbol?, v : MXNet::Symbol?, z : MXNet::Symbol?, lr, t, **kwargs)","args_html":"(weight : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, grad : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, d : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, v : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, z : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, lr, t, **kwargs)","location":null,"def":{"name":"_ftml_update","args":[{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::Symbol | ::Nil"},{"name":"grad","doc":null,"default_value":"","external_name":"grad","restriction":"MXNet::Symbol | ::Nil"},{"name":"d","doc":null,"default_value":"","external_name":"d","restriction":"MXNet::Symbol | ::Nil"},{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"MXNet::Symbol | ::Nil"},{"name":"z","doc":null,"default_value":"","external_name":"z","restriction":"MXNet::Symbol | ::Nil"},{"name":"lr","doc":null,"default_value":"","external_name":"lr","restriction":""},{"name":"t","doc":null,"default_value":"","external_name":"t","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"ftml_update\", weight, grad, d, v, z, **kwargs.merge(lr: lr, t: t))"}},{"id":"_ftrl_update(weight:MXNet::Symbol?,grad:MXNet::Symbol?,z:MXNet::Symbol?,n:MXNet::Symbol?,lr,**kwargs)-class-method","html_id":"_ftrl_update(weight:MXNet::Symbol?,grad:MXNet::Symbol?,z:MXNet::Symbol?,n:MXNet::Symbol?,lr,**kwargs)-class-method","name":"_ftrl_update","doc":null,"summary":null,"abstract":false,"args":[{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::Symbol | ::Nil"},{"name":"grad","doc":null,"default_value":"","external_name":"grad","restriction":"MXNet::Symbol | ::Nil"},{"name":"z","doc":null,"default_value":"","external_name":"z","restriction":"MXNet::Symbol | ::Nil"},{"name":"n","doc":null,"default_value":"","external_name":"n","restriction":"MXNet::Symbol | ::Nil"},{"name":"lr","doc":null,"default_value":"","external_name":"lr","restriction":""}],"args_string":"(weight : MXNet::Symbol?, grad : MXNet::Symbol?, z : MXNet::Symbol?, n : MXNet::Symbol?, lr, **kwargs)","args_html":"(weight : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, grad : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, z : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, n : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, lr, **kwargs)","location":null,"def":{"name":"_ftrl_update","args":[{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::Symbol | ::Nil"},{"name":"grad","doc":null,"default_value":"","external_name":"grad","restriction":"MXNet::Symbol | ::Nil"},{"name":"z","doc":null,"default_value":"","external_name":"z","restriction":"MXNet::Symbol | ::Nil"},{"name":"n","doc":null,"default_value":"","external_name":"n","restriction":"MXNet::Symbol | ::Nil"},{"name":"lr","doc":null,"default_value":"","external_name":"lr","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"ftrl_update\", weight, grad, z, n, **kwargs.merge(lr: lr))"}},{"id":"_FullyConnected(data:MXNet::Symbol?,weight:MXNet::Symbol?,bias:MXNet::Symbol?,num_hidden,**kwargs)-class-method","html_id":"_FullyConnected(data:MXNet::Symbol?,weight:MXNet::Symbol?,bias:MXNet::Symbol?,num_hidden,**kwargs)-class-method","name":"_FullyConnected","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::Symbol | ::Nil"},{"name":"bias","doc":null,"default_value":"","external_name":"bias","restriction":"MXNet::Symbol | ::Nil"},{"name":"num_hidden","doc":null,"default_value":"","external_name":"num_hidden","restriction":""}],"args_string":"(data : MXNet::Symbol?, weight : MXNet::Symbol?, bias : MXNet::Symbol?, num_hidden, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, weight : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, bias : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, num_hidden, **kwargs)","location":null,"def":{"name":"_FullyConnected","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::Symbol | ::Nil"},{"name":"bias","doc":null,"default_value":"","external_name":"bias","restriction":"MXNet::Symbol | ::Nil"},{"name":"num_hidden","doc":null,"default_value":"","external_name":"num_hidden","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"FullyConnected\", data, weight, bias, **kwargs.merge(num_hidden: num_hidden))"}},{"id":"_gamma(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_gamma(data:MXNet::Symbol?,**kwargs)-class-method","name":"_gamma","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_gamma","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"gamma\", data, **kwargs)"}},{"id":"_gammaln(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_gammaln(data:MXNet::Symbol?,**kwargs)-class-method","name":"_gammaln","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_gammaln","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"gammaln\", data, **kwargs)"}},{"id":"_gather_nd(data:MXNet::Symbol?,indices:MXNet::Symbol?,**kwargs)-class-method","html_id":"_gather_nd(data:MXNet::Symbol?,indices:MXNet::Symbol?,**kwargs)-class-method","name":"_gather_nd","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"indices","doc":null,"default_value":"","external_name":"indices","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, indices : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, indices : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_gather_nd","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"indices","doc":null,"default_value":"","external_name":"indices","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"gather_nd\", data, indices, **kwargs)"}},{"id":"_GridGenerator(data:MXNet::Symbol?,transform_type,**kwargs)-class-method","html_id":"_GridGenerator(data:MXNet::Symbol?,transform_type,**kwargs)-class-method","name":"_GridGenerator","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"transform_type","doc":null,"default_value":"","external_name":"transform_type","restriction":""}],"args_string":"(data : MXNet::Symbol?, transform_type, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, transform_type, **kwargs)","location":null,"def":{"name":"_GridGenerator","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"transform_type","doc":null,"default_value":"","external_name":"transform_type","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"GridGenerator\", data, **kwargs.merge(transform_type: transform_type))"}},{"id":"_hard_sigmoid(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_hard_sigmoid(data:MXNet::Symbol?,**kwargs)-class-method","name":"_hard_sigmoid","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_hard_sigmoid","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"hard_sigmoid\", data, **kwargs)"}},{"id":"_identity(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_identity(data:MXNet::Symbol?,**kwargs)-class-method","name":"_identity","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_identity","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"identity\", data, **kwargs)"}},{"id":"_IdentityAttachKLSparseReg(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_IdentityAttachKLSparseReg(data:MXNet::Symbol?,**kwargs)-class-method","name":"_IdentityAttachKLSparseReg","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_IdentityAttachKLSparseReg","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"IdentityAttachKLSparseReg\", data, **kwargs)"}},{"id":"_InstanceNorm(data:MXNet::Symbol?,gamma:MXNet::Symbol?,beta:MXNet::Symbol?,**kwargs)-class-method","html_id":"_InstanceNorm(data:MXNet::Symbol?,gamma:MXNet::Symbol?,beta:MXNet::Symbol?,**kwargs)-class-method","name":"_InstanceNorm","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"gamma","doc":null,"default_value":"","external_name":"gamma","restriction":"MXNet::Symbol | ::Nil"},{"name":"beta","doc":null,"default_value":"","external_name":"beta","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, gamma : MXNet::Symbol?, beta : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, gamma : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, beta : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_InstanceNorm","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"gamma","doc":null,"default_value":"","external_name":"gamma","restriction":"MXNet::Symbol | ::Nil"},{"name":"beta","doc":null,"default_value":"","external_name":"beta","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"InstanceNorm\", data, gamma, beta, **kwargs)"}},{"id":"_khatri_rao(args:Array(MXNet::Symbol),**kwargs)-class-method","html_id":"_khatri_rao(args:Array(MXNet::Symbol),**kwargs)-class-method","name":"_khatri_rao","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":"Array(MXNet::Symbol)"}],"args_string":"(args : Array(MXNet::Symbol), **kwargs)","args_html":"(args : Array(<a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>), **kwargs)","location":null,"def":{"name":"_khatri_rao","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":"Array(MXNet::Symbol)"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"khatri_rao\", args, **kwargs)"}},{"id":"_L2Normalization(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_L2Normalization(data:MXNet::Symbol?,**kwargs)-class-method","name":"_L2Normalization","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_L2Normalization","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"L2Normalization\", data, **kwargs)"}},{"id":"_LayerNorm(data:MXNet::Symbol?,gamma:MXNet::Symbol?,beta:MXNet::Symbol?,**kwargs)-class-method","html_id":"_LayerNorm(data:MXNet::Symbol?,gamma:MXNet::Symbol?,beta:MXNet::Symbol?,**kwargs)-class-method","name":"_LayerNorm","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"gamma","doc":null,"default_value":"","external_name":"gamma","restriction":"MXNet::Symbol | ::Nil"},{"name":"beta","doc":null,"default_value":"","external_name":"beta","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, gamma : MXNet::Symbol?, beta : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, gamma : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, beta : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_LayerNorm","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"gamma","doc":null,"default_value":"","external_name":"gamma","restriction":"MXNet::Symbol | ::Nil"},{"name":"beta","doc":null,"default_value":"","external_name":"beta","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"LayerNorm\", data, gamma, beta, **kwargs)"}},{"id":"_LeakyReLU(data:MXNet::Symbol?,gamma:MXNet::Symbol?,**kwargs)-class-method","html_id":"_LeakyReLU(data:MXNet::Symbol?,gamma:MXNet::Symbol?,**kwargs)-class-method","name":"_LeakyReLU","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"gamma","doc":null,"default_value":"","external_name":"gamma","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, gamma : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, gamma : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_LeakyReLU","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"gamma","doc":null,"default_value":"","external_name":"gamma","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"LeakyReLU\", data, gamma, **kwargs)"}},{"id":"_linalg_gelqf(a:MXNet::Symbol?,**kwargs)-class-method","html_id":"_linalg_gelqf(a:MXNet::Symbol?,**kwargs)-class-method","name":"_linalg_gelqf","doc":null,"summary":null,"abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(a : MXNet::Symbol?, **kwargs)","args_html":"(a : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_linalg_gelqf","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"linalg_gelqf\", a, **kwargs)"}},{"id":"_linalg_gemm(a:MXNet::Symbol?,b:MXNet::Symbol?,c:MXNet::Symbol?,**kwargs)-class-method","html_id":"_linalg_gemm(a:MXNet::Symbol?,b:MXNet::Symbol?,c:MXNet::Symbol?,**kwargs)-class-method","name":"_linalg_gemm","doc":null,"summary":null,"abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"MXNet::Symbol | ::Nil"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"MXNet::Symbol | ::Nil"},{"name":"c","doc":null,"default_value":"","external_name":"c","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(a : MXNet::Symbol?, b : MXNet::Symbol?, c : MXNet::Symbol?, **kwargs)","args_html":"(a : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, b : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, c : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_linalg_gemm","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"MXNet::Symbol | ::Nil"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"MXNet::Symbol | ::Nil"},{"name":"c","doc":null,"default_value":"","external_name":"c","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"linalg_gemm\", a, b, c, **kwargs)"}},{"id":"_linalg_gemm2(a:MXNet::Symbol?,b:MXNet::Symbol?,**kwargs)-class-method","html_id":"_linalg_gemm2(a:MXNet::Symbol?,b:MXNet::Symbol?,**kwargs)-class-method","name":"_linalg_gemm2","doc":null,"summary":null,"abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"MXNet::Symbol | ::Nil"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(a : MXNet::Symbol?, b : MXNet::Symbol?, **kwargs)","args_html":"(a : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, b : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_linalg_gemm2","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"MXNet::Symbol | ::Nil"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"linalg_gemm2\", a, b, **kwargs)"}},{"id":"_linalg_potrf(a:MXNet::Symbol?,**kwargs)-class-method","html_id":"_linalg_potrf(a:MXNet::Symbol?,**kwargs)-class-method","name":"_linalg_potrf","doc":null,"summary":null,"abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(a : MXNet::Symbol?, **kwargs)","args_html":"(a : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_linalg_potrf","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"linalg_potrf\", a, **kwargs)"}},{"id":"_linalg_potri(a:MXNet::Symbol?,**kwargs)-class-method","html_id":"_linalg_potri(a:MXNet::Symbol?,**kwargs)-class-method","name":"_linalg_potri","doc":null,"summary":null,"abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(a : MXNet::Symbol?, **kwargs)","args_html":"(a : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_linalg_potri","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"linalg_potri\", a, **kwargs)"}},{"id":"_linalg_sumlogdiag(a:MXNet::Symbol?,**kwargs)-class-method","html_id":"_linalg_sumlogdiag(a:MXNet::Symbol?,**kwargs)-class-method","name":"_linalg_sumlogdiag","doc":null,"summary":null,"abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(a : MXNet::Symbol?, **kwargs)","args_html":"(a : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_linalg_sumlogdiag","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"linalg_sumlogdiag\", a, **kwargs)"}},{"id":"_linalg_syrk(a:MXNet::Symbol?,**kwargs)-class-method","html_id":"_linalg_syrk(a:MXNet::Symbol?,**kwargs)-class-method","name":"_linalg_syrk","doc":null,"summary":null,"abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(a : MXNet::Symbol?, **kwargs)","args_html":"(a : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_linalg_syrk","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"linalg_syrk\", a, **kwargs)"}},{"id":"_linalg_trmm(a:MXNet::Symbol?,b:MXNet::Symbol?,**kwargs)-class-method","html_id":"_linalg_trmm(a:MXNet::Symbol?,b:MXNet::Symbol?,**kwargs)-class-method","name":"_linalg_trmm","doc":null,"summary":null,"abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"MXNet::Symbol | ::Nil"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(a : MXNet::Symbol?, b : MXNet::Symbol?, **kwargs)","args_html":"(a : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, b : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_linalg_trmm","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"MXNet::Symbol | ::Nil"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"linalg_trmm\", a, b, **kwargs)"}},{"id":"_linalg_trsm(a:MXNet::Symbol?,b:MXNet::Symbol?,**kwargs)-class-method","html_id":"_linalg_trsm(a:MXNet::Symbol?,b:MXNet::Symbol?,**kwargs)-class-method","name":"_linalg_trsm","doc":null,"summary":null,"abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"MXNet::Symbol | ::Nil"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(a : MXNet::Symbol?, b : MXNet::Symbol?, **kwargs)","args_html":"(a : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, b : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_linalg_trsm","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"MXNet::Symbol | ::Nil"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"linalg_trsm\", a, b, **kwargs)"}},{"id":"_LinearRegressionOutput(data:MXNet::Symbol?,label:MXNet::Symbol?,**kwargs)-class-method","html_id":"_LinearRegressionOutput(data:MXNet::Symbol?,label:MXNet::Symbol?,**kwargs)-class-method","name":"_LinearRegressionOutput","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"label","doc":null,"default_value":"","external_name":"label","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, label : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, label : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_LinearRegressionOutput","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"label","doc":null,"default_value":"","external_name":"label","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"LinearRegressionOutput\", data, label, **kwargs)"}},{"id":"_log(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_log(data:MXNet::Symbol?,**kwargs)-class-method","name":"_log","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_log","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"log\", data, **kwargs)"}},{"id":"_log10(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_log10(data:MXNet::Symbol?,**kwargs)-class-method","name":"_log10","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_log10","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"log10\", data, **kwargs)"}},{"id":"_log1p(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_log1p(data:MXNet::Symbol?,**kwargs)-class-method","name":"_log1p","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_log1p","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"log1p\", data, **kwargs)"}},{"id":"_log2(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_log2(data:MXNet::Symbol?,**kwargs)-class-method","name":"_log2","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_log2","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"log2\", data, **kwargs)"}},{"id":"_log_softmax(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_log_softmax(data:MXNet::Symbol?,**kwargs)-class-method","name":"_log_softmax","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_log_softmax","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"log_softmax\", data, **kwargs)"}},{"id":"_logical_not(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_logical_not(data:MXNet::Symbol?,**kwargs)-class-method","name":"_logical_not","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_logical_not","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"logical_not\", data, **kwargs)"}},{"id":"_LogisticRegressionOutput(data:MXNet::Symbol?,label:MXNet::Symbol?,**kwargs)-class-method","html_id":"_LogisticRegressionOutput(data:MXNet::Symbol?,label:MXNet::Symbol?,**kwargs)-class-method","name":"_LogisticRegressionOutput","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"label","doc":null,"default_value":"","external_name":"label","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, label : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, label : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_LogisticRegressionOutput","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"label","doc":null,"default_value":"","external_name":"label","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"LogisticRegressionOutput\", data, label, **kwargs)"}},{"id":"_LRN(data:MXNet::Symbol?,nsize,**kwargs)-class-method","html_id":"_LRN(data:MXNet::Symbol?,nsize,**kwargs)-class-method","name":"_LRN","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"nsize","doc":null,"default_value":"","external_name":"nsize","restriction":""}],"args_string":"(data : MXNet::Symbol?, nsize, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, nsize, **kwargs)","location":null,"def":{"name":"_LRN","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"nsize","doc":null,"default_value":"","external_name":"nsize","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"LRN\", data, **kwargs.merge(nsize: nsize))"}},{"id":"_MAERegressionOutput(data:MXNet::Symbol?,label:MXNet::Symbol?,**kwargs)-class-method","html_id":"_MAERegressionOutput(data:MXNet::Symbol?,label:MXNet::Symbol?,**kwargs)-class-method","name":"_MAERegressionOutput","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"label","doc":null,"default_value":"","external_name":"label","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, label : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, label : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_MAERegressionOutput","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"label","doc":null,"default_value":"","external_name":"label","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"MAERegressionOutput\", data, label, **kwargs)"}},{"id":"_make_loss(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_make_loss(data:MXNet::Symbol?,**kwargs)-class-method","name":"_make_loss","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_make_loss","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"make_loss\", data, **kwargs)"}},{"id":"_MakeLoss(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_MakeLoss(data:MXNet::Symbol?,**kwargs)-class-method","name":"_MakeLoss","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_MakeLoss","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"MakeLoss\", data, **kwargs)"}},{"id":"_max(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_max(data:MXNet::Symbol?,**kwargs)-class-method","name":"_max","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_max","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"max\", data, **kwargs)"}},{"id":"_max_axis(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_max_axis(data:MXNet::Symbol?,**kwargs)-class-method","name":"_max_axis","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_max_axis","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"max_axis\", data, **kwargs)"}},{"id":"_mean(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_mean(data:MXNet::Symbol?,**kwargs)-class-method","name":"_mean","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_mean","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"mean\", data, **kwargs)"}},{"id":"_min(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_min(data:MXNet::Symbol?,**kwargs)-class-method","name":"_min","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_min","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"min\", data, **kwargs)"}},{"id":"_min_axis(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_min_axis(data:MXNet::Symbol?,**kwargs)-class-method","name":"_min_axis","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_min_axis","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"min_axis\", data, **kwargs)"}},{"id":"_mp_sgd_mom_update(weight:MXNet::Symbol?,grad:MXNet::Symbol?,mom:MXNet::Symbol?,weight32:MXNet::Symbol?,lr,**kwargs)-class-method","html_id":"_mp_sgd_mom_update(weight:MXNet::Symbol?,grad:MXNet::Symbol?,mom:MXNet::Symbol?,weight32:MXNet::Symbol?,lr,**kwargs)-class-method","name":"_mp_sgd_mom_update","doc":null,"summary":null,"abstract":false,"args":[{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::Symbol | ::Nil"},{"name":"grad","doc":null,"default_value":"","external_name":"grad","restriction":"MXNet::Symbol | ::Nil"},{"name":"mom","doc":null,"default_value":"","external_name":"mom","restriction":"MXNet::Symbol | ::Nil"},{"name":"weight32","doc":null,"default_value":"","external_name":"weight32","restriction":"MXNet::Symbol | ::Nil"},{"name":"lr","doc":null,"default_value":"","external_name":"lr","restriction":""}],"args_string":"(weight : MXNet::Symbol?, grad : MXNet::Symbol?, mom : MXNet::Symbol?, weight32 : MXNet::Symbol?, lr, **kwargs)","args_html":"(weight : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, grad : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, mom : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, weight32 : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, lr, **kwargs)","location":null,"def":{"name":"_mp_sgd_mom_update","args":[{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::Symbol | ::Nil"},{"name":"grad","doc":null,"default_value":"","external_name":"grad","restriction":"MXNet::Symbol | ::Nil"},{"name":"mom","doc":null,"default_value":"","external_name":"mom","restriction":"MXNet::Symbol | ::Nil"},{"name":"weight32","doc":null,"default_value":"","external_name":"weight32","restriction":"MXNet::Symbol | ::Nil"},{"name":"lr","doc":null,"default_value":"","external_name":"lr","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"mp_sgd_mom_update\", weight, grad, mom, weight32, **kwargs.merge(lr: lr))"}},{"id":"_mp_sgd_update(weight:MXNet::Symbol?,grad:MXNet::Symbol?,weight32:MXNet::Symbol?,lr,**kwargs)-class-method","html_id":"_mp_sgd_update(weight:MXNet::Symbol?,grad:MXNet::Symbol?,weight32:MXNet::Symbol?,lr,**kwargs)-class-method","name":"_mp_sgd_update","doc":null,"summary":null,"abstract":false,"args":[{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::Symbol | ::Nil"},{"name":"grad","doc":null,"default_value":"","external_name":"grad","restriction":"MXNet::Symbol | ::Nil"},{"name":"weight32","doc":null,"default_value":"","external_name":"weight32","restriction":"MXNet::Symbol | ::Nil"},{"name":"lr","doc":null,"default_value":"","external_name":"lr","restriction":""}],"args_string":"(weight : MXNet::Symbol?, grad : MXNet::Symbol?, weight32 : MXNet::Symbol?, lr, **kwargs)","args_html":"(weight : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, grad : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, weight32 : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, lr, **kwargs)","location":null,"def":{"name":"_mp_sgd_update","args":[{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::Symbol | ::Nil"},{"name":"grad","doc":null,"default_value":"","external_name":"grad","restriction":"MXNet::Symbol | ::Nil"},{"name":"weight32","doc":null,"default_value":"","external_name":"weight32","restriction":"MXNet::Symbol | ::Nil"},{"name":"lr","doc":null,"default_value":"","external_name":"lr","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"mp_sgd_update\", weight, grad, weight32, **kwargs.merge(lr: lr))"}},{"id":"_nanprod(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_nanprod(data:MXNet::Symbol?,**kwargs)-class-method","name":"_nanprod","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_nanprod","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"nanprod\", data, **kwargs)"}},{"id":"_nansum(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_nansum(data:MXNet::Symbol?,**kwargs)-class-method","name":"_nansum","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_nansum","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"nansum\", data, **kwargs)"}},{"id":"_negative(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_negative(data:MXNet::Symbol?,**kwargs)-class-method","name":"_negative","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_negative","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"negative\", data, **kwargs)"}},{"id":"_norm(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_norm(data:MXNet::Symbol?,**kwargs)-class-method","name":"_norm","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_norm","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"norm\", data, **kwargs)"}},{"id":"_normal(**kwargs)-class-method","html_id":"_normal(**kwargs)-class-method","name":"_normal","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"_normal","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"normal\", **kwargs)"}},{"id":"_one_hot(indices:MXNet::Symbol?,depth,**kwargs)-class-method","html_id":"_one_hot(indices:MXNet::Symbol?,depth,**kwargs)-class-method","name":"_one_hot","doc":null,"summary":null,"abstract":false,"args":[{"name":"indices","doc":null,"default_value":"","external_name":"indices","restriction":"MXNet::Symbol | ::Nil"},{"name":"depth","doc":null,"default_value":"","external_name":"depth","restriction":""}],"args_string":"(indices : MXNet::Symbol?, depth, **kwargs)","args_html":"(indices : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, depth, **kwargs)","location":null,"def":{"name":"_one_hot","args":[{"name":"indices","doc":null,"default_value":"","external_name":"indices","restriction":"MXNet::Symbol | ::Nil"},{"name":"depth","doc":null,"default_value":"","external_name":"depth","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"one_hot\", indices, **kwargs.merge(depth: depth))"}},{"id":"_ones_like(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_ones_like(data:MXNet::Symbol?,**kwargs)-class-method","name":"_ones_like","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_ones_like","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"ones_like\", data, **kwargs)"}},{"id":"_Pad(data:MXNet::Symbol?,mode,pad_width,**kwargs)-class-method","html_id":"_Pad(data:MXNet::Symbol?,mode,pad_width,**kwargs)-class-method","name":"_Pad","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"mode","doc":null,"default_value":"","external_name":"mode","restriction":""},{"name":"pad_width","doc":null,"default_value":"","external_name":"pad_width","restriction":""}],"args_string":"(data : MXNet::Symbol?, mode, pad_width, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, mode, pad_width, **kwargs)","location":null,"def":{"name":"_Pad","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"mode","doc":null,"default_value":"","external_name":"mode","restriction":""},{"name":"pad_width","doc":null,"default_value":"","external_name":"pad_width","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"Pad\", data, **kwargs.merge(mode: mode, pad_width: pad_width))"}},{"id":"_pad(data:MXNet::Symbol?,mode,pad_width,**kwargs)-class-method","html_id":"_pad(data:MXNet::Symbol?,mode,pad_width,**kwargs)-class-method","name":"_pad","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"mode","doc":null,"default_value":"","external_name":"mode","restriction":""},{"name":"pad_width","doc":null,"default_value":"","external_name":"pad_width","restriction":""}],"args_string":"(data : MXNet::Symbol?, mode, pad_width, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, mode, pad_width, **kwargs)","location":null,"def":{"name":"_pad","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"mode","doc":null,"default_value":"","external_name":"mode","restriction":""},{"name":"pad_width","doc":null,"default_value":"","external_name":"pad_width","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"pad\", data, **kwargs.merge(mode: mode, pad_width: pad_width))"}},{"id":"_pick(data:MXNet::Symbol?,index:MXNet::Symbol?,**kwargs)-class-method","html_id":"_pick(data:MXNet::Symbol?,index:MXNet::Symbol?,**kwargs)-class-method","name":"_pick","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, index : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, index : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_pick","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"pick\", data, index, **kwargs)"}},{"id":"_Pooling(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_Pooling(data:MXNet::Symbol?,**kwargs)-class-method","name":"_Pooling","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_Pooling","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"Pooling\", data, **kwargs)"}},{"id":"_Pooling_v1(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_Pooling_v1(data:MXNet::Symbol?,**kwargs)-class-method","name":"_Pooling_v1","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_Pooling_v1","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"Pooling_v1\", data, **kwargs)"}},{"id":"_prod(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_prod(data:MXNet::Symbol?,**kwargs)-class-method","name":"_prod","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_prod","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"prod\", data, **kwargs)"}},{"id":"_radians(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_radians(data:MXNet::Symbol?,**kwargs)-class-method","name":"_radians","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_radians","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"radians\", data, **kwargs)"}},{"id":"_random_exponential(**kwargs)-class-method","html_id":"_random_exponential(**kwargs)-class-method","name":"_random_exponential","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"_random_exponential","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"random_exponential\", **kwargs)"}},{"id":"_random_gamma(**kwargs)-class-method","html_id":"_random_gamma(**kwargs)-class-method","name":"_random_gamma","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"_random_gamma","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"random_gamma\", **kwargs)"}},{"id":"_random_generalized_negative_binomial(**kwargs)-class-method","html_id":"_random_generalized_negative_binomial(**kwargs)-class-method","name":"_random_generalized_negative_binomial","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"_random_generalized_negative_binomial","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"random_generalized_negative_binomial\", **kwargs)"}},{"id":"_random_negative_binomial(**kwargs)-class-method","html_id":"_random_negative_binomial(**kwargs)-class-method","name":"_random_negative_binomial","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"_random_negative_binomial","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"random_negative_binomial\", **kwargs)"}},{"id":"_random_normal(**kwargs)-class-method","html_id":"_random_normal(**kwargs)-class-method","name":"_random_normal","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"_random_normal","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"random_normal\", **kwargs)"}},{"id":"_random_poisson(**kwargs)-class-method","html_id":"_random_poisson(**kwargs)-class-method","name":"_random_poisson","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"_random_poisson","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"random_poisson\", **kwargs)"}},{"id":"_random_randint(low,high,**kwargs)-class-method","html_id":"_random_randint(low,high,**kwargs)-class-method","name":"_random_randint","doc":null,"summary":null,"abstract":false,"args":[{"name":"low","doc":null,"default_value":"","external_name":"low","restriction":""},{"name":"high","doc":null,"default_value":"","external_name":"high","restriction":""}],"args_string":"(low, high, **kwargs)","args_html":"(low, high, **kwargs)","location":null,"def":{"name":"_random_randint","args":[{"name":"low","doc":null,"default_value":"","external_name":"low","restriction":""},{"name":"high","doc":null,"default_value":"","external_name":"high","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"random_randint\", **kwargs.merge(low: low, high: high))"}},{"id":"_random_uniform(**kwargs)-class-method","html_id":"_random_uniform(**kwargs)-class-method","name":"_random_uniform","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"_random_uniform","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"random_uniform\", **kwargs)"}},{"id":"_ravel_multi_index(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_ravel_multi_index(data:MXNet::Symbol?,**kwargs)-class-method","name":"_ravel_multi_index","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_ravel_multi_index","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"ravel_multi_index\", data, **kwargs)"}},{"id":"_rcbrt(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_rcbrt(data:MXNet::Symbol?,**kwargs)-class-method","name":"_rcbrt","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_rcbrt","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"rcbrt\", data, **kwargs)"}},{"id":"_reciprocal(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_reciprocal(data:MXNet::Symbol?,**kwargs)-class-method","name":"_reciprocal","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_reciprocal","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"reciprocal\", data, **kwargs)"}},{"id":"_relu(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_relu(data:MXNet::Symbol?,**kwargs)-class-method","name":"_relu","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_relu","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"relu\", data, **kwargs)"}},{"id":"_repeat(data:MXNet::Symbol?,repeats,**kwargs)-class-method","html_id":"_repeat(data:MXNet::Symbol?,repeats,**kwargs)-class-method","name":"_repeat","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"repeats","doc":null,"default_value":"","external_name":"repeats","restriction":""}],"args_string":"(data : MXNet::Symbol?, repeats, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, repeats, **kwargs)","location":null,"def":{"name":"_repeat","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"repeats","doc":null,"default_value":"","external_name":"repeats","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"repeat\", data, **kwargs.merge(repeats: repeats))"}},{"id":"_Reshape(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_Reshape(data:MXNet::Symbol?,**kwargs)-class-method","name":"_Reshape","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_Reshape","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"Reshape\", data, **kwargs)"}},{"id":"_reshape(data:MXNet::Symbol?,shape,**kwargs)-class-method","html_id":"_reshape(data:MXNet::Symbol?,shape,**kwargs)-class-method","name":"_reshape","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"shape","doc":null,"default_value":"","external_name":"shape","restriction":""}],"args_string":"(data : MXNet::Symbol?, shape, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, shape, **kwargs)","location":null,"def":{"name":"_reshape","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"shape","doc":null,"default_value":"","external_name":"shape","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"reshape\", data, **kwargs.merge(shape: shape))"}},{"id":"_reshape_like(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","html_id":"_reshape_like(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","name":"_reshape_like","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(lhs : MXNet::Symbol?, rhs : MXNet::Symbol?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, rhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_reshape_like","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"reshape_like\", lhs, rhs, **kwargs)"}},{"id":"_reverse(data:MXNet::Symbol?,axis,**kwargs)-class-method","html_id":"_reverse(data:MXNet::Symbol?,axis,**kwargs)-class-method","name":"_reverse","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"axis","doc":null,"default_value":"","external_name":"axis","restriction":""}],"args_string":"(data : MXNet::Symbol?, axis, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, axis, **kwargs)","location":null,"def":{"name":"_reverse","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"axis","doc":null,"default_value":"","external_name":"axis","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"reverse\", data, **kwargs.merge(axis: axis))"}},{"id":"_rint(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_rint(data:MXNet::Symbol?,**kwargs)-class-method","name":"_rint","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_rint","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"rint\", data, **kwargs)"}},{"id":"_rmsprop_update(weight:MXNet::Symbol?,grad:MXNet::Symbol?,n:MXNet::Symbol?,lr,**kwargs)-class-method","html_id":"_rmsprop_update(weight:MXNet::Symbol?,grad:MXNet::Symbol?,n:MXNet::Symbol?,lr,**kwargs)-class-method","name":"_rmsprop_update","doc":null,"summary":null,"abstract":false,"args":[{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::Symbol | ::Nil"},{"name":"grad","doc":null,"default_value":"","external_name":"grad","restriction":"MXNet::Symbol | ::Nil"},{"name":"n","doc":null,"default_value":"","external_name":"n","restriction":"MXNet::Symbol | ::Nil"},{"name":"lr","doc":null,"default_value":"","external_name":"lr","restriction":""}],"args_string":"(weight : MXNet::Symbol?, grad : MXNet::Symbol?, n : MXNet::Symbol?, lr, **kwargs)","args_html":"(weight : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, grad : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, n : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, lr, **kwargs)","location":null,"def":{"name":"_rmsprop_update","args":[{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::Symbol | ::Nil"},{"name":"grad","doc":null,"default_value":"","external_name":"grad","restriction":"MXNet::Symbol | ::Nil"},{"name":"n","doc":null,"default_value":"","external_name":"n","restriction":"MXNet::Symbol | ::Nil"},{"name":"lr","doc":null,"default_value":"","external_name":"lr","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"rmsprop_update\", weight, grad, n, **kwargs.merge(lr: lr))"}},{"id":"_rmspropalex_update(weight:MXNet::Symbol?,grad:MXNet::Symbol?,n:MXNet::Symbol?,g:MXNet::Symbol?,delta:MXNet::Symbol?,lr,**kwargs)-class-method","html_id":"_rmspropalex_update(weight:MXNet::Symbol?,grad:MXNet::Symbol?,n:MXNet::Symbol?,g:MXNet::Symbol?,delta:MXNet::Symbol?,lr,**kwargs)-class-method","name":"_rmspropalex_update","doc":null,"summary":null,"abstract":false,"args":[{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::Symbol | ::Nil"},{"name":"grad","doc":null,"default_value":"","external_name":"grad","restriction":"MXNet::Symbol | ::Nil"},{"name":"n","doc":null,"default_value":"","external_name":"n","restriction":"MXNet::Symbol | ::Nil"},{"name":"g","doc":null,"default_value":"","external_name":"g","restriction":"MXNet::Symbol | ::Nil"},{"name":"delta","doc":null,"default_value":"","external_name":"delta","restriction":"MXNet::Symbol | ::Nil"},{"name":"lr","doc":null,"default_value":"","external_name":"lr","restriction":""}],"args_string":"(weight : MXNet::Symbol?, grad : MXNet::Symbol?, n : MXNet::Symbol?, g : MXNet::Symbol?, delta : MXNet::Symbol?, lr, **kwargs)","args_html":"(weight : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, grad : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, n : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, g : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, delta : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, lr, **kwargs)","location":null,"def":{"name":"_rmspropalex_update","args":[{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::Symbol | ::Nil"},{"name":"grad","doc":null,"default_value":"","external_name":"grad","restriction":"MXNet::Symbol | ::Nil"},{"name":"n","doc":null,"default_value":"","external_name":"n","restriction":"MXNet::Symbol | ::Nil"},{"name":"g","doc":null,"default_value":"","external_name":"g","restriction":"MXNet::Symbol | ::Nil"},{"name":"delta","doc":null,"default_value":"","external_name":"delta","restriction":"MXNet::Symbol | ::Nil"},{"name":"lr","doc":null,"default_value":"","external_name":"lr","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"rmspropalex_update\", weight, grad, n, g, delta, **kwargs.merge(lr: lr))"}},{"id":"_RNN(data:MXNet::Symbol?,parameters:MXNet::Symbol?,state:MXNet::Symbol?,state_cell:MXNet::Symbol?,state_size,num_layers,mode,**kwargs)-class-method","html_id":"_RNN(data:MXNet::Symbol?,parameters:MXNet::Symbol?,state:MXNet::Symbol?,state_cell:MXNet::Symbol?,state_size,num_layers,mode,**kwargs)-class-method","name":"_RNN","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"parameters","doc":null,"default_value":"","external_name":"parameters","restriction":"MXNet::Symbol | ::Nil"},{"name":"state","doc":null,"default_value":"","external_name":"state","restriction":"MXNet::Symbol | ::Nil"},{"name":"state_cell","doc":null,"default_value":"","external_name":"state_cell","restriction":"MXNet::Symbol | ::Nil"},{"name":"state_size","doc":null,"default_value":"","external_name":"state_size","restriction":""},{"name":"num_layers","doc":null,"default_value":"","external_name":"num_layers","restriction":""},{"name":"mode","doc":null,"default_value":"","external_name":"mode","restriction":""}],"args_string":"(data : MXNet::Symbol?, parameters : MXNet::Symbol?, state : MXNet::Symbol?, state_cell : MXNet::Symbol?, state_size, num_layers, mode, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, parameters : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, state : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, state_cell : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, state_size, num_layers, mode, **kwargs)","location":null,"def":{"name":"_RNN","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"parameters","doc":null,"default_value":"","external_name":"parameters","restriction":"MXNet::Symbol | ::Nil"},{"name":"state","doc":null,"default_value":"","external_name":"state","restriction":"MXNet::Symbol | ::Nil"},{"name":"state_cell","doc":null,"default_value":"","external_name":"state_cell","restriction":"MXNet::Symbol | ::Nil"},{"name":"state_size","doc":null,"default_value":"","external_name":"state_size","restriction":""},{"name":"num_layers","doc":null,"default_value":"","external_name":"num_layers","restriction":""},{"name":"mode","doc":null,"default_value":"","external_name":"mode","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"RNN\", data, parameters, state, state_cell, **kwargs.merge(state_size: state_size, num_layers: num_layers, mode: mode))"}},{"id":"_ROIPooling(data:MXNet::Symbol?,rois:MXNet::Symbol?,pooled_size,spatial_scale,**kwargs)-class-method","html_id":"_ROIPooling(data:MXNet::Symbol?,rois:MXNet::Symbol?,pooled_size,spatial_scale,**kwargs)-class-method","name":"_ROIPooling","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"rois","doc":null,"default_value":"","external_name":"rois","restriction":"MXNet::Symbol | ::Nil"},{"name":"pooled_size","doc":null,"default_value":"","external_name":"pooled_size","restriction":""},{"name":"spatial_scale","doc":null,"default_value":"","external_name":"spatial_scale","restriction":""}],"args_string":"(data : MXNet::Symbol?, rois : MXNet::Symbol?, pooled_size, spatial_scale, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, rois : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, pooled_size, spatial_scale, **kwargs)","location":null,"def":{"name":"_ROIPooling","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"rois","doc":null,"default_value":"","external_name":"rois","restriction":"MXNet::Symbol | ::Nil"},{"name":"pooled_size","doc":null,"default_value":"","external_name":"pooled_size","restriction":""},{"name":"spatial_scale","doc":null,"default_value":"","external_name":"spatial_scale","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"ROIPooling\", data, rois, **kwargs.merge(pooled_size: pooled_size, spatial_scale: spatial_scale))"}},{"id":"_round(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_round(data:MXNet::Symbol?,**kwargs)-class-method","name":"_round","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_round","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"round\", data, **kwargs)"}},{"id":"_rsqrt(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_rsqrt(data:MXNet::Symbol?,**kwargs)-class-method","name":"_rsqrt","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_rsqrt","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"rsqrt\", data, **kwargs)"}},{"id":"_sample_exponential(lam:MXNet::Symbol?,**kwargs)-class-method","html_id":"_sample_exponential(lam:MXNet::Symbol?,**kwargs)-class-method","name":"_sample_exponential","doc":null,"summary":null,"abstract":false,"args":[{"name":"lam","doc":null,"default_value":"","external_name":"lam","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(lam : MXNet::Symbol?, **kwargs)","args_html":"(lam : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_sample_exponential","args":[{"name":"lam","doc":null,"default_value":"","external_name":"lam","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"sample_exponential\", lam, **kwargs)"}},{"id":"_sample_gamma(alpha:MXNet::Symbol?,beta:MXNet::Symbol?,**kwargs)-class-method","html_id":"_sample_gamma(alpha:MXNet::Symbol?,beta:MXNet::Symbol?,**kwargs)-class-method","name":"_sample_gamma","doc":null,"summary":null,"abstract":false,"args":[{"name":"alpha","doc":null,"default_value":"","external_name":"alpha","restriction":"MXNet::Symbol | ::Nil"},{"name":"beta","doc":null,"default_value":"","external_name":"beta","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(alpha : MXNet::Symbol?, beta : MXNet::Symbol?, **kwargs)","args_html":"(alpha : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, beta : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_sample_gamma","args":[{"name":"alpha","doc":null,"default_value":"","external_name":"alpha","restriction":"MXNet::Symbol | ::Nil"},{"name":"beta","doc":null,"default_value":"","external_name":"beta","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"sample_gamma\", alpha, beta, **kwargs)"}},{"id":"_sample_generalized_negative_binomial(mu:MXNet::Symbol?,alpha:MXNet::Symbol?,**kwargs)-class-method","html_id":"_sample_generalized_negative_binomial(mu:MXNet::Symbol?,alpha:MXNet::Symbol?,**kwargs)-class-method","name":"_sample_generalized_negative_binomial","doc":null,"summary":null,"abstract":false,"args":[{"name":"mu","doc":null,"default_value":"","external_name":"mu","restriction":"MXNet::Symbol | ::Nil"},{"name":"alpha","doc":null,"default_value":"","external_name":"alpha","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(mu : MXNet::Symbol?, alpha : MXNet::Symbol?, **kwargs)","args_html":"(mu : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, alpha : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_sample_generalized_negative_binomial","args":[{"name":"mu","doc":null,"default_value":"","external_name":"mu","restriction":"MXNet::Symbol | ::Nil"},{"name":"alpha","doc":null,"default_value":"","external_name":"alpha","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"sample_generalized_negative_binomial\", mu, alpha, **kwargs)"}},{"id":"_sample_multinomial(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_sample_multinomial(data:MXNet::Symbol?,**kwargs)-class-method","name":"_sample_multinomial","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_sample_multinomial","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"sample_multinomial\", data, **kwargs)"}},{"id":"_sample_negative_binomial(k:MXNet::Symbol?,p:MXNet::Symbol?,**kwargs)-class-method","html_id":"_sample_negative_binomial(k:MXNet::Symbol?,p:MXNet::Symbol?,**kwargs)-class-method","name":"_sample_negative_binomial","doc":null,"summary":null,"abstract":false,"args":[{"name":"k","doc":null,"default_value":"","external_name":"k","restriction":"MXNet::Symbol | ::Nil"},{"name":"p","doc":null,"default_value":"","external_name":"p","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(k : MXNet::Symbol?, p : MXNet::Symbol?, **kwargs)","args_html":"(k : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, p : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_sample_negative_binomial","args":[{"name":"k","doc":null,"default_value":"","external_name":"k","restriction":"MXNet::Symbol | ::Nil"},{"name":"p","doc":null,"default_value":"","external_name":"p","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"sample_negative_binomial\", k, p, **kwargs)"}},{"id":"_sample_normal(mu:MXNet::Symbol?,sigma:MXNet::Symbol?,**kwargs)-class-method","html_id":"_sample_normal(mu:MXNet::Symbol?,sigma:MXNet::Symbol?,**kwargs)-class-method","name":"_sample_normal","doc":null,"summary":null,"abstract":false,"args":[{"name":"mu","doc":null,"default_value":"","external_name":"mu","restriction":"MXNet::Symbol | ::Nil"},{"name":"sigma","doc":null,"default_value":"","external_name":"sigma","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(mu : MXNet::Symbol?, sigma : MXNet::Symbol?, **kwargs)","args_html":"(mu : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, sigma : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_sample_normal","args":[{"name":"mu","doc":null,"default_value":"","external_name":"mu","restriction":"MXNet::Symbol | ::Nil"},{"name":"sigma","doc":null,"default_value":"","external_name":"sigma","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"sample_normal\", mu, sigma, **kwargs)"}},{"id":"_sample_poisson(lam:MXNet::Symbol?,**kwargs)-class-method","html_id":"_sample_poisson(lam:MXNet::Symbol?,**kwargs)-class-method","name":"_sample_poisson","doc":null,"summary":null,"abstract":false,"args":[{"name":"lam","doc":null,"default_value":"","external_name":"lam","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(lam : MXNet::Symbol?, **kwargs)","args_html":"(lam : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_sample_poisson","args":[{"name":"lam","doc":null,"default_value":"","external_name":"lam","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"sample_poisson\", lam, **kwargs)"}},{"id":"_sample_uniform(low:MXNet::Symbol?,high:MXNet::Symbol?,**kwargs)-class-method","html_id":"_sample_uniform(low:MXNet::Symbol?,high:MXNet::Symbol?,**kwargs)-class-method","name":"_sample_uniform","doc":null,"summary":null,"abstract":false,"args":[{"name":"low","doc":null,"default_value":"","external_name":"low","restriction":"MXNet::Symbol | ::Nil"},{"name":"high","doc":null,"default_value":"","external_name":"high","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(low : MXNet::Symbol?, high : MXNet::Symbol?, **kwargs)","args_html":"(low : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, high : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_sample_uniform","args":[{"name":"low","doc":null,"default_value":"","external_name":"low","restriction":"MXNet::Symbol | ::Nil"},{"name":"high","doc":null,"default_value":"","external_name":"high","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"sample_uniform\", low, high, **kwargs)"}},{"id":"_scatter_nd(data:MXNet::Symbol?,indices:MXNet::Symbol?,shape,**kwargs)-class-method","html_id":"_scatter_nd(data:MXNet::Symbol?,indices:MXNet::Symbol?,shape,**kwargs)-class-method","name":"_scatter_nd","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"indices","doc":null,"default_value":"","external_name":"indices","restriction":"MXNet::Symbol | ::Nil"},{"name":"shape","doc":null,"default_value":"","external_name":"shape","restriction":""}],"args_string":"(data : MXNet::Symbol?, indices : MXNet::Symbol?, shape, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, indices : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, shape, **kwargs)","location":null,"def":{"name":"_scatter_nd","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"indices","doc":null,"default_value":"","external_name":"indices","restriction":"MXNet::Symbol | ::Nil"},{"name":"shape","doc":null,"default_value":"","external_name":"shape","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"scatter_nd\", data, indices, **kwargs.merge(shape: shape))"}},{"id":"_SequenceLast(data:MXNet::Symbol?,sequence_length:MXNet::Symbol?,**kwargs)-class-method","html_id":"_SequenceLast(data:MXNet::Symbol?,sequence_length:MXNet::Symbol?,**kwargs)-class-method","name":"_SequenceLast","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"sequence_length","doc":null,"default_value":"","external_name":"sequence_length","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, sequence_length : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, sequence_length : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_SequenceLast","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"sequence_length","doc":null,"default_value":"","external_name":"sequence_length","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"SequenceLast\", data, sequence_length, **kwargs)"}},{"id":"_SequenceMask(data:MXNet::Symbol?,sequence_length:MXNet::Symbol?,**kwargs)-class-method","html_id":"_SequenceMask(data:MXNet::Symbol?,sequence_length:MXNet::Symbol?,**kwargs)-class-method","name":"_SequenceMask","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"sequence_length","doc":null,"default_value":"","external_name":"sequence_length","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, sequence_length : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, sequence_length : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_SequenceMask","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"sequence_length","doc":null,"default_value":"","external_name":"sequence_length","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"SequenceMask\", data, sequence_length, **kwargs)"}},{"id":"_SequenceReverse(data:MXNet::Symbol?,sequence_length:MXNet::Symbol?,**kwargs)-class-method","html_id":"_SequenceReverse(data:MXNet::Symbol?,sequence_length:MXNet::Symbol?,**kwargs)-class-method","name":"_SequenceReverse","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"sequence_length","doc":null,"default_value":"","external_name":"sequence_length","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, sequence_length : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, sequence_length : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_SequenceReverse","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"sequence_length","doc":null,"default_value":"","external_name":"sequence_length","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"SequenceReverse\", data, sequence_length, **kwargs)"}},{"id":"_sgd_mom_update(weight:MXNet::Symbol?,grad:MXNet::Symbol?,mom:MXNet::Symbol?,lr,**kwargs)-class-method","html_id":"_sgd_mom_update(weight:MXNet::Symbol?,grad:MXNet::Symbol?,mom:MXNet::Symbol?,lr,**kwargs)-class-method","name":"_sgd_mom_update","doc":null,"summary":null,"abstract":false,"args":[{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::Symbol | ::Nil"},{"name":"grad","doc":null,"default_value":"","external_name":"grad","restriction":"MXNet::Symbol | ::Nil"},{"name":"mom","doc":null,"default_value":"","external_name":"mom","restriction":"MXNet::Symbol | ::Nil"},{"name":"lr","doc":null,"default_value":"","external_name":"lr","restriction":""}],"args_string":"(weight : MXNet::Symbol?, grad : MXNet::Symbol?, mom : MXNet::Symbol?, lr, **kwargs)","args_html":"(weight : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, grad : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, mom : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, lr, **kwargs)","location":null,"def":{"name":"_sgd_mom_update","args":[{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::Symbol | ::Nil"},{"name":"grad","doc":null,"default_value":"","external_name":"grad","restriction":"MXNet::Symbol | ::Nil"},{"name":"mom","doc":null,"default_value":"","external_name":"mom","restriction":"MXNet::Symbol | ::Nil"},{"name":"lr","doc":null,"default_value":"","external_name":"lr","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"sgd_mom_update\", weight, grad, mom, **kwargs.merge(lr: lr))"}},{"id":"_sgd_update(weight:MXNet::Symbol?,grad:MXNet::Symbol?,lr,**kwargs)-class-method","html_id":"_sgd_update(weight:MXNet::Symbol?,grad:MXNet::Symbol?,lr,**kwargs)-class-method","name":"_sgd_update","doc":null,"summary":null,"abstract":false,"args":[{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::Symbol | ::Nil"},{"name":"grad","doc":null,"default_value":"","external_name":"grad","restriction":"MXNet::Symbol | ::Nil"},{"name":"lr","doc":null,"default_value":"","external_name":"lr","restriction":""}],"args_string":"(weight : MXNet::Symbol?, grad : MXNet::Symbol?, lr, **kwargs)","args_html":"(weight : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, grad : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, lr, **kwargs)","location":null,"def":{"name":"_sgd_update","args":[{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::Symbol | ::Nil"},{"name":"grad","doc":null,"default_value":"","external_name":"grad","restriction":"MXNet::Symbol | ::Nil"},{"name":"lr","doc":null,"default_value":"","external_name":"lr","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"sgd_update\", weight, grad, **kwargs.merge(lr: lr))"}},{"id":"_shape_array(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_shape_array(data:MXNet::Symbol?,**kwargs)-class-method","name":"_shape_array","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_shape_array","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"shape_array\", data, **kwargs)"}},{"id":"_shuffle(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_shuffle(data:MXNet::Symbol?,**kwargs)-class-method","name":"_shuffle","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_shuffle","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"shuffle\", data, **kwargs)"}},{"id":"_sigmoid(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_sigmoid(data:MXNet::Symbol?,**kwargs)-class-method","name":"_sigmoid","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_sigmoid","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"sigmoid\", data, **kwargs)"}},{"id":"_sign(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_sign(data:MXNet::Symbol?,**kwargs)-class-method","name":"_sign","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_sign","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"sign\", data, **kwargs)"}},{"id":"_signsgd_update(weight:MXNet::Symbol?,grad:MXNet::Symbol?,lr,**kwargs)-class-method","html_id":"_signsgd_update(weight:MXNet::Symbol?,grad:MXNet::Symbol?,lr,**kwargs)-class-method","name":"_signsgd_update","doc":null,"summary":null,"abstract":false,"args":[{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::Symbol | ::Nil"},{"name":"grad","doc":null,"default_value":"","external_name":"grad","restriction":"MXNet::Symbol | ::Nil"},{"name":"lr","doc":null,"default_value":"","external_name":"lr","restriction":""}],"args_string":"(weight : MXNet::Symbol?, grad : MXNet::Symbol?, lr, **kwargs)","args_html":"(weight : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, grad : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, lr, **kwargs)","location":null,"def":{"name":"_signsgd_update","args":[{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::Symbol | ::Nil"},{"name":"grad","doc":null,"default_value":"","external_name":"grad","restriction":"MXNet::Symbol | ::Nil"},{"name":"lr","doc":null,"default_value":"","external_name":"lr","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"signsgd_update\", weight, grad, **kwargs.merge(lr: lr))"}},{"id":"_signum_update(weight:MXNet::Symbol?,grad:MXNet::Symbol?,mom:MXNet::Symbol?,lr,**kwargs)-class-method","html_id":"_signum_update(weight:MXNet::Symbol?,grad:MXNet::Symbol?,mom:MXNet::Symbol?,lr,**kwargs)-class-method","name":"_signum_update","doc":null,"summary":null,"abstract":false,"args":[{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::Symbol | ::Nil"},{"name":"grad","doc":null,"default_value":"","external_name":"grad","restriction":"MXNet::Symbol | ::Nil"},{"name":"mom","doc":null,"default_value":"","external_name":"mom","restriction":"MXNet::Symbol | ::Nil"},{"name":"lr","doc":null,"default_value":"","external_name":"lr","restriction":""}],"args_string":"(weight : MXNet::Symbol?, grad : MXNet::Symbol?, mom : MXNet::Symbol?, lr, **kwargs)","args_html":"(weight : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, grad : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, mom : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, lr, **kwargs)","location":null,"def":{"name":"_signum_update","args":[{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::Symbol | ::Nil"},{"name":"grad","doc":null,"default_value":"","external_name":"grad","restriction":"MXNet::Symbol | ::Nil"},{"name":"mom","doc":null,"default_value":"","external_name":"mom","restriction":"MXNet::Symbol | ::Nil"},{"name":"lr","doc":null,"default_value":"","external_name":"lr","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"signum_update\", weight, grad, mom, **kwargs.merge(lr: lr))"}},{"id":"_sin(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_sin(data:MXNet::Symbol?,**kwargs)-class-method","name":"_sin","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_sin","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"sin\", data, **kwargs)"}},{"id":"_sinh(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_sinh(data:MXNet::Symbol?,**kwargs)-class-method","name":"_sinh","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_sinh","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"sinh\", data, **kwargs)"}},{"id":"_size_array(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_size_array(data:MXNet::Symbol?,**kwargs)-class-method","name":"_size_array","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_size_array","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"size_array\", data, **kwargs)"}},{"id":"_slice(data:MXNet::Symbol?,begin_begin,end_end,**kwargs)-class-method","html_id":"_slice(data:MXNet::Symbol?,begin_begin,end_end,**kwargs)-class-method","name":"_slice","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"_begin","doc":null,"default_value":"","external_name":"begin","restriction":""},{"name":"_end","doc":null,"default_value":"","external_name":"end","restriction":""}],"args_string":"(data : MXNet::Symbol?, begin _begin, end _end, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, begin _begin, end _end, **kwargs)","location":null,"def":{"name":"_slice","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"_begin","doc":null,"default_value":"","external_name":"begin","restriction":""},{"name":"_end","doc":null,"default_value":"","external_name":"end","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"slice\", data, **kwargs.merge(begin: _begin, end: _end))"}},{"id":"_slice_axis(data:MXNet::Symbol?,axis,begin_begin,end_end,**kwargs)-class-method","html_id":"_slice_axis(data:MXNet::Symbol?,axis,begin_begin,end_end,**kwargs)-class-method","name":"_slice_axis","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"axis","doc":null,"default_value":"","external_name":"axis","restriction":""},{"name":"_begin","doc":null,"default_value":"","external_name":"begin","restriction":""},{"name":"_end","doc":null,"default_value":"","external_name":"end","restriction":""}],"args_string":"(data : MXNet::Symbol?, axis, begin _begin, end _end, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, axis, begin _begin, end _end, **kwargs)","location":null,"def":{"name":"_slice_axis","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"axis","doc":null,"default_value":"","external_name":"axis","restriction":""},{"name":"_begin","doc":null,"default_value":"","external_name":"begin","restriction":""},{"name":"_end","doc":null,"default_value":"","external_name":"end","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"slice_axis\", data, **kwargs.merge(axis: axis, begin: _begin, end: _end))"}},{"id":"_slice_like(data:MXNet::Symbol?,shape_like:MXNet::Symbol?,**kwargs)-class-method","html_id":"_slice_like(data:MXNet::Symbol?,shape_like:MXNet::Symbol?,**kwargs)-class-method","name":"_slice_like","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"shape_like","doc":null,"default_value":"","external_name":"shape_like","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, shape_like : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, shape_like : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_slice_like","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"shape_like","doc":null,"default_value":"","external_name":"shape_like","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"slice_like\", data, shape_like, **kwargs)"}},{"id":"_SliceChannel(data:MXNet::Symbol?,num_outputs,**kwargs)-class-method","html_id":"_SliceChannel(data:MXNet::Symbol?,num_outputs,**kwargs)-class-method","name":"_SliceChannel","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"num_outputs","doc":null,"default_value":"","external_name":"num_outputs","restriction":""}],"args_string":"(data : MXNet::Symbol?, num_outputs, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, num_outputs, **kwargs)","location":null,"def":{"name":"_SliceChannel","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"num_outputs","doc":null,"default_value":"","external_name":"num_outputs","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"SliceChannel\", data, **kwargs.merge(num_outputs: num_outputs))"}},{"id":"_smooth_l1(data:MXNet::Symbol?,scalar,**kwargs)-class-method","html_id":"_smooth_l1(data:MXNet::Symbol?,scalar,**kwargs)-class-method","name":"_smooth_l1","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"args_string":"(data : MXNet::Symbol?, scalar, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, scalar, **kwargs)","location":null,"def":{"name":"_smooth_l1","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"scalar","doc":null,"default_value":"","external_name":"scalar","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"smooth_l1\", data, **kwargs.merge(scalar: scalar))"}},{"id":"_softmax(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_softmax(data:MXNet::Symbol?,**kwargs)-class-method","name":"_softmax","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_softmax","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"softmax\", data, **kwargs)"}},{"id":"_Softmax(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_Softmax(data:MXNet::Symbol?,**kwargs)-class-method","name":"_Softmax","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_Softmax","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"Softmax\", data, **kwargs)"}},{"id":"_softmax_cross_entropy(data:MXNet::Symbol?,label:MXNet::Symbol?,**kwargs)-class-method","html_id":"_softmax_cross_entropy(data:MXNet::Symbol?,label:MXNet::Symbol?,**kwargs)-class-method","name":"_softmax_cross_entropy","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"label","doc":null,"default_value":"","external_name":"label","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, label : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, label : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_softmax_cross_entropy","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"label","doc":null,"default_value":"","external_name":"label","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"softmax_cross_entropy\", data, label, **kwargs)"}},{"id":"_SoftmaxActivation(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_SoftmaxActivation(data:MXNet::Symbol?,**kwargs)-class-method","name":"_SoftmaxActivation","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_SoftmaxActivation","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"SoftmaxActivation\", data, **kwargs)"}},{"id":"_SoftmaxOutput(data:MXNet::Symbol?,label:MXNet::Symbol?,**kwargs)-class-method","html_id":"_SoftmaxOutput(data:MXNet::Symbol?,label:MXNet::Symbol?,**kwargs)-class-method","name":"_SoftmaxOutput","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"label","doc":null,"default_value":"","external_name":"label","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, label : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, label : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_SoftmaxOutput","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"label","doc":null,"default_value":"","external_name":"label","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"SoftmaxOutput\", data, label, **kwargs)"}},{"id":"_softsign(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_softsign(data:MXNet::Symbol?,**kwargs)-class-method","name":"_softsign","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_softsign","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"softsign\", data, **kwargs)"}},{"id":"_sort(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_sort(data:MXNet::Symbol?,**kwargs)-class-method","name":"_sort","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_sort","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"sort\", data, **kwargs)"}},{"id":"_space_to_depth(data:MXNet::Symbol?,block_size,**kwargs)-class-method","html_id":"_space_to_depth(data:MXNet::Symbol?,block_size,**kwargs)-class-method","name":"_space_to_depth","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"block_size","doc":null,"default_value":"","external_name":"block_size","restriction":""}],"args_string":"(data : MXNet::Symbol?, block_size, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, block_size, **kwargs)","location":null,"def":{"name":"_space_to_depth","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"block_size","doc":null,"default_value":"","external_name":"block_size","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"space_to_depth\", data, **kwargs.merge(block_size: block_size))"}},{"id":"_SpatialTransformer(data:MXNet::Symbol?,loc:MXNet::Symbol?,transform_type,sampler_type,**kwargs)-class-method","html_id":"_SpatialTransformer(data:MXNet::Symbol?,loc:MXNet::Symbol?,transform_type,sampler_type,**kwargs)-class-method","name":"_SpatialTransformer","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"loc","doc":null,"default_value":"","external_name":"loc","restriction":"MXNet::Symbol | ::Nil"},{"name":"transform_type","doc":null,"default_value":"","external_name":"transform_type","restriction":""},{"name":"sampler_type","doc":null,"default_value":"","external_name":"sampler_type","restriction":""}],"args_string":"(data : MXNet::Symbol?, loc : MXNet::Symbol?, transform_type, sampler_type, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, loc : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, transform_type, sampler_type, **kwargs)","location":null,"def":{"name":"_SpatialTransformer","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"loc","doc":null,"default_value":"","external_name":"loc","restriction":"MXNet::Symbol | ::Nil"},{"name":"transform_type","doc":null,"default_value":"","external_name":"transform_type","restriction":""},{"name":"sampler_type","doc":null,"default_value":"","external_name":"sampler_type","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"SpatialTransformer\", data, loc, **kwargs.merge(transform_type: transform_type, sampler_type: sampler_type))"}},{"id":"_split(data:MXNet::Symbol?,num_outputs,**kwargs)-class-method","html_id":"_split(data:MXNet::Symbol?,num_outputs,**kwargs)-class-method","name":"_split","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"num_outputs","doc":null,"default_value":"","external_name":"num_outputs","restriction":""}],"args_string":"(data : MXNet::Symbol?, num_outputs, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, num_outputs, **kwargs)","location":null,"def":{"name":"_split","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"num_outputs","doc":null,"default_value":"","external_name":"num_outputs","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"split\", data, **kwargs.merge(num_outputs: num_outputs))"}},{"id":"_sqrt(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_sqrt(data:MXNet::Symbol?,**kwargs)-class-method","name":"_sqrt","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_sqrt","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"sqrt\", data, **kwargs)"}},{"id":"_square(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_square(data:MXNet::Symbol?,**kwargs)-class-method","name":"_square","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_square","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"square\", data, **kwargs)"}},{"id":"_squeeze(data:Array(MXNet::Symbol),**kwargs)-class-method","html_id":"_squeeze(data:Array(MXNet::Symbol),**kwargs)-class-method","name":"_squeeze","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"Array(MXNet::Symbol)"}],"args_string":"(data : Array(MXNet::Symbol), **kwargs)","args_html":"(data : Array(<a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>), **kwargs)","location":null,"def":{"name":"_squeeze","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"Array(MXNet::Symbol)"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"squeeze\", data, **kwargs)"}},{"id":"_stack(data:Array(MXNet::Symbol),num_args,**kwargs)-class-method","html_id":"_stack(data:Array(MXNet::Symbol),num_args,**kwargs)-class-method","name":"_stack","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"Array(MXNet::Symbol)"},{"name":"num_args","doc":null,"default_value":"","external_name":"num_args","restriction":""}],"args_string":"(data : Array(MXNet::Symbol), num_args, **kwargs)","args_html":"(data : Array(<a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>), num_args, **kwargs)","location":null,"def":{"name":"_stack","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"Array(MXNet::Symbol)"},{"name":"num_args","doc":null,"default_value":"","external_name":"num_args","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"stack\", data, **kwargs.merge(num_args: num_args))"}},{"id":"_stop_gradient(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_stop_gradient(data:MXNet::Symbol?,**kwargs)-class-method","name":"_stop_gradient","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_stop_gradient","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"stop_gradient\", data, **kwargs)"}},{"id":"_sum(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_sum(data:MXNet::Symbol?,**kwargs)-class-method","name":"_sum","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_sum","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"sum\", data, **kwargs)"}},{"id":"_sum_axis(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_sum_axis(data:MXNet::Symbol?,**kwargs)-class-method","name":"_sum_axis","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_sum_axis","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"sum_axis\", data, **kwargs)"}},{"id":"_SVMOutput(data:MXNet::Symbol?,label:MXNet::Symbol?,**kwargs)-class-method","html_id":"_SVMOutput(data:MXNet::Symbol?,label:MXNet::Symbol?,**kwargs)-class-method","name":"_SVMOutput","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"label","doc":null,"default_value":"","external_name":"label","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, label : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, label : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_SVMOutput","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"label","doc":null,"default_value":"","external_name":"label","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"SVMOutput\", data, label, **kwargs)"}},{"id":"_swapaxes(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_swapaxes(data:MXNet::Symbol?,**kwargs)-class-method","name":"_swapaxes","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_swapaxes","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"swapaxes\", data, **kwargs)"}},{"id":"_SwapAxis(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_SwapAxis(data:MXNet::Symbol?,**kwargs)-class-method","name":"_SwapAxis","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_SwapAxis","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"SwapAxis\", data, **kwargs)"}},{"id":"_take(a:MXNet::Symbol?,indices:MXNet::Symbol?,**kwargs)-class-method","html_id":"_take(a:MXNet::Symbol?,indices:MXNet::Symbol?,**kwargs)-class-method","name":"_take","doc":null,"summary":null,"abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"MXNet::Symbol | ::Nil"},{"name":"indices","doc":null,"default_value":"","external_name":"indices","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(a : MXNet::Symbol?, indices : MXNet::Symbol?, **kwargs)","args_html":"(a : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, indices : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_take","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"MXNet::Symbol | ::Nil"},{"name":"indices","doc":null,"default_value":"","external_name":"indices","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"take\", a, indices, **kwargs)"}},{"id":"_tan(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_tan(data:MXNet::Symbol?,**kwargs)-class-method","name":"_tan","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_tan","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"tan\", data, **kwargs)"}},{"id":"_tanh(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_tanh(data:MXNet::Symbol?,**kwargs)-class-method","name":"_tanh","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_tanh","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"tanh\", data, **kwargs)"}},{"id":"_tile(data:MXNet::Symbol?,reps,**kwargs)-class-method","html_id":"_tile(data:MXNet::Symbol?,reps,**kwargs)-class-method","name":"_tile","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"reps","doc":null,"default_value":"","external_name":"reps","restriction":""}],"args_string":"(data : MXNet::Symbol?, reps, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, reps, **kwargs)","location":null,"def":{"name":"_tile","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"reps","doc":null,"default_value":"","external_name":"reps","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"tile\", data, **kwargs.merge(reps: reps))"}},{"id":"_topk(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_topk(data:MXNet::Symbol?,**kwargs)-class-method","name":"_topk","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_topk","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"topk\", data, **kwargs)"}},{"id":"_transpose(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_transpose(data:MXNet::Symbol?,**kwargs)-class-method","name":"_transpose","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_transpose","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"transpose\", data, **kwargs)"}},{"id":"_trunc(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_trunc(data:MXNet::Symbol?,**kwargs)-class-method","name":"_trunc","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_trunc","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"trunc\", data, **kwargs)"}},{"id":"_uniform(**kwargs)-class-method","html_id":"_uniform(**kwargs)-class-method","name":"_uniform","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(**kwargs)","args_html":"(**kwargs)","location":null,"def":{"name":"_uniform","args":[],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"uniform\", **kwargs)"}},{"id":"_unravel_index(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_unravel_index(data:MXNet::Symbol?,**kwargs)-class-method","name":"_unravel_index","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_unravel_index","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"unravel_index\", data, **kwargs)"}},{"id":"_UpSampling(data:Array(MXNet::Symbol),scale,sample_type,num_args,**kwargs)-class-method","html_id":"_UpSampling(data:Array(MXNet::Symbol),scale,sample_type,num_args,**kwargs)-class-method","name":"_UpSampling","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"Array(MXNet::Symbol)"},{"name":"scale","doc":null,"default_value":"","external_name":"scale","restriction":""},{"name":"sample_type","doc":null,"default_value":"","external_name":"sample_type","restriction":""},{"name":"num_args","doc":null,"default_value":"","external_name":"num_args","restriction":""}],"args_string":"(data : Array(MXNet::Symbol), scale, sample_type, num_args, **kwargs)","args_html":"(data : Array(<a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>), scale, sample_type, num_args, **kwargs)","location":null,"def":{"name":"_UpSampling","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"Array(MXNet::Symbol)"},{"name":"scale","doc":null,"default_value":"","external_name":"scale","restriction":""},{"name":"sample_type","doc":null,"default_value":"","external_name":"sample_type","restriction":""},{"name":"num_args","doc":null,"default_value":"","external_name":"num_args","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"UpSampling\", data, **kwargs.merge(scale: scale, sample_type: sample_type, num_args: num_args))"}},{"id":"_where(condition:MXNet::Symbol?,x:MXNet::Symbol?,y:MXNet::Symbol?,**kwargs)-class-method","html_id":"_where(condition:MXNet::Symbol?,x:MXNet::Symbol?,y:MXNet::Symbol?,**kwargs)-class-method","name":"_where","doc":null,"summary":null,"abstract":false,"args":[{"name":"condition","doc":null,"default_value":"","external_name":"condition","restriction":"MXNet::Symbol | ::Nil"},{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":"MXNet::Symbol | ::Nil"},{"name":"y","doc":null,"default_value":"","external_name":"y","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(condition : MXNet::Symbol?, x : MXNet::Symbol?, y : MXNet::Symbol?, **kwargs)","args_html":"(condition : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, x : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, y : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_where","args":[{"name":"condition","doc":null,"default_value":"","external_name":"condition","restriction":"MXNet::Symbol | ::Nil"},{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":"MXNet::Symbol | ::Nil"},{"name":"y","doc":null,"default_value":"","external_name":"y","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"where\", condition, x, y, **kwargs)"}},{"id":"_zeros_like(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_zeros_like(data:MXNet::Symbol?,**kwargs)-class-method","name":"_zeros_like","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_zeros_like","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"zeros_like\", data, **kwargs)"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"mxnet/MXNet/Symbol/Sparse","path":"MXNet/Symbol/Sparse.html","kind":"class","full_name":"MXNet::Symbol::Sparse","name":"Sparse","abstract":false,"superclass":{"html_id":"mxnet/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"mxnet/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"mxnet/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"mxnet","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"mxnet/MXNet/Symbol","kind":"class","full_name":"MXNet::Symbol","name":"Symbol"},"doc":null,"summary":null,"class_methods":[{"id":"_abs(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_abs(data:MXNet::Symbol?,**kwargs)-class-method","name":"_abs","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_abs","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_sparse_abs\", data, **kwargs)"}},{"id":"_adagrad_update(weight:MXNet::Symbol?,grad:MXNet::Symbol?,history:MXNet::Symbol?,lr,**kwargs)-class-method","html_id":"_adagrad_update(weight:MXNet::Symbol?,grad:MXNet::Symbol?,history:MXNet::Symbol?,lr,**kwargs)-class-method","name":"_adagrad_update","doc":null,"summary":null,"abstract":false,"args":[{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::Symbol | ::Nil"},{"name":"grad","doc":null,"default_value":"","external_name":"grad","restriction":"MXNet::Symbol | ::Nil"},{"name":"history","doc":null,"default_value":"","external_name":"history","restriction":"MXNet::Symbol | ::Nil"},{"name":"lr","doc":null,"default_value":"","external_name":"lr","restriction":""}],"args_string":"(weight : MXNet::Symbol?, grad : MXNet::Symbol?, history : MXNet::Symbol?, lr, **kwargs)","args_html":"(weight : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, grad : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, history : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, lr, **kwargs)","location":null,"def":{"name":"_adagrad_update","args":[{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::Symbol | ::Nil"},{"name":"grad","doc":null,"default_value":"","external_name":"grad","restriction":"MXNet::Symbol | ::Nil"},{"name":"history","doc":null,"default_value":"","external_name":"history","restriction":"MXNet::Symbol | ::Nil"},{"name":"lr","doc":null,"default_value":"","external_name":"lr","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_sparse_adagrad_update\", weight, grad, history, **kwargs.merge(lr: lr))"}},{"id":"_adam_update(weight:MXNet::Symbol?,grad:MXNet::Symbol?,mean:MXNet::Symbol?,var:MXNet::Symbol?,lr,**kwargs)-class-method","html_id":"_adam_update(weight:MXNet::Symbol?,grad:MXNet::Symbol?,mean:MXNet::Symbol?,var:MXNet::Symbol?,lr,**kwargs)-class-method","name":"_adam_update","doc":null,"summary":null,"abstract":false,"args":[{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::Symbol | ::Nil"},{"name":"grad","doc":null,"default_value":"","external_name":"grad","restriction":"MXNet::Symbol | ::Nil"},{"name":"mean","doc":null,"default_value":"","external_name":"mean","restriction":"MXNet::Symbol | ::Nil"},{"name":"var","doc":null,"default_value":"","external_name":"var","restriction":"MXNet::Symbol | ::Nil"},{"name":"lr","doc":null,"default_value":"","external_name":"lr","restriction":""}],"args_string":"(weight : MXNet::Symbol?, grad : MXNet::Symbol?, mean : MXNet::Symbol?, var : MXNet::Symbol?, lr, **kwargs)","args_html":"(weight : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, grad : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, mean : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, var : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, lr, **kwargs)","location":null,"def":{"name":"_adam_update","args":[{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::Symbol | ::Nil"},{"name":"grad","doc":null,"default_value":"","external_name":"grad","restriction":"MXNet::Symbol | ::Nil"},{"name":"mean","doc":null,"default_value":"","external_name":"mean","restriction":"MXNet::Symbol | ::Nil"},{"name":"var","doc":null,"default_value":"","external_name":"var","restriction":"MXNet::Symbol | ::Nil"},{"name":"lr","doc":null,"default_value":"","external_name":"lr","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_sparse_adam_update\", weight, grad, mean, var, **kwargs.merge(lr: lr))"}},{"id":"_add_n(args:Array(MXNet::Symbol),**kwargs)-class-method","html_id":"_add_n(args:Array(MXNet::Symbol),**kwargs)-class-method","name":"_add_n","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":"Array(MXNet::Symbol)"}],"args_string":"(args : Array(MXNet::Symbol), **kwargs)","args_html":"(args : Array(<a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>), **kwargs)","location":null,"def":{"name":"_add_n","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":"Array(MXNet::Symbol)"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_sparse_add_n\", args, **kwargs)"}},{"id":"_arccos(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_arccos(data:MXNet::Symbol?,**kwargs)-class-method","name":"_arccos","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_arccos","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_sparse_arccos\", data, **kwargs)"}},{"id":"_arccosh(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_arccosh(data:MXNet::Symbol?,**kwargs)-class-method","name":"_arccosh","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_arccosh","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_sparse_arccosh\", data, **kwargs)"}},{"id":"_arcsin(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_arcsin(data:MXNet::Symbol?,**kwargs)-class-method","name":"_arcsin","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_arcsin","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_sparse_arcsin\", data, **kwargs)"}},{"id":"_arcsinh(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_arcsinh(data:MXNet::Symbol?,**kwargs)-class-method","name":"_arcsinh","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_arcsinh","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_sparse_arcsinh\", data, **kwargs)"}},{"id":"_arctan(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_arctan(data:MXNet::Symbol?,**kwargs)-class-method","name":"_arctan","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_arctan","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_sparse_arctan\", data, **kwargs)"}},{"id":"_arctanh(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_arctanh(data:MXNet::Symbol?,**kwargs)-class-method","name":"_arctanh","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_arctanh","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_sparse_arctanh\", data, **kwargs)"}},{"id":"_broadcast_add(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","html_id":"_broadcast_add(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","name":"_broadcast_add","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(lhs : MXNet::Symbol?, rhs : MXNet::Symbol?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, rhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_broadcast_add","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_sparse_broadcast_add\", lhs, rhs, **kwargs)"}},{"id":"_broadcast_div(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","html_id":"_broadcast_div(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","name":"_broadcast_div","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(lhs : MXNet::Symbol?, rhs : MXNet::Symbol?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, rhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_broadcast_div","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_sparse_broadcast_div\", lhs, rhs, **kwargs)"}},{"id":"_broadcast_minus(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","html_id":"_broadcast_minus(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","name":"_broadcast_minus","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(lhs : MXNet::Symbol?, rhs : MXNet::Symbol?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, rhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_broadcast_minus","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_sparse_broadcast_minus\", lhs, rhs, **kwargs)"}},{"id":"_broadcast_mul(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","html_id":"_broadcast_mul(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","name":"_broadcast_mul","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(lhs : MXNet::Symbol?, rhs : MXNet::Symbol?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, rhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_broadcast_mul","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_sparse_broadcast_mul\", lhs, rhs, **kwargs)"}},{"id":"_broadcast_plus(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","html_id":"_broadcast_plus(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","name":"_broadcast_plus","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(lhs : MXNet::Symbol?, rhs : MXNet::Symbol?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, rhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_broadcast_plus","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_sparse_broadcast_plus\", lhs, rhs, **kwargs)"}},{"id":"_broadcast_sub(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","html_id":"_broadcast_sub(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","name":"_broadcast_sub","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(lhs : MXNet::Symbol?, rhs : MXNet::Symbol?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, rhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_broadcast_sub","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_sparse_broadcast_sub\", lhs, rhs, **kwargs)"}},{"id":"_cast_storage(data:MXNet::Symbol?,stype,**kwargs)-class-method","html_id":"_cast_storage(data:MXNet::Symbol?,stype,**kwargs)-class-method","name":"_cast_storage","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"stype","doc":null,"default_value":"","external_name":"stype","restriction":""}],"args_string":"(data : MXNet::Symbol?, stype, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, stype, **kwargs)","location":null,"def":{"name":"_cast_storage","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"stype","doc":null,"default_value":"","external_name":"stype","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_sparse_cast_storage\", data, **kwargs.merge(stype: stype))"}},{"id":"_cbrt(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_cbrt(data:MXNet::Symbol?,**kwargs)-class-method","name":"_cbrt","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_cbrt","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_sparse_cbrt\", data, **kwargs)"}},{"id":"_ceil(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_ceil(data:MXNet::Symbol?,**kwargs)-class-method","name":"_ceil","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_ceil","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_sparse_ceil\", data, **kwargs)"}},{"id":"_clip(data:MXNet::Symbol?,a_min,a_max,**kwargs)-class-method","html_id":"_clip(data:MXNet::Symbol?,a_min,a_max,**kwargs)-class-method","name":"_clip","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"a_min","doc":null,"default_value":"","external_name":"a_min","restriction":""},{"name":"a_max","doc":null,"default_value":"","external_name":"a_max","restriction":""}],"args_string":"(data : MXNet::Symbol?, a_min, a_max, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, a_min, a_max, **kwargs)","location":null,"def":{"name":"_clip","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"a_min","doc":null,"default_value":"","external_name":"a_min","restriction":""},{"name":"a_max","doc":null,"default_value":"","external_name":"a_max","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_sparse_clip\", data, **kwargs.merge(a_min: a_min, a_max: a_max))"}},{"id":"_concat(data:Array(MXNet::Symbol),num_args,**kwargs)-class-method","html_id":"_concat(data:Array(MXNet::Symbol),num_args,**kwargs)-class-method","name":"_concat","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"Array(MXNet::Symbol)"},{"name":"num_args","doc":null,"default_value":"","external_name":"num_args","restriction":""}],"args_string":"(data : Array(MXNet::Symbol), num_args, **kwargs)","args_html":"(data : Array(<a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>), num_args, **kwargs)","location":null,"def":{"name":"_concat","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"Array(MXNet::Symbol)"},{"name":"num_args","doc":null,"default_value":"","external_name":"num_args","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_sparse_concat\", data, **kwargs.merge(num_args: num_args))"}},{"id":"_cos(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_cos(data:MXNet::Symbol?,**kwargs)-class-method","name":"_cos","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_cos","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_sparse_cos\", data, **kwargs)"}},{"id":"_cosh(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_cosh(data:MXNet::Symbol?,**kwargs)-class-method","name":"_cosh","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_cosh","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_sparse_cosh\", data, **kwargs)"}},{"id":"_degrees(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_degrees(data:MXNet::Symbol?,**kwargs)-class-method","name":"_degrees","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_degrees","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_sparse_degrees\", data, **kwargs)"}},{"id":"_dot(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","html_id":"_dot(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","name":"_dot","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(lhs : MXNet::Symbol?, rhs : MXNet::Symbol?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, rhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_dot","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_sparse_dot\", lhs, rhs, **kwargs)"}},{"id":"_ElementWiseSum(args:Array(MXNet::Symbol),**kwargs)-class-method","html_id":"_ElementWiseSum(args:Array(MXNet::Symbol),**kwargs)-class-method","name":"_ElementWiseSum","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":"Array(MXNet::Symbol)"}],"args_string":"(args : Array(MXNet::Symbol), **kwargs)","args_html":"(args : Array(<a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>), **kwargs)","location":null,"def":{"name":"_ElementWiseSum","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":"Array(MXNet::Symbol)"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_sparse_ElementWiseSum\", args, **kwargs)"}},{"id":"_elemwise_add(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","html_id":"_elemwise_add(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","name":"_elemwise_add","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(lhs : MXNet::Symbol?, rhs : MXNet::Symbol?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, rhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_elemwise_add","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_sparse_elemwise_add\", lhs, rhs, **kwargs)"}},{"id":"_elemwise_div(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","html_id":"_elemwise_div(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","name":"_elemwise_div","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(lhs : MXNet::Symbol?, rhs : MXNet::Symbol?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, rhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_elemwise_div","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_sparse_elemwise_div\", lhs, rhs, **kwargs)"}},{"id":"_elemwise_mul(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","html_id":"_elemwise_mul(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","name":"_elemwise_mul","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(lhs : MXNet::Symbol?, rhs : MXNet::Symbol?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, rhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_elemwise_mul","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_sparse_elemwise_mul\", lhs, rhs, **kwargs)"}},{"id":"_elemwise_sub(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","html_id":"_elemwise_sub(lhs:MXNet::Symbol?,rhs:MXNet::Symbol?,**kwargs)-class-method","name":"_elemwise_sub","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(lhs : MXNet::Symbol?, rhs : MXNet::Symbol?, **kwargs)","args_html":"(lhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, rhs : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_elemwise_sub","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"MXNet::Symbol | ::Nil"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_sparse_elemwise_sub\", lhs, rhs, **kwargs)"}},{"id":"_Embedding(data:MXNet::Symbol?,weight:MXNet::Symbol?,input_dim,output_dim,**kwargs)-class-method","html_id":"_Embedding(data:MXNet::Symbol?,weight:MXNet::Symbol?,input_dim,output_dim,**kwargs)-class-method","name":"_Embedding","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::Symbol | ::Nil"},{"name":"input_dim","doc":null,"default_value":"","external_name":"input_dim","restriction":""},{"name":"output_dim","doc":null,"default_value":"","external_name":"output_dim","restriction":""}],"args_string":"(data : MXNet::Symbol?, weight : MXNet::Symbol?, input_dim, output_dim, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, weight : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, input_dim, output_dim, **kwargs)","location":null,"def":{"name":"_Embedding","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::Symbol | ::Nil"},{"name":"input_dim","doc":null,"default_value":"","external_name":"input_dim","restriction":""},{"name":"output_dim","doc":null,"default_value":"","external_name":"output_dim","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_sparse_Embedding\", data, weight, **kwargs.merge(input_dim: input_dim, output_dim: output_dim))"}},{"id":"_exp(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_exp(data:MXNet::Symbol?,**kwargs)-class-method","name":"_exp","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_exp","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_sparse_exp\", data, **kwargs)"}},{"id":"_expm1(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_expm1(data:MXNet::Symbol?,**kwargs)-class-method","name":"_expm1","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_expm1","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_sparse_expm1\", data, **kwargs)"}},{"id":"_fix(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_fix(data:MXNet::Symbol?,**kwargs)-class-method","name":"_fix","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_fix","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_sparse_fix\", data, **kwargs)"}},{"id":"_floor(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_floor(data:MXNet::Symbol?,**kwargs)-class-method","name":"_floor","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_floor","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_sparse_floor\", data, **kwargs)"}},{"id":"_ftrl_update(weight:MXNet::Symbol?,grad:MXNet::Symbol?,z:MXNet::Symbol?,n:MXNet::Symbol?,lr,**kwargs)-class-method","html_id":"_ftrl_update(weight:MXNet::Symbol?,grad:MXNet::Symbol?,z:MXNet::Symbol?,n:MXNet::Symbol?,lr,**kwargs)-class-method","name":"_ftrl_update","doc":null,"summary":null,"abstract":false,"args":[{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::Symbol | ::Nil"},{"name":"grad","doc":null,"default_value":"","external_name":"grad","restriction":"MXNet::Symbol | ::Nil"},{"name":"z","doc":null,"default_value":"","external_name":"z","restriction":"MXNet::Symbol | ::Nil"},{"name":"n","doc":null,"default_value":"","external_name":"n","restriction":"MXNet::Symbol | ::Nil"},{"name":"lr","doc":null,"default_value":"","external_name":"lr","restriction":""}],"args_string":"(weight : MXNet::Symbol?, grad : MXNet::Symbol?, z : MXNet::Symbol?, n : MXNet::Symbol?, lr, **kwargs)","args_html":"(weight : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, grad : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, z : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, n : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, lr, **kwargs)","location":null,"def":{"name":"_ftrl_update","args":[{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::Symbol | ::Nil"},{"name":"grad","doc":null,"default_value":"","external_name":"grad","restriction":"MXNet::Symbol | ::Nil"},{"name":"z","doc":null,"default_value":"","external_name":"z","restriction":"MXNet::Symbol | ::Nil"},{"name":"n","doc":null,"default_value":"","external_name":"n","restriction":"MXNet::Symbol | ::Nil"},{"name":"lr","doc":null,"default_value":"","external_name":"lr","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_sparse_ftrl_update\", weight, grad, z, n, **kwargs.merge(lr: lr))"}},{"id":"_FullyConnected(data:MXNet::Symbol?,weight:MXNet::Symbol?,bias:MXNet::Symbol?,num_hidden,**kwargs)-class-method","html_id":"_FullyConnected(data:MXNet::Symbol?,weight:MXNet::Symbol?,bias:MXNet::Symbol?,num_hidden,**kwargs)-class-method","name":"_FullyConnected","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::Symbol | ::Nil"},{"name":"bias","doc":null,"default_value":"","external_name":"bias","restriction":"MXNet::Symbol | ::Nil"},{"name":"num_hidden","doc":null,"default_value":"","external_name":"num_hidden","restriction":""}],"args_string":"(data : MXNet::Symbol?, weight : MXNet::Symbol?, bias : MXNet::Symbol?, num_hidden, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, weight : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, bias : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, num_hidden, **kwargs)","location":null,"def":{"name":"_FullyConnected","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::Symbol | ::Nil"},{"name":"bias","doc":null,"default_value":"","external_name":"bias","restriction":"MXNet::Symbol | ::Nil"},{"name":"num_hidden","doc":null,"default_value":"","external_name":"num_hidden","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_sparse_FullyConnected\", data, weight, bias, **kwargs.merge(num_hidden: num_hidden))"}},{"id":"_gamma(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_gamma(data:MXNet::Symbol?,**kwargs)-class-method","name":"_gamma","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_gamma","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_sparse_gamma\", data, **kwargs)"}},{"id":"_gammaln(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_gammaln(data:MXNet::Symbol?,**kwargs)-class-method","name":"_gammaln","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_gammaln","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_sparse_gammaln\", data, **kwargs)"}},{"id":"_LinearRegressionOutput(data:MXNet::Symbol?,label:MXNet::Symbol?,**kwargs)-class-method","html_id":"_LinearRegressionOutput(data:MXNet::Symbol?,label:MXNet::Symbol?,**kwargs)-class-method","name":"_LinearRegressionOutput","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"label","doc":null,"default_value":"","external_name":"label","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, label : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, label : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_LinearRegressionOutput","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"label","doc":null,"default_value":"","external_name":"label","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_sparse_LinearRegressionOutput\", data, label, **kwargs)"}},{"id":"_log(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_log(data:MXNet::Symbol?,**kwargs)-class-method","name":"_log","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_log","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_sparse_log\", data, **kwargs)"}},{"id":"_log10(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_log10(data:MXNet::Symbol?,**kwargs)-class-method","name":"_log10","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_log10","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_sparse_log10\", data, **kwargs)"}},{"id":"_log1p(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_log1p(data:MXNet::Symbol?,**kwargs)-class-method","name":"_log1p","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_log1p","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_sparse_log1p\", data, **kwargs)"}},{"id":"_log2(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_log2(data:MXNet::Symbol?,**kwargs)-class-method","name":"_log2","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_log2","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_sparse_log2\", data, **kwargs)"}},{"id":"_LogisticRegressionOutput(data:MXNet::Symbol?,label:MXNet::Symbol?,**kwargs)-class-method","html_id":"_LogisticRegressionOutput(data:MXNet::Symbol?,label:MXNet::Symbol?,**kwargs)-class-method","name":"_LogisticRegressionOutput","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"label","doc":null,"default_value":"","external_name":"label","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, label : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, label : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_LogisticRegressionOutput","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"label","doc":null,"default_value":"","external_name":"label","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_sparse_LogisticRegressionOutput\", data, label, **kwargs)"}},{"id":"_MAERegressionOutput(data:MXNet::Symbol?,label:MXNet::Symbol?,**kwargs)-class-method","html_id":"_MAERegressionOutput(data:MXNet::Symbol?,label:MXNet::Symbol?,**kwargs)-class-method","name":"_MAERegressionOutput","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"label","doc":null,"default_value":"","external_name":"label","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, label : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, label : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_MAERegressionOutput","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"label","doc":null,"default_value":"","external_name":"label","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_sparse_MAERegressionOutput\", data, label, **kwargs)"}},{"id":"_make_loss(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_make_loss(data:MXNet::Symbol?,**kwargs)-class-method","name":"_make_loss","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_make_loss","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_sparse_make_loss\", data, **kwargs)"}},{"id":"_mean(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_mean(data:MXNet::Symbol?,**kwargs)-class-method","name":"_mean","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_mean","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_sparse_mean\", data, **kwargs)"}},{"id":"_negative(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_negative(data:MXNet::Symbol?,**kwargs)-class-method","name":"_negative","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_negative","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_sparse_negative\", data, **kwargs)"}},{"id":"_norm(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_norm(data:MXNet::Symbol?,**kwargs)-class-method","name":"_norm","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_norm","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_sparse_norm\", data, **kwargs)"}},{"id":"_radians(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_radians(data:MXNet::Symbol?,**kwargs)-class-method","name":"_radians","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_radians","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_sparse_radians\", data, **kwargs)"}},{"id":"_relu(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_relu(data:MXNet::Symbol?,**kwargs)-class-method","name":"_relu","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_relu","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_sparse_relu\", data, **kwargs)"}},{"id":"_retain(data:MXNet::Symbol?,indices:MXNet::Symbol?,**kwargs)-class-method","html_id":"_retain(data:MXNet::Symbol?,indices:MXNet::Symbol?,**kwargs)-class-method","name":"_retain","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"indices","doc":null,"default_value":"","external_name":"indices","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, indices : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, indices : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_retain","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"indices","doc":null,"default_value":"","external_name":"indices","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_sparse_retain\", data, indices, **kwargs)"}},{"id":"_rint(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_rint(data:MXNet::Symbol?,**kwargs)-class-method","name":"_rint","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_rint","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_sparse_rint\", data, **kwargs)"}},{"id":"_round(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_round(data:MXNet::Symbol?,**kwargs)-class-method","name":"_round","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_round","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_sparse_round\", data, **kwargs)"}},{"id":"_rsqrt(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_rsqrt(data:MXNet::Symbol?,**kwargs)-class-method","name":"_rsqrt","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_rsqrt","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_sparse_rsqrt\", data, **kwargs)"}},{"id":"_sgd_mom_update(weight:MXNet::Symbol?,grad:MXNet::Symbol?,mom:MXNet::Symbol?,lr,**kwargs)-class-method","html_id":"_sgd_mom_update(weight:MXNet::Symbol?,grad:MXNet::Symbol?,mom:MXNet::Symbol?,lr,**kwargs)-class-method","name":"_sgd_mom_update","doc":null,"summary":null,"abstract":false,"args":[{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::Symbol | ::Nil"},{"name":"grad","doc":null,"default_value":"","external_name":"grad","restriction":"MXNet::Symbol | ::Nil"},{"name":"mom","doc":null,"default_value":"","external_name":"mom","restriction":"MXNet::Symbol | ::Nil"},{"name":"lr","doc":null,"default_value":"","external_name":"lr","restriction":""}],"args_string":"(weight : MXNet::Symbol?, grad : MXNet::Symbol?, mom : MXNet::Symbol?, lr, **kwargs)","args_html":"(weight : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, grad : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, mom : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, lr, **kwargs)","location":null,"def":{"name":"_sgd_mom_update","args":[{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::Symbol | ::Nil"},{"name":"grad","doc":null,"default_value":"","external_name":"grad","restriction":"MXNet::Symbol | ::Nil"},{"name":"mom","doc":null,"default_value":"","external_name":"mom","restriction":"MXNet::Symbol | ::Nil"},{"name":"lr","doc":null,"default_value":"","external_name":"lr","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_sparse_sgd_mom_update\", weight, grad, mom, **kwargs.merge(lr: lr))"}},{"id":"_sgd_update(weight:MXNet::Symbol?,grad:MXNet::Symbol?,lr,**kwargs)-class-method","html_id":"_sgd_update(weight:MXNet::Symbol?,grad:MXNet::Symbol?,lr,**kwargs)-class-method","name":"_sgd_update","doc":null,"summary":null,"abstract":false,"args":[{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::Symbol | ::Nil"},{"name":"grad","doc":null,"default_value":"","external_name":"grad","restriction":"MXNet::Symbol | ::Nil"},{"name":"lr","doc":null,"default_value":"","external_name":"lr","restriction":""}],"args_string":"(weight : MXNet::Symbol?, grad : MXNet::Symbol?, lr, **kwargs)","args_html":"(weight : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, grad : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, lr, **kwargs)","location":null,"def":{"name":"_sgd_update","args":[{"name":"weight","doc":null,"default_value":"","external_name":"weight","restriction":"MXNet::Symbol | ::Nil"},{"name":"grad","doc":null,"default_value":"","external_name":"grad","restriction":"MXNet::Symbol | ::Nil"},{"name":"lr","doc":null,"default_value":"","external_name":"lr","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_sparse_sgd_update\", weight, grad, **kwargs.merge(lr: lr))"}},{"id":"_sigmoid(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_sigmoid(data:MXNet::Symbol?,**kwargs)-class-method","name":"_sigmoid","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_sigmoid","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_sparse_sigmoid\", data, **kwargs)"}},{"id":"_sign(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_sign(data:MXNet::Symbol?,**kwargs)-class-method","name":"_sign","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_sign","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_sparse_sign\", data, **kwargs)"}},{"id":"_sin(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_sin(data:MXNet::Symbol?,**kwargs)-class-method","name":"_sin","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_sin","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_sparse_sin\", data, **kwargs)"}},{"id":"_sinh(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_sinh(data:MXNet::Symbol?,**kwargs)-class-method","name":"_sinh","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_sinh","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_sparse_sinh\", data, **kwargs)"}},{"id":"_slice(data:MXNet::Symbol?,begin_begin,end_end,**kwargs)-class-method","html_id":"_slice(data:MXNet::Symbol?,begin_begin,end_end,**kwargs)-class-method","name":"_slice","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"_begin","doc":null,"default_value":"","external_name":"begin","restriction":""},{"name":"_end","doc":null,"default_value":"","external_name":"end","restriction":""}],"args_string":"(data : MXNet::Symbol?, begin _begin, end _end, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, begin _begin, end _end, **kwargs)","location":null,"def":{"name":"_slice","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"},{"name":"_begin","doc":null,"default_value":"","external_name":"begin","restriction":""},{"name":"_end","doc":null,"default_value":"","external_name":"end","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_sparse_slice\", data, **kwargs.merge(begin: _begin, end: _end))"}},{"id":"_sqrt(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_sqrt(data:MXNet::Symbol?,**kwargs)-class-method","name":"_sqrt","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_sqrt","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_sparse_sqrt\", data, **kwargs)"}},{"id":"_square(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_square(data:MXNet::Symbol?,**kwargs)-class-method","name":"_square","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_square","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_sparse_square\", data, **kwargs)"}},{"id":"_stop_gradient(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_stop_gradient(data:MXNet::Symbol?,**kwargs)-class-method","name":"_stop_gradient","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_stop_gradient","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_sparse_stop_gradient\", data, **kwargs)"}},{"id":"_sum(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_sum(data:MXNet::Symbol?,**kwargs)-class-method","name":"_sum","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_sum","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_sparse_sum\", data, **kwargs)"}},{"id":"_tan(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_tan(data:MXNet::Symbol?,**kwargs)-class-method","name":"_tan","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_tan","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_sparse_tan\", data, **kwargs)"}},{"id":"_tanh(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_tanh(data:MXNet::Symbol?,**kwargs)-class-method","name":"_tanh","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_tanh","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_sparse_tanh\", data, **kwargs)"}},{"id":"_trunc(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_trunc(data:MXNet::Symbol?,**kwargs)-class-method","name":"_trunc","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_trunc","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_sparse_trunc\", data, **kwargs)"}},{"id":"_where(condition:MXNet::Symbol?,x:MXNet::Symbol?,y:MXNet::Symbol?,**kwargs)-class-method","html_id":"_where(condition:MXNet::Symbol?,x:MXNet::Symbol?,y:MXNet::Symbol?,**kwargs)-class-method","name":"_where","doc":null,"summary":null,"abstract":false,"args":[{"name":"condition","doc":null,"default_value":"","external_name":"condition","restriction":"MXNet::Symbol | ::Nil"},{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":"MXNet::Symbol | ::Nil"},{"name":"y","doc":null,"default_value":"","external_name":"y","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(condition : MXNet::Symbol?, x : MXNet::Symbol?, y : MXNet::Symbol?, **kwargs)","args_html":"(condition : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, x : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, y : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_where","args":[{"name":"condition","doc":null,"default_value":"","external_name":"condition","restriction":"MXNet::Symbol | ::Nil"},{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":"MXNet::Symbol | ::Nil"},{"name":"y","doc":null,"default_value":"","external_name":"y","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_sparse_where\", condition, x, y, **kwargs)"}},{"id":"_zeros_like(data:MXNet::Symbol?,**kwargs)-class-method","html_id":"_zeros_like(data:MXNet::Symbol?,**kwargs)-class-method","name":"_zeros_like","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"args_string":"(data : MXNet::Symbol?, **kwargs)","args_html":"(data : <a href=\"../../MXNet/Symbol.html\">MXNet::Symbol</a>?, **kwargs)","location":null,"def":{"name":"_zeros_like","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"MXNet::Symbol | ::Nil"}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.create_symbol(\"_sparse_zeros_like\", data, **kwargs)"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]},{"html_id":"mxnet/MXNet/SymbolException","path":"MXNet/SymbolException.html","kind":"class","full_name":"MXNet::SymbolException","name":"SymbolException","abstract":false,"superclass":{"html_id":"mxnet/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"mxnet/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"mxnet/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"mxnet/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/mxnet/symbol.cr","line_number":2,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/symbol.cr#L2"}],"repository_name":"mxnet","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"mxnet/MXNet","kind":"module","full_name":"MXNet","name":"MXNet"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"mxnet/MXNet/Util","path":"MXNet/Util.html","kind":"module","full_name":"MXNet::Util","name":"Util","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/mxnet/util.cr","line_number":6,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/util.cr#L6"}],"repository_name":"mxnet","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"mxnet/MXNet/CachedOp","kind":"class","full_name":"MXNet::CachedOp","name":"CachedOp"}],"namespace":{"html_id":"mxnet/MXNet","kind":"module","full_name":"MXNet","name":"MXNet"},"doc":"Util class.\n","summary":"<p>Util class.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"output(arg)-instance-method","html_id":"output(arg)-instance-method","name":"output","doc":"Recursively pretty-prints *arg*.\n\nSuitable for formatting MXNet keyword arguments.\n\n### Parameters\n* *arg* (any)\n  Value to pretty-print.\n","summary":"<p>Recursively pretty-prints <em>arg</em>.</p>","abstract":false,"args":[{"name":"arg","doc":null,"default_value":"","external_name":"arg","restriction":""}],"args_string":"(arg)","args_html":"(arg)","location":{"filename":"src/mxnet/util.cr","line_number":35,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/util.cr#L35"},"def":{"name":"output","args":[{"name":"arg","doc":null,"default_value":"","external_name":"arg","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"String.build do |io|\n  output(arg, io)\nend"}}],"macros":[],"types":[]}]},{"html_id":"mxnet/Number","path":"Number.html","kind":"struct","full_name":"Number","name":"Number","abstract":true,"superclass":{"html_id":"mxnet/Value","kind":"struct","full_name":"Value","name":"Value"},"ancestors":[{"html_id":"mxnet/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"mxnet/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"mxnet/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/mxnet/ndarray.cr","line_number":1273,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/ndarray.cr#L1273"},{"filename":"src/mxnet/symbol.cr","line_number":1202,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/symbol.cr#L1202"}],"repository_name":"mxnet","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[{"html_id":"mxnet/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"The top-level number type.","summary":"<p>The top-level number type.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"!=(other:MXNet::Symbol)-instance-method","html_id":"!=(other:MXNet::Symbol)-instance-method","name":"!=","doc":"Performs element-wise not equal to (`!=`) comparison.","summary":"<p>Performs element-wise not equal to (<code><a href=\"Number.html#!=(other:MXNet::Symbol)-instance-method\">#!=</a></code>) comparison.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"MXNet::Symbol"}],"args_string":"(other : MXNet::Symbol)","args_html":"(other : <a href=\"MXNet/Symbol.html\">MXNet::Symbol</a>)","location":{"filename":"src/mxnet/symbol.cr","line_number":1240,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/symbol.cr#L1240"},"def":{"name":"!=","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"MXNet::Symbol"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.not_equal(self, other)"}},{"id":"!=(other:MXNet::NDArray)-instance-method","html_id":"!=(other:MXNet::NDArray)-instance-method","name":"!=","doc":"Performs element-wise not equal to (`!=`) comparison.","summary":"<p>Performs element-wise not equal to (<code><a href=\"Number.html#!=(other:MXNet::Symbol)-instance-method\">#!=</a></code>) comparison.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"MXNet::NDArray"}],"args_string":"(other : MXNet::NDArray)","args_html":"(other : <a href=\"MXNet/NDArray.html\">MXNet::NDArray</a>)","location":{"filename":"src/mxnet/ndarray.cr","line_number":1311,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/ndarray.cr#L1311"},"def":{"name":"!=","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"MXNet::NDArray"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.not_equal(self, other)"}},{"id":"%(other:MXNet::NDArray)-instance-method","html_id":"%(other:MXNet::NDArray)-instance-method","name":"%","doc":"Performs element-wise modulo.","summary":"<p>Performs element-wise modulo.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"MXNet::NDArray"}],"args_string":"(other : MXNet::NDArray)","args_html":"(other : <a href=\"MXNet/NDArray.html\">MXNet::NDArray</a>)","location":{"filename":"src/mxnet/ndarray.cr","line_number":1295,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/ndarray.cr#L1295"},"def":{"name":"%","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"MXNet::NDArray"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.modulo(self, other)"}},{"id":"%(other:MXNet::Symbol)-instance-method","html_id":"%(other:MXNet::Symbol)-instance-method","name":"%","doc":"Performs element-wise modulo.","summary":"<p>Performs element-wise modulo.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"MXNet::Symbol"}],"args_string":"(other : MXNet::Symbol)","args_html":"(other : <a href=\"MXNet/Symbol.html\">MXNet::Symbol</a>)","location":{"filename":"src/mxnet/symbol.cr","line_number":1224,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/symbol.cr#L1224"},"def":{"name":"%","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"MXNet::Symbol"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.modulo(self, other)"}},{"id":"&(other:MXNet::Symbol)-instance-method","html_id":"&(other:MXNet::Symbol)-instance-method","name":"&","doc":"Performs element-wise logical and (`&`) comparison.","summary":"<p>Performs element-wise logical and (<code><a href=\"Number.html#&(other:MXNet::Symbol)-instance-method\">#&</a></code>) comparison.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"MXNet::Symbol"}],"args_string":"(other : MXNet::Symbol)","args_html":"(other : <a href=\"MXNet/Symbol.html\">MXNet::Symbol</a>)","location":{"filename":"src/mxnet/symbol.cr","line_number":1265,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/symbol.cr#L1265"},"def":{"name":"&","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"MXNet::Symbol"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.logical_and(self, other)"}},{"id":"&(other:MXNet::NDArray)-instance-method","html_id":"&(other:MXNet::NDArray)-instance-method","name":"&","doc":"Performs element-wise logical and (`&`) comparison.","summary":"<p>Performs element-wise logical and (<code><a href=\"Number.html#&(other:MXNet::Symbol)-instance-method\">#&</a></code>) comparison.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"MXNet::NDArray"}],"args_string":"(other : MXNet::NDArray)","args_html":"(other : <a href=\"MXNet/NDArray.html\">MXNet::NDArray</a>)","location":{"filename":"src/mxnet/ndarray.cr","line_number":1336,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/ndarray.cr#L1336"},"def":{"name":"&","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"MXNet::NDArray"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.logical_and(self, other)"}},{"id":"*(other:MXNet::NDArray)-instance-method","html_id":"*(other:MXNet::NDArray)-instance-method","name":"*","doc":"Performs element-wise multiplication.","summary":"<p>Performs element-wise multiplication.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"MXNet::NDArray"}],"args_string":"(other : MXNet::NDArray)","args_html":"(other : <a href=\"MXNet/NDArray.html\">MXNet::NDArray</a>)","location":{"filename":"src/mxnet/ndarray.cr","line_number":1285,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/ndarray.cr#L1285"},"def":{"name":"*","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"MXNet::NDArray"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.multiply(self, other)"}},{"id":"*(other:MXNet::Symbol)-instance-method","html_id":"*(other:MXNet::Symbol)-instance-method","name":"*","doc":"Performs element-wise multiplication.","summary":"<p>Performs element-wise multiplication.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"MXNet::Symbol"}],"args_string":"(other : MXNet::Symbol)","args_html":"(other : <a href=\"MXNet/Symbol.html\">MXNet::Symbol</a>)","location":{"filename":"src/mxnet/symbol.cr","line_number":1214,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/symbol.cr#L1214"},"def":{"name":"*","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"MXNet::Symbol"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.multiply(self, other)"}},{"id":"**(other:MXNet::Symbol)-instance-method","html_id":"**(other:MXNet::Symbol)-instance-method","name":"**","doc":"Returns the result of this number raised to powers from the array,\nelement-wise.","summary":"<p>Returns the result of this number raised to powers from the array, element-wise.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"MXNet::Symbol"}],"args_string":"(other : MXNet::Symbol)","args_html":"(other : <a href=\"MXNet/Symbol.html\">MXNet::Symbol</a>)","location":{"filename":"src/mxnet/symbol.cr","line_number":1230,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/symbol.cr#L1230"},"def":{"name":"**","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"MXNet::Symbol"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.power(self, other)"}},{"id":"**(other:MXNet::NDArray)-instance-method","html_id":"**(other:MXNet::NDArray)-instance-method","name":"**","doc":"Returns the result of this number raised to powers from the array,\nelement-wise.","summary":"<p>Returns the result of this number raised to powers from the array, element-wise.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"MXNet::NDArray"}],"args_string":"(other : MXNet::NDArray)","args_html":"(other : <a href=\"MXNet/NDArray.html\">MXNet::NDArray</a>)","location":{"filename":"src/mxnet/ndarray.cr","line_number":1301,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/ndarray.cr#L1301"},"def":{"name":"**","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"MXNet::NDArray"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.power(self, other)"}},{"id":"+(other:MXNet::NDArray)-instance-method","html_id":"+(other:MXNet::NDArray)-instance-method","name":"+","doc":"Performs element-wise addition.","summary":"<p>Performs element-wise addition.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"MXNet::NDArray"}],"args_string":"(other : MXNet::NDArray)","args_html":"(other : <a href=\"MXNet/NDArray.html\">MXNet::NDArray</a>)","location":{"filename":"src/mxnet/ndarray.cr","line_number":1275,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/ndarray.cr#L1275"},"def":{"name":"+","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"MXNet::NDArray"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.add(self, other)"}},{"id":"+(other:MXNet::Symbol)-instance-method","html_id":"+(other:MXNet::Symbol)-instance-method","name":"+","doc":"Performs element-wise addition.","summary":"<p>Performs element-wise addition.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"MXNet::Symbol"}],"args_string":"(other : MXNet::Symbol)","args_html":"(other : <a href=\"MXNet/Symbol.html\">MXNet::Symbol</a>)","location":{"filename":"src/mxnet/symbol.cr","line_number":1204,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/symbol.cr#L1204"},"def":{"name":"+","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"MXNet::Symbol"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.add(self, other)"}},{"id":"-(other:MXNet::NDArray)-instance-method","html_id":"-(other:MXNet::NDArray)-instance-method","name":"-","doc":"Performs element-wise subtraction.","summary":"<p>Performs element-wise subtraction.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"MXNet::NDArray"}],"args_string":"(other : MXNet::NDArray)","args_html":"(other : <a href=\"MXNet/NDArray.html\">MXNet::NDArray</a>)","location":{"filename":"src/mxnet/ndarray.cr","line_number":1280,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/ndarray.cr#L1280"},"def":{"name":"-","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"MXNet::NDArray"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.subtract(self, other)"}},{"id":"-(other:MXNet::Symbol)-instance-method","html_id":"-(other:MXNet::Symbol)-instance-method","name":"-","doc":"Performs element-wise subtraction.","summary":"<p>Performs element-wise subtraction.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"MXNet::Symbol"}],"args_string":"(other : MXNet::Symbol)","args_html":"(other : <a href=\"MXNet/Symbol.html\">MXNet::Symbol</a>)","location":{"filename":"src/mxnet/symbol.cr","line_number":1209,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/symbol.cr#L1209"},"def":{"name":"-","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"MXNet::Symbol"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.subtract(self, other)"}},{"id":"/(other:MXNet::Symbol)-instance-method","html_id":"/(other:MXNet::Symbol)-instance-method","name":"/","doc":"Performs element-wise division.","summary":"<p>Performs element-wise division.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"MXNet::Symbol"}],"args_string":"(other : MXNet::Symbol)","args_html":"(other : <a href=\"MXNet/Symbol.html\">MXNet::Symbol</a>)","location":{"filename":"src/mxnet/symbol.cr","line_number":1219,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/symbol.cr#L1219"},"def":{"name":"/","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"MXNet::Symbol"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.divide(self, other)"}},{"id":"/(other:MXNet::NDArray)-instance-method","html_id":"/(other:MXNet::NDArray)-instance-method","name":"/","doc":"Performs element-wise division.","summary":"<p>Performs element-wise division.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"MXNet::NDArray"}],"args_string":"(other : MXNet::NDArray)","args_html":"(other : <a href=\"MXNet/NDArray.html\">MXNet::NDArray</a>)","location":{"filename":"src/mxnet/ndarray.cr","line_number":1290,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/ndarray.cr#L1290"},"def":{"name":"/","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"MXNet::NDArray"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.divide(self, other)"}},{"id":"<(other:MXNet::Symbol)-instance-method","html_id":"<(other:MXNet::Symbol)-instance-method","name":"<","doc":"Performs element-wise less than (`<`) comparison.","summary":"<p>Performs element-wise less than (<code><a href=\"Number.html#%3C(other:MXNet::Symbol)-instance-method\">#<</a></code>) comparison.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"MXNet::Symbol"}],"args_string":"(other : MXNet::Symbol)","args_html":"(other : <a href=\"MXNet/Symbol.html\">MXNet::Symbol</a>)","location":{"filename":"src/mxnet/symbol.cr","line_number":1255,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/symbol.cr#L1255"},"def":{"name":"<","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"MXNet::Symbol"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.lesser(self, other)"}},{"id":"<(other:MXNet::NDArray)-instance-method","html_id":"<(other:MXNet::NDArray)-instance-method","name":"<","doc":"Performs element-wise less than (`<`) comparison.","summary":"<p>Performs element-wise less than (<code><a href=\"Number.html#%3C(other:MXNet::Symbol)-instance-method\">#<</a></code>) comparison.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"MXNet::NDArray"}],"args_string":"(other : MXNet::NDArray)","args_html":"(other : <a href=\"MXNet/NDArray.html\">MXNet::NDArray</a>)","location":{"filename":"src/mxnet/ndarray.cr","line_number":1326,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/ndarray.cr#L1326"},"def":{"name":"<","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"MXNet::NDArray"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.lesser(self, other)"}},{"id":"<=(other:MXNet::NDArray)-instance-method","html_id":"<=(other:MXNet::NDArray)-instance-method","name":"<=","doc":"Performs element-wise less than or equal to (`<=`) comparison.","summary":"<p>Performs element-wise less than or equal to (<code><a href=\"Number.html#%3C=(other:MXNet::NDArray)-instance-method\">#<=</a></code>) comparison.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"MXNet::NDArray"}],"args_string":"(other : MXNet::NDArray)","args_html":"(other : <a href=\"MXNet/NDArray.html\">MXNet::NDArray</a>)","location":{"filename":"src/mxnet/ndarray.cr","line_number":1331,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/ndarray.cr#L1331"},"def":{"name":"<=","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"MXNet::NDArray"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.lesser_equal(self, other)"}},{"id":"<=(other:MXNet::Symbol)-instance-method","html_id":"<=(other:MXNet::Symbol)-instance-method","name":"<=","doc":"Performs element-wise less than or equal to (`<=`) comparison.","summary":"<p>Performs element-wise less than or equal to (<code><a href=\"Number.html#%3C=(other:MXNet::NDArray)-instance-method\">#<=</a></code>) comparison.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"MXNet::Symbol"}],"args_string":"(other : MXNet::Symbol)","args_html":"(other : <a href=\"MXNet/Symbol.html\">MXNet::Symbol</a>)","location":{"filename":"src/mxnet/symbol.cr","line_number":1260,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/symbol.cr#L1260"},"def":{"name":"<=","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"MXNet::Symbol"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.lesser_equal(self, other)"}},{"id":"==(other:MXNet::Symbol)-instance-method","html_id":"==(other:MXNet::Symbol)-instance-method","name":"==","doc":"Performs element-wise equal to (`==`) comparison.","summary":"<p>Performs element-wise equal to (<code><a href=\"Number.html#==(other:MXNet::Symbol)-instance-method\">#==</a></code>) comparison.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"MXNet::Symbol"}],"args_string":"(other : MXNet::Symbol)","args_html":"(other : <a href=\"MXNet/Symbol.html\">MXNet::Symbol</a>)","location":{"filename":"src/mxnet/symbol.cr","line_number":1235,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/symbol.cr#L1235"},"def":{"name":"==","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"MXNet::Symbol"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.equal(self, other)"}},{"id":"==(other:MXNet::NDArray)-instance-method","html_id":"==(other:MXNet::NDArray)-instance-method","name":"==","doc":"Performs element-wise equal to (`==`) comparison.","summary":"<p>Performs element-wise equal to (<code><a href=\"Number.html#==(other:MXNet::Symbol)-instance-method\">#==</a></code>) comparison.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"MXNet::NDArray"}],"args_string":"(other : MXNet::NDArray)","args_html":"(other : <a href=\"MXNet/NDArray.html\">MXNet::NDArray</a>)","location":{"filename":"src/mxnet/ndarray.cr","line_number":1306,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/ndarray.cr#L1306"},"def":{"name":"==","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"MXNet::NDArray"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.equal(self, other)"}},{"id":">(other:MXNet::Symbol)-instance-method","html_id":">(other:MXNet::Symbol)-instance-method","name":">","doc":"Performs element-wise greater than (`>`) comparison.","summary":"<p>Performs element-wise greater than (<code><a href=\"Number.html#%3E(other:MXNet::Symbol)-instance-method\">#></a></code>) comparison.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"MXNet::Symbol"}],"args_string":"(other : MXNet::Symbol)","args_html":"(other : <a href=\"MXNet/Symbol.html\">MXNet::Symbol</a>)","location":{"filename":"src/mxnet/symbol.cr","line_number":1245,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/symbol.cr#L1245"},"def":{"name":">","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"MXNet::Symbol"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.greater(self, other)"}},{"id":">(other:MXNet::NDArray)-instance-method","html_id":">(other:MXNet::NDArray)-instance-method","name":">","doc":"Performs element-wise greater than (`>`) comparison.","summary":"<p>Performs element-wise greater than (<code><a href=\"Number.html#%3E(other:MXNet::Symbol)-instance-method\">#></a></code>) comparison.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"MXNet::NDArray"}],"args_string":"(other : MXNet::NDArray)","args_html":"(other : <a href=\"MXNet/NDArray.html\">MXNet::NDArray</a>)","location":{"filename":"src/mxnet/ndarray.cr","line_number":1316,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/ndarray.cr#L1316"},"def":{"name":">","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"MXNet::NDArray"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.greater(self, other)"}},{"id":">=(other:MXNet::NDArray)-instance-method","html_id":">=(other:MXNet::NDArray)-instance-method","name":">=","doc":"Performs element-wise greater than or equal to (`>=`) comparison.","summary":"<p>Performs element-wise greater than or equal to (<code><a href=\"Number.html#%3E=(other:MXNet::NDArray)-instance-method\">#>=</a></code>) comparison.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"MXNet::NDArray"}],"args_string":"(other : MXNet::NDArray)","args_html":"(other : <a href=\"MXNet/NDArray.html\">MXNet::NDArray</a>)","location":{"filename":"src/mxnet/ndarray.cr","line_number":1321,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/ndarray.cr#L1321"},"def":{"name":">=","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"MXNet::NDArray"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.greater_equal(self, other)"}},{"id":">=(other:MXNet::Symbol)-instance-method","html_id":">=(other:MXNet::Symbol)-instance-method","name":">=","doc":"Performs element-wise greater than or equal to (`>=`) comparison.","summary":"<p>Performs element-wise greater than or equal to (<code><a href=\"Number.html#%3E=(other:MXNet::NDArray)-instance-method\">#>=</a></code>) comparison.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"MXNet::Symbol"}],"args_string":"(other : MXNet::Symbol)","args_html":"(other : <a href=\"MXNet/Symbol.html\">MXNet::Symbol</a>)","location":{"filename":"src/mxnet/symbol.cr","line_number":1250,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/symbol.cr#L1250"},"def":{"name":">=","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"MXNet::Symbol"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.greater_equal(self, other)"}},{"id":"^(other:MXNet::NDArray)-instance-method","html_id":"^(other:MXNet::NDArray)-instance-method","name":"^","doc":"Performs element-wise logical xor (`^`) comparison.","summary":"<p>Performs element-wise logical xor (<code><a href=\"Number.html#%5E(other:MXNet::NDArray)-instance-method\">#^</a></code>) comparison.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"MXNet::NDArray"}],"args_string":"(other : MXNet::NDArray)","args_html":"(other : <a href=\"MXNet/NDArray.html\">MXNet::NDArray</a>)","location":{"filename":"src/mxnet/ndarray.cr","line_number":1346,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/ndarray.cr#L1346"},"def":{"name":"^","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"MXNet::NDArray"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.logical_xor(self, other)"}},{"id":"^(other:MXNet::Symbol)-instance-method","html_id":"^(other:MXNet::Symbol)-instance-method","name":"^","doc":"Performs element-wise logical xor (`^`) comparison.","summary":"<p>Performs element-wise logical xor (<code><a href=\"Number.html#%5E(other:MXNet::NDArray)-instance-method\">#^</a></code>) comparison.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"MXNet::Symbol"}],"args_string":"(other : MXNet::Symbol)","args_html":"(other : <a href=\"MXNet/Symbol.html\">MXNet::Symbol</a>)","location":{"filename":"src/mxnet/symbol.cr","line_number":1275,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/symbol.cr#L1275"},"def":{"name":"^","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"MXNet::Symbol"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.logical_xor(self, other)"}},{"id":"|(other:MXNet::NDArray)-instance-method","html_id":"|(other:MXNet::NDArray)-instance-method","name":"|","doc":"Performs element-wise logical or (`|`) comparison.","summary":"<p>Performs element-wise logical or (<code><a href=\"Number.html#%7C(other:MXNet::NDArray)-instance-method\">#|</a></code>) comparison.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"MXNet::NDArray"}],"args_string":"(other : MXNet::NDArray)","args_html":"(other : <a href=\"MXNet/NDArray.html\">MXNet::NDArray</a>)","location":{"filename":"src/mxnet/ndarray.cr","line_number":1341,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/ndarray.cr#L1341"},"def":{"name":"|","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"MXNet::NDArray"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::NDArray.logical_or(self, other)"}},{"id":"|(other:MXNet::Symbol)-instance-method","html_id":"|(other:MXNet::Symbol)-instance-method","name":"|","doc":"Performs element-wise logical or (`|`) comparison.","summary":"<p>Performs element-wise logical or (<code><a href=\"Number.html#%7C(other:MXNet::NDArray)-instance-method\">#|</a></code>) comparison.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"MXNet::Symbol"}],"args_string":"(other : MXNet::Symbol)","args_html":"(other : <a href=\"MXNet/Symbol.html\">MXNet::Symbol</a>)","location":{"filename":"src/mxnet/symbol.cr","line_number":1270,"url":"https://github.com/toddsundsted/mxnet.cr/blob/v0.3.2/src/mxnet/symbol.cr#L1270"},"def":{"name":"|","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"MXNet::Symbol"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MXNet::Symbol.logical_or(self, other)"}}],"macros":[],"types":[]}]}}